/* eslint-disable */

/* eslint-disable */
/* reconnecting-websocket.min.js 开始 */
function ReconnectingWebSocket(a) {
  function f(g) {
    c = new WebSocket(a);
    if (b.debug || ReconnectingWebSocket.debugAll) {
      console.debug("ReconnectingWebSocket", "attempt-connect", a)
    }
    var h = c;
    var i = setTimeout(function() {
      if (b.debug || ReconnectingWebSocket.debugAll) {
        console.debug("ReconnectingWebSocket", "connection-timeout", a)
      }
      e = true;
      h.close();
      e = false
    }, b.timeoutInterval);
    c.onopen = function(c) {
      clearTimeout(i);
      if (b.debug || ReconnectingWebSocket.debugAll) {
        console.debug("ReconnectingWebSocket", "onopen", a)
      }
      b.readyState = WebSocket.OPEN;
      g = false;
      b.onopen(c)
    };
    c.onclose = function(h) {
      clearTimeout(i);
      c = null;
      if (d) {
        b.readyState = WebSocket.CLOSED;
        b.onclose(h)
      } else {
        b.readyState = WebSocket.CONNECTING;
        if (!g && !e) {
          if (b.debug || ReconnectingWebSocket.debugAll) {
            console.debug("ReconnectingWebSocket", "onclose", a)
          }
          b.onclose(h)
        }
      }
    };
    c.onmessage = function(c) {
      if (b.debug || ReconnectingWebSocket.debugAll) {
        console.debug("ReconnectingWebSocket", "onmessage", a, c.data)
      }
      b.onmessage(c)
    };
    c.onerror = function(c) {
      if (b.debug || ReconnectingWebSocket.debugAll) {
        console.debug("ReconnectingWebSocket", "onerror", a, c)
      }
      if (b.readyState == WebSocket.CONNECTING && navigator.appName != "Netscape") {
        clearTimeout(i);
        c = null;
        if (d) {
          b.readyState = WebSocket.CLOSED;
          b.onclose(h)
        } else {
          b.readyState = WebSocket.CONNECTING;
          if (!g && !e) {
            if (b.debug || ReconnectingWebSocket.debugAll) {
              console.debug("ReconnectingWebSocket", "onclose", a)
            }
            b.onclose(h)
          }
        }
      }

    }
  }
  this.debug = false;
  this.reconnectInterval = 1e3;
  this.timeoutInterval = 2e3;
  var b = this;
  var c;
  var d = false;
  var e = false;
  this.url = a;
  this.readyState = WebSocket.CONNECTING;
  this.URL = a;
  this.onopen = function(a) {
  };
  this.onclose = function(a) {
  };
  this.onmessage = function(a) {
  };
  this.onerror = function(a) {
  };
  f(a);
  this.send = function(d) {
    if (c) {
      if (b.debug || ReconnectingWebSocket.debugAll) {
        console.debug("ReconnectingWebSocket", "send", a, d)
      }
      return c.send(d)
    } else {
      throw "INVALID_STATE_ERR : Pausing to reconnect websocket"
    }
  };
  this.close = function() {
    if (c) {
      d = true;
      c.close()
    }
  };
  this.refresh = function() {
    if (c) {
      c.close()
    }
  }
}
ReconnectingWebSocket.debugAll = false
/* reconnecting-websocket.min.js 结束 */

/* cti-utils.js开始 */
var MSGTYPE = {
  EVENT: 1,
  CMD: 2,
  CMDRES: 3
};

var CONFTYPE = {
  CONFSTART: 0,
  ADDNEWPART: 1,
  CONF_BRIDGE: 2
};
var CONFACTION = {
  KICKALL: 0,
  MUTEALL: 1,
  MUTE: 2,
  UNMUTEALL: 3,
  UNMUTE: 4,
  KICK: 5,
  LOCK: 6,
  UNLOCK: 7
};
var MSGCLASS = {
  CMD_MakeCall: 500,
  CMD_Hangup: 503,
  CMD_Hold: 504,
  CMD_ConferenceCall: 505,
  CMD_PickupCall: 506,
  CMD_TransferCall: 507,
  CMD_Insert: 508,
  CMD_RecordControl: 509,
  CMD_Monitor: 510,
  CMD_Makebusy: 511,
  CMD_ConfAction: 512,
  CMD_PbxCmd: 513,
  CMD_PbxAmiLogin: 514,
  CMD_Adminlogin: 515,
  CMD_Adminloginoff: 516,

  CMD_TranCall: 517,
  CMD_Meeting: 518,
  CMD_ReSet: 519,
  CMD_Refer: 520,

  CMD_StartTask: 531,
  CMD_StopTask: 532,
  CMD_JoinTask: 533,
  CMD_ExitTask: 534,
  CMD_ShowAgentIds: 526,
  CMD_NoShowAgentIds: 527,
  CMD_ForceExit: 528,
  CMD_AgentState: 529

};
var MSGRESCLASS = {
  CMDRES_MakeCall: 600,
  CMDRES_Agentlogin: 601,
  CMDRES_Agentloginoff: 602,
  CMDRES_Hangup: 603,
  CMDRES_Hold: 604,
  CMDRES_ConferenceCall: 605,
  CMDRES_PickupCall: 606,
  CMDRES_TransferCall: 607,
  CMDRES_Insert: 608,
  CMDRES_Listen: 609,
  CMDRES_Monitor: 610,
  CMDRES_Makebusy: 611,
  CMDRES_ConfAction: 612,
  CMDRES_PbxCmd: 613,
  CMDRES_PbxAmiLogin: 614
};
var EVENTCLASS = {
  EVENT_ExtStateChanged: 100,
  EVENT_AgentStateChanged: 101,
  EVENT_AgentAnswered: 102,
  EVENT_OtherRinging: 103,
  EVENT_AgentRinging: 104,

  EVENT_HangupEvent: 105,
  EVENT_NewQueueEvent: 106,
  EVENT_WXChatIn: 201,
  EVENT_WXChatTransfer: 202,
  EVENT_TaskFinished: 211,
  EVENT_TaskStart: 204,
  EVENT_TaskStop: 205,
  EVENT_TaskJoin: 206,
  EVENT_TaskExit: 207,

  EVENT_ForceExit: 208,
  EVENT_JoinGroup: 209,
  EVENT_ExitGroup: 210



};
var CMDRESCODE =
  {
    AGENTLOGINOK: 0,
    AGENTLOGINFAIL_ERR_AGENTID: 1,
    AGENTLOGINFAIL_ERR_PWD: 2,
    AGENTLOGIN_NO_LOGINEXT: 3,
    AGENTLOGIN_LOGINEXT_ISNOTONLINE: 31,
    AGENTLOGIN_NO_QUEUE: 4,
    AGENTLOGIN_NO_QUEUEMEMBER: 5,
    AGENTLOGIN_HAVELOGIN: 6,
    AGENTLOGIN_FORCELOGOFF: 61,
    AGENTLOGOFF_NOLOGIN: 7,
    AGENT_NOEXIST: 8,
    AGENTLOGOFF_OK: 9,
    AGENTLOGOFF_NO_QUEUE: 10,
    AGENT_HAVENO_BASE_ACTION: 11,
    AGENT_HAVENO_ADMIN_ACTION: 12,
    AGENT_HAVENO_ADVANCE_CALL_ACTION: 14,
    AGENT_OBJ_NOFOUND: 15,
    AGENT_CANNOT_BE_ACTIONED_NOLOGIN: 16,
    AGENT_CANNOT_BE_MAKEIDLE_ISIDLE: 17,
    AGENT_CANNOT_BE_MAKEBUSY_ISBUSY: 18,
    AGENT_CANNOT_BE_MAKEBUSY_NOLOGINQUEUE: 19,
    AGENT_MAKEBUSY_OK: 20,
    EXT_OBJ_NOFOUND: 21,
    CHANNEL_OBJ_NOFOUND: 22,
    RELATE_CHANNEL_ISNOTFOUND: 23,
    EXT_ISNOIDLE: 24,
    PBX_ISNOT_HAVE_THISFUN: 25,
    EXT_ISNOLINKSTATE: 26,
    EXT_ISNO_MEETING_STATE: 27,
    NOT_FOUND_MEETROOM: 28,
    CONF_NOTFOUND_MEMBER: 40,
    CONF_NOTFOUND_MEETROOM_OBJ: 41,
    CONF_CANNOTLOCK_MEETISNOTINMEETING: 42,
    AGENT_CANNOTHOLD_ISNOLINK: 43,
    AGENT_CANNOTUNHOLD_ISNOHOLD: 44,
    PBXOBJISNULL: 100,
    PBXINNERERR: 200


  };
var AGENTSTATE = {
  AGENT_NOLOGIN: 0,
  AGENT_IDLE: 1,
  AGENT_NOREADY: 2,
  AGENT_CALL_INITIALIZE: 3,
  AGENT_CALL_RINGBACK: 4,
  AGENT_CALL_RINGING: 5,
  AGENT_CALL_UP: 6,
  AGENT_CALL_DISCONNECT: 7,
  AGENT_CALL_LINK: 8,
  AGENT_CALL_MEETING: 9,
  AGENT_CALL_INSERT: 10,
  AGENT_CALL_HOLD: 11,
  AGENT_CALL_MONITOR: 12
};


var CHANNELSTATE = {
  CHANNEL_INITIALIZE: 3,

  CHANNEL_RINGBACK: 4,
  CHANNEL_RINGING: 5,
  CHANNEL_UP: 6,
  CHANNEL_DISCONNECT: 7,
  CHANNEL_LINK: 8,
  CHANNEL_HANGUP: 1,
  CHANNEL_MEETING: 9,
  CHANNEL_INSERT: 10,
  CHANNEL_HOLD: 11,
  CHANNEL_MONITOR: 12


};
var EXTSTATE = {
  EXT_INITIALIZE: 3,
  EXT_IDLE: 1,
  EXT_RINGBACK: 4,
  EXT_RINGING: 5,
  EXT_UP: 6,
  EXT_DISCONNECT: 7,
  EXT_LINK: 8,
  EXT_MEETING: 9,
  EXT_INSERT: 10,
  EXT_DISABLE: 100,
  EXT_HOLD: 11,
  EXT_MONITOR: 12
};

var ACTIONTYPE = {
  SELF: 0,
  SPECIFY_EXT: 1,
  SPECIFY_AGENT: 2
};
var TRANSFERTYPE = {
  BLIND: 1,
  ATTENDED: 2
};


var showMessage = function(msg) {
  if (typeof art != 'undefined') {
    art.dialog({
      lock: true,
      width: '24em',
      time: 5000,
      window: 'top',
      content: msg
    });
  } else {
    console.log(msg)
  }
}

var GetMsgPara = function(src, key, s, e, sdelenum) {
  if (src == "") return "";
  var f1, f2, f3;

  if (src.indexOf(key + s) < 0) return "";

  f1 = src.indexOf(key + s, 0);


  f2 = src.indexOf(s, f1);


  f3 = src.indexOf(e, f1);


  var res = src.substr(f2 + 1 + sdelenum, f3 - f2 - 1).replace("\r", "").replace("\n", "")
  return res + "";
}

var GetBodyItem = function(src, key) {
  return GetMsgPara(src, key, '=', '&', 0);
}
var showDiv = function(divId) {
  $("#" + divId).fadeIn('fast');
}

var hideDiv = function(divId) {
  $("#" + divId).fadeOut('fast');
}

var checkLineId = function(lineId) {
  if (lineId == null) {
    return;
  }
  if (lineId != 0 && lineId != 1) {
    showMessage("无效的线路号");
    return;
  }
}

var checkPhoneNumber = function(phoneNumber) {
  if (phoneNumber == null || phoneNumber.length == 0)
    return false;
  else {
    var validNumber = "*#0123456789";
    var phoneNumber = $("#phoneNumber").val();
    phoneNumber = $.trim(phoneNumber);
    for (var i = 0; i < phoneNumber.length; i++) {
      var c = phoneNumber.charAt(i);
      if (validNumber.indexOf(c) == -1) {
        showMessage("输入的电话号码含有不符合规范,请检查是否含有空格或者其他非数字字符.");
        return false;
      }
    }
    return true;
  }
}

var getTenantIdByThisDN = function(thisDN) {
  if (thisDN == null || thisDN.length == 0)
    return null;
  else {
    return thisDN.substring(0, thisDN.indexOf('_'));
  }
}


if (window.MozWebSocket) {
  window.WebSocket = window.MozWebSocket;
}
var ws = {
  WS_OPEN: 1,

  WS_CLOSING: 2,

  WS_CLOSED: 3,

  MSG_WS_NOT_SUPPORTED:
    "Unfortunately your browser does neither natively support WebSockets\n" +
    "nor you have the Adobe Flash-PlugIn 10+ installed.\n" +
    "Please download the last recent Adobe Flash Player at http://get.adobe.com/flashplayer.",

  WS_SERVER_SCHEMA: "ws",
  WS_SERVER_HOST: (self.location.hostname ? self.location.hostname : "127.0.0.1"),
  WS_SERVER_PORT: 8787,
  WS_SERVER_CONTEXT: "/webSocket",
  WS_SERVER_URL:
    "ws://" + (self.location.hostname ? self.location.hostname : "127.0.0.1") + ":8787/webSocket",

  BT_UNKNOWN: 0,
  BT_FIREFOX: 1,
  BT_NETSCAPE: 2,
  BT_OPERA: 3,
  BT_IEXPLORER: 4,
  BT_SAFARI: 5,
  BT_CHROME: 6,

  BROWSER_NAMES: [
    "Unknown",
    "Firefox",
    "Netscape",
    "Opera",
    "Internet Explorer",
    "Safari",
    "Chrome"
  ],


  $: function (aId) {
    return document.getElementById(aId);
  },


  getServerURL: function (aSchema, aHost, aPort, aContext) {
    var lURL =
      aSchema + "://"
      + aHost
      + (aPort ? ":" + aPort : "");
    if (aContext && aContext.length > 0) {
      lURL += aContext;
    }
    return lURL;
  },


  browserSupportsWebSockets: function () {
    return (
      window.WebSocket !== null && window.WebSocket !== undefined
    );
  },


  browserSupportsNativeWebSockets: (function () {
    return (
      window.WebSocket !== null && window.WebSocket !== undefined
    );
  })(),


  browserSupportsJSON: function () {
    return (
      window.JSON !== null && window.JSON !== undefined
    );
  },


  browserSupportsNativeJSON: (function () {
    return (
      window.JSON !== null && window.JSON !== undefined
    );
  })(),

  browserSupportsWebWorkers: (function () {
    return (
      window.Worker !== null && window.Worker !== undefined
    );
  })(),


  isIE: (function () {
    var lUserAgent = navigator.userAgent;
    var lIsIE = lUserAgent.indexOf("MSIE");
    return (lIsIE >= 0);
  })(),


  getBrowserName: function () {
    return this.fBrowserName;
  },


  getBrowserVersion: function () {
    return this.fBrowserVerNo;
  },


  getBrowserVersionString: function () {
    return this.fBrowserVerStr;
  },


  isFirefox: function () {
    return this.fIsFirefox;
  },


  isOpera: function () {
    return this.fIsOpera;
  },


  isChrome: function () {
    return this.fIsChrome;
  },


  isIExplorer: function () {
    return this.fIsIExplorer;
  },

  isIE_LE6: function () {
    return (this.isIExplorer() && this.getBrowserVersion() < 7);
  },


  isIE_LE7: function () {
    return (this.isIExplorer() && this.getBrowserVersion() < 8);
  },


  isIE_GE8: function () {
    return (this.isIExplorer() && this.getBrowserVersion() >= 8);
  },


  isSafari: function () {
    return this.fIsSafari;
  },


  isNetscape: function () {
    return this.fIsNetscape;
  },

  isPocketIE: function () {
    return this.fIsPocketIE;
  },

  isConnected: function () {
    return (this.isOpened());
  },

  isOpened: function () {
    return (
      this.fConn != undefined
      && this.fConn != null
      && this.fConn.readyState == ws.WS_OPEN
    );
  }

};

(function () {

  ws.fBrowserName = "unknown";
  ws.fBrowserType = ws.BT_UNKNOWN;
  ws.fBrowserVerNo = undefined;

  ws.fIsIExplorer = false;
  ws.fIsFirefox = false;
  ws.fIsChrome = false;

  var lUA = navigator.userAgent;


  ws.fIsChrome = lUA.indexOf("Chrome") >= 0;
  if (ws.fIsChrome) {
    ws.fBrowserType = ws.BT_CHROME;
  } else {
    ws.fIsFirefox = navigator.appName == "Netscape";
    if (ws.fIsFirefox) {
      ws.fBrowserType = ws.BT_FIREFOX;
    } else {
      ws.fIsIExplorer = navigator.appName == "Microsoft Internet Explorer";
      if (ws.fIsIExplorer) {
        ws.fBrowserType = ws.BT_IEXPLORER;
      }
    }
  }

  var p, i;
  var lStr;
  var lFound;
  var lVersion;

  if (ws.fIsIExplorer) {

    ws.fBrowserName = ws.BROWSER_NAMES[ws.BT_IEXPLORER];
    lVersion = lUA.match(/MSIE.*/i);
    if (lVersion) {
      lStr = lVersion[0].substr(5);
      p = lStr.indexOf(";");
      ws.fBrowserVerStr = p > 0 ? lStr.substr(0, p) : lStr;
      ws.fBrowserVerNo = parseFloat(ws.fBrowserVerStr);
    }
  } else if (ws.fIsFirefox) {
    ws.fBrowserName = ws.BROWSER_NAMES[ws.BT_FIREFOX];

    lVersion = lUA.match(/Firefox\/.*/i);
    if (lVersion) {
      lStr = lVersion[0].substr(8);
      p = lStr.indexOf(" ");
      if (p > 0) {
        ws.fBrowserVerStr = lStr.substring(0, p);
      } else {
        ws.fBrowserVerStr = lStr;
      }
      lFound = 0;
      i = 0;
      while (i < lStr.length) {
        if (lStr.charAt(i) == '.') {
          lFound++;
        }
        if (lFound >= 2) {
          break;
        }
        i++;
      }
      lStr = lStr.substring(0, i);
      ws.fBrowserVerNo = parseFloat(lStr);
    }
  } else if (ws.fIsChrome) {

    ws.fBrowserName = ws.BROWSER_NAMES[ws.BT_CHROME];
    lVersion = lUA.match(/Chrome\/.*/i);
    if (lVersion) {
      lStr = lVersion[0].substr(7);
      p = lStr.indexOf(" ");
      ws.fBrowserVerStr = p > 0 ? lStr.substr(0, p) : lStr;
      ws.fBrowserVerNo = parseFloat(lStr);
    }
  }
}());


ws.oop = {};


ws.oop.declareClass = function (aNamespace, aClassname, aAncestor, aFields) {

  var lNS = self[aNamespace];
  if (!lNS) {
    self[aNamespace] = {};
  }

  var lConstructor = function () {
    if (this.create) {
      this.create.apply(this, arguments);
    }
  };


  lNS[aClassname] = lConstructor;


  var lField;
  for (lField in aFields) {
    lConstructor.prototype[lField] = aFields[lField];
  }
  if (aAncestor != null) {

    if (!aAncestor.descendants) {
      aAncestor.descendants = [];
    }
    aAncestor.descendants.push(lConstructor);
    for (lField in aAncestor.prototype) {
      var lAncMthd = aAncestor.prototype[lField];
      if (typeof lAncMthd == "function") {
        if (lConstructor.prototype[lField]) {
          lConstructor.prototype[lField].inherited = lAncMthd;
        } else {
          lConstructor.prototype[lField] = lAncMthd;
        }

        lConstructor.prototype[lField].superClass = aAncestor;
      }
    }
  }
};



ws.oop.addPlugIn = function (aClass, aPlugIn) {


  if (!aClass.fPlugIns) {
    aClass.fPlugIns = [];
  }

  aClass.fPlugIns.push(aPlugIn);

  for (var lField in aPlugIn) {
    if (!aClass.prototype[lField]) {
      aClass.prototype[lField] = aPlugIn[lField];
    }
  }

  if (aClass.descendants) {
    for (var lIdx = 0, lCnt = aClass.descendants.length; lIdx < lCnt; lIdx++) {
      ws.oop.addPlugIn(aClass.descendants[lIdx], aPlugIn);
    }
  }
};



ws.oop.declareClass("ws", "webSocketBaseClient", null, {



  open: function (aURL, aOptions) {
    if (!aOptions) {
      aOptions = {};
    }




    if (self.WebSocket) {


      if (!this.fConn) {
        var lThis = this;
        var lValue = null;

        this.fConn = new ReconnectingWebSocket(aURL);

        this.fURL = aURL;


        this.fConn.onopen = function (aEvent) {
          lThis.fStatus = ws.WS_OPEN;

          if (aOptions.OnOpen) {
            aOptions.OnOpen(aEvent);
          }

          lThis.processQueue();
        };

        this.fConn.onmessage = function (aEvent) {

          if (aOptions.OnMessage) {
            aOptions.OnMessage(aEvent, lValue);
          }
          lThis.processToken(aEvent);



        };

        this.fConn.onclose = function (aEvent) {
          lThis.fStatus = ws.WS_CLOSED;

          if (aOptions.OnClose) {
            aOptions.OnClose(aEvent);
          }
        };
      } else {
        throw new Error("Already connected");
      }
    } else {
      throw new Error("WebSockets not supported by browser");
    }

  },


  processQueue: function () {
    this.sendToken({
      type: "welcome",
      thisDN: "",
      message: ""
    });
  },

  processToken: function (aToken) {

    if (this.fOnWelcome) {
      this.fOnWelcome(aToken);
    }

  },

  sendToken: function (aToken) {
    this.fConn.send(jQuery.toJSON(aToken));
  },


  connect: function (aURL, aOptions) {
    return this.open(aURL, aOptions);
  },


  isOpened: function () {
    return (
      this.fConn != undefined
      && this.fConn != null
      && this.fConn.readyState == ws.WS_OPEN
    );
  },


  getURL: function () {
    return this.fURL;
  },


  isConnected: function () {
    return (this.isOpened());
  },
  forceClose: function (aOptions) {

  },
  close: function (aOptions) {

  },

  disconnect: function (aOptions) {
    return this.close(aOptions);
  },


  createDefaultResult: function () {
    return {
      code: 0,
      msg: "ok"
    };
  },


  addPlugIn: function (aPlugIn, aId) {
    if (!this.fPlugIns) {
      this.fPlugIns = [];
    }
    this.fPlugIns.push(aPlugIn);

    if (!aId) {
      aId = aPlugIn.ID;
    }
    if (aId) {
      aPlugIn.conn = this;
    }
  }

});


ws.oop.declareClass("ws", "webSocketClient", ws.webSocketBaseClient, {

  open: function (aURL, aOptions) {
    var lRes = this.createDefaultResult();
    try {
      if (aOptions && aOptions.OnWelcome && typeof aOptions.OnWelcome == "function") {
        this.fOnWelcome = aOptions.OnWelcome;
      }
      arguments.callee.inherited.call(this, aURL, aOptions);
    } catch (ex) {
      lRes.code = -1;
      lRes.msg = "Exception on open: " + ex.message;
    }
    return lRes;
  },
  connect: function (aURL, aOptions) {
    return this.open(aURL, aOptions);
  },
  close: function (aOptions) {
    var lTimeout = 0;

    if (aOptions) {
      if (aOptions.timeout) {
        lTimeout = aOptions.timeout;
      }
    }

    if (this.fConn && 1 === this.fConn.readyState) {
      if (lTimeout <= 0) {
        this.forceClose(aOptions);
      } else {
        var lThis = this;
        this.hDisconnectTimeout = setTimeout(
          function () {
            lThis.forceClose(aOptions);
          },
          lTimeout
        );
      }
    } else {
      this.fConn = null;
      throw new Error("Not connected");
    }
  },
  forceClose: function (aOptions) {
    var lFireClose = (aOptions || {}).fireClose || false;
    if (this.fReliabilityOptions) {
      this.fReliabilityOptions.isExplicitClose = true;
    }
    if (this.fConn) {
      if (this.fConn.readyState === ws.OPEN
        || this.fConn.readyState === ws.CONNECTING) {
        this.fConn.close();
        this.processClosed();
      }
    }
    if (aOptions) {
      if (lFireClose && this.fConn.onclose) {
        var lEvent = {};
        this.fConn.onclose(lEvent);
      }
    }
    this.fConn = null;
  },
  disconnect: function (aOptions) {
    return this.close(aOptions);
  }

});

ws.SystemClientPlugIn = {

  login: function (thisDN, message, aOptions) {
    var lRes = this.createDefaultResult();
    if (this.isOpened()) {
      this.sendToken({
        type: "login",
        thisDN: thisDN,
        message: message
      });
    } else {
      lRes.code = -1;
      lRes.msg = "Not connected.";
    }
    return lRes;
  },

  logon: function (url, thisDN, message, options) {
    var lRes = this.createDefaultResult();
    if (!options) {
      options = {};
    }
    if (this.isOpened()) {
      this.login(thisDN, message, options);
    } else {
      var lAppOnWelcomeClBk = options.OnWelcome;
      var lThis = this;
      options.OnWelcome = function (event) {
        if (lAppOnWelcomeClBk) {
          lAppOnWelcomeClBk.call(lThis, event);
        }
        lThis.login(thisDN, message, options);
      };
      this.open(
        url,
        options
      );
    }
    return lRes;
  },

  ping: function () {
    var lRes = this.createDefaultResult();
    if (this.isOpened()) {
      this.sendToken({
        type: "ping",
        thisDN: "",
        message: ""
      });
    } else {
      lRes.code = -1;
      lRes.msg = "Not connected.";
    }
    return lRes;
  },

  startKeepAlive: function (aOptions) {
    if (this.hKeepAlive) {
      stopKeepAlive();
    }
    if (!this.isOpened()) {
      return;
    }
    var lInterval = 10000;
    var lImmediate = true;
    if (aOptions) {
      if (aOptions.interval != undefined) {
        lInterval = aOptions.interval;
      }
      if (aOptions.immediate != undefined) {
        lImmediate = aOptions.immediate;
      }
    }
    if (lImmediate) {
      this.ping();
    }
    var lThis = this;
    this.hKeepAlive = setInterval(
      function () {
        if (lThis.isOpened()) {
          lThis.ping();
        } else {
          lThis.stopKeepAlive();
        }
      },
      lInterval
    );
  },

  stopKeepAlive: function () {
    if (this.hKeepAlive) {
      clearInterval(this.hKeepAlive);
      this.hKeepAlive = null;
    }
  }
};

ws.oop.addPlugIn(ws.webSocketClient, ws.SystemClientPlugIn);

if (!ws.browserSupportsNativeWebSockets) {
  var swfobject = function () { var D = "undefined", r = "object", S = "Shockwave Flash", W = "ShockwaveFlash.ShockwaveFlash", q = "application/x-shockwave-flash", R = "SWFObjectExprInst", x = "onreadystatechange", O = window, j = document, t = navigator, T = false, U = [h], o = [], N = [], I = [], l, Q, E, B, J = false, a = false, n, G, m = true, M = function () { var aa = typeof j.getElementById != D && typeof j.getElementsByTagName != D && typeof j.createElement != D, ah = t.userAgent.toLowerCase(), Y = t.platform.toLowerCase(), ae = Y ? /win/.test(Y) : /win/.test(ah), ac = Y ? /mac/.test(Y) : /mac/.test(ah), af = /webkit/.test(ah) ? parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/, "$1")) : false, X = !+"\v1", ag = [0, 0, 0], ab = null; if (typeof t.plugins != D && typeof t.plugins[S] == r) { ab = t.plugins[S].description; if (ab && !(typeof t.mimeTypes != D && t.mimeTypes[q] && !t.mimeTypes[q].enabledPlugin)) { T = true; X = false; ab = ab.replace(/^.*\s+(\S+\s+\S+$)/, "$1"); ag[0] = parseInt(ab.replace(/^(.*)\..*$/, "$1"), 10); ag[1] = parseInt(ab.replace(/^.*\.(.*)\s.*$/, "$1"), 10); ag[2] = /[a-zA-Z]/.test(ab) ? parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/, "$1"), 10) : 0 } } else { if (typeof O.ActiveXObject != D) { try { var ad = new ActiveXObject(W); if (ad) { ab = ad.GetVariable("$version"); if (ab) { X = true; ab = ab.split(" ")[1].split(","); ag = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)] } } } catch (Z) { } } } return { w3: aa, pv: ag, wk: af, ie: X, win: ae, mac: ac } }(), k = function () { if (!M.w3) { return } if ((typeof j.readyState != D && j.readyState == "complete") || (typeof j.readyState == D && (j.getElementsByTagName("body")[0] || j.body))) { f() } if (!J) { if (typeof j.addEventListener != D) { j.addEventListener("DOMContentLoaded", f, false) } if (M.ie && M.win) { j.attachEvent(x, function () { if (j.readyState == "complete") { j.detachEvent(x, arguments.callee); f() } }); if (O == top) { (function () { if (J) { return } try { j.documentElement.doScroll("left") } catch (X) { setTimeout(arguments.callee, 0); return } f() })() } } if (M.wk) { (function () { if (J) { return } if (!/loaded|complete/.test(j.readyState)) { setTimeout(arguments.callee, 0); return } f() })() } s(f) } }(); function f() { if (J) { return } try { var Z = j.getElementsByTagName("body")[0].appendChild(C("span")); Z.parentNode.removeChild(Z) } catch (aa) { return } J = true; var X = U.length; for (var Y = 0; Y < X; Y++) { U[Y]() } } function K(X) { if (J) { X() } else { U[U.length] = X } } function s(Y) { if (typeof O.addEventListener != D) { O.addEventListener("load", Y, false) } else { if (typeof j.addEventListener != D) { j.addEventListener("load", Y, false) } else { if (typeof O.attachEvent != D) { i(O, "onload", Y) } else { if (typeof O.onload == "function") { var X = O.onload; O.onload = function () { X(); Y() } } else { O.onload = Y } } } } } function h() { if (T) { V() } else { H() } } function V() { var X = j.getElementsByTagName("body")[0]; var aa = C(r); aa.setAttribute("type", q); var Z = X.appendChild(aa); if (Z) { var Y = 0; (function () { if (typeof Z.GetVariable != D) { var ab = Z.GetVariable("$version"); if (ab) { ab = ab.split(" ")[1].split(","); M.pv = [parseInt(ab[0], 10), parseInt(ab[1], 10), parseInt(ab[2], 10)] } } else { if (Y < 10) { Y++; setTimeout(arguments.callee, 10); return } } X.removeChild(aa); Z = null; H() })() } else { H() } } function H() { var ag = o.length; if (ag > 0) { for (var af = 0; af < ag; af++) { var Y = o[af].id; var ab = o[af].callbackFn; var aa = { success: false, id: Y }; if (M.pv[0] > 0) { var ae = c(Y); if (ae) { if (F(o[af].swfVersion) && !(M.wk && M.wk < 312)) { w(Y, true); if (ab) { aa.success = true; aa.ref = z(Y); ab(aa) } } else { if (o[af].expressInstall && A()) { var ai = {}; ai.data = o[af].expressInstall; ai.width = ae.getAttribute("width") || "0"; ai.height = ae.getAttribute("height") || "0"; if (ae.getAttribute("class")) { ai.styleclass = ae.getAttribute("class") } if (ae.getAttribute("align")) { ai.align = ae.getAttribute("align") } var ah = {}; var X = ae.getElementsByTagName("param"); var ac = X.length; for (var ad = 0; ad < ac; ad++) { if (X[ad].getAttribute("name").toLowerCase() != "movie") { ah[X[ad].getAttribute("name")] = X[ad].getAttribute("value") } } P(ai, ah, Y, ab) } else { p(ae); if (ab) { ab(aa) } } } } } else { w(Y, true); if (ab) { var Z = z(Y); if (Z && typeof Z.SetVariable != D) { aa.success = true; aa.ref = Z } ab(aa) } } } } } function z(aa) { var X = null; var Y = c(aa); if (Y && Y.nodeName == "OBJECT") { if (typeof Y.SetVariable != D) { X = Y } else { var Z = Y.getElementsByTagName(r)[0]; if (Z) { X = Z } } } return X } function A() { return !a && F("6.0.65") && (M.win || M.mac) && !(M.wk && M.wk < 312) } function P(aa, ab, X, Z) { a = true; E = Z || null; B = { success: false, id: X }; var ae = c(X); if (ae) { if (ae.nodeName == "OBJECT") { l = g(ae); Q = null } else { l = ae; Q = X } aa.id = R; if (typeof aa.width == D || (!/%$/.test(aa.width) && parseInt(aa.width, 10) < 310)) { aa.width = "310" } if (typeof aa.height == D || (!/%$/.test(aa.height) && parseInt(aa.height, 10) < 137)) { aa.height = "137" } j.title = j.title.slice(0, 47) + " - Flash Player Installation"; var ad = M.ie && M.win ? "ActiveX" : "PlugIn", ac = "MMredirectURL=" + O.location.toString().replace(/&/g, "%26") + "&MMplayerType=" + ad + "&MMdoctitle=" + j.title; if (typeof ab.flashvars != D) { ab.flashvars += "&" + ac } else { ab.flashvars = ac } if (M.ie && M.win && ae.readyState != 4) { var Y = C("div"); X += "SWFObjectNew"; Y.setAttribute("id", X); ae.parentNode.insertBefore(Y, ae); ae.style.display = "none"; (function () { if (ae.readyState == 4) { ae.parentNode.removeChild(ae) } else { setTimeout(arguments.callee, 10) } })() } u(aa, ab, X) } } function p(Y) { if (M.ie && M.win && Y.readyState != 4) { var X = C("div"); Y.parentNode.insertBefore(X, Y); X.parentNode.replaceChild(g(Y), X); Y.style.display = "none"; (function () { if (Y.readyState == 4) { Y.parentNode.removeChild(Y) } else { setTimeout(arguments.callee, 10) } })() } else { Y.parentNode.replaceChild(g(Y), Y) } } function g(ab) { var aa = C("div"); if (M.win && M.ie) { aa.innerHTML = ab.innerHTML } else { var Y = ab.getElementsByTagName(r)[0]; if (Y) { var ad = Y.childNodes; if (ad) { var X = ad.length; for (var Z = 0; Z < X; Z++) { if (!(ad[Z].nodeType == 1 && ad[Z].nodeName == "PARAM") && !(ad[Z].nodeType == 8)) { aa.appendChild(ad[Z].cloneNode(true)) } } } } } return aa } function u(ai, ag, Y) { var X, aa = c(Y); if (M.wk && M.wk < 312) { return X } if (aa) { if (typeof ai.id == D) { ai.id = Y } if (M.ie && M.win) { var ah = ""; for (var ae in ai) { if (ai[ae] != Object.prototype[ae]) { if (ae.toLowerCase() == "data") { ag.movie = ai[ae] } else { if (ae.toLowerCase() == "styleclass") { ah += ' class="' + ai[ae] + '"' } else { if (ae.toLowerCase() != "classid") { ah += " " + ae + '="' + ai[ae] + '"' } } } } } var af = ""; for (var ad in ag) { if (ag[ad] != Object.prototype[ad]) { af += '<param name="' + ad + '" value="' + ag[ad] + '" />' } } aa.outerHTML = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + ah + ">" + af + "</object>"; N[N.length] = ai.id; X = c(ai.id) } else { var Z = C(r); Z.setAttribute("type", q); for (var ac in ai) { if (ai[ac] != Object.prototype[ac]) { if (ac.toLowerCase() == "styleclass") { Z.setAttribute("class", ai[ac]) } else { if (ac.toLowerCase() != "classid") { Z.setAttribute(ac, ai[ac]) } } } } for (var ab in ag) { if (ag[ab] != Object.prototype[ab] && ab.toLowerCase() != "movie") { e(Z, ab, ag[ab]) } } aa.parentNode.replaceChild(Z, aa); X = Z } } return X } function e(Z, X, Y) { var aa = C("param"); aa.setAttribute("name", X); aa.setAttribute("value", Y); Z.appendChild(aa) } function y(Y) { var X = c(Y); if (X && X.nodeName == "OBJECT") { if (M.ie && M.win) { X.style.display = "none"; (function () { if (X.readyState == 4) { b(Y) } else { setTimeout(arguments.callee, 10) } })() } else { X.parentNode.removeChild(X) } } } function b(Z) { var Y = c(Z); if (Y) { for (var X in Y) { if (typeof Y[X] == "function") { Y[X] = null } } Y.parentNode.removeChild(Y) } } function c(Z) { var X = null; try { X = j.getElementById(Z) } catch (Y) { } return X } function C(X) { return j.createElement(X) } function i(Z, X, Y) { Z.attachEvent(X, Y); I[I.length] = [Z, X, Y] } function F(Z) { var Y = M.pv, X = Z.split("."); X[0] = parseInt(X[0], 10); X[1] = parseInt(X[1], 10) || 0; X[2] = parseInt(X[2], 10) || 0; return (Y[0] > X[0] || (Y[0] == X[0] && Y[1] > X[1]) || (Y[0] == X[0] && Y[1] == X[1] && Y[2] >= X[2])) ? true : false } function v(ac, Y, ad, ab) { if (M.ie && M.mac) { return } var aa = j.getElementsByTagName("head")[0]; if (!aa) { return } var X = (ad && typeof ad == "string") ? ad : "screen"; if (ab) { n = null; G = null } if (!n || G != X) { var Z = C("style"); Z.setAttribute("type", "text/css"); Z.setAttribute("media", X); n = aa.appendChild(Z); if (M.ie && M.win && typeof j.styleSheets != D && j.styleSheets.length > 0) { n = j.styleSheets[j.styleSheets.length - 1] } G = X } if (M.ie && M.win) { if (n && typeof n.addRule == r) { n.addRule(ac, Y) } } else { if (n && typeof j.createTextNode != D) { n.appendChild(j.createTextNode(ac + " {" + Y + "}")) } } } function w(Z, X) { if (!m) { return } var Y = X ? "visible" : "hidden"; if (J && c(Z)) { c(Z).style.visibility = Y } else { v("#" + Z, "visibility:" + Y) } } function L(Y) { var Z = /[\\\"<>\.;]/; var X = Z.exec(Y) != null; return X && typeof encodeURIComponent != D ? encodeURIComponent(Y) : Y } var d = function () { if (M.ie && M.win) { window.attachEvent("onunload", function () { var ac = I.length; for (var ab = 0; ab < ac; ab++) { I[ab][0].detachEvent(I[ab][1], I[ab][2]) } var Z = N.length; for (var aa = 0; aa < Z; aa++) { y(N[aa]) } for (var Y in M) { M[Y] = null } M = null; for (var X in swfobject) { swfobject[X] = null } swfobject = null }) } }(); return { registerObject: function (ab, X, aa, Z) { if (M.w3 && ab && X) { var Y = {}; Y.id = ab; Y.swfVersion = X; Y.expressInstall = aa; Y.callbackFn = Z; o[o.length] = Y; w(ab, false) } else { if (Z) { Z({ success: false, id: ab }) } } }, getObjectById: function (X) { if (M.w3) { return z(X) } }, embedSWF: function (ab, ah, ae, ag, Y, aa, Z, ad, af, ac) { var X = { success: false, id: ah }; if (M.w3 && !(M.wk && M.wk < 312) && ab && ah && ae && ag && Y) { w(ah, false); K(function () { ae += ""; ag += ""; var aj = {}; if (af && typeof af === r) { for (var al in af) { aj[al] = af[al] } } aj.data = ab; aj.width = ae; aj.height = ag; var am = {}; if (ad && typeof ad === r) { for (var ak in ad) { am[ak] = ad[ak] } } if (Z && typeof Z === r) { for (var ai in Z) { if (typeof am.flashvars != D) { am.flashvars += "&" + ai + "=" + Z[ai] } else { am.flashvars = ai + "=" + Z[ai] } } } if (F(Y)) { var an = u(aj, am, ah); if (aj.id == ah) { w(ah, true) } X.success = true; X.ref = an } else { if (aa && A()) { aj.data = aa; P(aj, am, ah, ac); return } else { w(ah, true) } } if (ac) { ac(X) } }) } else { if (ac) { ac(X) } } }, switchOffAutoHideShow: function () { m = false }, ua: M, getFlashPlayerVersion: function () { return { major: M.pv[0], minor: M.pv[1], release: M.pv[2] } }, hasFlashPlayerVersion: F, createSWF: function (Z, Y, X) { if (M.w3) { return u(Z, Y, X) } else { return undefined } }, showExpressInstall: function (Z, aa, X, Y) { if (M.w3 && A()) { P(Z, aa, X, Y) } }, removeSWF: function (X) { if (M.w3) { y(X) } }, createCSS: function (aa, Z, Y, X) { if (M.w3) { v(aa, Z, Y, X) } }, addDomLoadEvent: K, addLoadEvent: s, getQueryParamValue: function (aa) { var Z = j.location.search || j.location.hash; if (Z) { if (/\?/.test(Z)) { Z = Z.split("?")[1] } if (aa == null) { return L(Z) } var Y = Z.split("&"); for (var X = 0; X < Y.length; X++) { if (Y[X].substring(0, Y[X].indexOf("=")) == aa) { return L(Y[X].substring((Y[X].indexOf("=") + 1))) } } } return "" }, expressInstallCallback: function () { if (a) { var X = c(R); if (X && l) { X.parentNode.replaceChild(l, X); if (Q) { w(Q, true); if (M.ie && M.win) { l.style.display = "block" } } if (E) { E(B) } } a = false } } } }();

  if (swfobject.hasFlashPlayerVersion("10.0.0")) {

    WEB_SOCKET_DEBUG = true;
    (function() {
      var lScripts = document.getElementsByTagName("script");
      for (var lIdx = 0, lCnt = lScripts.length; lIdx < lCnt; lIdx++) {
        var lScript = lScripts[lIdx];
        var lPath = lScript.src;
        if (!lPath) {
          lPath = lScript.getAttribute("src");
        }
        if (lPath) {
          var lPos = lPath.lastIndexOf("websocket.js");
          if (lPos > 0) {

            window.WEB_SOCKET_SWF_LOCATION =
              lPath.substr(0, lPos) + "flash-bridge/WebSocketMain.swf";
            ws.WS_FLASHBRIDGE = window.WEB_SOCKET_SWF_LOCATION;
            break;
          }
        }
      }
    })();

    if (window.WEB_SOCKET_SWF_LOCATION) {

      (function() {
        if (window.WEB_SOCKET_FORCE_FLASH) {
        } else if (window.WebSocket) {
          return;
        } else if (window.MozWebSocket) {
          window.WebSocket = MozWebSocket;
          return;
        }
        var logger;
        if (window.WEB_SOCKET_LOGGER) {
          logger = WEB_SOCKET_LOGGER;
        } else if (window.console && window.console.log && window.console.error) {
          logger = window.console;
        } else {
          logger = {
            log: function() {
            }, error: function() {
            }
          };
        }
        if (swfobject.getFlashPlayerVersion().major < 10) {
          logger.error("Flash Player >= 10.0.0 is required.");
          return;
        }
        if (location.protocol == "file:") {
          logger.error("WARNING: web-socket-js doesn't work in file:///... URL " + "unless you set Flash Security Settings properly. " + "Open the page via Web server i.e. http://...");
        }
        window.WebSocket = function(url, protocols, proxyHost, proxyPort, headers) {
          var self = this;
          self.__id = WebSocket.__nextId++;
          WebSocket.__instances[self.__id] = self;
          self.readyState = WebSocket.CONNECTING;
          self.bufferedAmount = 0;
          self.__events = {};
          if (!protocols) {
            protocols = [];
          } else if (typeof protocols == "string") {
            protocols = [protocols];
          }
          self.__createTask = setTimeout(function() {
            WebSocket.__addTask(function() {
              self.__createTask = null;
              WebSocket.__flash.create(self.__id, url, protocols, proxyHost || null, proxyPort || 0, headers || null);
            });
          }, 0);
        };
        WebSocket.prototype.send = function(data) {
          if (this.readyState == WebSocket.CONNECTING) {
            throw "INVALID_STATE_ERR: Web Socket connection has not been established";
          }
          var result = WebSocket.__flash.send(this.__id, encodeURIComponent(data));
          if (result < 0) {
            return true;
          } else {
            this.bufferedAmount += result;
            return false;
          }
        };
        WebSocket.prototype.close = function() {
          if (this.__createTask) {
            clearTimeout(this.__createTask);
            this.__createTask = null;
            this.readyState = WebSocket.CLOSED;
            return;
          }
          if (this.readyState == WebSocket.CLOSED || this.readyState == WebSocket.CLOSING) {
            return;
          }
          this.readyState = WebSocket.CLOSING;
          WebSocket.__flash.close(this.__id);
        };
        WebSocket.prototype.addEventListener = function(type, listener, useCapture) {
          if (!(type in this.__events)) {
            this.__events[type] = [];
          }
          this.__events[type].push(listener);
        };
        WebSocket.prototype.removeEventListener = function(type, listener, useCapture) {
          if (!(type in this.__events)) return;
          var events = this.__events[type];
          for (var i = events.length - 1; i >= 0; --i) {
            if (events[i] === listener) {
              events.splice(i, 1);
              break;
            }
          }
        };
        WebSocket.prototype.dispatchEvent = function(event) {
          var events = this.__events[event.type] || [];
          for (var i = 0; i < events.length; ++i) {
            events[i](event);
          }
          var handler = this["on" + event.type];
          if (handler) handler.apply(this, [event]);
        };
        WebSocket.prototype.__handleEvent = function(flashEvent) {
          if ("readyState" in flashEvent) {
            this.readyState = flashEvent.readyState;
          }
          if ("protocol" in flashEvent) {
            this.protocol = flashEvent.protocol;
          }
          var jsEvent;
          if (flashEvent.type == "open" || flashEvent.type == "error") {
            jsEvent = this.__createSimpleEvent(flashEvent.type);
          } else if (flashEvent.type == "close") {
            jsEvent = this.__createSimpleEvent("close");
            jsEvent.wasClean = flashEvent.wasClean ? true : false;
            jsEvent.code = flashEvent.code;
            jsEvent.reason = flashEvent.reason;
          } else if (flashEvent.type == "message") {
            var data = decodeURIComponent(flashEvent.message);
            jsEvent = this.__createMessageEvent("message", data);
          } else {
            throw "unknown event type: " + flashEvent.type;
          }
          this.dispatchEvent(jsEvent);
        };
        WebSocket.prototype.__createSimpleEvent = function(type) {
          if (document.createEvent && window.Event) {
            var event = document.createEvent("Event");
            event.initEvent(type, false, false);
            return event;
          } else {
            return { type: type, bubbles: false, cancelable: false };
          }
        };
        WebSocket.prototype.__createMessageEvent = function(type, data) {
          if (document.createEvent && window.MessageEvent && !window.opera) {
            var event = document.createEvent("MessageEvent");
            event.initMessageEvent("message", false, false, data, null, null, window, null);
            return event;
          } else {
            return { type: type, data: data, bubbles: false, cancelable: false };
          }
        };
        WebSocket.CONNECTING = 0;
        WebSocket.OPEN = 1;
        WebSocket.CLOSING = 2;
        WebSocket.CLOSED = 3;
        WebSocket.__initialized = false;
        WebSocket.__flash = null;
        WebSocket.__instances = {};
        WebSocket.__tasks = [];
        WebSocket.__nextId = 0;
        WebSocket.loadFlashPolicyFile = function(url) {
          WebSocket.__addTask(function() {
            WebSocket.__flash.loadManualPolicyFile(url);
          });
        };
        WebSocket.__initialize = function() {
          if (WebSocket.__initialized) return;
          WebSocket.__initialized = true;
          if (WebSocket.__swfLocation) {
            window.WEB_SOCKET_SWF_LOCATION = WebSocket.__swfLocation;
          }
          if (!window.WEB_SOCKET_SWF_LOCATION) {
            logger.error("[WebSocket] set WEB_SOCKET_SWF_LOCATION to location of WebSocketMain.swf");
            return;
          }
          if (!window.WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR && !WEB_SOCKET_SWF_LOCATION.match(/(^|\/)WebSocketMainInsecure\.swf(\?.*)?$/) && WEB_SOCKET_SWF_LOCATION.match(/^\w+:\/\/([^\/]+)/)) {
            var swfHost = RegExp.$1;
            if (location.host != swfHost) {
              logger.error("[WebSocket] You must host HTML and WebSocketMain.swf in the same host " + "('" + location.host + "' != '" + swfHost + "'). " + "See also 'How to host HTML file and SWF file in different domains' section " + "in README.md. If you use WebSocketMainInsecure.swf, you can suppress this message " + "by WEB_SOCKET_SUPPRESS_CROSS_DOMAIN_SWF_ERROR = true;");
            }
          }
          var container = document.createElement("div");
          container.id = "webSocketContainer";
          container.style.position = "absolute";
          if (WebSocket.__isFlashLite()) {
            container.style.left = "0px";
            container.style.top = "0px";
          } else {
            container.style.left = "-100px";
            container.style.top = "-100px";
          }
          var holder = document.createElement("div");
          holder.id = "webSocketFlash";
          container.appendChild(holder);
          document.body.appendChild(container);
          swfobject.embedSWF(WEB_SOCKET_SWF_LOCATION, "webSocketFlash", "1", "1", "10.0.0", null, null, {
            hasPriority: true,
            swliveconnect: true,
            allowScriptAccess: "always"
          }, null, function(e) {
            if (!e.success) {
              logger.error("[WebSocket] swfobject.embedSWF failed");
            }
          });
        };
        WebSocket.__onFlashInitialized = function() {
          setTimeout(function() {
            WebSocket.__flash = document.getElementById("webSocketFlash");
            WebSocket.__flash.setCallerUrl(location.href);
            WebSocket.__flash.setDebug(!!window.WEB_SOCKET_DEBUG);
            for (var i = 0; i < WebSocket.__tasks.length; ++i) {
              WebSocket.__tasks[i]();
            }
            WebSocket.__tasks = [];
          }, 0);
        };
        WebSocket.__onFlashEvent = function() {
          setTimeout(function() {
            try {
              var events = WebSocket.__flash.receiveEvents();
              for (var i = 0; i < events.length; ++i) {
                WebSocket.__instances[events[i].webSocketId].__handleEvent(events[i]);
              }
            } catch (e) {
              logger.error(e);
            }
          }, 0);
          return true;
        };
        WebSocket.__log = function(message) {
          logger.log(decodeURIComponent(message));
        };
        WebSocket.__error = function(message) {
          logger.error(decodeURIComponent(message));
        };
        WebSocket.__addTask = function(task) {
          if (WebSocket.__flash) {
            task();
          } else {
            WebSocket.__tasks.push(task);
          }
        };
        WebSocket.__isFlashLite = function() {
          if (!window.navigator || !window.navigator.mimeTypes) {
            return false;
          }
          var mimeType = window.navigator.mimeTypes["application/x-shockwave-flash"];
          if (!mimeType || !mimeType.enabledPlugin || !mimeType.enabledPlugin.filename) {
            return false;
          }
          return mimeType.enabledPlugin.filename.match(/flashlite/i) ? true : false;
        };
        if (!window.WEB_SOCKET_DISABLE_AUTO_INITIALIZATION) {
          swfobject.addDomLoadEvent(function() {
            WebSocket.__initialize();
          });
        }
      })();
    }
  } else {
    WebSocket = null;
  }
}
/* websocket.js 结束 */
/* xncti-websocket.js 自身开始 */

/* eslint-disable */
function ClassXnCtiClient() {
  this.IP = null;
  this.Port = null;
  this.UserID = null;
  this.thisDN = null;
  this.UserPWD = null;
  this.UserExt = null;
  this.UserComp = null;
  this.UserGroup = null;
  this.IsConnect_CTI = 0;
  this.Status = 0;
  this.SeatStatus = 0;
  this.CallID = '';
  this.Caller = '';
  this.Called = '';
  this.ExtDirection = '';
  this.IsDebug = false;
  this.IsBusy = 0;
  this.IsNotDisturb = 0;
  this.dwFreq = 10;
  this.dwDuration = 5000;
  this.TelMessageSign = 0;
  this.LevelMessageSign = 0;
  this.websocket = null;

  this.msgheadend = '|';
  this.msgheadsplit = ":";
  this.msgbodyend = "&";
  this.msgbodysplit = "=";
  this.msgend = "@";

}


ClassXnCtiClient.prototype.CheckConnect = function () {
  if (this.IsConnect_CTI == 0) {
    return false;
  }
  return true;
}
ClassXnCtiClient.prototype.CtiConnect = function (IP, Port) {
  this.IP = IP;
  this.Port = Port;

  if (this.IP == null) {
    return this.JsonResult(-101);
  }
  if (this.Port == null) {
    return this.JsonResult(-102);
  }
  if (this.websocket != null) {
    if (this.websocket.isConnected()) {
      return this.JsonResult(-103);
    }
  }



  var xncti = this;
  if (ws.browserSupportsWebSockets()) {
    this.websocket = new ws.webSocketClient();

  } else {
    var lMsg = ws.MSG_WS_NOT_SUPPORTED;
    showMessage(lMsg);
  }
  var lURL = ws.getServerURL(ws_type, this.IP, this.Port, "/ws");
  var thisDN = this.thisDN;

  var data = { "request": "CtiConnect", "thisDN": thisDN };
  var lRes = this.websocket.logon(lURL, thisDN, jQuery.toJSON(data), {
    OnOpen: function (aEvent) {
      xncti.websocket.startKeepAlive({ immediate: false, interval: 30000 });
      xncti.IsConnect_CTI = 1;
      xncti.CTIConnectedEvent();
    },
    OnMessage: function (aEvent) {
      xncti.parseMessage(aEvent.data);
    },
    OnClose: function (aEvent) {
      xncti.websocket.stopKeepAlive();
      xncti.IsConnect_CTI = 0;
      xncti.CTIDisConnectedEvent();
    }
  });
  return this.JsonResult(1);
}
ClassXnCtiClient.prototype.send = function (data) {
  if (this.websocket) {

    this.websocket.sendToken(data);
  } else {
    showMessage("disconnect from cti server while send message");
  }
}

ClassXnCtiClient.prototype.parseMessage = function (data) {
  var msttype, msg, msgbody;
  msttype = parseInt(GetMsgPara(data, "MSGTYPE", ':', '|', 0));
  msg = parseInt(GetMsgPara(data, "MSG", ':', '|', 0));
  msgbody = GetMsgPara(data, "MSGBODY", ':', '@', 0);

  if (msttype == "" || msg == "" || msgbody == "") {

    alert("ERROR MSG=" + data);

  } else {
    switch (msttype) {
      case MSGTYPE.EVENT:
      {
        switch (msg) {
          case EVENTCLASS.EVENT_ExtStateChanged:
          {
            var deviceid = GetBodyItem(data, "deviceid");
            var devicestate = GetBodyItem(data, "devicestate");
            var pbxid = GetBodyItem(data, "pbxid");
            var laststate = GetBodyItem(data, "laststate");
            var floatdata = GetBodyItem(data, "floatdata");
            this.EVENT_ExtStateChanged(deviceid, devicestate, pbxid, laststate, floatdata);
          }
            break;
          case EVENTCLASS.EVENT_AgentStateChanged:
          {
            var agentid = GetBodyItem(data, "agentid");
            var agentstate = GetBodyItem(data, "agentstate");
            var laststate = GetBodyItem(data, "laststate");
            var compid = GetBodyItem(data, "compid");
            this.SeatStatus = agentstate;
            this.EVENT_AgentStateChanged(agentid, agentstate, laststate, compid);
          }
            break;
          case EVENTCLASS.EVENT_AgentAnswered:
          {
            var agentid = GetBodyItem(data, "agentid");
            var callid = GetBodyItem(data, "callId");
            var calltype = GetBodyItem(data, "callType");
            var compid = GetBodyItem(data, "compid");
            var areacode = GetBodyItem(data, "areaCode");
            var calleedevice = GetBodyItem(data, "calleeDevice");
            var callerdevice = GetBodyItem(data, "callerDevice");
            var taskid = GetBodyItem(data, "taskId");
            var tasktype = GetBodyItem(data, "taskType");
            var filename = GetBodyItem(data, "fileName");
            var calldata = GetBodyItem(data, "callData");
            this.EVENT_AgentAnswered(compid, agentid, callid, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, filename, calldata);
          }
            break;
          case EVENTCLASS.EVENT_OtherRinging:
          {
            var agentid = GetBodyItem(data, "agentid");
            var callid = GetBodyItem(data, "callId");
            var calltype = GetBodyItem(data, "callType");
            var compid = GetBodyItem(data, "compid");
            var areacode = GetBodyItem(data, "areaCode");
            var calleedevice = GetBodyItem(data, "calleeDevice");
            var callerdevice = GetBodyItem(data, "callerDevice");
            var taskid = GetBodyItem(data, "taskId");
            var tasktype = GetBodyItem(data, "taskType");
            var calldata = GetBodyItem(data, "callData");
            this.EVENT_OtherRinging(compid, agentid, callid, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, calldata);
          }
            break;
          case EVENTCLASS.EVENT_AgentRinging:
          {
            var agentid = GetBodyItem(data, "agentid");
            var callid = GetBodyItem(data, "callId");
            var calltype = GetBodyItem(data, "callType");
            var compid = GetBodyItem(data, "compid");
            var areacode = GetBodyItem(data, "areaCode");
            var calleedevice = GetBodyItem(data, "calleeDevice");
            var callerdevice = GetBodyItem(data, "callerDevice");
            var taskid = GetBodyItem(data, "taskId");
            var tasktype = GetBodyItem(data, "taskType");
            var agentstate = GetBodyItem(data, "agentstate");
            var laststate = GetBodyItem(data, "laststate");
            var calldata = GetBodyItem(data, "callData");
            this.EVENT_AgentRinging(compid, agentid, callid, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, agentstate, laststate, calldata);
          }
            break;
          case EVENTCLASS.EVENT_HangupEvent:
          {
            var agentid = GetBodyItem(data, "agentid");
            var callId = GetBodyItem(data, "callId");
            var compid = GetBodyItem(data, "compid");
            var calldata = GetBodyItem(data, "callData");
            this.EVENT_HangupEvent(compid, agentid, callId, calldata);
          }
            break;
          case EVENTCLASS.EVENT_ChannelStateChanged:
          {
            var channel = GetBodyItem(data, "channel");
            var channelstate = GetBodyItem(data, "channelstate");
            var pbxid = GetBodyItem(data, "pbxid");
            var laststate = GetBodyItem(data, "laststate");
            var floatdata = GetBodyItem(data, "floatdata");
            var ext = GetBodyItem(data, "ext");
            this.EVENT_ChannelStateChanged(channel, channelstate, pbxid, laststate, ext, floatdata);
          }
            break;
          case EVENTCLASS.EVENT_AgentCallined:
          {
            var caller = GetBodyItem(data, "caller");
            var callerchannel = GetBodyItem(data, "callerchannel");
            var pbxid = GetBodyItem(data, "pbxid");
            var fromqueue = GetBodyItem(data, "fromqueue");
            var callid = GetBodyItem(data, "callid");
            var agentid = GetBodyItem(data, "agentid");
            var floatinfo = GetBodyItem(data, "floatinfo");
            var context = GetBodyItem(data, "context");
            var exten = GetBodyItem(data, "exten");
            this.EVENT_AgentCallined(caller, pbxid, callerchannel, fromqueue, callid, agentid, context, exten, floatinfo);
          }
            break;
          case EVENTCLASS.EVENT_MeEventHanpend:
          {
            var eventtype = GetBodyItem(data, "eventtype");
            var me = GetBodyItem(data, "me");
            var pbxid = GetBodyItem(data, "pbxid");
            var member = GetBodyItem(data, "member");
            var memidx = GetBodyItem(data, "memidx");
            var activechannel = GetBodyItem(data, "activechannel");
            var floatinfo = GetBodyItem(data, "floatinfo");
            this.EVENT_MeEventHanpend(pbxid, eventtype, me, member, memidx, activechannel, floatinfo);
          }
            break;
          case EVENTCLASS.EVENT_NewQueueEvent:
          {
            var queue = GetBodyItem(data, "queue");
            var join = GetBodyItem(data, "join");
            var joincaller = GetBodyItem(data, "joincaller");
            var jcchannel = GetBodyItem(data, "jcchannel");
            var callid = GetBodyItem(data, "callid");
            var pbxid = GetBodyItem(data, "pbxid");
            var floatinfo = GetBodyItem(data, "floatinfo");
            this.EVENT_NewQueueEvent(queue, join, joincaller, jcchannel, callid, pbxid, floatinfo);
          }
            break;
          case EVENTCLASS.EVENT_WXChatIn:
          {
            var agentid = GetBodyItem(data, "toagentid");
            var content = GetBodyItem(data, "content");
            var msgtype = GetBodyItem(data, "msgtype");
            var fromwxuserid = GetBodyItem(data, "fromwxuserid");
            var fromghid = GetBodyItem(data, "fromghid");


            this.EVENT_WXChatIn(fromghid, fromwxuserid, agentid, content, msgtype);
          }
            break;
          case EVENTCLASS.EVENT_TaskFinished:
          {
            var taskid = GetBodyItem(data, "taskid");
            this.EVENT_TaskFinished(taskid);
          }
            break;

          case EVENTCLASS.EVENT_TaskStart:
          {
            var taskid = GetBodyItem(data, "taskid");
            var result = GetBodyItem(data, "result");
            this.EVENT_TaskStart(taskid, result);
          }
            break;
          case EVENTCLASS.EVENT_TaskStop:
          {
            var taskid = GetBodyItem(data, "taskid");
            var result = GetBodyItem(data, "result");
            this.EVENT_TaskStop(taskid, result);
          }
            break;
          case EVENTCLASS.EVENT_TaskJoin:
          {
            var taskid = GetBodyItem(data, "taskid");
            var result = GetBodyItem(data, "result");
            var agentid = GetBodyItem(data, "agentid");
            this.EVENT_TaskJoin(taskid, result, agentid);
          }
            break;
          case EVENTCLASS.EVENT_TaskExit:
          {
            var taskid = GetBodyItem(data, "taskid");
            var result = GetBodyItem(data, "result");
            var agentid = GetBodyItem(data, "agentid");
            this.EVENT_TaskExit(taskid, result, agentid);
          }
            break;
          case EVENTCLASS.EVENT_ForceExit:
          {
            var agentid = GetBodyItem(data, "agentid");
            this.EVENT_ForceExit(agentid);
          }
            break;
          case EVENTCLASS.EVENT_JoinGroup:
          {
            var queueid = GetBodyItem(data, "queueid");
            var sucagentid = GetBodyItem(data, "success_agentid");
            var failagentid = GetBodyItem(data, "fail_agentid");
            this.EVENT_JoinGroup(queueid, sucagentid, failagentid);
          }
            break;
          case EVENTCLASS.EVENT_ExitGroup:
          {
            var queueid = GetBodyItem(data, "queueid");
            var sucagentid = GetBodyItem(data, "success_agentid");
            var failagentid = GetBodyItem(data, "fail_agentid");
            this.EVENT_ExitGroup(queueid, sucagentid, failagentid);
          }
            break;
        }
      }
        break;
      case MSGTYPE.CMD:
        break;
      case MSGTYPE.CMDRES:
      {
        var rescode = GetBodyItem(data, "rescode");
        var pbxrescode = GetBodyItem(data, "pbxrescode");
        var res = GetBodyItem(data, "res");
        var actionid = GetBodyItem(data, "actionid");
        var taskid = GetBodyItem(data, "taskid");
        var calldata = GetBodyItem(data, "callData");
        if (actionid == MSGCLASS.CMD_AgentState) {
          var agentstate = GetBodyItem(data, "agentstate");
          this.SeatStatus = agentstate;
        }
        else {
          this.EVENT_CMDRES(rescode, pbxrescode, res, actionid, taskid, calldata);
        }
      }
        break;
    }
  }
}


ClassXnCtiClient.prototype.CtiDisconnect = function () {
  if (this.websocket != null) {
    if (this.websocket.isConnected()) {
      this.websocket.stopKeepAlive();
      this.websocket.close();
      this.IsConnect_CTI = 0;
      this.CTIDisConnectedEvent();
    }
  }
  else return this.JsonResult(-1);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.CheckWS = function () {
  if (this.websocket != null) {
    if (!this.websocket.isConnected()) {
      return false;
    }
    return true;
  }
  else {
    return false;
  }
}


ClassXnCtiClient.prototype.CheckWSS = function () {
  if (this.websocket != null) {
    if (!this.websocket.isConnected()) {
      return this.JsonResult(0);
    }
    return this.JsonResult(1);
  }
  else {
    return this.JsonResult(0);
  }
}

ClassXnCtiClient.prototype.JsonResult = function (code) {

  switch (code) {
    case 1:
      msg = "OK";
      break;
    case 0:
      msg = "Fail";
      break;
    case -1:
      msg = "websocket未连接";
      break;
    case -101:
      msg = "服务器IP地址不能为空";
      break;
    case -102:
      msg = "端口不能为空";
    case -103:
      msg = "CTI服务器已连接不可重复连接";
      break;
    case -201:
      msg = "登录工号不能为空";
      break;
    case -202:
      msg = "登录密码不能为空";
      break;
    case -203:
      msg = "分机号码不能为空";
      break;
    case -204:
      msg = "企业代码不能为空";
      break;
    case -301:
      msg = "座席不能为空";
      break;
    case -302:
      msg = "设备type不能为空";
      break;
    case -303:
      msg = "设备id不能为空";
      break;
    case -401:
      msg = "任务id不能为空";
      break;
    default:
      msg = "";
      break;

  }

  return "{\"code\":" + code + ",\"msg\":\"" + msg + "\"}";

}

ClassXnCtiClient.prototype.MsgHead = function (msgtype, msg, actionid) {
  var msghead = "MSGTYPE" + this.msgheadsplit + msgtype;
  msghead += this.msgheadend;
  msghead += "MSG" + this.msgheadsplit + msg;
  msghead += this.msgheadend;
  msghead += "MSGBODY" + this.msgheadsplit;
  msghead += "actionid";
  msghead += this.msgbodysplit;
  msghead += actionid;
  msghead += this.msgbodyend;

  return msghead;

}
ClassXnCtiClient.prototype.MsgBodyItem = function (key, value) {
  var msgbodyitem = key;

  msgbodyitem += this.msgbodysplit;
  msgbodyitem += value;
  msgbodyitem += this.msgbodyend;

  return msgbodyitem;

}

ClassXnCtiClient.prototype.AgentLogin = function (UserID, UserPWD, UserExt, UserComp) {
  this.UserID = UserID;
  this.UserPWD = UserPWD;
  this.UserExt = UserExt;
  this.UserComp = UserComp;
  if (!this.CheckWS()) {
    return false;
  }
  if (this.UserID == null) {
    return this.JsonResult(-201);
  }
  if (this.UserPWD == null) {

    return this.JsonResult(-202);
  }
  if (this.UserExt == null) {

    return this.JsonResult(-203);
  }
  if (this.UserComp == null) {

    return this.JsonResult(-204);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Agentlogin, MSGCLASS.CMD_Agentlogin);
  cmd += this.MsgBodyItem("agentid", UserID);
  cmd += this.MsgBodyItem("agentpwd", UserPWD);
  cmd += this.MsgBodyItem("loginext", UserExt);
  cmd += this.MsgBodyItem("company", UserComp);
  cmd += this.msgend;

  this.send(cmd);
  return this.JsonResult(1);
}



ClassXnCtiClient.prototype.AdminLogin = function (company, username, userpwd) {
  if (!this.CheckWS()) {
    return false;
  }
  if (company == null) {
    alert('企业号不能为空！');
    return false;
  }
  if (username == null) {
    alert('用户名不能为空！');
    return false;
  }
  if (userpwd == null) {
    alert('登录密码不能为空！');
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Adminlogin, MSGCLASS.CMD_Adminlogin);
  cmd += this.MsgBodyItem("company", company);
  cmd += this.MsgBodyItem("username", username);
  cmd += this.MsgBodyItem("userpwd", userpwd);
  cmd += this.msgend;

  this.send(cmd);
}

ClassXnCtiClient.prototype.AdminLogout = function (company, username) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Adminloginoff, MSGCLASS.CMD_Adminloginoff);
  cmd += this.MsgBodyItem("company", company);
  cmd += this.MsgBodyItem("username", username);
  cmd += this.msgend;
  this.send(cmd);
}


ClassXnCtiClient.prototype.AgentLogout = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Agentloginoff, MSGCLASS.CMD_Agentloginoff);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.MakeCall = function (deviceid, type, calldata) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (type == null || type == '') {
    return this.JsonResult(-302);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_MakeCall, MSGCLASS.CMD_MakeCall);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", type);
  cmd += this.MsgBodyItem("callData", calldata);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.HoldCall = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Hold, MSGCLASS.CMD_Hold);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("ifhold", 1);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.RetriveCall = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Hold, MSGCLASS.CMD_Hold);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("ifhold", 0);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.MakeBusy = function (ifbusy) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Makebusy, MSGCLASS.CMD_Makebusy);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("ifbusy", ifbusy);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.Hangup = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Hangup, MSGCLASS.CMD_Hangup);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", "");
  cmd += this.MsgBodyItem("type", 0);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.ForceHangup = function (deviceid) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Hangup, MSGCLASS.CMD_Hangup);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", 1);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.PickupCall = function (deviceid, type) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (type == null || type == '') {
    return this.JsonResult(-302);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_PickupCall, MSGCLASS.CMD_PickupCall);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", type);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}

ClassXnCtiClient.prototype.InsertCall = function (deviceid, type) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (type == null || type == '') {
    return this.JsonResult(-302);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Insert, MSGCLASS.CMD_Insert);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", type);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}



ClassXnCtiClient.prototype.ListenCall = function (deviceid, type) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (type == null || type == '') {
    return this.JsonResult(-302);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }

  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Monitor, MSGCLASS.CMD_Monitor);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", type);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.Tran = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_TranCall, MSGCLASS.CMD_TranCall);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.Meeting = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Meeting, MSGCLASS.CMD_Meeting);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}



ClassXnCtiClient.prototype.Reset = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_ReSet, MSGCLASS.CMD_ReSet);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.Refer = function (deviceid, type) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (type == null || type == '') {
    return this.JsonResult(-302);
  }
  if (deviceid == null || deviceid == '') {
    return this.JsonResult(-303);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_Refer, MSGCLASS.CMD_Refer);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("deviceid", deviceid);
  cmd += this.MsgBodyItem("type", type);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.GetAgentState = function () {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_AgentState, MSGCLASS.CMD_AgentState);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);
}


ClassXnCtiClient.prototype.JoinTask = function (taskid) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (taskid == null || taskid == '') {
    return this.JsonResult(-401);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_JoinTask, MSGCLASS.CMD_JoinTask);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("taskid", taskid);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);

}


ClassXnCtiClient.prototype.ExitTask = function (taskid) {
  if (!this.CheckWS()) {
    return this.JsonResult(-1);
  }
  if (this.UserID == null) {
    return this.JsonResult(-301);
  }
  if (taskid == null || taskid == '') {
    return this.JsonResult(-401);
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_ExitTask, MSGCLASS.CMD_ExitTask);
  cmd += this.MsgBodyItem("agentid", this.UserID);
  cmd += this.MsgBodyItem("taskid", taskid);
  cmd += this.msgend;
  this.send(cmd);
  return this.JsonResult(1);

}


ClassXnCtiClient.prototype.StartTask = function (username, taskid) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_StartTask, MSGCLASS.CMD_StartTask);
  cmd += this.MsgBodyItem("username", username);
  cmd += this.MsgBodyItem("taskid", taskid);
  cmd += this.msgend;
  this.send(cmd);

}


ClassXnCtiClient.prototype.StopTask = function (username, taskid) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_StopTask, MSGCLASS.CMD_StopTask);
  cmd += this.MsgBodyItem("username", username);
  cmd += this.MsgBodyItem("taskid", taskid);
  cmd += this.msgend;
  this.send(cmd);

}




ClassXnCtiClient.prototype.ShowAgentIds = function (company, agentids) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_ShowAgentIds, MSGCLASS.CMD_ShowAgentIds);
  cmd += this.MsgBodyItem("company", company);
  cmd += this.MsgBodyItem("agentids", agentids);
  cmd += this.msgend;
  this.send(cmd);

}



ClassXnCtiClient.prototype.NoShowAgentIds = function (company, agentids) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_NoShowAgentIds, MSGCLASS.CMD_NoShowAgentIds);
  cmd += this.MsgBodyItem("company", company);
  cmd += this.MsgBodyItem("agentids", agentids);
  cmd += this.msgend;
  this.send(cmd);
}



ClassXnCtiClient.prototype.ForceExit = function (company, agentids) {
  if (!this.CheckWS()) {
    return false;
  }
  var cmd = this.MsgHead(MSGTYPE.CMD, MSGCLASS.CMD_ForceExit, MSGCLASS.CMD_ForceExit);
  cmd += this.MsgBodyItem("company", company);
  cmd += this.MsgBodyItem("agentids", agentids);
  cmd += this.msgend;
  this.send(cmd);

}



ClassXnCtiClient.prototype.CTIConnectedEvent = function () {

}



ClassXnCtiClient.prototype.CTIDisConnectedEvent = function () {

}


ClassXnCtiClient.prototype.EVENT_AgentStateChanged = function (agentid, agentstate, laststate, compid) {
}



ClassXnCtiClient.prototype.EVENT_AgentAnswered = function (compid, agentid, callId, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, filename, calldata) {
}



ClassXnCtiClient.prototype.EVENT_OtherRinging = function (compid, agentid, callId, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, calldata) {
}



ClassXnCtiClient.prototype.EVENT_AgentRinging = function (compid, agentid, callId, calltype, calleedevice, callerdevice, areacode, taskid, tasktype, agentstate, laststate, calldata) {
}


ClassXnCtiClient.prototype.EVENT_HangupEvent = function (compid, agentid, callId, calldata) {

}



ClassXnCtiClient.prototype.EVENT_CMDRES = function (rescode, pbxrescode, res, actionid, taskid, calldata) {

}


ClassXnCtiClient.prototype.EVENT_TaskFinished = function (taskid) {

}


ClassXnCtiClient.prototype.EVENT_TaskStart = function (taskid, result) {

}


ClassXnCtiClient.prototype.EVENT_TaskStop = function (taskid, result) {

}


ClassXnCtiClient.prototype.EVENT_TaskJoin = function (taskid, result, agentid) {

}


ClassXnCtiClient.prototype.EVENT_TaskExit = function (taskid, result, agentid) {

}


ClassXnCtiClient.prototype.EVENT_ForceExit = function (agentid) {

}
/* xncti-websocket.js 自身结束 */
/* japp.js 开始 */
/* eslint-disable */
$(function () {


  var origin_location = document.location.protocol
  var _url = 'http://api.salescomm.net:8200/Handler/agent.ashx'

  if (origin_location == 'https' || origin_location == 'https:') {
    _url = 'https://api.salescomm.net:8201/Handler/agent.ashx'
  }
  jQuery.ajaxSetup({
    url: _url,
    type: 'POST',
    dataType: 'jsonp',
    jsonp: 'callbackparam'
  })
})
function getctiserver (callbackFunc) {
  jQuery.ajax(
    {
      cache: false,
      async: false,
      data: {
        'action': 'getCtiServer',
        'compid': compid,
        'agentid': agentid,
        'serverid': cti_serverid,
        'wstype': ws_type
      },
      success: function (re) {
        if (re.code == 1) {
          cti_server = re.data.domain
          cti_port = re.data.port
          cti_serverid = re.data.serverid
          if (typeof (callbackFunc) === 'function') {
            callbackFunc()
          }
        }
      },
      error: function (err) {
        console.log('获取cti服务器失败：' + err)
      }
    })
};
function getregserver (callbackFunc2) {
  jQuery.ajax(
    {
      cache: false,
      async: false,
      data: {
        'action': 'getRegServer',
        'compid': compid,
        'agentid': agentid,
        'serverid': sip_serverid,
        'wstype': ws_type
      },
      success: function (re) {
        if (re.code == 1) {
          sip_server = re.data.domain
          sip_port = re.data.port
          sip_serverid = re.data.serverid
          if (typeof (callbackFunc2) === 'function') {
            callbackFunc2()
          }
        }
      },
      error: function (err) {
        console.log('获取reg服务器失败：' + err)
      }
    })
};

function getNowFormatDate () {
  var date = new Date()
  var seperator1 = '-'
  var seperator2 = ':'
  var month = date.getMonth() + 1
  if (month >= 1 && month <= 9) {
    month = '0' + month
  }
  var strDate = date.getDate()
  if (strDate >= 0 && strDate <= 9) {
    strDate = '0' + strDate
  }
  var strHours = date.getHours()
  if (strHours >= 0 && strHours <= 9) {
    strHours = '0' + strHours
  }
  var strMinutes = date.getMinutes()
  if (strMinutes >= 0 && strMinutes <= 9) {
    strMinutes = '0' + strMinutes
  }
  var strSeconds = date.getSeconds()
  if (strSeconds >= 0 && strSeconds <= 9) {
    strSeconds = '0' + strSeconds
  }
  var strMillSeconds = date.getMilliseconds()
  if (strMillSeconds >= 0 && strMillSeconds <= 9) {
    strMillSeconds = '00' + strMillSeconds
  } else if (strMillSeconds >= 10 && strMillSeconds <= 99) {
    strMillSeconds = '0' + strMillSeconds
  }
  var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate +
    ' ' + strHours + seperator2 + strMinutes +
    seperator2 + strSeconds + '.' + strMillSeconds
  return currentdate
}

/* japp.js 结束 */
/* sip-0.7.8.js 开始*/

/* eslint-disable */
/*
 * SIP version 0.7.8
 * Copyright (c) 2014-2017 Junction Networks, Inc <http://www.onsip.com>
 * Homepage: http://sipjs.com
 * License: http://sipjs.com/license/
 *
 *
 * ~~~SIP.js contains substantial portions of JsSIP under the following license~~~
 * Homepage: http://jssip.net
 * Copyright (c) 2012-2013 José Luis Millán - Versatica <http://www.versatica.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * ~~~ end JsSIP license ~~~
 */


(function (f) { if (typeof exports === "object" && typeof module !== "undefined") { module.exports = f() } else if (typeof define === "function" && define.amd) { define([], f) } else { var g; if (typeof window !== "undefined") { g = window } else if (typeof global !== "undefined") { g = global } else if (typeof self !== "undefined") { g = self } else { g = this } g.SIP = f() } })(function () {
  var define, module, exports; return (function e(t, n, r) { function s(o, u) { if (!n[o]) { if (!t[o]) { var a = typeof require == "function" && require; if (!u && a) return a(o, !0); if (i) return i(o, !0); var f = new Error("Cannot find module '" + o + "'"); throw f.code = "MODULE_NOT_FOUND", f } var l = n[o] = { exports: {} }; t[o][0].call(l.exports, function (e) { var n = t[o][1][e]; return s(n ? n : e) }, l, l.exports, e, t, n, r) } return n[o].exports } var i = typeof require == "function" && require; for (var o = 0; o < r.length; o++)s(r[o]); return s })({
    1: [function (require, module, exports) {


      function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
      }
      module.exports = EventEmitter;

      EventEmitter.EventEmitter = EventEmitter;

      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._maxListeners = undefined;


      EventEmitter.defaultMaxListeners = 10;

      EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n))
          throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
      };

      EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;

        if (!this._events)
          this._events = {};

        if (type === 'error') {
          if (!this._events.error ||
            (isObject(this._events.error) && !this._events.error.length)) {
            er = arguments[1];
            if (er instanceof Error) {
              throw er;
            }
            throw TypeError('Uncaught, unspecified "error" event.');
          }
        }

        handler = this._events[type];

        if (isUndefined(handler))
          return false;

        if (isFunction(handler)) {
          switch (arguments.length) {

            case 1:
              handler.call(this);
              break;
            case 2:
              handler.call(this, arguments[1]);
              break;
            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            default:
              len = arguments.length;
              args = new Array(len - 1);
              for (i = 1; i < len; i++)
                args[i - 1] = arguments[i];
              handler.apply(this, args);
          }
        } else if (isObject(handler)) {
          len = arguments.length;
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];

          listeners = handler.slice();
          len = listeners.length;
          for (i = 0; i < len; i++)
            listeners[i].apply(this, args);
        }

        return true;
      };

      EventEmitter.prototype.addListener = function (type, listener) {
        var m;

        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        if (!this._events)
          this._events = {};


        if (this._events.newListener)
          this.emit('newListener', type,
            isFunction(listener.listener) ?
              listener.listener : listener);

        if (!this._events[type])
          this._events[type] = listener;
        else if (isObject(this._events[type]))
          this._events[type].push(listener);
        else
          this._events[type] = [this._events[type], listener];

        if (isObject(this._events[type]) && !this._events[type].warned) {
          var m;
          if (!isUndefined(this._maxListeners)) {
            m = this._maxListeners;
          } else {
            m = EventEmitter.defaultMaxListeners;
          }

          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' +
              'leak detected. %d listeners added. ' +
              'Use emitter.setMaxListeners() to increase limit.',
              this._events[type].length);
            if (typeof console.trace === 'function') {
              console.trace();
            }
          }
        }

        return this;
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        var fired = false;

        function g() {
          this.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        g.listener = listener;
        this.on(type, g);

        return this;
      };

      EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;

        if (!isFunction(listener))
          throw TypeError('listener must be a function');

        if (!this._events || !this._events[type])
          return this;

        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener ||
          (isFunction(list.listener) && list.listener === listener)) {
          delete this._events[type];
          if (this._events.removeListener)
            this.emit('removeListener', type, listener);

        } else if (isObject(list)) {
          for (i = length; i-- > 0;) {
            if (list[i] === listener ||
              (list[i].listener && list[i].listener === listener)) {
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }

          if (this._events.removeListener)
            this.emit('removeListener', type, listener);
        }

        return this;
      };

      EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;

        if (!this._events)
          return this;

        if (!this._events.removeListener) {
          if (arguments.length === 0)
            this._events = {};
          else if (this._events[type])
            delete this._events[type];
          return this;
        }

        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = {};
          return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
          this.removeListener(type, listeners);
        } else {
          while (listeners.length)
            this.removeListener(type, listeners[listeners.length - 1]);
        }
        delete this._events[type];

        return this;
      };

      EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type])
          ret = [];
        else if (isFunction(this._events[type]))
          ret = [this._events[type]];
        else
          ret = this._events[type].slice();
        return ret;
      };

      EventEmitter.listenerCount = function (emitter, type) {
        var ret;
        if (!emitter._events || !emitter._events[type])
          ret = 0;
        else if (isFunction(emitter._events[type]))
          ret = 1;
        else
          ret = emitter._events[type].length;
        return ret;
      };

      function isFunction(arg) {
        return typeof arg === 'function';
      }

      function isNumber(arg) {
        return typeof arg === 'number';
      }

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }

      function isUndefined(arg) {
        return arg === void 0;
      }

    }, {}], 2: [function (require, module, exports) {
      module.exports = {
        "name": "sip.js",
        "title": "SIP.js",
        "description": "A simple, intuitive, and powerful JavaScript signaling library",
        "version": "0.7.8",
        "main": "src/index.js",
        "browser": {
          "./src/environment.js": "./src/environment_browser.js"
        },
        "homepage": "http://sipjs.com",
        "author": "OnSIP <developer@onsip.com> (http://sipjs.com/authors/)",
        "contributors": [
          {
            "url": "https://github.com/onsip/SIP.js/blob/master/THANKS.md"
          }
        ],
        "repository": {
          "type": "git",
          "url": "https://github.com/onsip/SIP.js.git"
        },
        "keywords": [
          "sip",
          "websocket",
          "webrtc",
          "library",
          "javascript"
        ],
        "devDependencies": {
          "beefy": "^2.1.5",
          "browserify": "^4.1.8",
          "grunt": "~0.4.0",
          "grunt-browserify": "^4.0.1",
          "grunt-cli": "~0.1.6",
          "grunt-contrib-copy": "^0.5.0",
          "grunt-contrib-jasmine": "^1.0.3",
          "grunt-contrib-jshint": ">0.5.0",
          "grunt-contrib-uglify": "~0.2.0",
          "grunt-peg": "~1.3.1",
          "grunt-trimtrailingspaces": "^0.4.0",
          "pegjs": "^0.8.0"
        },
        "engines": {
          "node": ">=0.12"
        },
        "license": "MIT",
        "scripts": {
          "repl": "beefy test/repl.js --open",
          "build": "grunt build",
          "prepublish": "cd src/Grammar && mkdir -p dist && pegjs --extra-options-file peg.json src/Grammar.pegjs dist/Grammar.js",
          "test": "grunt travis --verbose"
        },
        "dependencies": {
          "ws": "^1.0.1"
        },
        "optionalDependencies": {
          "promiscuous": "^0.6.0"
        }
      }

    }, {}], 3: [function (require, module, exports) {
      "use strict";
      module.exports = function (SIP) {
        var ClientContext;

        ClientContext = function (ua, method, target, options) {
          var originalTarget = target;

          if (target === undefined) {
            throw new TypeError('Not enough arguments');
          }

          this.ua = ua;
          this.logger = ua.getLogger('sip.clientcontext');
          this.method = method;
          target = ua.normalizeTarget(target);
          if (!target) {
            throw new TypeError('Invalid target: ' + originalTarget);
          }

          /* Options
                   * - extraHeaders
                   * - params
                   * - contentType
                   * - body
                   */
          options = Object.create(options || Object.prototype);
          options.extraHeaders = (options.extraHeaders || []).slice();

          this.request = new SIP.OutgoingRequest(this.method,
            target,
            this.ua,
            options.params,
            options.extraHeaders);
          if (options.body) {
            this.body = {};
            this.body.body = options.body;
            if (options.contentType) {
              this.body.contentType = options.contentType;
            }
            this.request.body = this.body;
          }

          /* Set other properties from the request */
          this.localIdentity = this.request.from;
          this.remoteIdentity = this.request.to;

          this.data = {};
        };
        ClientContext.prototype = Object.create(SIP.EventEmitter.prototype);

        ClientContext.prototype.send = function () {
          (new SIP.RequestSender(this, this.ua)).send();
          return this;
        };

        ClientContext.prototype.cancel = function (options) {
          options = options || {};

          options.extraHeaders = (options.extraHeaders || []).slice();

          var cancel_reason = SIP.Utils.getCancelReason(options.status_code, options.reason_phrase);
          this.request.cancel(cancel_reason, options.extraHeaders);

          this.emit('cancel');
        };

        ClientContext.prototype.receiveResponse = function (response) {
          var cause = SIP.Utils.getReasonPhrase(response.status_code);

          switch (true) {
            case /^1[0-9]{2}$/.test(response.status_code):
              this.emit('progress', response, cause);
              break;

            case /^2[0-9]{2}$/.test(response.status_code):
              if (this.ua.applicants[this]) {
                delete this.ua.applicants[this];
              }
              this.emit('accepted', response, cause);
              break;

            default:
              if (this.ua.applicants[this]) {
                delete this.ua.applicants[this];
              }
              this.emit('rejected', response, cause);
              this.emit('failed', response, cause);
              break;
          }

        };

        ClientContext.prototype.onRequestTimeout = function () {
          this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);
        };

        ClientContext.prototype.onTransportError = function () {
          this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);
        };

        SIP.ClientContext = ClientContext;
      };

    }, {}], 4: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP Constants
       */

      /**
       * SIP Constants.
       * @augments SIP
       */

      module.exports = function (name, version) {
        return {
          USER_AGENT: name + '/' + version,


          SIP: 'sip',
          SIPS: 'sips',

          causes: {
            CONNECTION_ERROR: 'Connection Error',
            REQUEST_TIMEOUT: 'Request Timeout',
            SIP_FAILURE_CODE: 'SIP Failure Code',
            INTERNAL_ERROR: 'Internal Error',

            BUSY: 'Busy',
            REJECTED: 'Rejected',
            REDIRECTED: 'Redirected',
            UNAVAILABLE: 'Unavailable',
            NOT_FOUND: 'Not Found',
            ADDRESS_INCOMPLETE: 'Address Incomplete',
            INCOMPATIBLE_SDP: 'Incompatible SDP',
            AUTHENTICATION_ERROR: 'Authentication Error',
            DIALOG_ERROR: 'Dialog Error',

            WEBRTC_NOT_SUPPORTED: 'WebRTC Not Supported',
            WEBRTC_ERROR: 'WebRTC Error',
            CANCELED: 'Canceled',
            NO_ANSWER: 'No Answer',
            EXPIRES: 'Expires',
            NO_ACK: 'No ACK',
            NO_PRACK: 'No PRACK',
            USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',
            BAD_MEDIA_DESCRIPTION: 'Bad Media Description',
            RTP_TIMEOUT: 'RTP Timeout'
          },

          supported: {
            UNSUPPORTED: 'none',
            SUPPORTED: 'supported',
            REQUIRED: 'required'
          },

          SIP_ERROR_CAUSES: {
            REDIRECTED: [300, 301, 302, 305, 380],
            BUSY: [486, 600],
            REJECTED: [403, 603],
            NOT_FOUND: [404, 604],
            UNAVAILABLE: [480, 410, 408, 430],
            ADDRESS_INCOMPLETE: [484],
            INCOMPATIBLE_SDP: [488, 606],
            AUTHENTICATION_ERROR: [401, 407]
          },

          ACK: 'ACK',
          BYE: 'BYE',
          CANCEL: 'CANCEL',
          INFO: 'INFO',
          INVITE: 'INVITE',
          MESSAGE: 'MESSAGE',
          NOTIFY: 'NOTIFY',
          OPTIONS: 'OPTIONS',
          REGISTER: 'REGISTER',
          UPDATE: 'UPDATE',
          SUBSCRIBE: 'SUBSCRIBE',
          REFER: 'REFER',
          PRACK: 'PRACK',

          /* SIP Response Reasons
                   * DOC: http://www.iana.org/assignments/sip-parameters
                   * Copied from https://github.com/versatica/OverSIP/blob/master/lib/oversip/sip/constants.rb#L7
                   */
          REASON_PHRASE: {
            100: 'Trying',
            180: 'Ringing',
            181: 'Call Is Being Forwarded',
            182: 'Queued',
            183: 'Session Progress',
            199: 'Early Dialog Terminated',
            202: 'Accepted',
            204: 'No Notification',
            300: 'Multiple Choices',
            301: 'Moved Permanently',
            302: 'Moved Temporarily',
            305: 'Use Proxy',
            380: 'Alternative Service',
            400: 'Bad Request',
            401: 'Unauthorized',
            402: 'Payment Required',
            403: 'Forbidden',
            404: 'Not Found',
            405: 'Method Not Allowed',
            406: 'Not Acceptable',
            407: 'Proxy Authentication Required',
            408: 'Request Timeout',
            410: 'Gone',
            412: 'Conditional Request Failed',
            413: 'Request Entity Too Large',
            414: 'Request-URI Too Long',
            415: 'Unsupported Media Type',
            416: 'Unsupported URI Scheme',
            417: 'Unknown Resource-Priority',
            420: 'Bad Extension',
            421: 'Extension Required',
            422: 'Session Interval Too Small',
            423: 'Interval Too Brief',
            428: 'Use Identity Header',
            429: 'Provide Referrer Identity',
            430: 'Flow Failed',
            433: 'Anonymity Disallowed',
            436: 'Bad Identity-Info',
            437: 'Unsupported Certificate',
            438: 'Invalid Identity Header',
            439: 'First Hop Lacks Outbound Support',
            440: 'Max-Breadth Exceeded',
            469: 'Bad Info Package',
            470: 'Consent Needed',
            478: 'Unresolvable Destination',
            480: 'Temporarily Unavailable',
            481: 'Call/Transaction Does Not Exist',
            482: 'Loop Detected',
            483: 'Too Many Hops',
            484: 'Address Incomplete',
            485: 'Ambiguous',
            486: 'Busy Here',
            487: 'Request Terminated',
            488: 'Not Acceptable Here',
            489: 'Bad Event',
            491: 'Request Pending',
            493: 'Undecipherable',
            494: 'Security Agreement Required',
            500: 'Internal Server Error',
            501: 'Not Implemented',
            502: 'Bad Gateway',
            503: 'Service Unavailable',
            504: 'Server Time-out',
            505: 'Version Not Supported',
            513: 'Message Too Large',
            580: 'Precondition Failure',
            600: 'Busy Everywhere',
            603: 'Decline',
            604: 'Does Not Exist Anywhere',
            606: 'Not Acceptable'
          },

          /* SIP Option Tags
                   * DOC: http://www.iana.org/assignments/sip-parameters/sip-parameters.xhtml#sip-parameters-4
                   */
          OPTION_TAGS: {
            '100rel': true,
            199: true,
            answermode: true,
            'early-session': true,
            eventlist: true,
            explicitsub: true,
            'from-change': true,
            'geolocation-http': true,
            'geolocation-sip': true,
            gin: true,
            gruu: true,
            histinfo: true,
            ice: true,
            join: true,
            'multiple-refer': true,
            norefersub: true,
            nosub: true,
            outbound: true,
            path: true,
            policy: true,
            precondition: true,
            pref: true,
            privacy: true,
            'recipient-list-invite': true,
            'recipient-list-message': true,
            'recipient-list-subscribe': true,
            replaces: true,
            'resource-priority': true,
            'sdp-anat': true,
            'sec-agree': true,
            tdialog: true,
            timer: true,
            uui: true
          }
        };
      };

    }, {}], 5: [function (require, module, exports) {
      "use strict";

      /**
       * @fileoverview In-Dialog Request Sender
       */

      /**
       * @augments SIP.Dialog
       * @class Class creating an In-dialog request sender.
       * @param {SIP.Dialog} dialog
       * @param {Object} applicant
       * @param {SIP.OutgoingRequest} request
       */
      /**
       * @fileoverview in-Dialog Request Sender
       */

      module.exports = function (SIP) {
        var RequestSender;

        RequestSender = function (dialog, applicant, request) {

          this.dialog = dialog;
          this.applicant = applicant;
          this.request = request;

          this.reattempt = false;
          this.reattemptTimer = null;
        };

        RequestSender.prototype = {
          send: function () {
            var self = this,
              request_sender = new SIP.RequestSender(this, this.dialog.owner.ua);

            request_sender.send();

            if (this.request.method === SIP.C.INVITE && request_sender.clientTransaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {
              this.dialog.uac_pending_reply = true;
              request_sender.clientTransaction.on('stateChanged', function stateChanged() {
                if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||
                  this.state === SIP.Transactions.C.STATUS_COMPLETED ||
                  this.state === SIP.Transactions.C.STATUS_TERMINATED) {

                  this.removeListener('stateChanged', stateChanged);
                  self.dialog.uac_pending_reply = false;

                  if (self.dialog.uas_pending_reply === false) {
                    self.dialog.owner.onReadyToReinvite();
                  }
                }
              });
            }
          },

          onRequestTimeout: function () {
            this.applicant.onRequestTimeout();
          },

          onTransportError: function () {
            this.applicant.onTransportError();
          },

          receiveResponse: function (response) {
            var self = this;

            if (response.status_code === 408 || response.status_code === 481) {
              this.applicant.onDialogError(response);
            } else if (response.method === SIP.C.INVITE && response.status_code === 491) {
              if (this.reattempt) {
                this.applicant.receiveResponse(response);
              } else {
                this.request.cseq.value = this.dialog.local_seqnum += 1;
                this.reattemptTimer = SIP.Timers.setTimeout(
                  function () {
                    if (self.applicant.owner.status !== SIP.Session.C.STATUS_TERMINATED) {
                      self.reattempt = true;
                      self.request_sender.send();
                    }
                  },
                  this.getReattemptTimeout()
                );
              }
            } else {
              this.applicant.receiveResponse(response);
            }
          }
        };

        return RequestSender;
      };

    }, {}], 6: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP Dialog
       */

      /**
       * @augments SIP
       * @class Class creating a SIP dialog.
       * @param {SIP.RTCSession} owner
       * @param {SIP.IncomingRequest|SIP.IncomingResponse} message
       * @param {Enum} type UAC / UAS
       * @param {Enum} state SIP.Dialog.C.STATUS_EARLY / SIP.Dialog.C.STATUS_CONFIRMED
       */
      module.exports = function (SIP) {

        var RequestSender = require('./Dialog/RequestSender')(SIP);

        var Dialog,
          C = {
            STATUS_EARLY: 1,
            STATUS_CONFIRMED: 2
          };

        Dialog = function (owner, message, type, state) {
          var contact;

          this.uac_pending_reply = false;
          this.uas_pending_reply = false;

          if (!message.hasHeader('contact')) {
            return {
              error: 'unable to create a Dialog without Contact header field'
            };
          }

          if (message instanceof SIP.IncomingResponse) {
            state = (message.status_code < 200) ? C.STATUS_EARLY : C.STATUS_CONFIRMED;
          } else {
            state = state || C.STATUS_CONFIRMED;
          }

          contact = message.parseHeader('contact');

          if (type === 'UAS') {
            this.id = {
              call_id: message.call_id,
              local_tag: message.to_tag,
              remote_tag: message.from_tag,
              toString: function () {
                return this.call_id + this.local_tag + this.remote_tag;
              }
            };
            this.state = state;
            this.remote_seqnum = message.cseq;
            this.local_uri = message.parseHeader('to').uri;
            this.remote_uri = message.parseHeader('from').uri;
            this.remote_target = contact.uri;
            this.route_set = message.getHeaders('record-route');
            this.invite_seqnum = message.cseq;
            this.local_seqnum = message.cseq;
          }
          else if (type === 'UAC') {
            this.id = {
              call_id: message.call_id,
              local_tag: message.from_tag,
              remote_tag: message.to_tag,
              toString: function () {
                return this.call_id + this.local_tag + this.remote_tag;
              }
            };
            this.state = state;
            this.invite_seqnum = message.cseq;
            this.local_seqnum = message.cseq;
            this.local_uri = message.parseHeader('from').uri;
            this.pracked = [];
            this.remote_uri = message.parseHeader('to').uri;
            this.remote_target = contact.uri;
            this.route_set = message.getHeaders('record-route').reverse();

            if (this.state === C.STATUS_EARLY && (!owner.hasOffer)) {
              this.mediaHandler = owner.mediaHandlerFactory(owner);
            }
          }

          this.logger = owner.ua.getLogger('sip.dialog', this.id.toString());
          this.owner = owner;
          owner.ua.dialogs[this.id.toString()] = this;
          this.logger.log('new ' + type + ' dialog created with status ' + (this.state === C.STATUS_EARLY ? 'EARLY' : 'CONFIRMED'));
          owner.emit('dialog', this);
        };

        Dialog.prototype = {
          /**
           * @param {SIP.IncomingMessage} message
           * @param {Enum} UAC/UAS
           */
          update: function (message, type) {
            this.state = C.STATUS_CONFIRMED;

            this.logger.log('dialog ' + this.id.toString() + '  changed to CONFIRMED state');

            if (type === 'UAC') {
              this.route_set = message.getHeaders('record-route').reverse();
            }
          },

          terminate: function () {
            this.logger.log('dialog ' + this.id.toString() + ' deleted');
            if (this.mediaHandler && this.state !== C.STATUS_CONFIRMED) {
              this.mediaHandler.peerConnection.close();
            }
            delete this.owner.ua.dialogs[this.id.toString()];
          },

          /**
           * @param {String} method request method
           * @param {Object} extraHeaders extra headers
           * @returns {SIP.OutgoingRequest}
           */

          createRequest: function (method, extraHeaders, body) {
            var cseq, request;
            extraHeaders = (extraHeaders || []).slice();

            if (!this.local_seqnum) { this.local_seqnum = Math.floor(Math.random() * 10000); }

            cseq = (method === SIP.C.CANCEL || method === SIP.C.ACK) ? this.invite_seqnum : this.local_seqnum += 1;

            request = new SIP.OutgoingRequest(
              method,
              this.remote_target,
              this.owner.ua, {
                'cseq': cseq,
                'call_id': this.id.call_id,
                'from_uri': this.local_uri,
                'from_tag': this.id.local_tag,
                'to_uri': this.remote_uri,
                'to_tag': this.id.remote_tag,
                'route_set': this.route_set
              }, extraHeaders, body);

            request.dialog = this;

            return request;
          },

          /**
           * @param {SIP.IncomingRequest} request
           * @returns {Boolean}
           */

          checkInDialogRequest: function (request) {
            var self = this;

            if (!this.remote_seqnum) {
              this.remote_seqnum = request.cseq;
            } else if (request.cseq < this.remote_seqnum) {
              if (request.method !== SIP.C.ACK) {
                request.reply(500);
              }
              if (request.cseq === this.invite_seqnum) {
                return true;
              }
              return false;
            } else if (request.cseq > this.remote_seqnum) {
              this.remote_seqnum = request.cseq;
            }

            switch (request.method) {
              case SIP.C.INVITE:
                if (this.uac_pending_reply === true) {
                  request.reply(491);
                } else if (this.uas_pending_reply === true) {
                  var retryAfter = (Math.random() * 10 | 0) + 1;
                  request.reply(500, null, ['Retry-After:' + retryAfter]);
                  return false;
                } else {
                  this.uas_pending_reply = true;
                  request.server_transaction.on('stateChanged', function stateChanged() {
                    if (this.state === SIP.Transactions.C.STATUS_ACCEPTED ||
                      this.state === SIP.Transactions.C.STATUS_COMPLETED ||
                      this.state === SIP.Transactions.C.STATUS_TERMINATED) {

                      this.removeListener('stateChanged', stateChanged);
                      self.uas_pending_reply = false;

                      if (self.uac_pending_reply === false) {
                        self.owner.onReadyToReinvite();
                      }
                    }
                  });
                }

                if (request.hasHeader('contact')) {
                  request.server_transaction.on('stateChanged', function () {
                    if (this.state === SIP.Transactions.C.STATUS_ACCEPTED) {
                      self.remote_target = request.parseHeader('contact').uri;
                    }
                  });
                }
                break;
              case SIP.C.NOTIFY:
                if (request.hasHeader('contact')) {
                  request.server_transaction.on('stateChanged', function () {
                    if (this.state === SIP.Transactions.C.STATUS_COMPLETED) {
                      self.remote_target = request.parseHeader('contact').uri;
                    }
                  });
                }
                break;
            }

            return true;
          },

          sendRequest: function (applicant, method, options) {
            options = options || {};

            var extraHeaders = (options.extraHeaders || []).slice();

            var body = null;
            if (options.body) {
              if (options.body.body) {
                body = options.body;
              } else {
                body = {};
                body.body = options.body;
                if (options.contentType) {
                  body.contentType = options.contentType;
                }
              }
            }

            var request = this.createRequest(method, extraHeaders, body),
              request_sender = new RequestSender(this, applicant, request);

            request_sender.send();

            return request;
          },

          /**
           * @param {SIP.IncomingRequest} request
           */
          receiveRequest: function (request) {
            if (!this.checkInDialogRequest(request)) {
              return;
            }

            this.owner.receiveRequest(request);
          }
        };

        Dialog.C = C;
        SIP.Dialog = Dialog;
      };

    }, { "./Dialog/RequestSender": 5 }], 7: [function (require, module, exports) {
      "use strict";

      /**
       * @fileoverview SIP Digest Authentication
       */

      /**
       * SIP Digest Authentication.
       * @augments SIP.
       * @function Digest Authentication
       * @param {SIP.UA} ua
       */
      module.exports = function (Utils) {
        var DigestAuthentication;

        DigestAuthentication = function (ua) {
          this.logger = ua.getLogger('sipjs.digestauthentication');
          this.username = ua.configuration.authorizationUser;
          this.password = ua.configuration.password;
          this.cnonce = null;
          this.nc = 0;
          this.ncHex = '00000000';
          this.response = null;
        };


        /**
         * Performs Digest authentication given a SIP request and the challenge
         * received in a response to that request.
         * Returns true if credentials were successfully generated, false otherwise.
         *
         * @param {SIP.OutgoingRequest} request
         * @param {Object} challenge
         */
        DigestAuthentication.prototype.authenticate = function (request, challenge) {

          this.algorithm = challenge.algorithm;
          this.realm = challenge.realm;
          this.nonce = challenge.nonce;
          this.opaque = challenge.opaque;
          this.stale = challenge.stale;

          if (this.algorithm) {
            if (this.algorithm !== 'MD5') {
              this.logger.warn('challenge with Digest algorithm different than "MD5", authentication aborted');
              return false;
            }
          } else {
            this.algorithm = 'MD5';
          }

          if (!this.realm) {
            this.logger.warn('challenge without Digest realm, authentication aborted');
            return false;
          }

          if (!this.nonce) {
            this.logger.warn('challenge without Digest nonce, authentication aborted');
            return false;
          }

          if (challenge.qop) {
            if (challenge.qop.indexOf('auth') > -1) {
              this.qop = 'auth';
            } else if (challenge.qop.indexOf('auth-int') > -1) {
              this.qop = 'auth-int';
            } else {
              this.logger.warn('challenge without Digest qop different than "auth" or "auth-int", authentication aborted');
              return false;
            }
          } else {
            this.qop = null;
          }


          this.method = request.method;
          this.uri = request.ruri;
          this.cnonce = Utils.createRandomToken(12);
          this.nc += 1;
          this.updateNcHex();

          if (this.nc === 4294967296) {
            this.nc = 1;
            this.ncHex = '00000001';
          }

          this.calculateResponse();

          return true;
        };


        /**
         * Generate Digest 'response' value.
         * @private
         */
        DigestAuthentication.prototype.calculateResponse = function () {
          var ha1, ha2;

          ha1 = Utils.calculateMD5(this.username + ":" + this.realm + ":" + this.password);

          if (this.qop === 'auth') {
            ha2 = Utils.calculateMD5(this.method + ":" + this.uri);
            this.response = Utils.calculateMD5(ha1 + ":" + this.nonce + ":" + this.ncHex + ":" + this.cnonce + ":auth:" + ha2);

          } else if (this.qop === 'auth-int') {
            ha2 = Utils.calculateMD5(this.method + ":" + this.uri + ":" + Utils.calculateMD5(this.body ? this.body : ""));
            this.response = Utils.calculateMD5(ha1 + ":" + this.nonce + ":" + this.ncHex + ":" + this.cnonce + ":auth-int:" + ha2);

          } else if (this.qop === null) {
            ha2 = Utils.calculateMD5(this.method + ":" + this.uri);
            this.response = Utils.calculateMD5(ha1 + ":" + this.nonce + ":" + ha2);
          }
        };


        /**
         * Return the Proxy-Authorization or WWW-Authorization header value.
         */
        DigestAuthentication.prototype.toString = function () {
          var auth_params = [];

          if (!this.response) {
            throw new Error('response field does not exist, cannot generate Authorization header');
          }

          auth_params.push('algorithm=' + this.algorithm);
          auth_params.push('username="' + this.username + '"');
          auth_params.push('realm="' + this.realm + '"');
          auth_params.push('nonce="' + this.nonce + '"');
          auth_params.push('uri="' + this.uri + '"');
          auth_params.push('response="' + this.response + '"');
          if (this.opaque) {
            auth_params.push('opaque="' + this.opaque + '"');
          }
          if (this.qop) {
            auth_params.push('qop=' + this.qop);
            auth_params.push('cnonce="' + this.cnonce + '"');
            auth_params.push('nc=' + this.ncHex);
          }

          return 'Digest ' + auth_params.join(', ');
        };


        /**
         * Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.
         * @private
         */
        DigestAuthentication.prototype.updateNcHex = function () {
          var hex = Number(this.nc).toString(16);
          this.ncHex = '00000000'.substr(0, 8 - hex.length) + hex;
        };

        return DigestAuthentication;
      };

    }, {}], 8: [function (require, module, exports) {
      "use strict";
      var NodeEventEmitter = require('events').EventEmitter;

      module.exports = function (console) {


        function EventEmitter() {
          NodeEventEmitter.call(this);
        }

        EventEmitter.prototype = Object.create(NodeEventEmitter.prototype, {
          constructor: {
            value: EventEmitter,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });

        EventEmitter.prototype.off = function off(eventName, listener) {
          var warning = '';
          warning += 'SIP.EventEmitter#off is deprecated and may be removed in future SIP.js versions.\n';
          warning += 'Please use removeListener or removeAllListeners instead.\n';
          warning += 'See here for more details:\n';
          warning += 'http://nodejs.org/api/events.html#events_emitter_removelistener_event_listener';
          console.warn(warning);

          if (arguments.length < 2) {
            return this.removeAllListeners.apply(this, arguments);
          } else {
            return this.removeListener(eventName, listener);
          }
        };

        return EventEmitter;

      };

    }, { "events": 1 }], 9: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview Exceptions
       */

      /**
       * SIP Exceptions.
       * @augments SIP
       */
      module.exports = {
        ConfigurationError: (function () {
          var exception = function (parameter, value) {
            this.code = 1;
            this.name = 'CONFIGURATION_ERROR';
            this.parameter = parameter;
            this.value = value;
            this.message = (!this.value) ? 'Missing parameter: ' + this.parameter : 'Invalid value ' + JSON.stringify(this.value) + ' for parameter "' + this.parameter + '"';
          };
          exception.prototype = new Error();
          return exception;
        }()),

        InvalidStateError: (function () {
          var exception = function (status) {
            this.code = 2;
            this.name = 'INVALID_STATE_ERROR';
            this.status = status;
            this.message = 'Invalid status: ' + status;
          };
          exception.prototype = new Error();
          return exception;
        }()),

        NotSupportedError: (function () {
          var exception = function (message) {
            this.code = 3;
            this.name = 'NOT_SUPPORTED_ERROR';
            this.message = message;
          };
          exception.prototype = new Error();
          return exception;
        }()),

        GetDescriptionError: (function () {
          var exception = function (message) {
            this.code = 4;
            this.name = 'GET_DESCRIPTION_ERROR';
            this.message = message;
          };
          exception.prototype = new Error();
          return exception;
        }())
      };

    }, {}], 10: [function (require, module, exports) {
      "use strict";
      var Grammar = require('./Grammar/dist/Grammar');

      module.exports = function (SIP) {

        return {
          parse: function parseCustom(input, startRule) {
            var options = { startRule: startRule, SIP: SIP };
            try {
              Grammar.parse(input, options);
            } catch (e) {
              options.data = -1;
            }
            return options.data;
          }
        };

      };

    }, { "./Grammar/dist/Grammar": 11 }], 11: [function (require, module, exports) {
      module.exports = (function () {
        /*
               * Generated by PEG.js 0.8.0.
               *
               * http://pegjs.majda.cz/
               */

        function peg$subclass(child, parent) {
          function ctor() { this.constructor = child; }
          ctor.prototype = parent.prototype;
          child.prototype = new ctor();
        }

        function SyntaxError(message, expected, found, offset, line, column) {
          this.message = message;
          this.expected = expected;
          this.found = found;
          this.offset = offset;
          this.line = line;
          this.column = column;

          this.name = "SyntaxError";
        }

        peg$subclass(SyntaxError, Error);

        function parse(input) {
          var options = arguments.length > 1 ? arguments[1] : {},

            peg$FAILED = {},

            peg$startRuleIndices = { Contact: 118, Name_Addr_Header: 155, Record_Route: 175, Request_Response: 81, SIP_URI: 45, Subscription_State: 185, Supported: 190, Require: 181, Via: 193, absoluteURI: 84, Call_ID: 117, Content_Disposition: 129, Content_Length: 134, Content_Type: 135, CSeq: 145, displayName: 121, Event: 148, From: 150, host: 52, Max_Forwards: 153, Min_SE: 212, Proxy_Authenticate: 156, quoted_string: 40, Refer_To: 177, Replaces: 178, Session_Expires: 209, stun_URI: 216, To: 191, turn_URI: 223, uuid: 226, WWW_Authenticate: 208, challenge: 157 },
            peg$startRuleIndex = 118,

            peg$consts = [
              "\r\n",
              { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
              /^[0-9]/,
              { type: "class", value: "[0-9]", description: "[0-9]" },
              /^[a-zA-Z]/,
              { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
              /^[0-9a-fA-F]/,
              { type: "class", value: "[0-9a-fA-F]", description: "[0-9a-fA-F]" },
              /^[\0-\xFF]/,
              { type: "class", value: "[\\0-\\xFF]", description: "[\\0-\\xFF]" },
              /^["]/,
              { type: "class", value: "[\"]", description: "[\"]" },
              " ",
              { type: "literal", value: " ", description: "\" \"" },
              "\t",
              { type: "literal", value: "\t", description: "\"\\t\"" },
              /^[a-zA-Z0-9]/,
              { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
              ";",
              { type: "literal", value: ";", description: "\";\"" },
              "/",
              { type: "literal", value: "/", description: "\"/\"" },
              "?",
              { type: "literal", value: "?", description: "\"?\"" },
              ":",
              { type: "literal", value: ":", description: "\":\"" },
              "@",
              { type: "literal", value: "@", description: "\"@\"" },
              "&",
              { type: "literal", value: "&", description: "\"&\"" },
              "=",
              { type: "literal", value: "=", description: "\"=\"" },
              "+",
              { type: "literal", value: "+", description: "\"+\"" },
              "$",
              { type: "literal", value: "$", description: "\"$\"" },
              ",",
              { type: "literal", value: ",", description: "\",\"" },
              "-",
              { type: "literal", value: "-", description: "\"-\"" },
              "_",
              { type: "literal", value: "_", description: "\"_\"" },
              ".",
              { type: "literal", value: ".", description: "\".\"" },
              "!",
              { type: "literal", value: "!", description: "\"!\"" },
              "~",
              { type: "literal", value: "~", description: "\"~\"" },
              "*",
              { type: "literal", value: "*", description: "\"*\"" },
              "'",
              { type: "literal", value: "'", description: "\"'\"" },
              "(",
              { type: "literal", value: "(", description: "\"(\"" },
              ")",
              { type: "literal", value: ")", description: "\")\"" },
              peg$FAILED,
              "%",
              { type: "literal", value: "%", description: "\"%\"" },
              null,
              [],
              function () { return " "; },
              function () { return ':'; },
              /^[!-~]/,
              { type: "class", value: "[!-~]", description: "[!-~]" },
              /^[\x80-\uFFFF]/,
              { type: "class", value: "[\\x80-\\uFFFF]", description: "[\\x80-\\uFFFF]" },
              /^[\x80-\xBF]/,
              { type: "class", value: "[\\x80-\\xBF]", description: "[\\x80-\\xBF]" },
              /^[a-f]/,
              { type: "class", value: "[a-f]", description: "[a-f]" },
              "`",
              { type: "literal", value: "`", description: "\"`\"" },
              "<",
              { type: "literal", value: "<", description: "\"<\"" },
              ">",
              { type: "literal", value: ">", description: "\">\"" },
              "\\",
              { type: "literal", value: "\\", description: "\"\\\\\"" },
              "[",
              { type: "literal", value: "[", description: "\"[\"" },
              "]",
              { type: "literal", value: "]", description: "\"]\"" },
              "{",
              { type: "literal", value: "{", description: "\"{\"" },
              "}",
              { type: "literal", value: "}", description: "\"}\"" },
              function () { return "*"; },
              function () { return "/"; },
              function () { return "="; },
              function () { return "("; },
              function () { return ")"; },
              function () { return ">"; },
              function () { return "<"; },
              function () { return ","; },
              function () { return ";"; },
              function () { return ":"; },
              function () { return "\""; },
              /^[!-']/,
              { type: "class", value: "[!-']", description: "[!-']" },
              /^[*-[]/,
              { type: "class", value: "[*-[]", description: "[*-[]" },
              /^[\]-~]/,
              { type: "class", value: "[\\]-~]", description: "[\\]-~]" },
              function (contents) {
                return contents;
              },
              /^[#-[]/,
              { type: "class", value: "[#-[]", description: "[#-[]" },
              /^[\0-\t]/,
              { type: "class", value: "[\\0-\\t]", description: "[\\0-\\t]" },
              /^[\x0B-\f]/,
              { type: "class", value: "[\\x0B-\\f]", description: "[\\x0B-\\f]" },
              /^[\x0E-]/,
              { type: "class", value: "[\\x0E-]", description: "[\\x0E-]" },
              function () {
                options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port);
                delete options.data.scheme;
                delete options.data.user;
                delete options.data.host;
                delete options.data.host_type;
                delete options.data.port;
              },
              function () {
                options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);
                delete options.data.scheme;
                delete options.data.user;
                delete options.data.host;
                delete options.data.host_type;
                delete options.data.port;
                delete options.data.uri_params;

                if (options.startRule === 'SIP_URI') { options.data = options.data.uri; }
              },
              "sips",
              { type: "literal", value: "sips", description: "\"sips\"" },
              "sip",
              { type: "literal", value: "sip", description: "\"sip\"" },
              function (uri_scheme) {
                options.data.scheme = uri_scheme;
              },
              function () {
                options.data.user = decodeURIComponent(text().slice(0, -1));
              },
              function () {
                options.data.password = text();
              },
              function () {
                options.data.host = text();
                return options.data.host;
              },
              function () {
                options.data.host_type = 'domain';
                return text();
              },
              /^[a-zA-Z0-9_\-]/,
              { type: "class", value: "[a-zA-Z0-9_\\-]", description: "[a-zA-Z0-9_\\-]" },
              /^[a-zA-Z0-9\-]/,
              { type: "class", value: "[a-zA-Z0-9\\-]", description: "[a-zA-Z0-9\\-]" },
              function () {
                options.data.host_type = 'IPv6';
                return text();
              },
              "::",
              { type: "literal", value: "::", description: "\"::\"" },
              function () {
                options.data.host_type = 'IPv6';
                return text();
              },
              function () {
                options.data.host_type = 'IPv4';
                return text();
              },
              "25",
              { type: "literal", value: "25", description: "\"25\"" },
              /^[0-5]/,
              { type: "class", value: "[0-5]", description: "[0-5]" },
              "2",
              { type: "literal", value: "2", description: "\"2\"" },
              /^[0-4]/,
              { type: "class", value: "[0-4]", description: "[0-4]" },
              "1",
              { type: "literal", value: "1", description: "\"1\"" },
              /^[1-9]/,
              { type: "class", value: "[1-9]", description: "[1-9]" },
              function (port) {
                port = parseInt(port.join(''));
                options.data.port = port;
                return port;
              },
              "transport=",
              { type: "literal", value: "transport=", description: "\"transport=\"" },
              "udp",
              { type: "literal", value: "udp", description: "\"udp\"" },
              "tcp",
              { type: "literal", value: "tcp", description: "\"tcp\"" },
              "sctp",
              { type: "literal", value: "sctp", description: "\"sctp\"" },
              "tls",
              { type: "literal", value: "tls", description: "\"tls\"" },
              function (transport) {
                if (!options.data.uri_params) options.data.uri_params = {};
                options.data.uri_params['transport'] = transport.toLowerCase();
              },
              "user=",
              { type: "literal", value: "user=", description: "\"user=\"" },
              "phone",
              { type: "literal", value: "phone", description: "\"phone\"" },
              "ip",
              { type: "literal", value: "ip", description: "\"ip\"" },
              function (user) {
                if (!options.data.uri_params) options.data.uri_params = {};
                options.data.uri_params['user'] = user.toLowerCase();
              },
              "method=",
              { type: "literal", value: "method=", description: "\"method=\"" },
              function (method) {
                if (!options.data.uri_params) options.data.uri_params = {};
                options.data.uri_params['method'] = method;
              },
              "ttl=",
              { type: "literal", value: "ttl=", description: "\"ttl=\"" },
              function (ttl) {
                if (!options.data.params) options.data.params = {};
                options.data.params['ttl'] = ttl;
              },
              "maddr=",
              { type: "literal", value: "maddr=", description: "\"maddr=\"" },
              function (maddr) {
                if (!options.data.uri_params) options.data.uri_params = {};
                options.data.uri_params['maddr'] = maddr;
              },
              "lr",
              { type: "literal", value: "lr", description: "\"lr\"" },
              function () {
                if (!options.data.uri_params) options.data.uri_params = {};
                options.data.uri_params['lr'] = undefined;
              },
              function (param, value) {
                if (!options.data.uri_params) options.data.uri_params = {};
                if (value === null) {
                  value = undefined;
                }
                else {
                  value = value[1];
                }
                options.data.uri_params[param.toLowerCase()] = value && value.toLowerCase();
              },
              function (hname, hvalue) {
                hname = hname.join('').toLowerCase();
                hvalue = hvalue.join('');
                if (!options.data.uri_headers) options.data.uri_headers = {};
                if (!options.data.uri_headers[hname]) {
                  options.data.uri_headers[hname] = [hvalue];
                } else {
                  options.data.uri_headers[hname].push(hvalue);
                }
              },
              function () {
                if (options.startRule === 'Refer_To') {
                  options.data.uri = new options.SIP.URI(options.data.scheme, options.data.user, options.data.host, options.data.port, options.data.uri_params, options.data.uri_headers);
                  delete options.data.scheme;
                  delete options.data.user;
                  delete options.data.host;
                  delete options.data.host_type;
                  delete options.data.port;
                  delete options.data.uri_params;
                }
              },
              "//",
              { type: "literal", value: "//", description: "\"//\"" },
              function () {
                options.data.scheme = text();
              },
              { type: "literal", value: "SIP", description: "\"SIP\"" },
              function () {
                options.data.sip_version = text();
              },
              "INVITE",
              { type: "literal", value: "INVITE", description: "\"INVITE\"" },
              "ACK",
              { type: "literal", value: "ACK", description: "\"ACK\"" },
              "VXACH",
              { type: "literal", value: "VXACH", description: "\"VXACH\"" },
              "OPTIONS",
              { type: "literal", value: "OPTIONS", description: "\"OPTIONS\"" },
              "BYE",
              { type: "literal", value: "BYE", description: "\"BYE\"" },
              "CANCEL",
              { type: "literal", value: "CANCEL", description: "\"CANCEL\"" },
              "REGISTER",
              { type: "literal", value: "REGISTER", description: "\"REGISTER\"" },
              "SUBSCRIBE",
              { type: "literal", value: "SUBSCRIBE", description: "\"SUBSCRIBE\"" },
              "NOTIFY",
              { type: "literal", value: "NOTIFY", description: "\"NOTIFY\"" },
              "REFER",
              { type: "literal", value: "REFER", description: "\"REFER\"" },
              function () {

                options.data.method = text();
                return options.data.method;
              },
              function (status_code) {
                options.data.status_code = parseInt(status_code.join(''));
              },
              function () {
                options.data.reason_phrase = text();
              },
              function () {
                options.data = text();
              },
              function () {
                var idx, length;
                length = options.data.multi_header.length;
                for (idx = 0; idx < length; idx++) {
                  if (options.data.multi_header[idx].parsed === null) {
                    options.data = null;
                    break;
                  }
                }
                if (options.data !== null) {
                  options.data = options.data.multi_header;
                } else {
                  options.data = -1;
                }
              },
              function () {
                var header;
                if (!options.data.multi_header) options.data.multi_header = [];
                try {
                  header = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
                  delete options.data.uri;
                  delete options.data.displayName;
                  delete options.data.params;
                } catch (e) {
                  header = null;
                }
                options.data.multi_header.push({
                  'position': peg$currPos,
                  'offset': offset(),
                  'parsed': header
                });
              },
              function (displayName) {
                displayName = text().trim();
                if (displayName[0] === '\"') {
                  displayName = displayName.substring(1, displayName.length - 1);
                }
                options.data.displayName = displayName;
              },
              "q",
              { type: "literal", value: "q", description: "\"q\"" },
              function (q) {
                if (!options.data.params) options.data.params = {};
                options.data.params['q'] = q;
              },
              "expires",
              { type: "literal", value: "expires", description: "\"expires\"" },
              function (expires) {
                if (!options.data.params) options.data.params = {};
                options.data.params['expires'] = expires;
              },
              function (delta_seconds) {
                return parseInt(delta_seconds.join(''));
              },
              "0",
              { type: "literal", value: "0", description: "\"0\"" },
              function () {
                return parseFloat(text());
              },
              function (param, value) {
                if (!options.data.params) options.data.params = {};
                if (value === null) {
                  value = undefined;
                }
                else {
                  value = value[1];
                }
                options.data.params[param.toLowerCase()] = value;
              },
              "render",
              { type: "literal", value: "render", description: "\"render\"" },
              "session",
              { type: "literal", value: "session", description: "\"session\"" },
              "icon",
              { type: "literal", value: "icon", description: "\"icon\"" },
              "alert",
              { type: "literal", value: "alert", description: "\"alert\"" },
              function () {
                if (options.startRule === 'Content_Disposition') {
                  options.data.type = text().toLowerCase();
                }
              },
              "handling",
              { type: "literal", value: "handling", description: "\"handling\"" },
              "optional",
              { type: "literal", value: "optional", description: "\"optional\"" },
              "required",
              { type: "literal", value: "required", description: "\"required\"" },
              function (length) {
                options.data = parseInt(length.join(''));
              },
              function () {
                options.data = text();
              },
              "text",
              { type: "literal", value: "text", description: "\"text\"" },
              "image",
              { type: "literal", value: "image", description: "\"image\"" },
              "audio",
              { type: "literal", value: "audio", description: "\"audio\"" },
              "video",
              { type: "literal", value: "video", description: "\"video\"" },
              "application",
              { type: "literal", value: "application", description: "\"application\"" },
              "message",
              { type: "literal", value: "message", description: "\"message\"" },
              "multipart",
              { type: "literal", value: "multipart", description: "\"multipart\"" },
              "x-",
              { type: "literal", value: "x-", description: "\"x-\"" },
              function (cseq_value) {
                options.data.value = parseInt(cseq_value.join(''));
              },
              function (expires) { options.data = expires; },
              function (event_type) {
                options.data.event = event_type.toLowerCase();
              },
              function () {
                var tag = options.data.tag;
                options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
                if (tag) { options.data.setParam('tag', tag) }
              },
              "tag",
              { type: "literal", value: "tag", description: "\"tag\"" },
              function (tag) { options.data.tag = tag; },
              function (forwards) {
                options.data = parseInt(forwards.join(''));
              },
              function (min_expires) { options.data = min_expires; },
              function () {
                options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
              },
              "digest",
              { type: "literal", value: "Digest", description: "\"Digest\"" },
              "realm",
              { type: "literal", value: "realm", description: "\"realm\"" },
              function (realm) { options.data.realm = realm; },
              "domain",
              { type: "literal", value: "domain", description: "\"domain\"" },
              "nonce",
              { type: "literal", value: "nonce", description: "\"nonce\"" },
              function (nonce) { options.data.nonce = nonce; },
              "opaque",
              { type: "literal", value: "opaque", description: "\"opaque\"" },
              function (opaque) { options.data.opaque = opaque; },
              "stale",
              { type: "literal", value: "stale", description: "\"stale\"" },
              "true",
              { type: "literal", value: "true", description: "\"true\"" },
              function () { options.data.stale = true; },
              "false",
              { type: "literal", value: "false", description: "\"false\"" },
              function () { options.data.stale = false; },
              "algorithm",
              { type: "literal", value: "algorithm", description: "\"algorithm\"" },
              "md5",
              { type: "literal", value: "MD5", description: "\"MD5\"" },
              "md5-sess",
              { type: "literal", value: "MD5-sess", description: "\"MD5-sess\"" },
              function (algorithm) {
                options.data.algorithm = algorithm.toUpperCase();
              },
              "qop",
              { type: "literal", value: "qop", description: "\"qop\"" },
              "auth-int",
              { type: "literal", value: "auth-int", description: "\"auth-int\"" },
              "auth",
              { type: "literal", value: "auth", description: "\"auth\"" },
              function (qop_value) {
                options.data.qop || (options.data.qop = []);
                options.data.qop.push(qop_value.toLowerCase());
              },
              function (rack_value) {
                options.data.value = parseInt(rack_value.join(''));
              },
              function () {
                var idx, length;
                length = options.data.multi_header.length;
                for (idx = 0; idx < length; idx++) {
                  if (options.data.multi_header[idx].parsed === null) {
                    options.data = null;
                    break;
                  }
                }
                if (options.data !== null) {
                  options.data = options.data.multi_header;
                } else {
                  options.data = -1;
                }
              },
              function () {
                var header;
                if (!options.data.multi_header) options.data.multi_header = [];
                try {
                  header = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
                  delete options.data.uri;
                  delete options.data.displayName;
                  delete options.data.params;
                } catch (e) {
                  header = null;
                }
                options.data.multi_header.push({
                  'position': peg$currPos,
                  'offset': offset(),
                  'parsed': header
                });
              },
              function () {
                options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
              },
              function () {
                if (!(options.data.replaces_from_tag && options.data.replaces_to_tag)) {
                  options.data = -1;
                }
              },
              function () {
                options.data = {
                  call_id: options.data
                };
              },
              "from-tag",
              { type: "literal", value: "from-tag", description: "\"from-tag\"" },
              function (from_tag) {
                options.data.replaces_from_tag = from_tag;
              },
              "to-tag",
              { type: "literal", value: "to-tag", description: "\"to-tag\"" },
              function (to_tag) {
                options.data.replaces_to_tag = to_tag;
              },
              "early-only",
              { type: "literal", value: "early-only", description: "\"early-only\"" },
              function () {
                options.data.early_only = true;
              },
              function (r) { return r; },
              function (first, rest) { return list(first, rest); },
              function (value) {
                if (options.startRule === 'Require') {
                  options.data = value || [];
                }
              },
              function (rseq_value) {
                options.data.value = parseInt(rseq_value.join(''));
              },
              "active",
              { type: "literal", value: "active", description: "\"active\"" },
              "pending",
              { type: "literal", value: "pending", description: "\"pending\"" },
              "terminated",
              { type: "literal", value: "terminated", description: "\"terminated\"" },
              function () {
                options.data.state = text();
              },
              "reason",
              { type: "literal", value: "reason", description: "\"reason\"" },
              function (reason) {
                if (typeof reason !== 'undefined') options.data.reason = reason;
              },
              function (expires) {
                if (typeof expires !== 'undefined') options.data.expires = expires;
              },
              "retry_after",
              { type: "literal", value: "retry_after", description: "\"retry_after\"" },
              function (retry_after) {
                if (typeof retry_after !== 'undefined') options.data.retry_after = retry_after;
              },
              "deactivated",
              { type: "literal", value: "deactivated", description: "\"deactivated\"" },
              "probation",
              { type: "literal", value: "probation", description: "\"probation\"" },
              "rejected",
              { type: "literal", value: "rejected", description: "\"rejected\"" },
              "timeout",
              { type: "literal", value: "timeout", description: "\"timeout\"" },
              "giveup",
              { type: "literal", value: "giveup", description: "\"giveup\"" },
              "noresource",
              { type: "literal", value: "noresource", description: "\"noresource\"" },
              "invariant",
              { type: "literal", value: "invariant", description: "\"invariant\"" },
              function (value) {
                if (options.startRule === 'Supported') {
                  options.data = value || [];
                }
              },
              function () {
                var tag = options.data.tag;
                options.data = new options.SIP.NameAddrHeader(options.data.uri, options.data.displayName, options.data.params);
                if (tag) { options.data.setParam('tag', tag) }
              },
              "ttl",
              { type: "literal", value: "ttl", description: "\"ttl\"" },
              function (via_ttl_value) {
                options.data.ttl = via_ttl_value;
              },
              "maddr",
              { type: "literal", value: "maddr", description: "\"maddr\"" },
              function (via_maddr) {
                options.data.maddr = via_maddr;
              },
              "received",
              { type: "literal", value: "received", description: "\"received\"" },
              function (via_received) {
                options.data.received = via_received;
              },
              "branch",
              { type: "literal", value: "branch", description: "\"branch\"" },
              function (via_branch) {
                options.data.branch = via_branch;
              },
              "rport",
              { type: "literal", value: "rport", description: "\"rport\"" },
              function () {
                if (typeof response_port !== 'undefined')
                  options.data.rport = response_port.join('');
              },
              function (via_protocol) {
                options.data.protocol = via_protocol;
              },
              { type: "literal", value: "UDP", description: "\"UDP\"" },
              { type: "literal", value: "TCP", description: "\"TCP\"" },
              { type: "literal", value: "TLS", description: "\"TLS\"" },
              { type: "literal", value: "SCTP", description: "\"SCTP\"" },
              function (via_transport) {
                options.data.transport = via_transport;
              },
              function () {
                options.data.host = text();
              },
              function (via_sent_by_port) {
                options.data.port = parseInt(via_sent_by_port.join(''));
              },
              function (ttl) {
                return parseInt(ttl.join(''));
              },
              function (deltaSeconds) {
                if (options.startRule === 'Session_Expires') {
                  options.data.deltaSeconds = deltaSeconds;
                }
              },
              "refresher",
              { type: "literal", value: "refresher", description: "\"refresher\"" },
              "uas",
              { type: "literal", value: "uas", description: "\"uas\"" },
              "uac",
              { type: "literal", value: "uac", description: "\"uac\"" },
              function (endpoint) {
                if (options.startRule === 'Session_Expires') {
                  options.data.refresher = endpoint;
                }
              },
              function (deltaSeconds) {
                if (options.startRule === 'Min_SE') {
                  options.data = deltaSeconds;
                }
              },
              "stuns",
              { type: "literal", value: "stuns", description: "\"stuns\"" },
              "stun",
              { type: "literal", value: "stun", description: "\"stun\"" },
              function (scheme) {
                options.data.scheme = scheme;
              },
              function (host) {
                options.data.host = host;
              },
              "?transport=",
              { type: "literal", value: "?transport=", description: "\"?transport=\"" },
              "turns",
              { type: "literal", value: "turns", description: "\"turns\"" },
              "turn",
              { type: "literal", value: "turn", description: "\"turn\"" },
              function () {
                options.data.transport = transport;
              },
              function () {
                options.data = text();
              }
            ],

            peg$bytecode = [
              peg$decode(". \"\"2 3!"),
              peg$decode("0\"\"\"1!3#"),
              peg$decode("0$\"\"1!3%"),
              peg$decode("0&\"\"1!3'"),
              peg$decode("7'*# \"7("),
              peg$decode("0(\"\"1!3)"),
              peg$decode("0*\"\"1!3+"),
              peg$decode(".,\"\"2,3-"),
              peg$decode("..\"\"2.3/"),
              peg$decode("00\"\"1!31"),
              peg$decode(".2\"\"2233*\x89 \".4\"\"2435*} \".6\"\"2637*q \".8\"\"2839*e \".:\"\"2:3;*Y \".<\"\"2<3=*M \".>\"\"2>3?*A \".@\"\"2@3A*5 \".B\"\"2B3C*) \".D\"\"2D3E"),
              peg$decode("7)*# \"7,"),
              peg$decode(".F\"\"2F3G*} \".H\"\"2H3I*q \".J\"\"2J3K*e \".L\"\"2L3M*Y \".N\"\"2N3O*M \".P\"\"2P3Q*A \".R\"\"2R3S*5 \".T\"\"2T3U*) \".V\"\"2V3W"),
              peg$decode("!!.Y\"\"2Y3Z+7$7#+-%7#+#%'#%$## X$\"# X\"# X+! (%"),
              peg$decode("!! \\7$,#&7$\"+-$7 +#%'\"%$\"# X\"# X*# \" [+@$ \\7$+&$,#&7$\"\"\" X+'%4\"6]\" %$\"# X\"# X"),
              peg$decode("7.*# \" ["),
              peg$decode("! \\7'*# \"7(,)&7'*# \"7(\"+A$.8\"\"2839+1%7/+'%4#6^# %$## X$\"# X\"# X"),
              peg$decode("!! \\72+&$,#&72\"\"\" X+o$ \\! \\7.,#&7.\"+-$72+#%'\"%$\"# X\"# X,@&! \\7.,#&7.\"+-$72+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X+! (%"),
              peg$decode("0_\"\"1!3`*# \"73"),
              peg$decode("0a\"\"1!3b"),
              peg$decode("0c\"\"1!3d"),
              peg$decode("7!*) \"0e\"\"1!3f"),
              peg$decode("! \\7)*\x95 \".F\"\"2F3G*\x89 \".J\"\"2J3K*} \".L\"\"2L3M*q \".Y\"\"2Y3Z*e \".P\"\"2P3Q*Y \".H\"\"2H3I*M \".@\"\"2@3A*A \".g\"\"2g3h*5 \".R\"\"2R3S*) \".N\"\"2N3O+\x9E$,\x9B&7)*\x95 \".F\"\"2F3G*\x89 \".J\"\"2J3K*} \".L\"\"2L3M*q \".Y\"\"2Y3Z*e \".P\"\"2P3Q*Y \".H\"\"2H3I*M \".@\"\"2@3A*A \".g\"\"2g3h*5 \".R\"\"2R3S*) \".N\"\"2N3O\"\"\" X+! (%"),
              peg$decode("! \\7)*\x89 \".F\"\"2F3G*} \".L\"\"2L3M*q \".Y\"\"2Y3Z*e \".P\"\"2P3Q*Y \".H\"\"2H3I*M \".@\"\"2@3A*A \".g\"\"2g3h*5 \".R\"\"2R3S*) \".N\"\"2N3O+\x92$,\x8F&7)*\x89 \".F\"\"2F3G*} \".L\"\"2L3M*q \".Y\"\"2Y3Z*e \".P\"\"2P3Q*Y \".H\"\"2H3I*M \".@\"\"2@3A*A \".g\"\"2g3h*5 \".R\"\"2R3S*) \".N\"\"2N3O\"\"\" X+! (%"),
              peg$decode(".T\"\"2T3U*\xE3 \".V\"\"2V3W*\xD7 \".i\"\"2i3j*\xCB \".k\"\"2k3l*\xBF \".:\"\"2:3;*\xB3 \".D\"\"2D3E*\xA7 \".2\"\"2233*\x9B \".8\"\"2839*\x8F \".m\"\"2m3n*\x83 \"7&*} \".4\"\"2435*q \".o\"\"2o3p*e \".q\"\"2q3r*Y \".6\"\"2637*M \".>\"\"2>3?*A \".s\"\"2s3t*5 \".u\"\"2u3v*) \"7'*# \"7("),
              peg$decode("! \\7)*\u012B \".F\"\"2F3G*\u011F \".J\"\"2J3K*\u0113 \".L\"\"2L3M*\u0107 \".Y\"\"2Y3Z*\xFB \".P\"\"2P3Q*\xEF \".H\"\"2H3I*\xE3 \".@\"\"2@3A*\xD7 \".g\"\"2g3h*\xCB \".R\"\"2R3S*\xBF \".N\"\"2N3O*\xB3 \".T\"\"2T3U*\xA7 \".V\"\"2V3W*\x9B \".i\"\"2i3j*\x8F \".k\"\"2k3l*\x83 \".8\"\"2839*w \".m\"\"2m3n*k \"7&*e \".4\"\"2435*Y \".o\"\"2o3p*M \".q\"\"2q3r*A \".6\"\"2637*5 \".s\"\"2s3t*) \".u\"\"2u3v+\u0134$,\u0131&7)*\u012B \".F\"\"2F3G*\u011F \".J\"\"2J3K*\u0113 \".L\"\"2L3M*\u0107 \".Y\"\"2Y3Z*\xFB \".P\"\"2P3Q*\xEF \".H\"\"2H3I*\xE3 \".@\"\"2@3A*\xD7 \".g\"\"2g3h*\xCB \".R\"\"2R3S*\xBF \".N\"\"2N3O*\xB3 \".T\"\"2T3U*\xA7 \".V\"\"2V3W*\x9B \".i\"\"2i3j*\x8F \".k\"\"2k3l*\x83 \".8\"\"2839*w \".m\"\"2m3n*k \"7&*e \".4\"\"2435*Y \".o\"\"2o3p*M \".q\"\"2q3r*A \".6\"\"2637*5 \".s\"\"2s3t*) \".u\"\"2u3v\"\"\" X+! (%"),
              peg$decode("!7/+A$.P\"\"2P3Q+1%7/+'%4#6w# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.4\"\"2435+1%7/+'%4#6x# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.>\"\"2>3?+1%7/+'%4#6y# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.T\"\"2T3U+1%7/+'%4#6z# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.V\"\"2V3W+1%7/+'%4#6{# %$## X$\"# X\"# X"),
              peg$decode("!.k\"\"2k3l+1$7/+'%4\"6|\" %$\"# X\"# X"),
              peg$decode("!7/+7$.i\"\"2i3j+'%4\"6}\" %$\"# X\"# X"),
              peg$decode("!7/+A$.D\"\"2D3E+1%7/+'%4#6~# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.2\"\"2233+1%7/+'%4#6# %$## X$\"# X\"# X"),
              peg$decode("!7/+A$.8\"\"2839+1%7/+'%4#6\x80# %$## X$\"# X\"# X"),
              peg$decode("!7/+1$7&+'%4\"6\x81\" %$\"# X\"# X"),
              peg$decode("!7&+1$7/+'%4\"6\x81\" %$\"# X\"# X"),
              peg$decode("!7=+W$ \\7G*) \"7K*# \"7F,/&7G*) \"7K*# \"7F\"+-%7>+#%'#%$## X$\"# X\"# X"),
              peg$decode("0\x82\"\"1!3\x83*A \"0\x84\"\"1!3\x85*5 \"0\x86\"\"1!3\x87*) \"73*# \"7."),
              peg$decode("!!7/+U$7&+K% \\7J*# \"7K,)&7J*# \"7K\"+-%7&+#%'$%$$# X$## X$\"# X\"# X+! (%"),
              peg$decode("!7/+`$7&+V%! \\7J*# \"7K,)&7J*# \"7K\"+! (%+2%7&+(%4$6\x88$!!%$$# X$## X$\"# X\"# X"),
              peg$decode("7.*G \".L\"\"2L3M*; \"0\x89\"\"1!3\x8A*/ \"0\x86\"\"1!3\x87*# \"73"),
              peg$decode("!.m\"\"2m3n+K$0\x8B\"\"1!3\x8C*5 \"0\x8D\"\"1!3\x8E*) \"0\x8F\"\"1!3\x90+#%'\"%$\"# X\"# X"),
              peg$decode("!7N+Q$.8\"\"2839+A%7O*# \" [+1%7S+'%4$6\x91$ %$$# X$## X$\"# X\"# X"),
              peg$decode("!7N+k$.8\"\"2839+[%7O*# \" [+K%7S+A%7_+7%7l*# \" [+'%4&6\x92& %$&# X$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!/\x93\"\"1$3\x94*) \"/\x95\"\"1#3\x96+' 4!6\x97!! %"),
              peg$decode("!7P+b$!.8\"\"2839+-$7R+#%'\"%$\"# X\"# X*# \" [+7%.:\"\"2:3;+'%4#6\x98# %$## X$\"# X\"# X"),
              peg$decode(" \\7+*) \"7-*# \"7Q+2$,/&7+*) \"7-*# \"7Q\"\"\" X"),
              peg$decode(".<\"\"2<3=*q \".>\"\"2>3?*e \".@\"\"2@3A*Y \".B\"\"2B3C*M \".D\"\"2D3E*A \".2\"\"2233*5 \".6\"\"2637*) \".4\"\"2435"),
              peg$decode("! \\7+*_ \"7-*Y \".<\"\"2<3=*M \".>\"\"2>3?*A \".@\"\"2@3A*5 \".B\"\"2B3C*) \".D\"\"2D3E,e&7+*_ \"7-*Y \".<\"\"2<3=*M \".>\"\"2>3?*A \".@\"\"2@3A*5 \".B\"\"2B3C*) \".D\"\"2D3E\"+& 4!6\x99! %"),
              peg$decode("!7T+N$!.8\"\"2839+-$7^+#%'\"%$\"# X\"# X*# \" [+#%'\"%$\"# X\"# X"),
              peg$decode("!7U*) \"7\\*# \"7X+& 4!6\x9A! %"),
              peg$decode("! \\!7V+3$.J\"\"2J3K+#%'\"%$\"# X\"# X,>&!7V+3$.J\"\"2J3K+#%'\"%$\"# X\"# X\"+G$7W+=%.J\"\"2J3K*# \" [+'%4#6\x9B# %$## X$\"# X\"# X"),
              peg$decode(" \\0\x9C\"\"1!3\x9D+,$,)&0\x9C\"\"1!3\x9D\"\"\" X"),
              peg$decode("!0$\"\"1!3%+A$ \\0\x9E\"\"1!3\x9F,)&0\x9E\"\"1!3\x9F\"+#%'\"%$\"# X\"# X"),
              peg$decode("!.o\"\"2o3p+A$7Y+7%.q\"\"2q3r+'%4#6\xA0# %$## X$\"# X\"# X"),
              peg$decode("!!7Z+\xBF$.8\"\"2839+\xAF%7Z+\xA5%.8\"\"2839+\x95%7Z+\x8B%.8\"\"2839+{%7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'-%$-# X$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0838 \"!.\xA1\"\"2\xA13\xA2+\xAF$7Z+\xA5%.8\"\"2839+\x95%7Z+\x8B%.8\"\"2839+{%7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%',%$,# X$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0795 \"!.\xA1\"\"2\xA13\xA2+\x95$7Z+\x8B%.8\"\"2839+{%7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u070C \"!.\xA1\"\"2\xA13\xA2+{$7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u069D \"!.\xA1\"\"2\xA13\xA2+a$7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'&%$&# X$%# X$$# X$## X$\"# X\"# X*\u0648 \"!.\xA1\"\"2\xA13\xA2+G$7Z+=%.8\"\"2839+-%7[+#%'$%$$# X$## X$\"# X\"# X*\u060D \"!.\xA1\"\"2\xA13\xA2+-$7[+#%'\"%$\"# X\"# X*\u05EC \"!.\xA1\"\"2\xA13\xA2+-$7Z+#%'\"%$\"# X\"# X*\u05CB \"!7Z+\xA5$.\xA1\"\"2\xA13\xA2+\x95%7Z+\x8B%.8\"\"2839+{%7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'+%$+# X$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0538 \"!7Z+\xB6$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x8B%.\xA1\"\"2\xA13\xA2+{%7Z+q%.8\"\"2839+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%'*%$*# X$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0494 \"!7Z+\xC7$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x9C%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+q%.\xA1\"\"2\xA13\xA2+a%7Z+W%.8\"\"2839+G%7Z+=%.8\"\"2839+-%7[+#%')%$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u03DF \"!7Z+\xD8$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xAD%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x82%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+W%.\xA1\"\"2\xA13\xA2+G%7Z+=%.8\"\"2839+-%7[+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0319 \"!7Z+\xE9$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xBE%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x93%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+h%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+=%.\xA1\"\"2\xA13\xA2+-%7[+#%''%$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0242 \"!7Z+\u0114$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xE9%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xBE%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x93%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+h%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+=%.\xA1\"\"2\xA13\xA2+-%7Z+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X*\u0140 \"!7Z+\u0135$!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\u010A%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xDF%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\xB4%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+\x89%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+^%!.8\"\"2839+-$7Z+#%'\"%$\"# X\"# X*# \" [+3%.\xA1\"\"2\xA13\xA2+#%'(%$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X+& 4!6\xA3! %"),
              peg$decode("!7#+S$7#*# \" [+C%7#*# \" [+3%7#*# \" [+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("!7Z+=$.8\"\"2839+-%7Z+#%'#%$## X$\"# X\"# X*# \"7\\"),
              peg$decode("!7]+u$.J\"\"2J3K+e%7]+[%.J\"\"2J3K+K%7]+A%.J\"\"2J3K+1%7]+'%4'6\xA4' %$'# X$&# X$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!.\xA5\"\"2\xA53\xA6+3$0\xA7\"\"1!3\xA8+#%'\"%$\"# X\"# X*\xA0 \"!.\xA9\"\"2\xA93\xAA+=$0\xAB\"\"1!3\xAC+-%7!+#%'#%$## X$\"# X\"# X*o \"!.\xAD\"\"2\xAD3\xAE+7$7!+-%7!+#%'#%$## X$\"# X\"# X*D \"!0\xAF\"\"1!3\xB0+-$7!+#%'\"%$\"# X\"# X*# \"7!"),
              peg$decode("!!7!*# \" [+c$7!*# \" [+S%7!*# \" [+C%7!*# \" [+3%7!*# \" [+#%'%%$%# X$$# X$## X$\"# X\"# X+' 4!6\xB1!! %"),
              peg$decode(" \\!.2\"\"2233+-$7`+#%'\"%$\"# X\"# X,>&!.2\"\"2233+-$7`+#%'\"%$\"# X\"# X\""),
              peg$decode("7a*A \"7b*; \"7c*5 \"7d*/ \"7e*) \"7f*# \"7g"),
              peg$decode("!/\xB2\"\"1*3\xB3+b$/\xB4\"\"1#3\xB5*G \"/\xB6\"\"1#3\xB7*; \"/\xB8\"\"1$3\xB9*/ \"/\xBA\"\"1#3\xBB*# \"76+(%4\"6\xBC\"! %$\"# X\"# X"),
              peg$decode("!/\xBD\"\"1%3\xBE+J$/\xBF\"\"1%3\xC0*/ \"/\xC1\"\"1\"3\xC2*# \"76+(%4\"6\xC3\"! %$\"# X\"# X"),
              peg$decode("!/\xC4\"\"1'3\xC5+2$7\x8F+(%4\"6\xC6\"! %$\"# X\"# X"),
              peg$decode("!/\xC7\"\"1$3\xC8+2$7\xEF+(%4\"6\xC9\"! %$\"# X\"# X"),
              peg$decode("!/\xCA\"\"1&3\xCB+2$7T+(%4\"6\xCC\"! %$\"# X\"# X"),
              peg$decode("!/\xCD\"\"1\"3\xCE+R$!.>\"\"2>3?+-$76+#%'\"%$\"# X\"# X*# \" [+'%4\"6\xCF\" %$\"# X\"# X"),
              peg$decode("!7h+T$!.>\"\"2>3?+-$7i+#%'\"%$\"# X\"# X*# \" [+)%4\"6\xD0\"\"! %$\"# X\"# X"),
              peg$decode("! \\7j+&$,#&7j\"\"\" X+! (%"),
              peg$decode("! \\7j+&$,#&7j\"\"\" X+! (%"),
              peg$decode("7k*) \"7+*# \"7-"),
              peg$decode(".o\"\"2o3p*e \".q\"\"2q3r*Y \".4\"\"2435*M \".8\"\"2839*A \".<\"\"2<3=*5 \".@\"\"2@3A*) \".B\"\"2B3C"),
              peg$decode("!.6\"\"2637+u$7m+k% \\!.<\"\"2<3=+-$7m+#%'\"%$\"# X\"# X,>&!.<\"\"2<3=+-$7m+#%'\"%$\"# X\"# X\"+#%'#%$## X$\"# X\"# X"),
              peg$decode("!7n+C$.>\"\"2>3?+3%7o+)%4#6\xD1#\"\" %$## X$\"# X\"# X"),
              peg$decode(" \\7p*) \"7+*# \"7-+2$,/&7p*) \"7+*# \"7-\"\"\" X"),
              peg$decode(" \\7p*) \"7+*# \"7-,/&7p*) \"7+*# \"7-\""),
              peg$decode(".o\"\"2o3p*e \".q\"\"2q3r*Y \".4\"\"2435*M \".6\"\"2637*A \".8\"\"2839*5 \".@\"\"2@3A*) \".B\"\"2B3C"),
              peg$decode("7\x90*# \"7r"),
              peg$decode("!7\x8F+K$7'+A%7s+7%7'+-%7\x84+#%'%%$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("7M*# \"7t"),
              peg$decode("!7+G$.8\"\"2839+7%7u*# \"7x+'%4#6\xD2# %$## X$\"# X\"# X"),
              peg$decode("!7v*# \"7w+N$!.6\"\"2637+-$7\x83+#%'\"%$\"# X\"# X*# \" [+#%'\"%$\"# X\"# X"),
              peg$decode("!.\xD3\"\"2\xD33\xD4+=$7\x80+3%7w*# \" [+#%'#%$## X$\"# X\"# X"),
              peg$decode("!.4\"\"2435+-$7{+#%'\"%$\"# X\"# X"),
              peg$decode("!7z+5$ \\7y,#&7y\"+#%'\"%$\"# X\"# X"),
              peg$decode("7**) \"7+*# \"7-"),
              peg$decode("7+*\x8F \"7-*\x89 \".2\"\"2233*} \".6\"\"2637*q \".8\"\"2839*e \".:\"\"2:3;*Y \".<\"\"2<3=*M \".>\"\"2>3?*A \".@\"\"2@3A*5 \".B\"\"2B3C*) \".D\"\"2D3E"),
              peg$decode("!7|+k$ \\!.4\"\"2435+-$7|+#%'\"%$\"# X\"# X,>&!.4\"\"2435+-$7|+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("! \\7~,#&7~\"+k$ \\!.2\"\"2233+-$7}+#%'\"%$\"# X\"# X,>&!.2\"\"2233+-$7}+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode(" \\7~,#&7~\""),
              peg$decode("7+*w \"7-*q \".8\"\"2839*e \".:\"\"2:3;*Y \".<\"\"2<3=*M \".>\"\"2>3?*A \".@\"\"2@3A*5 \".B\"\"2B3C*) \".D\"\"2D3E"),
              peg$decode("!7\"+\x8D$ \\7\"*G \"7!*A \".@\"\"2@3A*5 \".F\"\"2F3G*) \".J\"\"2J3K,M&7\"*G \"7!*A \".@\"\"2@3A*5 \".F\"\"2F3G*) \".J\"\"2J3K\"+'%4\"6\xD5\" %$\"# X\"# X"),
              peg$decode("7\x81*# \"7\x82"),
              peg$decode("!!7O+3$.:\"\"2:3;+#%'\"%$\"# X\"# X*# \" [+-$7S+#%'\"%$\"# X\"# X*# \" ["),
              peg$decode(" \\7+*\x83 \"7-*} \".B\"\"2B3C*q \".D\"\"2D3E*e \".2\"\"2233*Y \".8\"\"2839*M \".:\"\"2:3;*A \".<\"\"2<3=*5 \".>\"\"2>3?*) \".@\"\"2@3A+\x8C$,\x89&7+*\x83 \"7-*} \".B\"\"2B3C*q \".D\"\"2D3E*e \".2\"\"2233*Y \".8\"\"2839*M \".:\"\"2:3;*A \".<\"\"2<3=*5 \".>\"\"2>3?*) \".@\"\"2@3A\"\"\" X"),
              peg$decode(" \\7y,#&7y\""),
              peg$decode("!/\x95\"\"1#3\xD6+y$.4\"\"2435+i% \\7!+&$,#&7!\"\"\" X+P%.J\"\"2J3K+@% \\7!+&$,#&7!\"\"\" X+'%4%6\xD7% %$%# X$$# X$## X$\"# X\"# X"),
              peg$decode(".\xD8\"\"2\xD83\xD9"),
              peg$decode(".\xDA\"\"2\xDA3\xDB"),
              peg$decode(".\xDC\"\"2\xDC3\xDD"),
              peg$decode(".\xDE\"\"2\xDE3\xDF"),
              peg$decode(".\xE0\"\"2\xE03\xE1"),
              peg$decode(".\xE2\"\"2\xE23\xE3"),
              peg$decode(".\xE4\"\"2\xE43\xE5"),
              peg$decode(".\xE6\"\"2\xE63\xE7"),
              peg$decode(".\xE8\"\"2\xE83\xE9"),
              peg$decode(".\xEA\"\"2\xEA3\xEB"),
              peg$decode("!7\x85*S \"7\x86*M \"7\x88*G \"7\x89*A \"7\x8A*; \"7\x8B*5 \"7\x8C*/ \"7\x8D*) \"7\x8E*# \"76+& 4!6\xEC! %"),
              peg$decode("!7\x84+K$7'+A%7\x91+7%7'+-%7\x93+#%'%%$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!7\x92+' 4!6\xED!! %"),
              peg$decode("!7!+7$7!+-%7!+#%'#%$## X$\"# X\"# X"),
              peg$decode("! \\7**A \"7+*; \"7-*5 \"73*/ \"74*) \"7'*# \"7(,G&7**A \"7+*; \"7-*5 \"73*/ \"74*) \"7'*# \"7(\"+& 4!6\xEE! %"),
              peg$decode("!7\xB5+_$ \\!7A+-$7\xB5+#%'\"%$\"# X\"# X,8&!7A+-$7\xB5+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!79+R$!.:\"\"2:3;+-$79+#%'\"%$\"# X\"# X*# \" [+'%4\"6\xEF\" %$\"# X\"# X"),
              peg$decode("!7:*j \"!7\x97+_$ \\!7A+-$7\x97+#%'\"%$\"# X\"# X,8&!7A+-$7\x97+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X+& 4!6\xF0! %"),
              peg$decode("!7L*# \"7\x98+c$ \\!7B+-$7\x9A+#%'\"%$\"# X\"# X,8&!7B+-$7\x9A+#%'\"%$\"# X\"# X\"+'%4\"6\xF1\" %$\"# X\"# X"),
              peg$decode("!7\x99*# \" [+A$7@+7%7M+-%7?+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("!!76+_$ \\!7.+-$76+#%'\"%$\"# X\"# X,8&!7.+-$76+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X*# \"7H+' 4!6\xF2!! %"),
              peg$decode("7\x9B*) \"7\x9C*# \"7\x9F"),
              peg$decode("!/\xF3\"\"1!3\xF4+<$7<+2%7\x9E+(%4#6\xF5#! %$## X$\"# X\"# X"),
              peg$decode("!/\xF6\"\"1'3\xF7+<$7<+2%7\x9D+(%4#6\xF8#! %$## X$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\xF9!! %"),
              peg$decode("!.\xFA\"\"2\xFA3\xFB+x$!.J\"\"2J3K+S$7!*# \" [+C%7!*# \" [+3%7!*# \" [+#%'$%$$# X$## X$\"# X\"# X*# \" [+'%4\"6\xFC\" %$\"# X\"# X"),
              peg$decode("!76+N$!7<+-$7\xA0+#%'\"%$\"# X\"# X*# \" [+)%4\"6\xFD\"\"! %$\"# X\"# X"),
              peg$decode("76*) \"7T*# \"7H"),
              peg$decode("!7\xA2+_$ \\!7B+-$7\xA3+#%'\"%$\"# X\"# X,8&!7B+-$7\xA3+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!/\xFE\"\"1&3\xFF*G \"/\u0100\"\"1'3\u0101*; \"/\u0102\"\"1$3\u0103*/ \"/\u0104\"\"1%3\u0105*# \"76+& 4!6\u0106! %"),
              peg$decode("7\xA4*# \"7\x9F"),
              peg$decode("!/\u0107\"\"1(3\u0108+O$7<+E%/\u0109\"\"1(3\u010A*/ \"/\u010B\"\"1(3\u010C*# \"76+#%'#%$## X$\"# X\"# X"),
              peg$decode("!76+_$ \\!7A+-$76+#%'\"%$\"# X\"# X,8&!7A+-$76+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\u010D!! %"),
              peg$decode("!7\xA8+& 4!6\u010E! %"),
              peg$decode("!7\xA9+s$7;+i%7\xAE+_% \\!7B+-$7\xAF+#%'\"%$\"# X\"# X,8&!7B+-$7\xAF+#%'\"%$\"# X\"# X\"+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("7\xAA*# \"7\xAB"),
              peg$decode("/\u010F\"\"1$3\u0110*S \"/\u0111\"\"1%3\u0112*G \"/\u0113\"\"1%3\u0114*; \"/\u0115\"\"1%3\u0116*/ \"/\u0117\"\"1+3\u0118*# \"7\xAC"),
              peg$decode("/\u0119\"\"1'3\u011A*/ \"/\u011B\"\"1)3\u011C*# \"7\xAC"),
              peg$decode("76*# \"7\xAD"),
              peg$decode("!/\u011D\"\"1\"3\u011E+-$76+#%'\"%$\"# X\"# X"),
              peg$decode("7\xAC*# \"76"),
              peg$decode("!76+7$7<+-%7\xB0+#%'#%$## X$\"# X\"# X"),
              peg$decode("76*# \"7H"),
              peg$decode("!7\xB2+7$7.+-%7\x8F+#%'#%$## X$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\u011F!! %"),
              peg$decode("!7\x9D+' 4!6\u0120!! %"),
              peg$decode("!7\xB5+d$ \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+(%4\"6\u0121\"!!%$\"# X\"# X"),
              peg$decode("!!77+k$ \\!.J\"\"2J3K+-$77+#%'\"%$\"# X\"# X,>&!.J\"\"2J3K+-$77+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X+! (%"),
              peg$decode("!7L*# \"7\x98+c$ \\!7B+-$7\xB7+#%'\"%$\"# X\"# X,8&!7B+-$7\xB7+#%'\"%$\"# X\"# X\"+'%4\"6\u0122\" %$\"# X\"# X"),
              peg$decode("7\xB8*# \"7\x9F"),
              peg$decode("!/\u0123\"\"1#3\u0124+<$7<+2%76+(%4#6\u0125#! %$## X$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\u0126!! %"),
              peg$decode("!7\x9D+' 4!6\u0127!! %"),
              peg$decode("! \\7\x99,#&7\x99\"+\x81$7@+w%7M+m%7?+c% \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+'%4%6\u0128% %$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("7\xBD"),
              peg$decode("!/\u0129\"\"1&3\u012A+s$7.+i%7\xC0+_% \\!7A+-$7\xC0+#%'\"%$\"# X\"# X,8&!7A+-$7\xC0+#%'\"%$\"# X\"# X\"+#%'$%$$# X$## X$\"# X\"# X*# \"7\xBE"),
              peg$decode("!76+s$7.+i%7\xBF+_% \\!7A+-$7\xBF+#%'\"%$\"# X\"# X,8&!7A+-$7\xBF+#%'\"%$\"# X\"# X\"+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("!76+=$7<+3%76*# \"7H+#%'#%$## X$\"# X\"# X"),
              peg$decode("7\xC1*G \"7\xC3*A \"7\xC5*; \"7\xC7*5 \"7\xC8*/ \"7\xC9*) \"7\xCA*# \"7\xBF"),
              peg$decode("!/\u012B\"\"1%3\u012C+7$7<+-%7\xC2+#%'#%$## X$\"# X\"# X"),
              peg$decode("!7I+' 4!6\u012D!! %"),
              peg$decode("!/\u012E\"\"1&3\u012F+\xA5$7<+\x9B%7D+\x91%7\xC4+\x87% \\! \\7'+&$,#&7'\"\"\" X+-$7\xC4+#%'\"%$\"# X\"# X,G&! \\7'+&$,#&7'\"\"\" X+-$7\xC4+#%'\"%$\"# X\"# X\"+-%7E+#%'&%$&# X$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("7t*# \"7w"),
              peg$decode("!/\u0130\"\"1%3\u0131+7$7<+-%7\xC6+#%'#%$## X$\"# X\"# X"),
              peg$decode("!7I+' 4!6\u0132!! %"),
              peg$decode("!/\u0133\"\"1&3\u0134+<$7<+2%7I+(%4#6\u0135#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0136\"\"1%3\u0137+_$7<+U%!/\u0138\"\"1$3\u0139+& 4!6\u013A! %*4 \"!/\u013B\"\"1%3\u013C+& 4!6\u013D! %+#%'#%$## X$\"# X\"# X"),
              peg$decode("!/\u013E\"\"1)3\u013F+T$7<+J%/\u0140\"\"1#3\u0141*/ \"/\u0142\"\"1(3\u0143*# \"76+(%4#6\u0144#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0145\"\"1#3\u0146+\x9E$7<+\x94%7D+\x8A%!7\xCB+k$ \\!.D\"\"2D3E+-$7\xCB+#%'\"%$\"# X\"# X,>&!.D\"\"2D3E+-$7\xCB+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X+-%7E+#%'%%$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!/\u0147\"\"1(3\u0148*/ \"/\u0149\"\"1$3\u014A*# \"76+' 4!6\u014B!! %"),
              peg$decode("!76+_$ \\!7A+-$76+#%'\"%$\"# X\"# X,8&!7A+-$76+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!7\xCE+K$7.+A%7\xCE+7%7.+-%7\x8F+#%'%%$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\u014C!! %"),
              peg$decode("!7\xD0+c$ \\!7A+-$7\xD0+#%'\"%$\"# X\"# X,8&!7A+-$7\xD0+#%'\"%$\"# X\"# X\"+'%4\"6\u014D\" %$\"# X\"# X"),
              peg$decode("!7\x98+c$ \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+'%4\"6\u014E\" %$\"# X\"# X"),
              peg$decode("!7L*T \"7\x98*N \"!7@*# \" [+=$7t+3%7?*# \" [+#%'#%$## X$\"# X\"# X+c$ \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+'%4\"6\u014F\" %$\"# X\"# X"),
              peg$decode("!7\xD3+c$ \\!7B+-$7\xD4+#%'\"%$\"# X\"# X,8&!7B+-$7\xD4+#%'\"%$\"# X\"# X\"+'%4\"6\u0150\" %$\"# X\"# X"),
              peg$decode("!7\x95+& 4!6\u0151! %"),
              peg$decode("!/\u0152\"\"1(3\u0153+<$7<+2%76+(%4#6\u0154#! %$## X$\"# X\"# X*j \"!/\u0155\"\"1&3\u0156+<$7<+2%76+(%4#6\u0157#! %$## X$\"# X\"# X*: \"!/\u0158\"\"1*3\u0159+& 4!6\u015A! %*# \"7\x9F"),
              peg$decode("!!76+o$ \\!7A+2$76+(%4\"6\u015B\"! %$\"# X\"# X,=&!7A+2$76+(%4\"6\u015B\"! %$\"# X\"# X\"+)%4\"6\u015C\"\"! %$\"# X\"# X*# \" [+' 4!6\u015D!! %"),
              peg$decode("!7\xD7+_$ \\!7A+-$7\xD7+#%'\"%$\"# X\"# X,8&!7A+-$7\xD7+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!7\x98+_$ \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("! \\7!+&$,#&7!\"\"\" X+' 4!6\u015E!! %"),
              peg$decode("!7\xDA+_$ \\!7B+-$7\xDB+#%'\"%$\"# X\"# X,8&!7B+-$7\xDB+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!/\u015F\"\"1&3\u0160*; \"/\u0161\"\"1'3\u0162*/ \"/\u0163\"\"1*3\u0164*# \"76+& 4!6\u0165! %"),
              peg$decode("!/\u0166\"\"1&3\u0167+<$7<+2%7\xDC+(%4#6\u0168#! %$## X$\"# X\"# X*\x83 \"!/\xF6\"\"1'3\xF7+<$7<+2%7\x9D+(%4#6\u0169#! %$## X$\"# X\"# X*S \"!/\u016A\"\"1+3\u016B+<$7<+2%7\x9D+(%4#6\u016C#! %$## X$\"# X\"# X*# \"7\x9F"),
              peg$decode("/\u016D\"\"1+3\u016E*k \"/\u016F\"\"1)3\u0170*_ \"/\u0171\"\"1(3\u0172*S \"/\u0173\"\"1'3\u0174*G \"/\u0175\"\"1&3\u0176*; \"/\u0177\"\"1*3\u0178*/ \"/\u0179\"\"1)3\u017A*# \"76"),
              peg$decode("71*# \" ["),
              peg$decode("!!76+o$ \\!7A+2$76+(%4\"6\u015B\"! %$\"# X\"# X,=&!7A+2$76+(%4\"6\u015B\"! %$\"# X\"# X\"+)%4\"6\u015C\"\"! %$\"# X\"# X*# \" [+' 4!6\u017B!! %"),
              peg$decode("!7L*# \"7\x98+c$ \\!7B+-$7\xE0+#%'\"%$\"# X\"# X,8&!7B+-$7\xE0+#%'\"%$\"# X\"# X\"+'%4\"6\u017C\" %$\"# X\"# X"),
              peg$decode("7\xB8*# \"7\x9F"),
              peg$decode("!7\xE2+_$ \\!7A+-$7\xE2+#%'\"%$\"# X\"# X,8&!7A+-$7\xE2+#%'\"%$\"# X\"# X\"+#%'\"%$\"# X\"# X"),
              peg$decode("!7\xE9+s$7.+i%7\xEC+_% \\!7B+-$7\xE3+#%'\"%$\"# X\"# X,8&!7B+-$7\xE3+#%'\"%$\"# X\"# X\"+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("7\xE4*; \"7\xE5*5 \"7\xE6*/ \"7\xE7*) \"7\xE8*# \"7\x9F"),
              peg$decode("!/\u017D\"\"1#3\u017E+<$7<+2%7\xEF+(%4#6\u017F#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0180\"\"1%3\u0181+<$7<+2%7T+(%4#6\u0182#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0183\"\"1(3\u0184+B$7<+8%7\\*# \"7Y+(%4#6\u0185#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0186\"\"1&3\u0187+<$7<+2%76+(%4#6\u0188#! %$## X$\"# X\"# X"),
              peg$decode("!/\u0189\"\"1%3\u018A+T$!7<+5$ \\7!,#&7!\"+#%'\"%$\"# X\"# X*# \" [+'%4\"6\u018B\" %$\"# X\"# X"),
              peg$decode("!7\xEA+K$7;+A%76+7%7;+-%7\xEB+#%'%%$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!/\x95\"\"1#3\xD6*# \"76+' 4!6\u018C!! %"),
              peg$decode("!/\xB4\"\"1#3\u018D*G \"/\xB6\"\"1#3\u018E*; \"/\xBA\"\"1#3\u018F*/ \"/\xB8\"\"1$3\u0190*# \"76+' 4!6\u0191!! %"),
              peg$decode("!7\xED+H$!7C+-$7\xEE+#%'\"%$\"# X\"# X*# \" [+#%'\"%$\"# X\"# X"),
              peg$decode("!7U*) \"7\\*# \"7X+& 4!6\u0192! %"),
              peg$decode("!!7!*# \" [+c$7!*# \" [+S%7!*# \" [+C%7!*# \" [+3%7!*# \" [+#%'%%$%# X$$# X$## X$\"# X\"# X+' 4!6\u0193!! %"),
              peg$decode("!!7!+C$7!*# \" [+3%7!*# \" [+#%'#%$## X$\"# X\"# X+' 4!6\u0194!! %"),
              peg$decode("7\xBD"),
              peg$decode("!7\x9D+d$ \\!7B+-$7\xF2+#%'\"%$\"# X\"# X,8&!7B+-$7\xF2+#%'\"%$\"# X\"# X\"+(%4\"6\u0195\"!!%$\"# X\"# X"),
              peg$decode("7\xF3*# \"7\x9F"),
              peg$decode("!.\u0196\"\"2\u01963\u0197+N$7<+D%.\u0198\"\"2\u01983\u0199*) \".\u019A\"\"2\u019A3\u019B+(%4#6\u019C#! %$## X$\"# X\"# X"),
              peg$decode("!7\x9D+d$ \\!7B+-$7\x9F+#%'\"%$\"# X\"# X,8&!7B+-$7\x9F+#%'\"%$\"# X\"# X\"+(%4\"6\u019D\"!!%$\"# X\"# X"),
              peg$decode("!76+7$70+-%7\xF6+#%'#%$## X$\"# X\"# X"),
              peg$decode(" \\72*) \"74*# \"7.,/&72*) \"74*# \"7.\""),
              peg$decode(" \\7%,#&7%\""),
              peg$decode("!7\xF9+=$.8\"\"2839+-%7\xFA+#%'#%$## X$\"# X\"# X"),
              peg$decode("!/\u019E\"\"1%3\u019F*) \"/\u01A0\"\"1$3\u01A1+' 4!6\u01A2!! %"),
              peg$decode("!7\xFB+N$!.8\"\"2839+-$7^+#%'\"%$\"# X\"# X*# \" [+#%'\"%$\"# X\"# X"),
              peg$decode("!7\\*) \"7X*# \"7\x82+' 4!6\u01A3!! %"),
              peg$decode("! \\7\xFD*) \"7-*# \"7\xFE,/&7\xFD*) \"7-*# \"7\xFE\"+! (%"),
              peg$decode("7\"*S \"7!*M \".F\"\"2F3G*A \".J\"\"2J3K*5 \".H\"\"2H3I*) \".N\"\"2N3O"),
              peg$decode(".L\"\"2L3M*\x95 \".B\"\"2B3C*\x89 \".<\"\"2<3=*} \".R\"\"2R3S*q \".T\"\"2T3U*e \".V\"\"2V3W*Y \".P\"\"2P3Q*M \".@\"\"2@3A*A \".D\"\"2D3E*5 \".2\"\"2233*) \".>\"\"2>3?"),
              peg$decode("!7\u0100+h$.8\"\"2839+X%7\xFA+N%!.\u01A4\"\"2\u01A43\u01A5+-$7\xEB+#%'\"%$\"# X\"# X*# \" [+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("!/\u01A6\"\"1%3\u01A7*) \"/\u01A8\"\"1$3\u01A9+' 4!6\u01A2!! %"),
              peg$decode("!7\xEB+Q$/\xB4\"\"1#3\xB5*7 \"/\xB6\"\"1#3\xB7*+ \" \\7+,#&7+\"+'%4\"6\u01AA\" %$\"# X\"# X"),
              peg$decode("!7\u0104+\x8F$.F\"\"2F3G+%7\u0103+u%.F\"\"2F3G+e%7\u0103+[%.F\"\"2F3G+K%7\u0103+A%.F\"\"2F3G+1%7\u0105+'%4)6\u01AB) %$)# X$(# X$'# X$&# X$%# X$$# X$## X$\"# X\"# X"),
              peg$decode("!7#+A$7#+7%7#+-%7#+#%'$%$$# X$## X$\"# X\"# X"),
              peg$decode("!7\u0103+-$7\u0103+#%'\"%$\"# X\"# X"),
              peg$decode("!7\u0103+7$7\u0103+-%7\u0103+#%'#%$## X$\"# X\"# X")
            ],

            peg$currPos = 0,
            peg$reportedPos = 0,
            peg$cachedPos = 0,
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
            peg$maxFailPos = 0,
            peg$maxFailExpected = [],
            peg$silentFails = 0,

            peg$result;

          if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleIndices)) {
              throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }

            peg$startRuleIndex = peg$startRuleIndices[options.startRule];
          }

          function text() {
            return input.substring(peg$reportedPos, peg$currPos);
          }

          function offset() {
            return peg$reportedPos;
          }

          function line() {
            return peg$computePosDetails(peg$reportedPos).line;
          }

          function column() {
            return peg$computePosDetails(peg$reportedPos).column;
          }

          function expected(description) {
            throw peg$buildException(
              null,
              [{ type: "other", description: description }],
              peg$reportedPos
            );
          }

          function error(message) {
            throw peg$buildException(message, null, peg$reportedPos);
          }

          function peg$computePosDetails(pos) {
            function advance(details, startPos, endPos) {
              var p, ch;

              for (p = startPos; p < endPos; p++) {
                ch = input.charAt(p);
                if (ch === "\n") {
                  if (!details.seenCR) { details.line++; }
                  details.column = 1;
                  details.seenCR = false;
                } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                  details.line++;
                  details.column = 1;
                  details.seenCR = true;
                } else {
                  details.column++;
                  details.seenCR = false;
                }
              }
            }

            if (peg$cachedPos !== pos) {
              if (peg$cachedPos > pos) {
                peg$cachedPos = 0;
                peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
              }
              advance(peg$cachedPosDetails, peg$cachedPos, pos);
              peg$cachedPos = pos;
            }

            return peg$cachedPosDetails;
          }

          function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) { return; }

            if (peg$currPos > peg$maxFailPos) {
              peg$maxFailPos = peg$currPos;
              peg$maxFailExpected = [];
            }

            peg$maxFailExpected.push(expected);
          }

          function peg$buildException(message, expected, pos) {
            function cleanupExpected(expected) {
              var i = 1;

              expected.sort(function (a, b) {
                if (a.description < b.description) {
                  return -1;
                } else if (a.description > b.description) {
                  return 1;
                } else {
                  return 0;
                }
              });

              while (i < expected.length) {
                if (expected[i - 1] === expected[i]) {
                  expected.splice(i, 1);
                } else {
                  i++;
                }
              }
            }

            function buildMessage(expected, found) {
              function stringEscape(s) {
                function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                return s
                  .replace(/\\/g, '\\\\')
                  .replace(/"/g, '\\"')
                  .replace(/\x08/g, '\\b')
                  .replace(/\t/g, '\\t')
                  .replace(/\n/g, '\\n')
                  .replace(/\f/g, '\\f')
                  .replace(/\r/g, '\\r')
                  .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) { return '\\x0' + hex(ch); })
                  .replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) { return '\\x' + hex(ch); })
                  .replace(/[\u0180-\u0FFF]/g, function (ch) { return '\\u0' + hex(ch); })
                  .replace(/[\u1080-\uFFFF]/g, function (ch) { return '\\u' + hex(ch); });
              }

              var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;

              for (i = 0; i < expected.length; i++) {
                expectedDescs[i] = expected[i].description;
              }

              expectedDesc = expected.length > 1
                ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
                : expectedDescs[0];

              foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

              return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }

            var posDetails = peg$computePosDetails(pos),
              found = pos < input.length ? input.charAt(pos) : null;

            if (expected !== null) {
              cleanupExpected(expected);
            }

            return new SyntaxError(
              message !== null ? message : buildMessage(expected, found),
              expected,
              found,
              pos,
              posDetails.line,
              posDetails.column
            );
          }

          function peg$decode(s) {
            var bc = new Array(s.length), i;

            for (i = 0; i < s.length; i++) {
              bc[i] = s.charCodeAt(i) - 32;
            }

            return bc;
          }

          function peg$parseRule(index) {
            var bc = peg$bytecode[index],
              ip = 0,
              ips = [],
              end = bc.length,
              ends = [],
              stack = [],
              params, i;

            function protect(object) {
              return Object.prototype.toString.apply(object) === "[object Array]" ? [] : object;
            }

            while (true) {
              while (ip < end) {
                switch (bc[ip]) {
                  case 0:
                    stack.push(protect(peg$consts[bc[ip + 1]]));
                    ip += 2;
                    break;

                  case 1:
                    stack.push(peg$currPos);
                    ip++;
                    break;

                  case 2:
                    stack.pop();
                    ip++;
                    break;

                  case 3:
                    peg$currPos = stack.pop();
                    ip++;
                    break;

                  case 4:
                    stack.length -= bc[ip + 1];
                    ip += 2;
                    break;

                  case 5:
                    stack.splice(-2, 1);
                    ip++;
                    break;

                  case 6:
                    stack[stack.length - 2].push(stack.pop());
                    ip++;
                    break;

                  case 7:
                    stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
                    ip += 2;
                    break;

                  case 8:
                    stack.pop();
                    stack.push(input.substring(stack[stack.length - 1], peg$currPos));
                    ip++;
                    break;

                  case 9:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

                    if (stack[stack.length - 1]) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }

                    break;

                  case 10:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

                    if (stack[stack.length - 1] === peg$FAILED) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }

                    break;

                  case 11:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

                    if (stack[stack.length - 1] !== peg$FAILED) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }

                    break;

                  case 12:
                    if (stack[stack.length - 1] !== peg$FAILED) {
                      ends.push(end);
                      ips.push(ip);

                      end = ip + 2 + bc[ip + 1];
                      ip += 2;
                    } else {
                      ip += 2 + bc[ip + 1];
                    }

                    break;

                  case 13:
                    ends.push(end);
                    ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

                    if (input.length > peg$currPos) {
                      end = ip + 3 + bc[ip + 1];
                      ip += 3;
                    } else {
                      end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                      ip += 3 + bc[ip + 1];
                    }

                    break;

                  case 14:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

                    if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }

                    break;

                  case 15:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

                    if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }

                    break;

                  case 16:
                    ends.push(end);
                    ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

                    if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                      end = ip + 4 + bc[ip + 2];
                      ip += 4;
                    } else {
                      end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                      ip += 4 + bc[ip + 2];
                    }

                    break;

                  case 17:
                    stack.push(input.substr(peg$currPos, bc[ip + 1]));
                    peg$currPos += bc[ip + 1];
                    ip += 2;
                    break;

                  case 18:
                    stack.push(peg$consts[bc[ip + 1]]);
                    peg$currPos += peg$consts[bc[ip + 1]].length;
                    ip += 2;
                    break;

                  case 19:
                    stack.push(peg$FAILED);
                    if (peg$silentFails === 0) {
                      peg$fail(peg$consts[bc[ip + 1]]);
                    }
                    ip += 2;
                    break;

                  case 20:
                    peg$reportedPos = stack[stack.length - 1 - bc[ip + 1]];
                    ip += 2;
                    break;

                  case 21:
                    peg$reportedPos = peg$currPos;
                    ip++;
                    break;

                  case 22:
                    params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
                    for (i = 0; i < bc[ip + 3]; i++) {
                      params[i] = stack[stack.length - 1 - params[i]];
                    }

                    stack.splice(
                      stack.length - bc[ip + 2],
                      bc[ip + 2],
                      peg$consts[bc[ip + 1]].apply(null, params)
                    );

                    ip += 4 + bc[ip + 3];
                    break;

                  case 23:
                    stack.push(peg$parseRule(bc[ip + 1]));
                    ip += 2;
                    break;

                  case 24:
                    peg$silentFails++;
                    ip++;
                    break;

                  case 25:
                    peg$silentFails--;
                    ip++;
                    break;

                  default:
                    throw new Error("Invalid opcode: " + bc[ip] + ".");
                }
              }

              if (ends.length > 0) {
                end = ends.pop();
                ip = ips.pop();
              } else {
                break;
              }
            }

            return stack[0];
          }


          options.data = {};
          function list(first, rest) {
            return [first].concat(rest);
          }


          peg$result = peg$parseRule(peg$startRuleIndex);

          if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
          } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
              peg$fail({ type: "end", description: "end of input" });
            }

            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
          }
        }

        return {
          SyntaxError: SyntaxError,
          parse: parse
        };
      })();
    }, {}], 12: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview Hacks - This file contains all of the things we
       * wish we didn't have to do, just for interop.  It is similar to
       * Utils, which provides actually useful and relevant functions for
       * a SIP library. Methods in this file are grouped by vendor, so
       * as to most easily track when particular hacks may not be necessary anymore.
       */

      module.exports = function (SIP) {

        SIP = SIP;

        var Hacks = {
          AllBrowsers: {
            maskDtls: function (sdp) {
              if (sdp) {
                sdp = sdp.replace(/ UDP\/TLS\/RTP\/SAVP/gmi, " RTP/SAVP");
              }
              return sdp;
            },
            unmaskDtls: function (sdp) {
              /**
               * Chrome does not handle DTLS correctly (Canaray does, but not production)
               * keeping Chrome as SDES until DTLS is fixed (comment out 'is_opera' condition)
               *
               * UPDATE: May 21, 2014
               * Chrome 35 now properly defaults to DTLS.  Only Opera remains using SDES
               *
               * UPDATE: 2014-09-24
               * Opera now supports DTLS by default as well.
               *
               **/
              return sdp.replace(/ RTP\/SAVP/gmi, " UDP/TLS/RTP/SAVP");
            }
          },
          Firefox: {
            /* Condition to detect if hacks are applicable */
            isFirefox: function () {
              return typeof mozRTCPeerConnection !== 'undefined';
            },

            cannotHandleExtraWhitespace: function (sdp) {
              if (this.isFirefox() && sdp) {
                sdp = sdp.replace(/ \r\n/g, "\r\n");
              }
              return sdp;
            },

            hasMissingCLineInSDP: function (sdp) {
              /*
                           * This is a Firefox hack to insert valid sdp when getDescription is
                           * called with the constraint offerToReceiveVideo = false.
                           * We search for either a c-line at the top of the sdp above all
                           * m-lines. If that does not exist then we search for a c-line
                           * beneath each m-line. If it is missing a c-line, we insert
                           * a fake c-line with the ip address 0.0.0.0. This is then valid
                           * sdp and no media will be sent for that m-line.
                           *
                           * Valid SDP is:
                           * m=
                           * i=
                           * c=
                           */
              var insertAt, mlines;
              if (sdp.indexOf('c=') > sdp.indexOf('m=')) {

                mlines = sdp.match(/m=.*\r\n.*/g);
                for (var i = 0; i < mlines.length; i++) {

                  if (mlines[i].toString().search(/i=.*/) >= 0) {
                    insertAt = sdp.indexOf(mlines[i].toString()) + mlines[i].toString().length;
                    if (sdp.substr(insertAt, 2) !== 'c=') {
                      sdp = sdp.substr(0, insertAt) + '\r\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);
                    }

                  } else if (mlines[i].toString().search(/c=.*/) < 0) {
                    insertAt = sdp.indexOf(mlines[i].toString().match(/.*/)) + mlines[i].toString().match(/.*/).toString().length;
                    sdp = sdp.substr(0, insertAt) + '\r\nc=IN IP4 0.0.0.0' + sdp.substr(insertAt);
                  }
                }
              }
              return sdp;
            },
          },

          Chrome: {
            needsExplicitlyInactiveSDP: function (sdp) {
              var sub, index;

              if (Hacks.Firefox.isFirefox()) {
                index = sdp.indexOf('m=video 0');
                if (index !== -1) {
                  sub = sdp.substr(index);
                  sub = sub.replace(/\r\nc=IN IP4.*\r\n$/,
                    '\r\nc=IN IP4 0.0.0.0\r\na=inactive\r\n');
                  return sdp.substr(0, index) + sub;
                }
              }
              return sdp;
            },

            getsConfusedAboutGUM: function (session) {
              if (session.mediaHandler) {
                session.mediaHandler.close();
              }
            }
          }
        };
        return Hacks;
      };

    }, {}], 13: [function (require, module, exports) {
      "use strict";
      var levels = {
        'error': 0,
        'warn': 1,
        'log': 2,
        'debug': 3
      };

      module.exports = function (console) {

        var LoggerFactory = function () {
          var logger,
            level = 2,
            builtinEnabled = true,
            connector = null;

          this.loggers = {};

          logger = this.getLogger('sip.loggerfactory');


          Object.defineProperties(this, {
            builtinEnabled: {
              get: function () { return builtinEnabled; },
              set: function (value) {
                if (typeof value === 'boolean') {
                  builtinEnabled = value;
                } else {
                  logger.error('invalid "builtinEnabled" parameter value: ' + JSON.stringify(value));
                }
              }
            },

            level: {
              get: function () { return level; },
              set: function (value) {
                if (value >= 0 && value <= 3) {
                  level = value;
                } else if (value > 3) {
                  level = 3;
                } else if (levels.hasOwnProperty(value)) {
                  level = levels[value];
                } else {
                  logger.error('invalid "level" parameter value: ' + JSON.stringify(value));
                }
              }
            },

            connector: {
              get: function () { return connector; },
              set: function (value) {
                if (value === null || value === "" || value === undefined) {
                  connector = null;
                } else if (typeof value === 'function') {
                  connector = value;
                } else {
                  logger.error('invalid "connector" parameter value: ' + JSON.stringify(value));
                }
              }
            }
          });
        };

        LoggerFactory.prototype.print = function (target, category, label, content) {
          if (typeof content === 'string') {
            var prefix = [new Date(), category];
            if (label) {
              prefix.push(label);
            }
            content = prefix.concat(content).join(' | ');
          }
        };

        function Logger(logger, category, label) {
          this.logger = logger;
          this.category = category;
          this.label = label;
        }

        Object.keys(levels).forEach(function (targetName) {
          Logger.prototype[targetName] = function (content) {
            this.logger[targetName](this.category, this.label, content);
          };

          LoggerFactory.prototype[targetName] = function (category, label, content) {
            if (this.level >= levels[targetName]) {
              if (this.builtinEnabled) {
                this.print(console[targetName], category, label, content);
              }

              if (this.connector) {
                this.connector(targetName, category, label, content);
              }
            }
          };
        });

        LoggerFactory.prototype.getLogger = function (category, label) {
          var logger;

          if (label && this.level === 3) {
            return new Logger(this, category, label);
          } else if (this.loggers[category]) {
            return this.loggers[category];
          } else {
            logger = new Logger(this, category);
            this.loggers[category] = logger;
            return logger;
          }
        };

        return LoggerFactory;
      };

    }, {}], 14: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview MediaHandler
       */

      /* MediaHandler
           * @class PeerConnection helper Class.
           * @param {SIP.Session} session
           * @param {Object} [options]
           */
      module.exports = function (EventEmitter) {
        var MediaHandler = function (session, options) {
          session = session;
          options = options;
        };

        MediaHandler.prototype = Object.create(EventEmitter.prototype, {
          isReady: { value: function isReady() { } },

          close: { value: function close() { } },

          /**
           * @param {Object} [mediaHint] A custom object describing the media to be used during this session.
           */
          getDescription: {
            value: function getDescription(mediaHint) {
              mediaHint = mediaHint;
            }
          },

          /**
           * Check if a SIP message contains a session description.
           * @param {SIP.SIPMessage} message
           * @returns {boolean}
           */
          hasDescription: {
            value: function hasDescription(message) {
              message = message;
            }
          },

          /**
           * Set the session description contained in a SIP message.
           * @param {SIP.SIPMessage} message
           * @returns {Promise}
           */
          setDescription: {
            value: function setDescription(message) {
              message = message;
            }
          }
        });

        return MediaHandler;
      };

    }, {}], 15: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP NameAddrHeader
       */

      /**
       * @augments SIP
       * @class Class creating a Name Address SIP header.
       *
       * @param {SIP.URI} uri
       * @param {String} [displayName]
       * @param {Object} [parameters]
       *
       */
      module.exports = function (SIP) {
        var NameAddrHeader;

        NameAddrHeader = function (uri, displayName, parameters) {
          var param;

          if (!uri || !(uri instanceof SIP.URI)) {
            throw new TypeError('missing or invalid "uri" parameter');
          }

          this.uri = uri;
          this.parameters = {};

          for (param in parameters) {
            this.setParam(param, parameters[param]);
          }

          Object.defineProperties(this, {
            friendlyName: {
              get: function () { return this.displayName || uri.aor; }
            },

            displayName: {
              get: function () { return displayName; },
              set: function (value) {
                displayName = (value === 0) ? '0' : value;
              }
            }
          });
        };
        NameAddrHeader.prototype = {
          setParam: function (key, value) {
            if (key) {
              this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString();
            }
          },
          getParam: SIP.URI.prototype.getParam,
          hasParam: SIP.URI.prototype.hasParam,
          deleteParam: SIP.URI.prototype.deleteParam,
          clearParams: SIP.URI.prototype.clearParams,

          clone: function () {
            return new NameAddrHeader(
              this.uri.clone(),
              this.displayName,
              JSON.parse(JSON.stringify(this.parameters)));
          },

          toString: function () {
            var body, parameter;

            body = (this.displayName || this.displayName === 0) ? '"' + this.displayName + '" ' : '';
            body += '<' + this.uri.toString() + '>';

            for (parameter in this.parameters) {
              body += ';' + parameter;

              if (this.parameters[parameter] !== null) {
                body += '=' + this.parameters[parameter];
              }
            }

            return body;
          }
        };


        /**
         * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if
         * it is an invalid NameAddrHeader.
         * @public
         * @param {String} name_addr_header
         */
        NameAddrHeader.parse = function (name_addr_header) {
          name_addr_header = SIP.Grammar.parse(name_addr_header, 'Name_Addr_Header');

          if (name_addr_header !== -1) {
            return name_addr_header;
          } else {
            return undefined;
          }
        };

        SIP.NameAddrHeader = NameAddrHeader;
      };

    }, {}], 16: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP Message Parser
       */

      /**
       * Extract and parse every header of a SIP message.
       * @augments SIP
       * @namespace
       */
      module.exports = function (SIP) {
        var Parser;

        function getHeader(data, headerStart) {
          var
            start = headerStart,
            end = 0,
            partialEnd = 0;

          if (data.substring(start, start + 2).match(/(^\r\n)/)) {
            return -2;
          }

          while (end === 0) {
            partialEnd = data.indexOf('\r\n', start);

            if (partialEnd === -1) {
              return partialEnd;
            }

            if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\r\n)/) && data.charAt(partialEnd + 2).match(/(^\s+)/)) {
              start = partialEnd + 2;
            } else {
              end = partialEnd;
            }
          }

          return end;
        }

        function parseHeader(message, data, headerStart, headerEnd) {
          var header, idx, length, parsed,
            hcolonIndex = data.indexOf(':', headerStart),
            headerName = data.substring(headerStart, hcolonIndex).trim(),
            headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();

          switch (headerName.toLowerCase()) {
            case 'via':
            case 'v':
              message.addHeader('via', headerValue);
              if (message.getHeaders('via').length === 1) {
                parsed = message.parseHeader('Via');
                if (parsed) {
                  message.via = parsed;
                  message.via_branch = parsed.branch;
                }
              } else {
                parsed = 0;
              }
              break;
            case 'from':
            case 'f':
              message.setHeader('from', headerValue);
              parsed = message.parseHeader('from');
              if (parsed) {
                message.from = parsed;
                message.from_tag = parsed.getParam('tag');
              }
              break;
            case 'to':
            case 't':
              message.setHeader('to', headerValue);
              parsed = message.parseHeader('to');
              if (parsed) {
                message.to = parsed;
                message.to_tag = parsed.getParam('tag');
              }
              break;
            case 'record-route':
              parsed = SIP.Grammar.parse(headerValue, 'Record_Route');

              if (parsed === -1) {
                parsed = undefined;
                break;
              }

              length = parsed.length;
              for (idx = 0; idx < length; idx++) {
                header = parsed[idx];
                message.addHeader('record-route', headerValue.substring(header.position, header.offset));
                message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;
              }
              break;
            case 'call-id':
            case 'i':
              message.setHeader('call-id', headerValue);
              parsed = message.parseHeader('call-id');
              if (parsed) {
                message.call_id = headerValue;
              }
              break;
            case 'contact':
            case 'm':
              parsed = SIP.Grammar.parse(headerValue, 'Contact');

              if (parsed === -1) {
                parsed = undefined;
                break;
              }

              length = parsed.length;
              for (idx = 0; idx < length; idx++) {
                header = parsed[idx];
                message.addHeader('contact', headerValue.substring(header.position, header.offset));
                message.headers['Contact'][message.getHeaders('contact').length - 1].parsed = header.parsed;
              }
              break;
            case 'content-length':
            case 'l':
              message.setHeader('content-length', headerValue);
              parsed = message.parseHeader('content-length');
              break;
            case 'content-type':
            case 'c':
              message.setHeader('content-type', headerValue);
              parsed = message.parseHeader('content-type');
              break;
            case 'cseq':
              message.setHeader('cseq', headerValue);
              parsed = message.parseHeader('cseq');
              if (parsed) {
                message.cseq = parsed.value;
              }
              if (message instanceof SIP.IncomingResponse) {
                message.method = parsed.method;
              }
              break;
            case 'max-forwards':
              message.setHeader('max-forwards', headerValue);
              parsed = message.parseHeader('max-forwards');
              break;
            case 'www-authenticate':
              message.setHeader('www-authenticate', headerValue);
              parsed = message.parseHeader('www-authenticate');
              break;
            case 'proxy-authenticate':
              message.setHeader('proxy-authenticate', headerValue);
              parsed = message.parseHeader('proxy-authenticate');
              break;
            case 'refer-to':
            case 'r':
              message.setHeader('refer-to', headerValue);
              parsed = message.parseHeader('refer-to');
              if (parsed) {
                message.refer_to = parsed;
              }
              break;
            default:
              message.setHeader(headerName, headerValue);
              parsed = 0;
          }

          if (parsed === undefined) {
            return {
              error: 'error parsing header "' + headerName + '"'
            };
          } else {
            return true;
          }
        }

        /** Parse SIP Message
         * @function
         * @param {String} message SIP message.
         * @param {Object} logger object.
         * @returns {SIP.IncomingRequest|SIP.IncomingResponse|undefined}
         */
        Parser = {};
        Parser.parseMessage = function (data, ua) {
          var message, firstLine, contentLength, bodyStart, parsed,
            headerStart = 0,
            headerEnd = data.indexOf('\r\n'),
            logger = ua.getLogger('sip.parser');

          if (headerEnd === -1) {
            logger.warn('no CRLF found, not a SIP message, discarded');
            return;
          }

          firstLine = data.substring(0, headerEnd);
          parsed = SIP.Grammar.parse(firstLine, 'Request_Response');

          if (parsed === -1) {
            logger.warn('error parsing first line of SIP message: "' + firstLine + '"');
            return;
          } else if (!parsed.status_code) {
            message = new SIP.IncomingRequest(ua);
            message.method = parsed.method;
            message.ruri = parsed.uri;
          } else {
            message = new SIP.IncomingResponse(ua);
            message.status_code = parsed.status_code;
            message.reason_phrase = parsed.reason_phrase;
          }

          message.data = data;
          headerStart = headerEnd + 2;

          /* Loop over every line in data. Detect the end of each header and parse
                  * it or simply add to the headers collection.
                  */
          while (true) {
            headerEnd = getHeader(data, headerStart);

            if (headerEnd === -2) {
              bodyStart = headerStart + 2;
              break;
            }
            else if (headerEnd === -1) {
              logger.error('malformed message');
              return;
            }

            parsed = parseHeader(message, data, headerStart, headerEnd);

            if (parsed !== true) {
              logger.error(parsed.error);
              return;
            }

            headerStart = headerEnd + 2;
          }

          /* RFC3261 18.3.
                   * If there are additional bytes in the transport packet
                   * beyond the end of the body, they MUST be discarded.
                   */
          if (message.hasHeader('content-length')) {
            contentLength = message.getHeader('content-length');
            message.body = data.substr(bodyStart, contentLength);
          } else {
            message.body = data.substring(bodyStart);
          }

          return message;
        };

        SIP.Parser = Parser;
      };

    }, {}], 17: [function (require, module, exports) {
      "use strict";
      module.exports = function (SIP) {

        var RegisterContext;

        RegisterContext = function (ua) {
          var params = {},
            regId = 1;

          this.registrar = ua.configuration.registrarServer;
          this.expires = ua.configuration.registerExpires;


          this.contact = ua.contact.toString();

          if (regId) {
            this.contact += ';reg-id=' + regId;
            this.contact += ';+sip.instance="<urn:uuid:' + ua.configuration.instanceId + '>"';
          }

          this.call_id = SIP.Utils.createRandomToken(22);
          this.cseq = 80;

          this.to_uri = ua.configuration.uri;

          params.to_uri = this.to_uri;
          params.to_displayName = ua.configuration.displayName;
          params.call_id = this.call_id;
          params.cseq = this.cseq;

          SIP.Utils.augment(this, SIP.ClientContext, [ua, 'REGISTER', this.registrar, { params: params }]);

          this.registrationTimer = null;
          this.registrationExpiredTimer = null;

          this.registered = false;

          this.logger = ua.getLogger('sip.registercontext');
        };

        RegisterContext.prototype = {
          register: function (options) {
            var self = this, extraHeaders;

            this.options = options || {};
            extraHeaders = (this.options.extraHeaders || []).slice();
            extraHeaders.push('Contact: ' + this.contact + ';expires=' + this.expires);
            extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());

            this.closeHeaders = this.options.closeWithHeaders ?
              (this.options.extraHeaders || []).slice() : [];

            this.receiveResponse = function (response) {
              var contact, expires,
                contacts = response.getHeaders('contact').length,
                cause;

              if (response.cseq !== this.cseq) {
                return;
              }

              if (this.registrationTimer !== null) {
                SIP.Timers.clearTimeout(this.registrationTimer);
                this.registrationTimer = null;
              }

              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code):
                  this.emit('progress', response);
                  break;
                case /^2[0-9]{2}$/.test(response.status_code):
                  this.emit('accepted', response);

                  if (response.hasHeader('expires')) {
                    expires = response.getHeader('expires');
                  }

                  if (this.registrationExpiredTimer !== null) {
                    SIP.Timers.clearTimeout(this.registrationExpiredTimer);
                    this.registrationExpiredTimer = null;
                  }

                  if (!contacts) {
                    this.logger.warn('no Contact header in response to REGISTER, response ignored');
                    break;
                  }

                  while (contacts--) {
                    contact = response.parseHeader('contact', contacts);
                    if (contact.uri.user === this.ua.contact.uri.user) {
                      expires = contact.getParam('expires');
                      break;
                    } else {
                      contact = null;
                    }
                  }

                  if (!contact) {
                    this.logger.warn('no Contact header pointing to us, response ignored');
                    break;
                  }

                  if (!expires) {
                    expires = this.expires;
                  }


                  this.registrationTimer = SIP.Timers.setTimeout(function () {
                    self.registrationTimer = null;
                    self.register(self.options);
                  }, (expires * 1000) - 3000);
                  this.registrationExpiredTimer = SIP.Timers.setTimeout(function () {
                    self.logger.warn('registration expired');
                    if (self.registered) {
                      self.unregistered(null, SIP.C.causes.EXPIRES);
                    }
                  }, expires * 1000);

                  if (contact.hasParam('temp-gruu')) {
                    this.ua.contact.temp_gruu = SIP.URI.parse(contact.getParam('temp-gruu').replace(/"/g, ''));
                  }
                  if (contact.hasParam('pub-gruu')) {
                    this.ua.contact.pub_gruu = SIP.URI.parse(contact.getParam('pub-gruu').replace(/"/g, ''));
                  }

                  this.registered = true;
                  this.emit('registered', response || null);
                  break;
                case /^423$/.test(response.status_code):
                  if (response.hasHeader('min-expires')) {
                    this.expires = response.getHeader('min-expires');
                    this.register(this.options);
                  } else {
                    this.logger.warn('423 response received for REGISTER without Min-Expires');
                    this.registrationFailure(response, SIP.C.causes.SIP_FAILURE_CODE);
                  }
                  break;
                default:
                  cause = SIP.Utils.sipErrorCause(response.status_code);
                  this.registrationFailure(response, cause);
              }
            };

            this.onRequestTimeout = function () {
              this.registrationFailure(null, SIP.C.causes.REQUEST_TIMEOUT);
            };

            this.onTransportError = function () {
              this.registrationFailure(null, SIP.C.causes.CONNECTION_ERROR);
            };

            this.cseq++;
            this.request.cseq = this.cseq;
            this.request.setHeader('cseq', this.cseq + ' REGISTER');
            this.request.extraHeaders = extraHeaders;
            this.send();
          },

          registrationFailure: function (response, cause) {
            this.emit('failed', response || null, cause || null);
          },

          onTransportClosed: function () {
            this.registered_before = this.registered;
            if (this.registrationTimer !== null) {
              SIP.Timers.clearTimeout(this.registrationTimer);
              this.registrationTimer = null;
            }

            if (this.registrationExpiredTimer !== null) {
              SIP.Timers.clearTimeout(this.registrationExpiredTimer);
              this.registrationExpiredTimer = null;
            }

            if (this.registered) {
              this.unregistered(null, SIP.C.causes.CONNECTION_ERROR);
            }
          },

          onTransportConnected: function () {
            this.register(this.options);
          },

          close: function () {
            var options = {
              all: false,
              extraHeaders: this.closeHeaders
            };

            this.registered_before = this.registered;
            this.unregister(options);
          },

          unregister: function (options) {
            var extraHeaders;

            options = options || {};

            if (!this.registered && !options.all) {
              this.logger.warn('already unregistered');
              return;
            }

            extraHeaders = (options.extraHeaders || []).slice();

            this.registered = false;

            if (this.registrationTimer !== null) {
              SIP.Timers.clearTimeout(this.registrationTimer);
              this.registrationTimer = null;
            }

            if (options.all) {
              extraHeaders.push('Contact: *');
              extraHeaders.push('Expires: 0');
            } else {
              extraHeaders.push('Contact: ' + this.contact + ';expires=0');
            }


            this.receiveResponse = function (response) {
              var cause;

              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code):
                  this.emit('progress', response);
                  break;
                case /^2[0-9]{2}$/.test(response.status_code):
                  this.emit('accepted', response);
                  if (this.registrationExpiredTimer !== null) {
                    SIP.Timers.clearTimeout(this.registrationExpiredTimer);
                    this.registrationExpiredTimer = null;
                  }
                  this.unregistered(response);
                  break;
                default:
                  cause = SIP.Utils.sipErrorCause(response.status_code);
                  this.unregistered(response, cause);
              }
            };

            this.onRequestTimeout = function () {
            };

            this.onTransportError = function () {

            };

            this.cseq++;
            this.request.cseq = this.cseq;
            this.request.setHeader('cseq', this.cseq + ' REGISTER');
            this.request.extraHeaders = extraHeaders;

            this.send();
          },

          unregistered: function (response, cause) {
            this.registered = false;
            this.emit('unregistered', response || null, cause || null);
          }

        };


        SIP.RegisterContext = RegisterContext;
      };

    }, {}], 18: [function (require, module, exports) {
      "use strict";

      /**
       * @fileoverview Request Sender
       */

      /**
       * @augments SIP
       * @class Class creating a request sender.
       * @param {Object} applicant
       * @param {SIP.UA} ua
       */
      module.exports = function (SIP) {
        var RequestSender;

        RequestSender = function (applicant, ua) {
          this.logger = ua.getLogger('sip.requestsender');
          this.ua = ua;
          this.applicant = applicant;
          this.method = applicant.request.method;
          this.request = applicant.request;
          this.credentials = null;
          this.challenged = false;
          this.staled = false;

          if (ua.status === SIP.UA.C.STATUS_USER_CLOSED && (this.method !== SIP.C.BYE || this.method !== SIP.C.ACK)) {
            this.onTransportError();
          }
        };

        /**
         * Create the client transaction and send the message.
         */
        RequestSender.prototype = {
          send: function () {
            switch (this.method) {
              case "INVITE":
                this.clientTransaction = new SIP.Transactions.InviteClientTransaction(this, this.request, this.ua.transport);
                break;
              case "ACK":
                this.clientTransaction = new SIP.Transactions.AckClientTransaction(this, this.request, this.ua.transport);
                break;
              default:
                this.clientTransaction = new SIP.Transactions.NonInviteClientTransaction(this, this.request, this.ua.transport);
            }
            this.clientTransaction.send();

            return this.clientTransaction;
          },

          /**
           * Callback fired when receiving a request timeout error from the client transaction.
           * To be re-defined by the applicant.
           * @event
           */
          onRequestTimeout: function () {
            this.applicant.onRequestTimeout();
          },

          /**
           * Callback fired when receiving a transport error from the client transaction.
           * To be re-defined by the applicant.
           * @event
           */
          onTransportError: function () {
            this.applicant.onTransportError();
          },

          /**
           * Called from client transaction when receiving a correct response to the request.
           * Authenticate request if needed or pass the response back to the applicant.
           * @param {SIP.IncomingResponse} response
           */
          receiveResponse: function (response) {
            var cseq, challenge, authorization_header_name,
              status_code = response.status_code;

            /*
                      * Authentication
                      * Authenticate once. _challenged_ flag used to avoid infinite authentications.
                      */
            if (status_code === 401 || status_code === 407) {

              if (response.status_code === 401) {
                challenge = response.parseHeader('www-authenticate');
                authorization_header_name = 'authorization';
              } else {
                challenge = response.parseHeader('proxy-authenticate');
                authorization_header_name = 'proxy-authorization';
              }

              if (!challenge) {
                this.logger.warn(response.status_code + ' with wrong or missing challenge, cannot authenticate');
                this.applicant.receiveResponse(response);
                return;
              }

              if (!this.challenged || (!this.staled && challenge.stale === true)) {
                if (!this.credentials) {
                  this.credentials = this.ua.configuration.authenticationFactory(this.ua);
                }

                if (!this.credentials.authenticate(this.request, challenge)) {
                  this.applicant.receiveResponse(response);
                  return;
                }
                this.challenged = true;

                if (challenge.stale) {
                  this.staled = true;
                }

                if (response.method === SIP.C.REGISTER) {
                  cseq = this.applicant.cseq += 1;
                } else if (this.request.dialog) {
                  cseq = this.request.dialog.local_seqnum += 1;
                } else {
                  cseq = this.request.cseq + 1;
                  this.request.cseq = cseq;
                }
                this.request.setHeader('cseq', cseq + ' ' + this.method);

                this.request.setHeader(authorization_header_name, this.credentials.toString());
                this.send();
              } else {
                this.applicant.receiveResponse(response);
              }
            } else {
              this.applicant.receiveResponse(response);
            }
          }
        };

        SIP.RequestSender = RequestSender;
      };

    }, {}], 19: [function (require, module, exports) {
      /**
       * @name SIP
       * @namespace
       */
      "use strict";

      module.exports = function (environment) {

        var pkg = require('../package.json'),
          version = pkg.version,
          title = pkg.title;

        var SIP = Object.defineProperties({}, {
          version: {
            get: function () { return version; }
          },
          name: {
            get: function () { return title; }
          }
        });

        require('./Utils')(SIP, environment);
        SIP.LoggerFactory = require('./LoggerFactory')(environment.console);
        SIP.EventEmitter = require('./EventEmitter')(environment.console);
        SIP.C = require('./Constants')(SIP.name, SIP.version);
        SIP.Exceptions = require('./Exceptions');
        SIP.Timers = require('./Timers')(environment.timers);
        SIP.Transport = environment.Transport(SIP, environment.WebSocket);
        require('./Parser')(SIP);
        require('./SIPMessage')(SIP);
        require('./URI')(SIP);
        require('./NameAddrHeader')(SIP);
        require('./Transactions')(SIP);
        require('./Dialogs')(SIP);
        require('./RequestSender')(SIP);
        require('./RegisterContext')(SIP);
        SIP.MediaHandler = require('./MediaHandler')(SIP.EventEmitter);
        require('./ClientContext')(SIP);
        require('./ServerContext')(SIP);
        require('./Session')(SIP, environment);
        require('./Subscription')(SIP);
        SIP.WebRTC = require('./WebRTC')(SIP, environment);
        require('./UA')(SIP, environment);
        SIP.Hacks = require('./Hacks')(SIP);
        require('./SanityCheck')(SIP);
        SIP.DigestAuthentication = require('./DigestAuthentication')(SIP.Utils);
        SIP.Grammar = require('./Grammar')(SIP);

        return SIP;
      };

    }, { "../package.json": 2, "./ClientContext": 3, "./Constants": 4, "./Dialogs": 6, "./DigestAuthentication": 7, "./EventEmitter": 8, "./Exceptions": 9, "./Grammar": 10, "./Hacks": 12, "./LoggerFactory": 13, "./MediaHandler": 14, "./NameAddrHeader": 15, "./Parser": 16, "./RegisterContext": 17, "./RequestSender": 18, "./SIPMessage": 20, "./SanityCheck": 21, "./ServerContext": 22, "./Session": 23, "./Subscription": 25, "./Timers": 26, "./Transactions": 27, "./UA": 29, "./URI": 30, "./Utils": 31, "./WebRTC": 32 }], 20: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP Message
       */

      module.exports = function (SIP) {
        var
          OutgoingRequest,
          IncomingMessage,
          IncomingRequest,
          IncomingResponse;

        function getSupportedHeader(request) {
          var allowUnregistered = request.ua.configuration.hackAllowUnregisteredOptionTags;
          var optionTags = [];
          var optionTagSet = {};

          if (request.method === SIP.C.REGISTER) {
            optionTags.push('path', 'gruu');
          } else if (request.method === SIP.C.INVITE &&
            (request.ua.contact.pub_gruu || request.ua.contact.temp_gruu)) {
            optionTags.push('gruu');
          }

          if (request.ua.configuration.rel100 === SIP.C.supported.SUPPORTED) {
            optionTags.push('100rel');
          }
          if (request.ua.configuration.replaces === SIP.C.supported.SUPPORTED) {
            optionTags.push('replaces');
          }

          optionTags.push('outbound');

          optionTags = optionTags.concat(request.ua.configuration.extraSupported);

          optionTags = optionTags.filter(function (optionTag) {
            var registered = SIP.C.OPTION_TAGS[optionTag];
            var unique = !optionTagSet[optionTag];
            optionTagSet[optionTag] = true;
            return (registered || allowUnregistered) && unique;
          });

          return 'Supported: ' + optionTags.join(', ') + '\r\n';
        }

        /**
         * @augments SIP
         * @class Class for outgoing SIP request.
         * @param {String} method request method
         * @param {String} ruri request uri
         * @param {SIP.UA} ua
         * @param {Object} params parameters that will have priority over ua.configuration parameters:
         * <br>
         *  - cseq, call_id, from_tag, from_uri, from_displayName, to_uri, to_tag, route_set
         * @param {Object} [headers] extra headers
         * @param {String} [body]
         */
        OutgoingRequest = function (method, ruri, ua, params, extraHeaders, body) {
          var
            to,
            from,
            call_id,
            cseq,
            to_uri,
            from_uri;

          params = params || {};

          if (!method || !ruri || !ua) {
            return null;
          }

          this.logger = ua.getLogger('sip.sipmessage');
          this.ua = ua;
          this.headers = {};
          this.method = method;
          this.ruri = ruri;
          this.body = body;
          this.extraHeaders = (extraHeaders || []).slice();
          this.statusCode = params.status_code;
          this.reasonPhrase = params.reason_phrase;


          if (params.route_set) {
            this.setHeader('route', params.route_set);
          } else if (ua.configuration.usePreloadedRoute) {
            this.setHeader('route', ua.transport.server.sip_uri);
          }


          this.setHeader('via', '');

          this.setHeader('max-forwards', SIP.UA.C.MAX_FORWARDS);

          to_uri = params.to_uri || ruri;
          to = (params.to_displayName || params.to_displayName === 0) ? '"' + params.to_displayName + '" ' : '';
          to += '<' + (to_uri && to_uri.toRaw ? to_uri.toRaw() : to_uri) + '>';
          to += params.to_tag ? ';tag=' + params.to_tag : '';
          this.to = new SIP.NameAddrHeader.parse(to);
          this.setHeader('to', to);

          from_uri = params.from_uri || ua.configuration.uri;
          if (params.from_displayName || params.from_displayName === 0) {
            from = '"' + params.from_displayName + '" ';
          } else if (ua.configuration.displayName) {
            from = '"' + ua.configuration.displayName + '" ';
          } else {
            from = '';
          }
          from += '<' + (from_uri && from_uri.toRaw ? from_uri.toRaw() : from_uri) + '>;tag=';
          from += params.from_tag || SIP.Utils.newTag();
          this.from = new SIP.NameAddrHeader.parse(from);
          this.setHeader('from', from);

          call_id = params.call_id || (ua.configuration.sipjsId + SIP.Utils.createRandomToken(15));
          this.call_id = call_id;
          this.setHeader('call-id', call_id);

          cseq = params.cseq || Math.floor(Math.random() * 10000);
          this.cseq = cseq;
          this.setHeader('cseq', cseq + ' ' + method);
        };

        OutgoingRequest.prototype = {
          /**
           * Replace the the given header by the given value.
           * @param {String} name header name
           * @param {String | Array} value header value
           */
          setHeader: function (name, value) {
            this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];
          },

          /**
           * Get the value of the given header name at the given position.
           * @param {String} name header name
           * @returns {String|undefined} Returns the specified header, undefined if header doesn't exist.
           */
          getHeader: function (name) {
            var regexp, idx,
              length = this.extraHeaders.length,
              header = this.headers[SIP.Utils.headerize(name)];

            if (header) {
              if (header[0]) {
                return header[0];
              }
            } else {
              regexp = new RegExp('^\\s*' + name + '\\s*:', 'i');
              for (idx = 0; idx < length; idx++) {
                header = this.extraHeaders[idx];
                if (regexp.test(header)) {
                  return header.substring(header.indexOf(':') + 1).trim();
                }
              }
            }

            return;
          },

          /**
           * Get the header/s of the given name.
           * @param {String} name header name
           * @returns {Array} Array with all the headers of the specified name.
           */
          getHeaders: function (name) {
            var idx, length, regexp,
              header = this.headers[SIP.Utils.headerize(name)],
              result = [];

            if (header) {
              length = header.length;
              for (idx = 0; idx < length; idx++) {
                result.push(header[idx]);
              }
              return result;
            } else {
              length = this.extraHeaders.length;
              regexp = new RegExp('^\\s*' + name + '\\s*:', 'i');
              for (idx = 0; idx < length; idx++) {
                header = this.extraHeaders[idx];
                if (regexp.test(header)) {
                  result.push(header.substring(header.indexOf(':') + 1).trim());
                }
              }
              return result;
            }
          },

          /**
           * Verify the existence of the given header.
           * @param {String} name header name
           * @returns {boolean} true if header with given name exists, false otherwise
           */
          hasHeader: function (name) {
            var regexp, idx,
              length = this.extraHeaders.length;

            if (this.headers[SIP.Utils.headerize(name)]) {
              return true;
            } else {
              regexp = new RegExp('^\\s*' + name + '\\s*:', 'i');
              for (idx = 0; idx < length; idx++) {
                if (regexp.test(this.extraHeaders[idx])) {
                  return true;
                }
              }
            }

            return false;
          },

          toString: function () {
            var msg = '', header, length, idx;

            msg += this.method + ' ' + (this.ruri.toRaw ? this.ruri.toRaw() : this.ruri) + ' SIP/2.0\r\n';

            for (header in this.headers) {
              length = this.headers[header].length;
              for (idx = 0; idx < length; idx++) {
                msg += header + ': ' + this.headers[header][idx] + '\r\n';
              }
            }

            length = this.extraHeaders.length;
            for (idx = 0; idx < length; idx++) {
              msg += this.extraHeaders[idx].trim() + '\r\n';
            }

            msg += getSupportedHeader(this);
            msg += 'User-Agent: ' + this.ua.configuration.userAgentString + '\r\n';

            if (this.body) {
              if (typeof this.body === 'string') {
                length = SIP.Utils.str_utf8_length(this.body);
                msg += 'Content-Length: ' + length + '\r\n\r\n';
                msg += this.body;
              } else {
                if (this.body.body && this.body.contentType) {
                  length = SIP.Utils.str_utf8_length(this.body.body);
                  msg += 'Content-Type: ' + this.body.contentType + '\r\n';
                  msg += 'Content-Length: ' + length + '\r\n\r\n';
                  msg += this.body.body;
                } else {
                  msg += 'Content-Length: ' + 0 + '\r\n\r\n';
                }
              }
            } else {
              msg += 'Content-Length: ' + 0 + '\r\n\r\n';
            }

            return msg;
          }
        };

        /**
         * @augments SIP
         * @class Class for incoming SIP message.
         */
        IncomingMessage = function () {
          this.data = null;
          this.headers = null;
          this.method = null;
          this.via = null;
          this.via_branch = null;
          this.call_id = null;
          this.cseq = null;
          this.from = null;
          this.from_tag = null;
          this.to = null;
          this.to_tag = null;
          this.body = null;
        };

        IncomingMessage.prototype = {
          /**
           * Insert a header of the given name and value into the last position of the
           * header array.
           * @param {String} name header name
           * @param {String} value header value
           */
          addHeader: function (name, value) {
            var header = { raw: value };

            name = SIP.Utils.headerize(name);

            if (this.headers[name]) {
              this.headers[name].push(header);
            } else {
              this.headers[name] = [header];
            }
          },

          /**
           * Get the value of the given header name at the given position.
           * @param {String} name header name
           * @returns {String|undefined} Returns the specified header, null if header doesn't exist.
           */
          getHeader: function (name) {
            var header = this.headers[SIP.Utils.headerize(name)];

            if (header) {
              if (header[0]) {
                return header[0].raw;
              }
            } else {
              return;
            }
          },

          /**
           * Get the header/s of the given name.
           * @param {String} name header name
           * @returns {Array} Array with all the headers of the specified name.
           */
          getHeaders: function (name) {
            var idx, length,
              header = this.headers[SIP.Utils.headerize(name)],
              result = [];

            if (!header) {
              return [];
            }

            length = header.length;
            for (idx = 0; idx < length; idx++) {
              result.push(header[idx].raw);
            }

            return result;
          },

          /**
           * Verify the existence of the given header.
           * @param {String} name header name
           * @returns {boolean} true if header with given name exists, false otherwise
           */
          hasHeader: function (name) {
            return (this.headers[SIP.Utils.headerize(name)]) ? true : false;
          },

          /**
           * Parse the given header on the given index.
           * @param {String} name header name
           * @param {Number} [idx=0] header index
           * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.
           */
          parseHeader: function (name, idx) {
            var header, value, parsed;

            name = SIP.Utils.headerize(name);

            idx = idx || 0;

            if (!this.headers[name]) {
              this.logger.log('header "' + name + '" not present');
              return;
            } else if (idx >= this.headers[name].length) {
              this.logger.log('not so many "' + name + '" headers present');
              return;
            }

            header = this.headers[name][idx];
            value = header.raw;

            if (header.parsed) {
              return header.parsed;
            }

            parsed = SIP.Grammar.parse(value, name.replace(/-/g, '_'));

            if (parsed === -1) {
              this.headers[name].splice(idx, 1);
              this.logger.warn('error parsing "' + name + '" header field with value "' + value + '"');
              return;
            } else {
              header.parsed = parsed;
              return parsed;
            }
          },

          /**
           * Message Header attribute selector. Alias of parseHeader.
           * @param {String} name header name
           * @param {Number} [idx=0] header index
           * @returns {Object|undefined} Parsed header object, undefined if the header is not present or in case of a parsing error.
           *
           * @example
           * message.s('via',3).port
           */
          s: function (name, idx) {
            return this.parseHeader(name, idx);
          },

          /**
           * Replace the value of the given header by the value.
           * @param {String} name header name
           * @param {String} value header value
           */
          setHeader: function (name, value) {
            var header = { raw: value };
            this.headers[SIP.Utils.headerize(name)] = [header];
          },

          toString: function () {
            return this.data;
          }
        };

        /**
         * @augments IncomingMessage
         * @class Class for incoming SIP request.
         */
        IncomingRequest = function (ua) {
          this.logger = ua.getLogger('sip.sipmessage');
          this.ua = ua;
          this.headers = {};
          this.ruri = null;
          this.transport = null;
          this.server_transaction = null;
        };
        IncomingRequest.prototype = new IncomingMessage();

        /**
         * Stateful reply.
         * @param {Number} code status code
         * @param {String} reason reason phrase
         * @param {Object} headers extra headers
         * @param {String} body body
         * @param {Function} [onSuccess] onSuccess callback
         * @param {Function} [onFailure] onFailure callback
         */
        IncomingRequest.prototype.reply = function (code, reason, extraHeaders, body, onSuccess, onFailure) {
          var rr, vias, length, idx, response,
            to = this.getHeader('To'),
            r = 0,
            v = 0;

          response = SIP.Utils.buildStatusLine(code, reason);
          extraHeaders = (extraHeaders || []).slice();

          if (this.method === SIP.C.INVITE && code > 100 && code <= 200) {
            rr = this.getHeaders('record-route');
            length = rr.length;

            for (r; r < length; r++) {
              response += 'Record-Route: ' + rr[r] + '\r\n';
            }
          }

          vias = this.getHeaders('via');
          length = vias.length;

          for (v; v < length; v++) {
            response += 'Via: ' + vias[v] + '\r\n';
          }

          if (!this.to_tag && code > 100) {
            to += ';tag=' + SIP.Utils.newTag();
          } else if (this.to_tag && !this.s('to').hasParam('tag')) {
            to += ';tag=' + this.to_tag;
          }

          response += 'To: ' + to + '\r\n';
          response += 'From: ' + this.getHeader('From') + '\r\n';
          response += 'Call-ID: ' + this.call_id + '\r\n';
          response += 'CSeq: ' + this.cseq + ' ' + this.method + '\r\n';

          length = extraHeaders.length;
          for (idx = 0; idx < length; idx++) {
            response += extraHeaders[idx].trim() + '\r\n';
          }

          response += getSupportedHeader(this);
          response += 'User-Agent: ' + this.ua.configuration.userAgentString + '\r\n';

          if (body) {
            if (typeof body === 'string') {
              length = SIP.Utils.str_utf8_length(body);
              response += 'Content-Type: application/sdp\r\n';
              response += 'Content-Length: ' + length + '\r\n\r\n';
              response += body;
            } else {
              if (body.body && body.contentType) {
                length = SIP.Utils.str_utf8_length(body.body);
                response += 'Content-Type: ' + body.contentType + '\r\n';
                response += 'Content-Length: ' + length + '\r\n\r\n';
                response += body.body;
              } else {
                response += 'Content-Length: ' + 0 + '\r\n\r\n';
              }
            }
          } else {
            response += 'Content-Length: ' + 0 + '\r\n\r\n';
          }

          this.server_transaction.receiveResponse(code, response).then(onSuccess, onFailure);

          return response;
        };

        /**
         * Stateless reply.
         * @param {Number} code status code
         * @param {String} reason reason phrase
         */
        IncomingRequest.prototype.reply_sl = function (code, reason) {
          var to, response,
            v = 0,
            vias = this.getHeaders('via'),
            length = vias.length;

          response = SIP.Utils.buildStatusLine(code, reason);

          for (v; v < length; v++) {
            response += 'Via: ' + vias[v] + '\r\n';
          }

          to = this.getHeader('To');

          if (!this.to_tag && code > 100) {
            to += ';tag=' + SIP.Utils.newTag();
          } else if (this.to_tag && !this.s('to').hasParam('tag')) {
            to += ';tag=' + this.to_tag;
          }

          response += 'To: ' + to + '\r\n';
          response += 'From: ' + this.getHeader('From') + '\r\n';
          response += 'Call-ID: ' + this.call_id + '\r\n';
          response += 'CSeq: ' + this.cseq + ' ' + this.method + '\r\n';
          response += 'User-Agent: ' + this.ua.configuration.userAgentString + '\r\n';
          response += 'Content-Length: ' + 0 + '\r\n\r\n';

          this.transport.send(response);
        };


        /**
         * @augments IncomingMessage
         * @class Class for incoming SIP response.
         */
        IncomingResponse = function (ua) {
          this.logger = ua.getLogger('sip.sipmessage');
          this.headers = {};
          this.status_code = null;
          this.reason_phrase = null;
        };
        IncomingResponse.prototype = new IncomingMessage();

        SIP.OutgoingRequest = OutgoingRequest;
        SIP.IncomingRequest = IncomingRequest;
        SIP.IncomingResponse = IncomingResponse;
      };

    }, {}], 21: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview Incoming SIP Message Sanity Check
       */

      /**
       * SIP message sanity check.
       * @augments SIP
       * @function
       * @param {SIP.IncomingMessage} message
       * @param {SIP.UA} ua
       * @param {SIP.Transport} transport
       * @returns {Boolean}
       */
      module.exports = function (SIP) {
        var sanityCheck,
          requests = [],
          responses = [],
          all = [];

        function reply(status_code, message, transport) {
          var to,
            response = SIP.Utils.buildStatusLine(status_code),
            vias = message.getHeaders('via'),
            length = vias.length,
            idx = 0;

          for (idx; idx < length; idx++) {
            response += "Via: " + vias[idx] + "\r\n";
          }

          to = message.getHeader('To');

          if (!message.to_tag) {
            to += ';tag=' + SIP.Utils.newTag();
          }

          response += "To: " + to + "\r\n";
          response += "From: " + message.getHeader('From') + "\r\n";
          response += "Call-ID: " + message.call_id + "\r\n";
          response += "CSeq: " + message.cseq + " " + message.method + "\r\n";
          response += "\r\n";

          transport.send(response);
        }

        /*
               * Sanity Check for incoming Messages
               *
               * Requests:
               *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme
               *  - _rfc3261_16_3_4_ Receive a Request already sent by us
               *   Does not look at via sent-by but at sipjsId, which is inserted as
               *   a prefix in all initial requests generated by the ua
               *  - _rfc3261_18_3_request_ Body Content-Length
               *  - _rfc3261_8_2_2_2_ Merged Requests
               *
               * Responses:
               *  - _rfc3261_8_1_3_3_ Multiple Via headers
               *  - _rfc3261_18_1_2_ sent-by mismatch
               *  - _rfc3261_18_3_response_ Body Content-Length
               *
               * All:
               *  - Minimum headers in a SIP message
               */

        function rfc3261_8_2_2_1(message, ua, transport) {
          if (!message.ruri || message.ruri.scheme !== 'sip') {
            reply(416, message, transport);
            return false;
          }
        }

        function rfc3261_16_3_4(message, ua, transport) {
          if (!message.to_tag) {
            if (message.call_id.substr(0, 5) === ua.configuration.sipjsId) {
              reply(482, message, transport);
              return false;
            }
          }
        }

        function rfc3261_18_3_request(message, ua, transport) {
          var len = SIP.Utils.str_utf8_length(message.body),
            contentLength = message.getHeader('content-length');

          if (len < contentLength) {
            reply(400, message, transport);
            return false;
          }
        }

        function rfc3261_8_2_2_2(message, ua, transport) {
          var tr, idx,
            fromTag = message.from_tag,
            call_id = message.call_id,
            cseq = message.cseq;

          if (!message.to_tag) {
            if (message.method === SIP.C.INVITE) {
              tr = ua.transactions.ist[message.via_branch];
              if (tr) {
                return;
              } else {
                for (idx in ua.transactions.ist) {
                  tr = ua.transactions.ist[idx];
                  if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
                    reply(482, message, transport);
                    return false;
                  }
                }
              }
            } else {
              tr = ua.transactions.nist[message.via_branch];
              if (tr) {
                return;
              } else {
                for (idx in ua.transactions.nist) {
                  tr = ua.transactions.nist[idx];
                  if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
                    reply(482, message, transport);
                    return false;
                  }
                }
              }
            }
          }
        }

        function rfc3261_8_1_3_3(message, ua) {
          if (message.getHeaders('via').length > 1) {
            ua.getLogger('sip.sanitycheck').warn('More than one Via header field present in the response. Dropping the response');
            return false;
          }
        }

        function rfc3261_18_1_2(message, ua) {
          var viaHost = ua.configuration.viaHost;
          if (message.via.host !== viaHost || message.via.port !== undefined) {
            ua.getLogger('sip.sanitycheck').warn('Via sent-by in the response does not match UA Via host value. Dropping the response');
            return false;
          }
        }

        function rfc3261_18_3_response(message, ua) {
          var
            len = SIP.Utils.str_utf8_length(message.body),
            contentLength = message.getHeader('content-length');

          if (len < contentLength) {
            ua.getLogger('sip.sanitycheck').warn('Message body length is lower than the value in Content-Length header field. Dropping the response');
            return false;
          }
        }

        function minimumHeaders(message, ua) {
          var
            mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'],
            idx = mandatoryHeaders.length;

          while (idx--) {
            if (!message.hasHeader(mandatoryHeaders[idx])) {
              ua.getLogger('sip.sanitycheck').warn('Missing mandatory header field : ' + mandatoryHeaders[idx] + '. Dropping the response');
              return false;
            }
          }
        }

        requests.push(rfc3261_8_2_2_1);
        requests.push(rfc3261_16_3_4);
        requests.push(rfc3261_18_3_request);
        requests.push(rfc3261_8_2_2_2);

        responses.push(rfc3261_8_1_3_3);
        responses.push(rfc3261_18_1_2);
        responses.push(rfc3261_18_3_response);

        all.push(minimumHeaders);

        sanityCheck = function (message, ua, transport) {
          var len, pass;

          len = all.length;
          while (len--) {
            pass = all[len](message, ua, transport);
            if (pass === false) {
              return false;
            }
          }

          if (message instanceof SIP.IncomingRequest) {
            len = requests.length;
            while (len--) {
              pass = requests[len](message, ua, transport);
              if (pass === false) {
                return false;
              }
            }
          }

          else if (message instanceof SIP.IncomingResponse) {
            len = responses.length;
            while (len--) {
              pass = responses[len](message, ua, transport);
              if (pass === false) {
                return false;
              }
            }
          }

          return true;
        };

        SIP.sanityCheck = sanityCheck;
      };

    }, {}], 22: [function (require, module, exports) {
      "use strict";
      module.exports = function (SIP) {
        var ServerContext;

        ServerContext = function (ua, request) {
          this.ua = ua;
          this.logger = ua.getLogger('sip.servercontext');
          this.request = request;
          if (request.method === SIP.C.INVITE) {
            this.transaction = new SIP.Transactions.InviteServerTransaction(request, ua);
          } else {
            this.transaction = new SIP.Transactions.NonInviteServerTransaction(request, ua);
          }

          if (request.body) {
            this.body = request.body;
          }
          if (request.hasHeader('Content-Type')) {
            this.contentType = request.getHeader('Content-Type');
          }
          this.method = request.method;

          this.data = {};

          this.localIdentity = request.to;
          this.remoteIdentity = request.from;
        };

        ServerContext.prototype = Object.create(SIP.EventEmitter.prototype);

        ServerContext.prototype.progress = function (options) {
          options = Object.create(options || Object.prototype);
          options.statusCode || (options.statusCode = 180);
          options.minCode = 100;
          options.maxCode = 199;
          options.events = ['progress'];
          return this.reply(options);
        };

        ServerContext.prototype.accept = function (options) {
          options = Object.create(options || Object.prototype);
          options.statusCode || (options.statusCode = 200);
          options.minCode = 200;
          options.maxCode = 299;
          options.events = ['accepted'];
          return this.reply(options);
        };

        ServerContext.prototype.reject = function (options) {
          options = Object.create(options || Object.prototype);
          options.statusCode || (options.statusCode = 480);
          options.minCode = 300;
          options.maxCode = 699;
          options.events = ['rejected', 'failed'];
          return this.reply(options);
        };

        ServerContext.prototype.reply = function (options) {
          options = options || {};
          var
            statusCode = options.statusCode || 100,
            minCode = options.minCode || 100,
            maxCode = options.maxCode || 699,
            reasonPhrase = SIP.Utils.getReasonPhrase(statusCode, options.reasonPhrase),
            extraHeaders = options.extraHeaders || [],
            body = options.body,
            events = options.events || [],
            response;

          if (statusCode < minCode || statusCode > maxCode) {
            throw new TypeError('Invalid statusCode: ' + statusCode);
          }
          response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);
          events.forEach(function (event) {
            this.emit(event, response, reasonPhrase);
          }, this);

          return this;
        };

        ServerContext.prototype.onRequestTimeout = function () {
          this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);
        };

        ServerContext.prototype.onTransportError = function () {
          this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);
        };

        SIP.ServerContext = ServerContext;
      };

    }, {}], 23: [function (require, module, exports) {
      "use strict";
      module.exports = function (SIP, environment) {

        var DTMF = require('./Session/DTMF')(SIP);

        var Session, InviteServerContext, InviteClientContext,
          C = {
            STATUS_NULL: 0,
            STATUS_INVITE_SENT: 1,
            STATUS_1XX_RECEIVED: 2,
            STATUS_INVITE_RECEIVED: 3,
            STATUS_WAITING_FOR_ANSWER: 4,
            STATUS_ANSWERED: 5,
            STATUS_WAITING_FOR_PRACK: 6,
            STATUS_WAITING_FOR_ACK: 7,
            STATUS_CANCELED: 8,
            STATUS_TERMINATED: 9,
            STATUS_ANSWERED_WAITING_FOR_PRACK: 10,
            STATUS_EARLY_MEDIA: 11,
            STATUS_CONFIRMED: 12
          };

        /*
               * @param {function returning SIP.MediaHandler} [mediaHandlerFactory]
               *        (See the documentation for the mediaHandlerFactory argument of the UA constructor.)
               */
        Session = function (mediaHandlerFactory) {
          this.status = C.STATUS_NULL;
          this.dialog = null;
          this.earlyDialogs = {};
          this.mediaHandlerFactory = mediaHandlerFactory || SIP.WebRTC.MediaHandler.defaultFactory;
          this.hasOffer = false;
          this.hasAnswer = false;

          this.timers = {
            ackTimer: null,
            expiresTimer: null,
            invite2xxTimer: null,
            userNoAnswerTimer: null,
            rel1xxTimer: null,
            prackTimer: null
          };

          this.startTime = null;
          this.endTime = null;
          this.tones = null;

          this.local_hold = false;
          this.remote_hold = false;

          this.pending_actions = {
            actions: [],

            length: function () {
              return this.actions.length;
            },

            isPending: function (name) {
              var
                idx = 0,
                length = this.actions.length;

              for (idx; idx < length; idx++) {
                if (this.actions[idx].name === name) {
                  return true;
                }
              }
              return false;
            },

            shift: function () {
              return this.actions.shift();
            },

            push: function (name) {
              this.actions.push({
                name: name
              });
            },

            pop: function (name) {
              var
                idx = 0,
                length = this.actions.length;

              for (idx; idx < length; idx++) {
                if (this.actions[idx].name === name) {
                  this.actions.splice(idx, 1);
                  length--;
                  idx--;
                }
              }
            }
          };

          this.early_sdp = null;
          this.rel100 = SIP.C.supported.UNSUPPORTED;
        };

        Session.prototype = {
          dtmf: function (tones, options) {
            var tone, dtmfs = [],
              self = this;

            options = options || {};

            if (tones === undefined) {
              throw new TypeError('Not enough arguments');
            }

            if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_WAITING_FOR_ACK) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            if ((typeof tones !== 'string' && typeof tones !== 'number') || !tones.toString().match(/^[0-9A-D#*,]+$/i)) {
              throw new TypeError('Invalid tones: ' + tones);
            }

            tones = tones.toString().split('');

            while (tones.length > 0) { dtmfs.push(new DTMF(this, tones.shift(), options)); }

            if (this.tones) {
              this.tones = this.tones.concat(dtmfs);
              return this;
            }

            var sendDTMF = function () {
              var dtmf, timeout;

              if (self.status === C.STATUS_TERMINATED || !self.tones || self.tones.length === 0) {
                self.tones = null;
                return this;
              }

              dtmf = self.tones.shift();

              if (tone === ',') {
                timeout = 2000;
              } else {
                dtmf.on('failed', function () { self.tones = null; });
                dtmf.send(options);
                timeout = dtmf.duration + dtmf.interToneGap;
              }

              SIP.Timers.setTimeout(sendDTMF, timeout);
            };

            this.tones = dtmfs;
            sendDTMF();
            return this;
          },

          bye: function (options) {
            options = Object.create(options || Object.prototype);
            var statusCode = options.statusCode;

            if (this.status === C.STATUS_TERMINATED) {
              this.logger.error('Error: Attempted to send BYE in a terminated session.');
              return this;
            }

            this.logger.log('terminating Session');

            if (statusCode && (statusCode < 200 || statusCode >= 700)) {
              throw new TypeError('Invalid statusCode: ' + statusCode);
            }

            options.receiveResponse = function () { };

            return this.
            sendRequest(SIP.C.BYE, options).
            terminated();
          },

          refer: function (target, options) {
            options = options || {};
            var extraHeaders = (options.extraHeaders || []).slice(),
              withReplaces =
                target instanceof SIP.InviteServerContext ||
                target instanceof SIP.InviteClientContext,
              originalTarget = target;

            if (target === undefined) {
              throw new TypeError('Not enough arguments');
            }

            if (this.status !== C.STATUS_CONFIRMED) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            if (withReplaces) {
              target = '"' + target.remoteIdentity.friendlyName + '" ' +
                '<' + target.dialog.remote_target.toString() +
                '?Replaces=' + target.dialog.id.call_id +
                '%3Bto-tag%3D' + target.dialog.id.remote_tag +
                '%3Bfrom-tag%3D' + target.dialog.id.local_tag + '>';
            } else {

              try {
                target = SIP.Grammar.parse(target, 'Refer_To').uri || target;
              } catch (e) {
                this.logger.debug(".refer() cannot parse Refer_To from", target);
                this.logger.debug("...falling through to normalizeTarget()");
              }

              target = this.ua.normalizeTarget(target);
              if (!target) {
                throw new TypeError('Invalid target: ' + originalTarget);
              }
            }

            extraHeaders.push('Contact: ' + this.contact);
            extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());
            extraHeaders.push('Refer-To: ' + target);

            this.sendRequest(SIP.C.REFER, {
              extraHeaders: extraHeaders,
              body: options.body,
              receiveResponse: function (response) {
                if (! /^2[0-9]{2}$/.test(response.status_code)) {
                  return;
                }
                if (withReplaces || (target.scheme && target.scheme.match("^sips?$"))) {
                  this.terminate();
                }
              }.bind(this)
            });
            return this;
          },

          followRefer: function followRefer(callback) {
            return function referListener(callback, request) {
              var referTo = request.parseHeader('refer-to');
              var target = referTo.uri;
              if (!target.scheme.match("^sips?$")) {
                var targetString = target.toString();
                if (typeof environment.open === "function") {
                  environment.open(targetString);
                } else {
                  this.logger.warn("referred to non-SIP URI but `open` isn't in the environment: " + targetString);
                }
                return;
              }

              var extraHeaders = [];

              /* Copy the Replaces query into a Replaces header */
              /* TODO - make sure we don't copy a poorly formatted header? */
              var replaces = target.getHeader('Replaces');
              if (replaces !== undefined) {
                extraHeaders.push('Replaces: ' + decodeURIComponent(replaces));
              }

              target.clearHeaders();

              /*
                            Harmless race condition.  Both sides of REFER
                            may send a BYE, but in the end the dialogs are destroyed.
                          */
              var getReferMedia = this.mediaHandler.getReferMedia;
              var mediaHint = getReferMedia ? getReferMedia.call(this.mediaHandler) : this.mediaHint;

              SIP.Hacks.Chrome.getsConfusedAboutGUM(this);

              var referSession = this.ua.invite(target, {
                media: mediaHint,
                params: {
                  to_displayName: referTo.friendlyName
                },
                extraHeaders: extraHeaders
              });

              callback.call(this, request, referSession);

              this.terminate();
            }.bind(this, callback);
          },

          sendRequest: function (method, options) {
            options = options || {};
            var self = this;

            var request = new SIP.OutgoingRequest(
              method,
              this.dialog.remote_target,
              this.ua,
              {
                cseq: options.cseq || (this.dialog.local_seqnum += 1),
                call_id: this.dialog.id.call_id,
                from_uri: this.dialog.local_uri,
                from_tag: this.dialog.id.local_tag,
                to_uri: this.dialog.remote_uri,
                to_tag: this.dialog.id.remote_tag,
                route_set: this.dialog.route_set,
                statusCode: options.statusCode,
                reasonPhrase: options.reasonPhrase
              },
              options.extraHeaders || [],
              options.body
            );

            new SIP.RequestSender({
              request: request,
              onRequestTimeout: function () {
                self.onRequestTimeout();
              },
              onTransportError: function () {
                self.onTransportError();
              },
              receiveResponse: options.receiveResponse || function (response) {
                self.receiveNonInviteResponse(response);
              }
            }, this.ua).send();

            this.emit(method.toLowerCase(), request);

            return this;
          },

          close: function () {
            var idx;

            if (this.status === C.STATUS_TERMINATED) {
              return this;
            }

            this.logger.log('closing INVITE session ' + this.id);

            if (this.mediaHandler) {
              this.mediaHandler.close();
            }


            for (idx in this.timers) {
              SIP.Timers.clearTimeout(this.timers[idx]);
            }


            if (this.dialog) {
              this.dialog.terminate();
              delete this.dialog;
            }

            for (idx in this.earlyDialogs) {
              this.earlyDialogs[idx].terminate();
              delete this.earlyDialogs[idx];
            }

            this.status = C.STATUS_TERMINATED;

            delete this.ua.sessions[this.id];
            return this;
          },

          createDialog: function (message, type, early) {
            var dialog, early_dialog,
              local_tag = message[(type === 'UAS') ? 'to_tag' : 'from_tag'],
              remote_tag = message[(type === 'UAS') ? 'from_tag' : 'to_tag'],
              id = message.call_id + local_tag + remote_tag;

            early_dialog = this.earlyDialogs[id];

            if (early) {
              if (early_dialog) {
                return true;
              } else {
                early_dialog = new SIP.Dialog(this, message, type, SIP.Dialog.C.STATUS_EARLY);

                if (early_dialog.error) {
                  this.logger.error(early_dialog.error);
                  this.failed(message, SIP.C.causes.INTERNAL_ERROR);
                  return false;
                } else {
                  this.earlyDialogs[id] = early_dialog;
                  return true;
                }
              }
            }
            else {
              if (early_dialog) {
                early_dialog.update(message, type);
                this.dialog = early_dialog;
                delete this.earlyDialogs[id];
                for (var dia in this.earlyDialogs) {
                  this.earlyDialogs[dia].terminate();
                  delete this.earlyDialogs[dia];
                }
                return true;
              }

              dialog = new SIP.Dialog(this, message, type);

              if (dialog.error) {
                this.logger.error(dialog.error);
                this.failed(message, SIP.C.causes.INTERNAL_ERROR);
                return false;
              } else {
                this.to_tag = message.to_tag;
                this.dialog = dialog;
                return true;
              }
            }
          },

          /**
           * Check if Session is ready for a re-INVITE
           *
           * @returns {Boolean}
           */
          isReadyToReinvite: function () {
            return this.mediaHandler.isReady() &&
              !this.dialog.uac_pending_reply &&
              !this.dialog.uas_pending_reply;
          },

          /**
           * Mute
           */
          mute: function (options) {
            var ret = this.mediaHandler.mute(options);
            if (ret) {
              this.onmute(ret);
            }
          },

          /**
           * Unmute
           */
          unmute: function (options) {
            var ret = this.mediaHandler.unmute(options);
            if (ret) {
              this.onunmute(ret);
            }
          },

          /**
           * Hold
           */
          hold: function (options) {

            if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            this.mediaHandler.hold();

            if (!this.isReadyToReinvite()) {
              /* If there is a pending 'unhold' action, cancel it and don't queue this one
                           * Else, if there isn't any 'hold' action, add this one to the queue
                           * Else, if there is already a 'hold' action, skip
                           */
              if (this.pending_actions.isPending('unhold')) {
                this.pending_actions.pop('unhold');
              } else if (!this.pending_actions.isPending('hold')) {
                this.pending_actions.push('hold');
              }
              return;
            } else if (this.local_hold === true) {
              return;
            }

            this.onhold('local');

            this.sendReinvite(options);
          },

          /**
           * Unhold
           */
          unhold: function (options) {

            if (this.status !== C.STATUS_WAITING_FOR_ACK && this.status !== C.STATUS_CONFIRMED) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            this.mediaHandler.unhold();

            if (!this.isReadyToReinvite()) {
              /* If there is a pending 'hold' action, cancel it and don't queue this one
                           * Else, if there isn't any 'unhold' action, add this one to the queue
                           * Else, if there is already a 'unhold' action, skip
                           */
              if (this.pending_actions.isPending('hold')) {
                this.pending_actions.pop('hold');
              } else if (!this.pending_actions.isPending('unhold')) {
                this.pending_actions.push('unhold');
              }
              return;
            } else if (this.local_hold === false) {
              return;
            }

            this.onunhold('local');

            this.sendReinvite(options);
          },

          /**
           * isOnHold
           */
          isOnHold: function () {
            return {
              local: this.local_hold,
              remote: this.remote_hold
            };
          },

          /**
           * In dialog INVITE Reception
           * @private
           */
          receiveReinvite: function (request) {
            var self = this;

            if (!this.mediaHandler.hasDescription(request)) {
              this.logger.warn('invalid Content-Type');
              request.reply(415);
              return;
            }

            this.mediaHandler.setDescription(request)
              .then(this.mediaHandler.getDescription.bind(this.mediaHandler, this.mediaHint))
              .then(function (description) {
                var extraHeaders = ['Contact: ' + self.contact];
                request.reply(200, null, extraHeaders, description,
                  function () {
                    self.status = C.STATUS_WAITING_FOR_ACK;
                    self.setInvite2xxTimer(request, description);
                    self.setACKTimer();

                    if (self.remote_hold && !self.mediaHandler.remote_hold) {
                      self.onunhold('remote');
                    } else if (!self.remote_hold && self.mediaHandler.remote_hold) {
                      self.onhold('remote');
                    }
                  });
              })
              .catch(function onFailure(e) {
                var statusCode;
                if (e instanceof SIP.Exceptions.GetDescriptionError) {
                  statusCode = 500;
                } else {
                  self.logger.error(e);
                  statusCode = 488;
                }
                request.reply(statusCode);
              });
          },

          sendReinvite: function (options) {
            options = options || {};

            var
              self = this,
              extraHeaders = (options.extraHeaders || []).slice(),
              eventHandlers = options.eventHandlers || {},
              succeeded;

            if (eventHandlers.succeeded) {
              succeeded = eventHandlers.succeeded;
            }
            this.reinviteSucceeded = function () {
              SIP.Timers.clearTimeout(self.timers.ackTimer);
              SIP.Timers.clearTimeout(self.timers.invite2xxTimer);
              self.status = C.STATUS_CONFIRMED;
              succeeded && succeeded.apply(this, arguments);
            };
            if (eventHandlers.failed) {
              this.reinviteFailed = eventHandlers.failed;
            } else {
              this.reinviteFailed = function () { };
            }

            extraHeaders.push('Contact: ' + this.contact);
            extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());

            this.receiveResponse = this.receiveReinviteResponse;
            this.mediaHandler.getDescription(self.mediaHint)
              .then(
                function (description) {
                  self.dialog.sendRequest(self, SIP.C.INVITE, {
                    extraHeaders: extraHeaders,
                    body: description
                  });
                },
                function () {
                  if (self.isReadyToReinvite()) {
                    self.onReadyToReinvite();
                  }
                  self.reinviteFailed();
                }
              );
          },

          receiveRequest: function (request) {
            switch (request.method) {
              case SIP.C.BYE:
                request.reply(200);
                if (this.status === C.STATUS_CONFIRMED) {
                  this.emit('bye', request);
                  this.terminated(request, SIP.C.causes.BYE);
                }
                break;
              case SIP.C.INVITE:
                if (this.status === C.STATUS_CONFIRMED) {
                  this.logger.log('re-INVITE received');
                  this.receiveReinvite(request);
                }
                break;
              case SIP.C.INFO:
                if (this.status === C.STATUS_CONFIRMED || this.status === C.STATUS_WAITING_FOR_ACK) {
                  if (this.onInfo) {
                    return this.onInfo(request);
                  }

                  var body, tone, duration,
                    contentType = request.getHeader('content-type'),
                    reg_tone = /^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/,
                    reg_duration = /^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;

                  if (contentType) {
                    if (contentType.match(/^application\/dtmf-relay/i)) {
                      if (request.body) {
                        body = request.body.split('\r\n', 2);
                        if (body.length === 2) {
                          if (reg_tone.test(body[0])) {
                            tone = body[0].replace(reg_tone, "$2");
                          }
                          if (reg_duration.test(body[1])) {
                            duration = parseInt(body[1].replace(reg_duration, "$2"), 10);
                          }
                        }
                      }

                      new DTMF(this, tone, { duration: duration }).init_incoming(request);
                    } else {
                      request.reply(415, null, ["Accept: application/dtmf-relay"]);
                    }
                  }
                }
                break;
              case SIP.C.REFER:
                if (this.status === C.STATUS_CONFIRMED) {
                  this.logger.log('REFER received');
                  var hasReferListener = this.listeners('refer').length,
                    notifyBody;

                  if (hasReferListener) {
                    request.reply(202, 'Accepted');
                    notifyBody = 'SIP/2.0 100 Trying';

                    this.sendRequest(SIP.C.NOTIFY, {
                      extraHeaders: [
                        'Event: refer',
                        'Subscription-State: terminated',
                        'Content-Type: message/sipfrag'
                      ],
                      body: notifyBody,
                      receiveResponse: function () { }
                    });

                    this.emit('refer', request);
                  } else {
                    request.reply(603, 'Declined');
                  }
                }
                break;
              case SIP.C.NOTIFY:
                request.reply(200, 'OK');
                this.emit('notify', request);
                break;
            }
          },

          /**
           * Reception of Response for in-dialog INVITE
           * @private
           */
          receiveReinviteResponse: function (response) {
            var self = this;

            if (this.status === C.STATUS_TERMINATED) {
              return;
            }

            switch (true) {
              case /^1[0-9]{2}$/.test(response.status_code):
                break;
              case /^2[0-9]{2}$/.test(response.status_code):
                this.status = C.STATUS_CONFIRMED;

                this.sendRequest(SIP.C.ACK, { cseq: response.cseq });

                if (!this.mediaHandler.hasDescription(response)) {
                  this.reinviteFailed();
                  break;
                }

                this.mediaHandler.setDescription(response)
                  .then(
                    function onSuccess() {
                      self.reinviteSucceeded();
                    },
                    function onFailure() {
                      self.reinviteFailed();
                    }
                  );
                break;
              default:
                this.reinviteFailed();
            }
          },

          acceptAndTerminate: function (response, status_code, reason_phrase) {
            var extraHeaders = [];

            if (status_code) {
              extraHeaders.push('Reason: ' + SIP.Utils.getReasonHeaderValue(status_code, reason_phrase));
            }

            if (this.dialog || this.createDialog(response, 'UAC')) {
              this.sendRequest(SIP.C.ACK, { cseq: response.cseq });
              this.sendRequest(SIP.C.BYE, {
                extraHeaders: extraHeaders
              });
            }

            return this;
          },

          /**
           * RFC3261 13.3.1.4
           * Response retransmissions cannot be accomplished by transaction layer
           *  since it is destroyed when receiving the first 2xx answer
           */
          setInvite2xxTimer: function (request, description) {
            var self = this,
              timeout = SIP.Timers.T1;

            this.timers.invite2xxTimer = SIP.Timers.setTimeout(function invite2xxRetransmission() {
              if (self.status !== C.STATUS_WAITING_FOR_ACK) {
                return;
              }

              self.logger.log('no ACK received, attempting to retransmit OK');

              var extraHeaders = ['Contact: ' + self.contact];

              request.reply(200, null, extraHeaders, description);

              timeout = Math.min(timeout * 2, SIP.Timers.T2);

              self.timers.invite2xxTimer = SIP.Timers.setTimeout(invite2xxRetransmission, timeout);
            }, timeout);
          },

          /**
           * RFC3261 14.2
           * If a UAS generates a 2xx response and never receives an ACK,
           *  it SHOULD generate a BYE to terminate the dialog.
           */
          setACKTimer: function () {
            var self = this;

            this.timers.ackTimer = SIP.Timers.setTimeout(function () {
              if (self.status === C.STATUS_WAITING_FOR_ACK) {
                self.logger.log('no ACK received for an extended period of time, terminating the call');
                SIP.Timers.clearTimeout(self.timers.invite2xxTimer);
                self.sendRequest(SIP.C.BYE);
                self.terminated(null, SIP.C.causes.NO_ACK);
              }
            }, SIP.Timers.TIMER_H);
          },

          /*
                   * @private
                   */
          onReadyToReinvite: function () {
            var action = this.pending_actions.shift();

            if (!action || !this[action.name]) {
              return;
            }

            this[action.name]();
          },

          onTransportError: function () {
            if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.CONNECTION_ERROR);
            }
          },

          onRequestTimeout: function () {
            if (this.status === C.STATUS_CONFIRMED) {
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            } else if (this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            }
          },

          onDialogError: function (response) {
            if (this.status === C.STATUS_CONFIRMED) {
              this.terminated(response, SIP.C.causes.DIALOG_ERROR);
            } else if (this.status !== C.STATUS_TERMINATED) {
              this.failed(response, SIP.C.causes.DIALOG_ERROR);
              this.terminated(response, SIP.C.causes.DIALOG_ERROR);
            }
          },

          /**
           * @private
           */
          onhold: function (originator) {
            this[originator === 'local' ? 'local_hold' : 'remote_hold'] = true;
            this.emit('hold', { originator: originator });
          },

          /**
           * @private
           */
          onunhold: function (originator) {
            this[originator === 'local' ? 'local_hold' : 'remote_hold'] = false;
            this.emit('unhold', { originator: originator });
          },

          /*
                   * @private
                   */
          onmute: function (options) {
            this.emit('muted', {
              audio: options.audio,
              video: options.video
            });
          },

          /*
                   * @private
                   */
          onunmute: function (options) {
            this.emit('unmuted', {
              audio: options.audio,
              video: options.video
            });
          },

          failed: function (response, cause) {
            if (this.status === C.STATUS_TERMINATED) {
              return this;
            }
            this.emit('failed', response || null, cause || null);
            return this;
          },

          rejected: function (response, cause) {
            this.emit('rejected',
              response || null,
              cause || null
            );
            return this;
          },

          canceled: function () {
            this.emit('cancel');
            return this;
          },

          accepted: function (response, cause) {
            cause = SIP.Utils.getReasonPhrase(response && response.status_code, cause);

            this.startTime = new Date();

            if (this.replacee) {
              this.replacee.emit('replaced', this);
              this.replacee.terminate();
            }
            this.emit('accepted', response, cause);
            return this;
          },

          terminated: function (message, cause) {
            if (this.status === C.STATUS_TERMINATED) {
              return this;
            }

            this.endTime = new Date();

            this.close();
            this.emit('terminated',
              message || null,
              cause || null
            );
            return this;
          },

          connecting: function (request) {
            this.emit('connecting', { request: request });
            return this;
          }
        };

        Session.desugar = function desugar(options) {
          if (environment.HTMLMediaElement && options instanceof environment.HTMLMediaElement) {
            options = {
              media: {
                constraints: {
                  audio: true,
                  video: options.tagName === 'VIDEO'
                },
                render: {
                  remote: options
                }
              }
            };
          }
          return options || {};
        };


        Session.C = C;
        SIP.Session = Session;


        InviteServerContext = function (ua, request) {
          var expires,
            self = this,
            contentType = request.getHeader('Content-Type'),
            contentDisp = request.parseHeader('Content-Disposition');

          SIP.Utils.augment(this, SIP.ServerContext, [ua, request]);
          SIP.Utils.augment(this, SIP.Session, [ua.configuration.mediaHandlerFactory]);

          this.mediaHandler = this.mediaHandlerFactory(this, {
            RTCConstraints: { "optional": [{ 'DtlsSrtpKeyAgreement': 'true' }] }
          });

          if ((!contentDisp && !this.mediaHandler.hasDescription(request)) || (contentDisp && contentDisp.type === 'render')) {
            this.renderbody = request.body;
            this.rendertype = contentType;
          } else if (!this.mediaHandler.hasDescription(request) && (contentDisp && contentDisp.type === 'session')) {
            request.reply(415);
            return;
          }

          this.status = C.STATUS_INVITE_RECEIVED;
          this.from_tag = request.from_tag;
          this.id = request.call_id + this.from_tag;
          this.request = request;
          this.contact = this.ua.contact.toString();

          this.receiveNonInviteResponse = function () { };

          this.logger = ua.getLogger('sip.inviteservercontext', this.id);

          this.ua.sessions[this.id] = this;

          if (request.hasHeader('expires')) {
            expires = request.getHeader('expires') * 1000;
          }

          function set100rel(h, c) {
            if (request.hasHeader(h) && request.getHeader(h).toLowerCase().indexOf('100rel') >= 0) {
              self.rel100 = c;
            }
          }
          set100rel('require', SIP.C.supported.REQUIRED);
          set100rel('supported', SIP.C.supported.SUPPORTED);

          /* Set the to_tag before
                   * replying a response code that will create a dialog.
                   */
          request.to_tag = SIP.Utils.newTag();

          if (!this.createDialog(request, 'UAS', true)) {
            request.reply(500, 'Missing Contact header field');
            return;
          }

          if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {
            this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);
            this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);
          }

          function fireNewSession() {
            var options = { extraHeaders: ['Contact: ' + self.contact] };

            if (self.rel100 !== SIP.C.supported.REQUIRED) {
              self.progress(options);
            }
            self.status = C.STATUS_WAITING_FOR_ANSWER;

            self.timers.userNoAnswerTimer = SIP.Timers.setTimeout(function () {
              request.reply(408);
              self.failed(request, SIP.C.causes.NO_ANSWER);
              self.terminated(request, SIP.C.causes.NO_ANSWER);
            }, self.ua.configuration.noAnswerTimeout);

            /* Set expiresTimer
                       * RFC3261 13.3.1
                       */
            if (expires) {
              self.timers.expiresTimer = SIP.Timers.setTimeout(function () {
                if (self.status === C.STATUS_WAITING_FOR_ANSWER) {
                  request.reply(487);
                  self.failed(request, SIP.C.causes.EXPIRES);
                  self.terminated(request, SIP.C.causes.EXPIRES);
                }
              }, expires);
            }

            self.emit('invite', request);
          }

          if (!this.mediaHandler.hasDescription(request) || this.renderbody) {
            SIP.Timers.setTimeout(fireNewSession, 0);
          } else {
            this.hasOffer = true;
            this.mediaHandler.setDescription(request)
              .then(
                fireNewSession,
                function onFailure(e) {
                  self.logger.warn('invalid description');
                  self.logger.warn(e);
                  request.reply(488);
                }
              );
          }
        };

        InviteServerContext.prototype = {
          reject: function (options) {
            if (this.status === C.STATUS_TERMINATED) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            this.logger.log('rejecting RTCSession');

            SIP.ServerContext.prototype.reject.call(this, options);
            return this.terminated();
          },

          terminate: function (options) {
            options = options || {};

            var
              extraHeaders = (options.extraHeaders || []).slice(),
              body = options.body,
              dialog,
              self = this;

            if (this.status === C.STATUS_WAITING_FOR_ACK &&
              this.request.server_transaction.state !== SIP.Transactions.C.STATUS_TERMINATED) {
              dialog = this.dialog;

              this.receiveRequest = function (request) {
                if (request.method === SIP.C.ACK) {
                  this.sendRequest(SIP.C.BYE, {
                    extraHeaders: extraHeaders,
                    body: body
                  });
                  dialog.terminate();
                }
              };

              this.request.server_transaction.on('stateChanged', function () {
                if (this.state === SIP.Transactions.C.STATUS_TERMINATED && this.dialog) {
                  this.request = new SIP.OutgoingRequest(
                    SIP.C.BYE,
                    this.dialog.remote_target,
                    this.ua,
                    {
                      'cseq': this.dialog.local_seqnum += 1,
                      'call_id': this.dialog.id.call_id,
                      'from_uri': this.dialog.local_uri,
                      'from_tag': this.dialog.id.local_tag,
                      'to_uri': this.dialog.remote_uri,
                      'to_tag': this.dialog.id.remote_tag,
                      'route_set': this.dialog.route_set
                    },
                    extraHeaders,
                    body
                  );

                  new SIP.RequestSender(
                    {
                      request: this.request,
                      onRequestTimeout: function () {
                        self.onRequestTimeout();
                      },
                      onTransportError: function () {
                        self.onTransportError();
                      },
                      receiveResponse: function () {
                        return;
                      }
                    },
                    this.ua
                  ).send();
                  dialog.terminate();
                }
              });

              this.emit('bye', this.request);
              this.terminated();

              this.dialog = dialog;

              this.ua.dialogs[dialog.id.toString()] = dialog;

            } else if (this.status === C.STATUS_CONFIRMED) {
              this.bye(options);
            } else {
              this.reject(options);
            }

            return this;
          },

          /*
                   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint
                   */
          progress: function (options) {
            options = options || {};
            var
              statusCode = options.statusCode || 180,
              reasonPhrase = options.reasonPhrase,
              extraHeaders = (options.extraHeaders || []).slice(),
              iceServers,
              stunServers = options.stunServers || null,
              turnServers = options.turnServers || null,
              body = options.body,
              response;

            if (statusCode < 100 || statusCode > 199) {
              throw new TypeError('Invalid statusCode: ' + statusCode);
            }

            if (this.isCanceled || this.status === C.STATUS_TERMINATED) {
              return this;
            }

            if (stunServers || turnServers) {
              if (stunServers) {
                iceServers = this.ua.getConfigurationCheck().optional['stunServers'](stunServers);
                if (!iceServers) {
                  throw new TypeError('Invalid stunServers: ' + stunServers);
                } else {
                  this.stunServers = iceServers;
                }
              }

              if (turnServers) {
                iceServers = this.ua.getConfigurationCheck().optional['turnServers'](turnServers);
                if (!iceServers) {
                  throw new TypeError('Invalid turnServers: ' + turnServers);
                } else {
                  this.turnServers = iceServers;
                }
              }

              this.mediaHandler.updateIceServers({
                stunServers: this.stunServers,
                turnServers: this.turnServers
              });
            }

            function do100rel() {
              /* jshint validthis: true */
              statusCode = options.statusCode || 183;

              this.status = C.STATUS_WAITING_FOR_PRACK;
              extraHeaders.push('Contact: ' + this.contact);
              extraHeaders.push('Require: 100rel');
              extraHeaders.push('RSeq: ' + Math.floor(Math.random() * 10000));

              this.mediaHint = options.media;

              this.mediaHandler.getDescription(options.media)
                .then(
                  function onSuccess(description) {
                    if (this.isCanceled || this.status === C.STATUS_TERMINATED) {
                      return;
                    }

                    this.early_sdp = description.body;
                    this[this.hasOffer ? 'hasAnswer' : 'hasOffer'] = true;

                    var timeout = SIP.Timers.T1;
                    this.timers.rel1xxTimer = SIP.Timers.setTimeout(function rel1xxRetransmission() {
                      this.request.reply(statusCode, null, extraHeaders, description);
                      timeout *= 2;
                      this.timers.rel1xxTimer = SIP.Timers.setTimeout(rel1xxRetransmission.bind(this), timeout);
                    }.bind(this), timeout);

                    this.timers.prackTimer = SIP.Timers.setTimeout(function () {
                      if (this.status !== C.STATUS_WAITING_FOR_PRACK) {
                        return;
                      }

                      this.logger.log('no PRACK received, rejecting the call');
                      SIP.Timers.clearTimeout(this.timers.rel1xxTimer);
                      this.request.reply(504);
                      this.terminated(null, SIP.C.causes.NO_PRACK);
                    }.bind(this), SIP.Timers.T1 * 64);

                    response = this.request.reply(statusCode, reasonPhrase, extraHeaders, description);
                    this.emit('progress', response, reasonPhrase);
                  }.bind(this),

                  function onFailure() {
                    this.request.reply(480);
                    this.failed(null, SIP.C.causes.WEBRTC_ERROR);
                    this.terminated(null, SIP.C.causes.WEBRTC_ERROR);
                  }.bind(this)
                );
            }

            function normalReply() {
              /* jshint validthis:true */
              response = this.request.reply(statusCode, reasonPhrase, extraHeaders, body);
              this.emit('progress', response, reasonPhrase);
            }

            if (options.statusCode !== 100 &&
              (this.rel100 === SIP.C.supported.REQUIRED ||
                (this.rel100 === SIP.C.supported.SUPPORTED && options.rel100) ||
                (this.rel100 === SIP.C.supported.SUPPORTED && (this.ua.configuration.rel100 === SIP.C.supported.REQUIRED)))) {
              do100rel.apply(this);
            } else {
              normalReply.apply(this);
            }
            return this;
          },

          /*
                   * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint
                   */
          accept: function (options) {
            options = Object.create(Session.desugar(options));
            SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);
            this.mediaHint = options.media;

            this.onInfo = options.onInfo;

            var
              self = this,
              request = this.request,
              extraHeaders = (options.extraHeaders || []).slice(),
              iceServers,
              stunServers = options.stunServers || null,
              turnServers = options.turnServers || null,
              descriptionCreationSucceeded = function (description) {
                var
                  response,
                  replySucceeded = function () {
                    self.status = C.STATUS_WAITING_FOR_ACK;

                    self.setInvite2xxTimer(request, description);
                    self.setACKTimer();
                  },

                  replyFailed = function () {
                    self.failed(null, SIP.C.causes.CONNECTION_ERROR);
                    self.terminated(null, SIP.C.causes.CONNECTION_ERROR);
                  };


                self.mediaHandler.render();

                extraHeaders.push('Contact: ' + self.contact);
                extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());

                if (!self.hasOffer) {
                  self.hasOffer = true;
                } else {
                  self.hasAnswer = true;
                }
                response = request.reply(200, null, extraHeaders,
                  description,
                  replySucceeded,
                  replyFailed
                );
                if (self.status !== C.STATUS_TERMINATED) {
                  self.accepted(response, SIP.Utils.getReasonPhrase(200));
                }
              },

              descriptionCreationFailed = function () {
                if (self.status === C.STATUS_TERMINATED) {
                  return;
                }
                self.request.reply(480);
                self.failed(null, SIP.C.causes.WEBRTC_ERROR);
                self.terminated(null, SIP.C.causes.WEBRTC_ERROR);
              };

            if (this.status === C.STATUS_WAITING_FOR_PRACK) {
              this.status = C.STATUS_ANSWERED_WAITING_FOR_PRACK;
              return this;
            } else if (this.status === C.STATUS_WAITING_FOR_ANSWER) {
              this.status = C.STATUS_ANSWERED;
            } else if (this.status !== C.STATUS_EARLY_MEDIA) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            if ((stunServers || turnServers) &&
              (this.status !== C.STATUS_EARLY_MEDIA && this.status !== C.STATUS_ANSWERED_WAITING_FOR_PRACK)) {
              if (stunServers) {
                iceServers = this.ua.getConfigurationCheck().optional['stunServers'](stunServers);
                if (!iceServers) {
                  throw new TypeError('Invalid stunServers: ' + stunServers);
                } else {
                  this.stunServers = iceServers;
                }
              }

              if (turnServers) {
                iceServers = this.ua.getConfigurationCheck().optional['turnServers'](turnServers);
                if (!iceServers) {
                  throw new TypeError('Invalid turnServers: ' + turnServers);
                } else {
                  this.turnServers = iceServers;
                }
              }

              this.mediaHandler.updateIceServers({
                stunServers: this.stunServers,
                turnServers: this.turnServers
              });
            }

            if (!this.createDialog(request, 'UAS')) {
              request.reply(500, 'Missing Contact header field');
              return this;
            }

            SIP.Timers.clearTimeout(this.timers.userNoAnswerTimer);

            /*
                      length = this.getRemoteStreams().length;

                      for (idx = 0; idx < length; idx++) {
                        if (this.mediaHandler.getRemoteStreams()[idx].getVideoTracks().length > 0) {
                          hasVideo = true;
                        }
                        if (this.mediaHandler.getRemoteStreams()[idx].getAudioTracks().length > 0) {
                          hasAudio = true;
                        }
                      }

                      if (!hasAudio && this.mediaConstraints.audio === true) {
                        this.mediaConstraints.audio = false;
                        if (mediaStream) {
                          length = mediaStream.getAudioTracks().length;
                          for (idx = 0; idx < length; idx++) {
                            mediaStream.removeTrack(mediaStream.getAudioTracks()[idx]);
                          }
                        }
                      }

                      if (!hasVideo && this.mediaConstraints.video === true) {
                        this.mediaConstraints.video = false;
                        if (mediaStream) {
                          length = mediaStream.getVideoTracks().length;
                          for (idx = 0; idx < length; idx++) {
                            mediaStream.removeTrack(mediaStream.getVideoTracks()[idx]);
                          }
                        }
                      }
                      */

            if (this.status === C.STATUS_EARLY_MEDIA) {
              descriptionCreationSucceeded({});
            } else {
              this.mediaHandler.getDescription(self.mediaHint)
                .then(
                  descriptionCreationSucceeded,
                  descriptionCreationFailed
                );
            }

            return this;
          },

          receiveRequest: function (request) {


            function confirmSession() {
              /* jshint validthis:true */
              var contentType;

              SIP.Timers.clearTimeout(this.timers.ackTimer);
              SIP.Timers.clearTimeout(this.timers.invite2xxTimer);
              this.status = C.STATUS_CONFIRMED;
              this.unmute();

              contentType = request.getHeader('Content-Type');
              if (!this.mediaHandler.hasDescription(request)) {
                this.renderbody = request.body;
                this.rendertype = contentType;
              }

              this.emit('confirmed', request);
            }

            switch (request.method) {
              case SIP.C.CANCEL:
                /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL
                               * was in progress and that the UAC MAY continue with the session established by
                               * any 2xx response, or MAY terminate with BYE. SIP does continue with the
                               * established session. So the CANCEL is processed only if the session is not yet
                               * established.
                               */

                /*
                               * Terminate the whole session in case the user didn't accept (or yet to send the answer) nor reject the
                               *request opening the session.
                               */
                if (this.status === C.STATUS_WAITING_FOR_ANSWER ||
                  this.status === C.STATUS_WAITING_FOR_PRACK ||
                  this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK ||
                  this.status === C.STATUS_EARLY_MEDIA ||
                  this.status === C.STATUS_ANSWERED) {

                  this.status = C.STATUS_CANCELED;
                  this.request.reply(487);
                  this.canceled(request);
                  this.rejected(request, SIP.C.causes.CANCELED);
                  this.failed(request, SIP.C.causes.CANCELED);
                  this.terminated(request, SIP.C.causes.CANCELED);
                }
                break;
              case SIP.C.ACK:
                if (this.status === C.STATUS_WAITING_FOR_ACK) {
                  if (!this.hasAnswer) {
                    if (this.mediaHandler.hasDescription(request)) {
                      this.hasAnswer = true;
                      this.mediaHandler.setDescription(request)
                        .then(
                          confirmSession.bind(this),
                          function onFailure(e) {
                            this.logger.warn(e);
                            this.terminate({
                              statusCode: '488',
                              reasonPhrase: 'Bad Media Description'
                            });
                            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                            this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                          }.bind(this)
                        );
                    } else if (this.early_sdp) {
                      confirmSession.apply(this);
                    } else {
                      this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                      this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                    }
                  } else {
                    confirmSession.apply(this);
                  }
                }
                break;
              case SIP.C.PRACK:
                if (this.status === C.STATUS_WAITING_FOR_PRACK || this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {
                  if (!this.hasAnswer) {
                    if (this.mediaHandler.hasDescription(request)) {
                      this.hasAnswer = true;
                      this.mediaHandler.setDescription(request)
                        .then(
                          function onSuccess() {
                            SIP.Timers.clearTimeout(this.timers.rel1xxTimer);
                            SIP.Timers.clearTimeout(this.timers.prackTimer);
                            request.reply(200);
                            if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {
                              this.status = C.STATUS_EARLY_MEDIA;
                              this.accept();
                            }
                            this.status = C.STATUS_EARLY_MEDIA;
                            this.mute();
                          }.bind(this),
                          function onFailure(e) {
                            this.logger.warn(e);
                            this.terminate({
                              statusCode: '488',
                              reasonPhrase: 'Bad Media Description'
                            });
                            this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                            this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                          }.bind(this)
                        );
                    } else {
                      this.terminate({
                        statusCode: '488',
                        reasonPhrase: 'Bad Media Description'
                      });
                      this.failed(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                      this.terminated(request, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                    }
                  } else {
                    SIP.Timers.clearTimeout(this.timers.rel1xxTimer);
                    SIP.Timers.clearTimeout(this.timers.prackTimer);
                    request.reply(200);

                    if (this.status === C.STATUS_ANSWERED_WAITING_FOR_PRACK) {
                      this.status = C.STATUS_EARLY_MEDIA;
                      this.accept();
                    }
                    this.status = C.STATUS_EARLY_MEDIA;
                    this.mute();
                  }
                } else if (this.status === C.STATUS_EARLY_MEDIA) {
                  request.reply(200);
                }
                break;
              default:
                Session.prototype.receiveRequest.apply(this, [request]);
                break;
            }
          },

          onTransportError: function () {
            if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.CONNECTION_ERROR);
            }
          },

          onRequestTimeout: function () {
            if (this.status === C.STATUS_CONFIRMED) {
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            } else if (this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            }
          }

        };

        SIP.InviteServerContext = InviteServerContext;

        InviteClientContext = function (ua, target, options) {
          options = Object.create(Session.desugar(options));
          options.params = Object.create(options.params || Object.prototype);

          var iceServers,
            extraHeaders = (options.extraHeaders || []).slice(),
            stunServers = options.stunServers || null,
            turnServers = options.turnServers || null,
            mediaHandlerFactory = options.mediaHandlerFactory || ua.configuration.mediaHandlerFactory,
            isMediaSupported = mediaHandlerFactory.isSupported;

          if (isMediaSupported && !isMediaSupported()) {
            throw new SIP.Exceptions.NotSupportedError('Media not supported');
          }

          this.RTCConstraints = options.RTCConstraints || {};
          this.inviteWithoutSdp = options.inviteWithoutSdp || false;

          this.anonymous = options.anonymous || false;

          this.renderbody = options.renderbody || null;
          this.rendertype = options.rendertype || 'text/plain';

          options.params.from_tag = this.from_tag;

          /* Do not add ;ob in initial forming dialog requests if the registration over
                   *  the current connection got a GRUU URI.
                   */
          this.contact = ua.contact.toString({
            anonymous: this.anonymous,
            outbound: this.anonymous ? !ua.contact.temp_gruu : !ua.contact.pub_gruu
          });

          if (this.anonymous) {
            options.params.from_displayName = 'Anonymous';
            options.params.from_uri = 'sip:anonymous@anonymous.invalid';

            extraHeaders.push('P-Preferred-Identity: ' + ua.configuration.uri.toString());
            extraHeaders.push('Privacy: id');
          }
          extraHeaders.push('Contact: ' + this.contact);
          extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());
          if (this.inviteWithoutSdp && this.renderbody) {
            extraHeaders.push('Content-Type: ' + this.rendertype);
            extraHeaders.push('Content-Disposition: render;handling=optional');
          }

          if (ua.configuration.rel100 === SIP.C.supported.REQUIRED) {
            extraHeaders.push('Require: 100rel');
          }
          if (ua.configuration.replaces === SIP.C.supported.REQUIRED) {
            extraHeaders.push('Require: replaces');
          }

          options.extraHeaders = extraHeaders;

          SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.INVITE, target, options]);
          SIP.Utils.augment(this, SIP.Session, [mediaHandlerFactory]);

          if (this.status !== C.STATUS_NULL) {
            throw new SIP.Exceptions.InvalidStateError(this.status);
          }

          this.from_tag = SIP.Utils.newTag();

          this.isCanceled = false;
          this.received_100 = false;

          this.method = SIP.C.INVITE;

          this.receiveNonInviteResponse = this.receiveResponse;
          this.receiveResponse = this.receiveInviteResponse;

          this.logger = ua.getLogger('sip.inviteclientcontext');

          if (stunServers) {
            iceServers = this.ua.getConfigurationCheck().optional['stunServers'](stunServers);
            if (!iceServers) {
              throw new TypeError('Invalid stunServers: ' + stunServers);
            } else {
              this.stunServers = iceServers;
            }
          }

          if (turnServers) {
            iceServers = this.ua.getConfigurationCheck().optional['turnServers'](turnServers);
            if (!iceServers) {
              throw new TypeError('Invalid turnServers: ' + turnServers);
            } else {
              this.turnServers = iceServers;
            }
          }

          ua.applicants[this] = this;

          this.id = this.request.call_id + this.from_tag;

          this.mediaHandler = this.mediaHandlerFactory(this, {
            RTCConstraints: this.RTCConstraints,
            stunServers: this.stunServers,
            turnServers: this.turnServers
          });

          if (this.mediaHandler && this.mediaHandler.getRemoteStreams) {
            this.getRemoteStreams = this.mediaHandler.getRemoteStreams.bind(this.mediaHandler);
            this.getLocalStreams = this.mediaHandler.getLocalStreams.bind(this.mediaHandler);
          }

          SIP.Utils.optionsOverride(options, 'media', 'mediaConstraints', true, this.logger, this.ua.configuration.media);
          this.mediaHint = options.media;

          this.onInfo = options.onInfo;
        };

        InviteClientContext.prototype = {
          invite: function () {
            var self = this;

            this.ua.sessions[this.id] = this;

            if (this.inviteWithoutSdp) {
              this.request.body = self.renderbody;
              this.status = C.STATUS_INVITE_SENT;
              this.send();
            } else {
              this.mediaHandler.getDescription(self.mediaHint)
                .then(
                  function onSuccess(description) {
                    if (self.isCanceled || self.status === C.STATUS_TERMINATED) {
                      return;
                    }
                    self.hasOffer = true;
                    self.request.body = description;
                    self.status = C.STATUS_INVITE_SENT;
                    self.send();
                  },
                  function onFailure() {
                    if (self.status === C.STATUS_TERMINATED) {
                      return;
                    }

                    self.failed(null, SIP.C.causes.WEBRTC_ERROR);
                    self.terminated(null, SIP.C.causes.WEBRTC_ERROR);
                  }
                );
            }

            return this;
          },

          receiveInviteResponse: function (response) {
            var cause,
              session = this,
              id = response.call_id + response.from_tag + response.to_tag,
              extraHeaders = [],
              options = {};

            if (this.status === C.STATUS_TERMINATED || response.method !== SIP.C.INVITE) {
              return;
            }

            if (this.dialog && (response.status_code >= 200 && response.status_code <= 299)) {
              if (id !== this.dialog.id.toString()) {
                if (!this.createDialog(response, 'UAC', true)) {
                  return;
                }
                this.earlyDialogs[id].sendRequest(this, SIP.C.ACK,
                  {
                    body: SIP.Utils.generateFakeSDP(response.body)
                  });
                this.earlyDialogs[id].sendRequest(this, SIP.C.BYE);

                /* NOTE: This fails because the forking proxy does not recognize that an unanswerable
                               * leg (due to peerConnection limitations) has been answered first. If your forking
                               * proxy does not hang up all unanswered branches on the first branch answered, remove this.
                               */
                if (this.status !== C.STATUS_CONFIRMED) {
                  this.failed(response, SIP.C.causes.WEBRTC_ERROR);
                  this.terminated(response, SIP.C.causes.WEBRTC_ERROR);
                }
                return;
              } else if (this.status === C.STATUS_CONFIRMED) {
                this.sendRequest(SIP.C.ACK, { cseq: response.cseq });
                return;
              } else if (!this.hasAnswer) {

                return;
              }
            }

            if (this.dialog && response.status_code < 200) {
              /*
                            Early media has been set up with at least one other different branch,
                            but a final 2xx response hasn't been received
                          */
              if (this.dialog.pracked.indexOf(response.getHeader('rseq')) !== -1 ||
                (this.dialog.pracked[this.dialog.pracked.length - 1] >= response.getHeader('rseq') && this.dialog.pracked.length > 0)) {
                return;
              }

              if (!this.earlyDialogs[id] && !this.createDialog(response, 'UAC', true)) {
                return;
              }

              if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||
                (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length - 1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {
                return;
              }

              extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));
              this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));

              this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {
                extraHeaders: extraHeaders,
                body: SIP.Utils.generateFakeSDP(response.body)
              });
              return;
            }

            if (this.isCanceled) {
              if (response.status_code >= 100 && response.status_code < 200) {
                this.request.cancel(this.cancelReason, extraHeaders);
                this.canceled(null);
              } else if (response.status_code >= 200 && response.status_code < 299) {
                this.acceptAndTerminate(response);
                this.emit('bye', this.request);
              } else if (response.status_code >= 300) {
                cause = SIP.C.REASON_PHRASE[response.status_code] || SIP.C.causes.CANCELED;
                this.rejected(response, cause);
                this.failed(response, cause);
                this.terminated(response, cause);
              }
              return;
            }

            switch (true) {
              case /^100$/.test(response.status_code):
                this.received_100 = true;
                this.emit('progress', response);
                break;
              case (/^1[0-9]{2}$/.test(response.status_code)):
                if (!response.to_tag) {
                  this.logger.warn('1xx response received without to tag');
                  break;
                }

                if (response.hasHeader('contact')) {
                  if (!this.createDialog(response, 'UAC', true)) {
                    break;
                  }
                }

                this.status = C.STATUS_1XX_RECEIVED;

                if (response.hasHeader('require') &&
                  response.getHeader('require').indexOf('100rel') !== -1) {

                  if (this.dialog || !this.earlyDialogs[id]) {
                    break;
                  }

                  if (this.earlyDialogs[id].pracked.indexOf(response.getHeader('rseq')) !== -1 ||
                    (this.earlyDialogs[id].pracked[this.earlyDialogs[id].pracked.length - 1] >= response.getHeader('rseq') && this.earlyDialogs[id].pracked.length > 0)) {
                    return;
                  }

                  if (!this.mediaHandler.hasDescription(response)) {
                    extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));
                    this.earlyDialogs[id].pracked.push(response.getHeader('rseq'));
                    this.earlyDialogs[id].sendRequest(this, SIP.C.PRACK, {
                      extraHeaders: extraHeaders
                    });
                    this.emit('progress', response);

                  } else if (this.hasOffer) {
                    if (!this.createDialog(response, 'UAC')) {
                      break;
                    }
                    this.hasAnswer = true;
                    this.dialog.pracked.push(response.getHeader('rseq'));

                    this.mediaHandler.setDescription(response)
                      .then(
                        function onSuccess() {
                          extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));

                          session.sendRequest(SIP.C.PRACK, {
                            extraHeaders: extraHeaders,
                            receiveResponse: function () { }
                          });
                          session.status = C.STATUS_EARLY_MEDIA;
                          session.mute();
                          session.emit('progress', response);
                          /*
                                              if (session.status === C.STATUS_EARLY_MEDIA) {
                                                localMedia = session.mediaHandler.localMedia;
                                                if (localMedia.getAudioTracks().length > 0) {
                                                  localMedia.getAudioTracks()[0].enabled = false;
                                                }
                                                if (localMedia.getVideoTracks().length > 0) {
                                                  localMedia.getVideoTracks()[0].enabled = false;
                                                }
                                              }*/
                        },
                        function onFailure(e) {
                          session.logger.warn(e);
                          session.acceptAndTerminate(response, 488, 'Not Acceptable Here');
                          session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                        }
                      );
                  } else {
                    var earlyDialog = this.earlyDialogs[id];
                    var earlyMedia = earlyDialog.mediaHandler;

                    earlyDialog.pracked.push(response.getHeader('rseq'));

                    earlyMedia.setDescription(response)
                      .then(earlyMedia.getDescription.bind(earlyMedia, session.mediaHint))
                      .then(function onSuccess(description) {
                        extraHeaders.push('RAck: ' + response.getHeader('rseq') + ' ' + response.getHeader('cseq'));
                        earlyDialog.sendRequest(session, SIP.C.PRACK, {
                          extraHeaders: extraHeaders,
                          body: description
                        });
                        session.status = C.STATUS_EARLY_MEDIA;
                        session.emit('progress', response);
                      })
                      .catch(function onFailure(e) {
                        if (e instanceof SIP.Exceptions.GetDescriptionError) {
                          earlyDialog.pracked.push(response.getHeader('rseq'));
                          if (session.status === C.STATUS_TERMINATED) {
                            return;
                          }

                          session.failed(null, SIP.C.causes.WEBRTC_ERROR);
                          session.terminated(null, SIP.C.causes.WEBRTC_ERROR);
                        } else {
                          earlyDialog.pracked.splice(earlyDialog.pracked.indexOf(response.getHeader('rseq')), 1);
                          session.logger.warn('invalid description');
                          session.logger.warn(e);
                        }
                      });
                  }
                } else {
                  this.emit('progress', response);
                }
                break;
              case /^2[0-9]{2}$/.test(response.status_code):
                var cseq = this.request.cseq + ' ' + this.request.method;
                if (cseq !== response.getHeader('cseq')) {
                  break;
                }

                if (this.status === C.STATUS_EARLY_MEDIA && this.dialog) {
                  this.status = C.STATUS_CONFIRMED;
                  this.unmute();
                  /*localMedia = this.mediaHandler.localMedia;
                                  if (localMedia.getAudioTracks().length > 0) {
                                    localMedia.getAudioTracks()[0].enabled = true;
                                  }
                                  if (localMedia.getVideoTracks().length > 0) {
                                    localMedia.getVideoTracks()[0].enabled = true;
                                  }*/
                  options = {};
                  if (this.renderbody) {
                    extraHeaders.push('Content-Type: ' + this.rendertype);
                    options.extraHeaders = extraHeaders;
                    options.body = this.renderbody;
                  }
                  options.cseq = response.cseq;
                  this.sendRequest(SIP.C.ACK, options);
                  this.accepted(response);
                  break;
                }
                if (this.dialog) {
                  break;
                }

                if (!this.hasOffer) {
                  if (this.earlyDialogs[id] && this.earlyDialogs[id].mediaHandler.localMedia) {
                    this.hasOffer = true;
                    this.hasAnswer = true;
                    this.mediaHandler = this.earlyDialogs[id].mediaHandler;
                    if (!this.createDialog(response, 'UAC')) {
                      break;
                    }
                    this.status = C.STATUS_CONFIRMED;
                    this.sendRequest(SIP.C.ACK, { cseq: response.cseq });

                    this.unmute();
                    /*
                                      localMedia = session.mediaHandler.localMedia;
                                      if (localMedia.getAudioTracks().length > 0) {
                                        localMedia.getAudioTracks()[0].enabled = true;
                                      }
                                      if (localMedia.getVideoTracks().length > 0) {
                                        localMedia.getVideoTracks()[0].enabled = true;
                                      }*/
                    this.accepted(response);
                  } else {
                    if (!this.mediaHandler.hasDescription(response)) {
                      this.acceptAndTerminate(response, 400, 'Missing session description');
                      this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                      break;
                    }
                    if (!this.createDialog(response, 'UAC')) {
                      break;
                    }
                    this.hasOffer = true;
                    this.mediaHandler.setDescription(response)
                      .then(this.mediaHandler.getDescription.bind(this.mediaHandler, this.mediaHint))
                      .then(function onSuccess(description) {
                        if (session.isCanceled || session.status === C.STATUS_TERMINATED) {
                          return;
                        }

                        session.status = C.STATUS_CONFIRMED;
                        session.hasAnswer = true;

                        session.unmute();
                        /*localMedia = session.mediaHandler.localMedia;
                                              if (localMedia.getAudioTracks().length > 0) {
                                                localMedia.getAudioTracks()[0].enabled = true;
                                              }
                                              if (localMedia.getVideoTracks().length > 0) {
                                                localMedia.getVideoTracks()[0].enabled = true;
                                              }*/
                        session.sendRequest(SIP.C.ACK, {
                          body: description,
                          cseq: response.cseq
                        });
                        session.accepted(response);
                      })
                      .catch(function onFailure(e) {
                        if (e instanceof SIP.Exceptions.GetDescriptionError) {
                          session.logger.warn("there was a problem");
                        } else {
                          session.logger.warn('invalid description');
                          session.logger.warn(e);
                          session.acceptAndTerminate(response, 488, 'Invalid session description');
                          session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                        }
                      });
                  }
                } else if (this.hasAnswer) {
                  if (this.renderbody) {
                    extraHeaders.push('Content-Type: ' + session.rendertype);
                    options.extraHeaders = extraHeaders;
                    options.body = this.renderbody;
                  }
                  this.sendRequest(SIP.C.ACK, options);
                } else {
                  if (!this.mediaHandler.hasDescription(response)) {
                    this.acceptAndTerminate(response, 400, 'Missing session description');
                    this.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                    break;
                  }
                  if (!this.createDialog(response, 'UAC')) {
                    break;
                  }
                  this.hasAnswer = true;
                  this.mediaHandler.setDescription(response)
                    .then(
                      function onSuccess() {
                        var options = {};
                        session.status = C.STATUS_CONFIRMED;
                        session.unmute();
                        /*localMedia = session.mediaHandler.localMedia;
                                          if (localMedia.getAudioTracks().length > 0) {
                                            localMedia.getAudioTracks()[0].enabled = true;
                                          }
                                          if (localMedia.getVideoTracks().length > 0) {
                                            localMedia.getVideoTracks()[0].enabled = true;
                                          }*/
                        if (session.renderbody) {
                          extraHeaders.push('Content-Type: ' + session.rendertype);
                          options.extraHeaders = extraHeaders;
                          options.body = session.renderbody;
                        }
                        options.cseq = response.cseq;
                        session.sendRequest(SIP.C.ACK, options);
                        session.accepted(response);
                      },
                      function onFailure(e) {
                        session.logger.warn(e);
                        session.acceptAndTerminate(response, 488, 'Not Acceptable Here');
                        session.failed(response, SIP.C.causes.BAD_MEDIA_DESCRIPTION);
                      }
                    );
                }
                break;
              default:
                cause = SIP.Utils.sipErrorCause(response.status_code);
                this.rejected(response, cause);
                this.failed(response, cause);
                this.terminated(response, cause);
            }
          },

          cancel: function (options) {
            options = options || {};

            options.extraHeaders = (options.extraHeaders || []).slice();

            if (this.status === C.STATUS_TERMINATED || this.status === C.STATUS_CONFIRMED) {
              throw new SIP.Exceptions.InvalidStateError(this.status);
            }

            this.logger.log('canceling RTCSession');

            var cancel_reason = SIP.Utils.getCancelReason(options.status_code, options.reason_phrase);

            if (this.status === C.STATUS_NULL ||
              (this.status === C.STATUS_INVITE_SENT && !this.received_100)) {
              this.isCanceled = true;
              this.cancelReason = cancel_reason;
            } else if (this.status === C.STATUS_INVITE_SENT ||
              this.status === C.STATUS_1XX_RECEIVED ||
              this.status === C.STATUS_EARLY_MEDIA) {
              this.request.cancel(cancel_reason, options.extraHeaders);
            }

            return this.canceled();
          },

          terminate: function (options) {
            if (this.status === C.STATUS_TERMINATED) {
              return this;
            }

            if (this.status === C.STATUS_WAITING_FOR_ACK || this.status === C.STATUS_CONFIRMED) {
              this.bye(options);
            } else {
              this.cancel(options);
            }

            return this;
          },

          receiveRequest: function (request) {

            if (request.method === SIP.C.CANCEL) {
            }

            if (request.method === SIP.C.ACK && this.status === C.STATUS_WAITING_FOR_ACK) {
              SIP.Timers.clearTimeout(this.timers.ackTimer);
              SIP.Timers.clearTimeout(this.timers.invite2xxTimer);
              this.status = C.STATUS_CONFIRMED;
              this.unmute();

              this.accepted();
            }

            return Session.prototype.receiveRequest.apply(this, [request]);
          },

          onTransportError: function () {
            if (this.status !== C.STATUS_CONFIRMED && this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.CONNECTION_ERROR);
            }
          },

          onRequestTimeout: function () {
            if (this.status === C.STATUS_CONFIRMED) {
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            } else if (this.status !== C.STATUS_TERMINATED) {
              this.failed(null, SIP.C.causes.REQUEST_TIMEOUT);
              this.terminated(null, SIP.C.causes.REQUEST_TIMEOUT);
            }
          }

        };

        SIP.InviteClientContext = InviteClientContext;

      };

    }, { "./Session/DTMF": 24 }], 24: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview DTMF
       */

      /**
       * @class DTMF
       * @param {SIP.Session} session
       */
      module.exports = function (SIP) {

        var DTMF,
          C = {
            MIN_DURATION: 70,
            MAX_DURATION: 6000,
            DEFAULT_DURATION: 100,
            MIN_INTER_TONE_GAP: 50,
            DEFAULT_INTER_TONE_GAP: 500
          };

        DTMF = function (session, tone, options) {
          var duration, interToneGap;

          if (tone === undefined) {
            throw new TypeError('Not enough arguments');
          }

          this.logger = session.ua.getLogger('sip.invitecontext.dtmf', session.id);
          this.owner = session;
          this.direction = null;

          options = options || {};
          duration = options.duration || null;
          interToneGap = options.interToneGap || null;

          if (typeof tone === 'string') {
            tone = tone.toUpperCase();
          } else if (typeof tone === 'number') {
            tone = tone.toString();
          } else {
            throw new TypeError('Invalid tone: ' + tone);
          }

          if (!tone.match(/^[0-9A-D#*]$/)) {
            throw new TypeError('Invalid tone: ' + tone);
          } else {
            this.tone = tone;
          }

          if (duration && !SIP.Utils.isDecimal(duration)) {
            throw new TypeError('Invalid tone duration: ' + duration);
          } else if (!duration) {
            duration = DTMF.C.DEFAULT_DURATION;
          } else if (duration < DTMF.C.MIN_DURATION) {
            this.logger.warn('"duration" value is lower than the minimum allowed, setting it to ' + DTMF.C.MIN_DURATION + ' milliseconds');
            duration = DTMF.C.MIN_DURATION;
          } else if (duration > DTMF.C.MAX_DURATION) {
            this.logger.warn('"duration" value is greater than the maximum allowed, setting it to ' + DTMF.C.MAX_DURATION + ' milliseconds');
            duration = DTMF.C.MAX_DURATION;
          } else {
            duration = Math.abs(duration);
          }
          this.duration = duration;

          if (interToneGap && !SIP.Utils.isDecimal(interToneGap)) {
            throw new TypeError('Invalid interToneGap: ' + interToneGap);
          } else if (!interToneGap) {
            interToneGap = DTMF.C.DEFAULT_INTER_TONE_GAP;
          } else if (interToneGap < DTMF.C.MIN_INTER_TONE_GAP) {
            this.logger.warn('"interToneGap" value is lower than the minimum allowed, setting it to ' + DTMF.C.MIN_INTER_TONE_GAP + ' milliseconds');
            interToneGap = DTMF.C.MIN_INTER_TONE_GAP;
          } else {
            interToneGap = Math.abs(interToneGap);
          }
          this.interToneGap = interToneGap;
        };
        DTMF.prototype = Object.create(SIP.EventEmitter.prototype);


        DTMF.prototype.send = function (options) {
          var extraHeaders,
            body = {};

          this.direction = 'outgoing';

          if (this.owner.status !== SIP.Session.C.STATUS_CONFIRMED &&
            this.owner.status !== SIP.Session.C.STATUS_WAITING_FOR_ACK) {
            throw new SIP.Exceptions.InvalidStateError(this.owner.status);
          }

          options = options || {};
          extraHeaders = options.extraHeaders ? options.extraHeaders.slice() : [];

          body.contentType = 'application/dtmf-relay';

          body.body = "Signal= " + this.tone + "\r\n";
          body.body += "Duration= " + this.duration;

          this.request = this.owner.dialog.sendRequest(this, SIP.C.INFO, {
            extraHeaders: extraHeaders,
            body: body
          });

          this.owner.emit('dtmf', this.request, this);
        };

        /**
         * @private
         */
        DTMF.prototype.receiveResponse = function (response) {
          var cause;

          switch (true) {
            case /^1[0-9]{2}$/.test(response.status_code):
              break;

            case /^2[0-9]{2}$/.test(response.status_code):
              this.emit('succeeded', {
                originator: 'remote',
                response: response
              });
              break;

            default:
              cause = SIP.Utils.sipErrorCause(response.status_code);
              this.emit('failed', response, cause);
              break;
          }
        };

        /**
         * @private
         */
        DTMF.prototype.onRequestTimeout = function () {
          this.emit('failed', null, SIP.C.causes.REQUEST_TIMEOUT);
          this.owner.onRequestTimeout();
        };

        /**
         * @private
         */
        DTMF.prototype.onTransportError = function () {
          this.emit('failed', null, SIP.C.causes.CONNECTION_ERROR);
          this.owner.onTransportError();
        };

        /**
         * @private
         */
        DTMF.prototype.onDialogError = function (response) {
          this.emit('failed', response, SIP.C.causes.DIALOG_ERROR);
          this.owner.onDialogError(response);
        };

        /**
         * @private
         */
        DTMF.prototype.init_incoming = function (request) {
          this.direction = 'incoming';
          this.request = request;

          request.reply(200);

          if (!this.tone || !this.duration) {
            this.logger.warn('invalid INFO DTMF received, discarded');
          } else {
            this.owner.emit('dtmf', request, this);
          }
        };

        DTMF.C = C;
        return DTMF;
      };

    }, {}], 25: [function (require, module, exports) {
      "use strict";

      /**
       * @fileoverview SIP Subscriber (SIP-Specific Event Notifications RFC6665)
       */

      /**
       * @augments SIP
       * @class Class creating a SIP Subscription.
       */
      module.exports = function (SIP) {
        SIP.Subscription = function (ua, target, event, options) {
          options = Object.create(options || Object.prototype);
          this.extraHeaders = options.extraHeaders = (options.extraHeaders || []).slice();

          this.id = null;
          this.state = 'init';

          if (!event) {
            throw new TypeError('Event necessary to create a subscription.');
          } else {

            this.event = event;
          }

          if (typeof options.expires !== 'number') {
            ua.logger.warn('expires must be a number. Using default of 3600.');
            this.expires = 3600;
          } else {
            this.expires = options.expires;
          }

          options.extraHeaders.push('Event: ' + this.event);
          options.extraHeaders.push('Expires: ' + this.expires);

          if (options.body) {
            this.body = options.body;
          }

          this.contact = ua.contact.toString();

          options.extraHeaders.push('Contact: ' + this.contact);
          options.extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());

          SIP.Utils.augment(this, SIP.ClientContext, [ua, SIP.C.SUBSCRIBE, target, options]);

          this.logger = ua.getLogger('sip.subscription');

          this.dialog = null;
          this.timers = { N: null, sub_duration: null };
          this.errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];
        };

        SIP.Subscription.prototype = {
          subscribe: function () {
            var sub = this;

            if (this.state === 'active') {
              this.refresh();
              return this;
            } else if (this.state === 'notify_wait') {
              return this;
            }

            SIP.Timers.clearTimeout(this.timers.sub_duration);
            SIP.Timers.clearTimeout(this.timers.N);
            this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);

            this.ua.earlySubscriptions[this.request.call_id + this.request.from.parameters.tag + this.event] = this;

            this.send();

            this.state = 'notify_wait';

            return this;
          },

          refresh: function () {
            if (this.state === 'terminated' || this.state === 'pending' || this.state === 'notify_wait') {
              return;
            }

            this.dialog.sendRequest(this, SIP.C.SUBSCRIBE, {
              extraHeaders: this.extraHeaders,
              body: this.body
            });
          },

          receiveResponse: function (response) {
            var expires, sub = this,
              cause = SIP.Utils.getReasonPhrase(response.status_code);

            if ((this.state === 'notify_wait' && response.status_code >= 300) ||
              (this.state !== 'notify_wait' && this.errorCodes.indexOf(response.status_code) !== -1)) {
              this.failed(response, null);
            } else if (/^2[0-9]{2}$/.test(response.status_code)) {
              this.emit('accepted', response, cause);

              expires = response.getHeader('Expires');

              if (expires && expires <= this.expires) {
                this.expires = expires;
                this.timers.sub_duration = SIP.Timers.setTimeout(sub.refresh.bind(sub), expires * 900);
              } else {
                if (!expires) {
                  this.logger.warn('Expires header missing in a 200-class response to SUBSCRIBE');
                  this.failed(response, SIP.C.EXPIRES_HEADER_MISSING);
                } else {
                  this.logger.warn('Expires header in a 200-class response to SUBSCRIBE with a higher value than the one in the request');
                  this.failed(response, SIP.C.INVALID_EXPIRES_HEADER);
                }
              }
            } else if (response.statusCode > 300) {
              this.emit('failed', response, cause);
              this.emit('rejected', response, cause);
            }
          },

          unsubscribe: function () {
            var extraHeaders = [], sub = this;

            this.state = 'terminated';

            extraHeaders.push('Event: ' + this.event);
            extraHeaders.push('Expires: 0');

            extraHeaders.push('Contact: ' + this.contact);
            extraHeaders.push('Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString());

            this.receiveResponse = function () { };

            this.dialog.sendRequest(this, this.method, {
              extraHeaders: extraHeaders,
              body: this.body
            });

            SIP.Timers.clearTimeout(this.timers.sub_duration);
            SIP.Timers.clearTimeout(this.timers.N);
            this.timers.N = SIP.Timers.setTimeout(sub.timer_fire.bind(sub), SIP.Timers.TIMER_N);
          },

          /**
           * @private
           */
          timer_fire: function () {
            if (this.state === 'terminated') {
              this.terminateDialog();
              SIP.Timers.clearTimeout(this.timers.N);
              SIP.Timers.clearTimeout(this.timers.sub_duration);

              delete this.ua.subscriptions[this.id];
            } else if (this.state === 'notify_wait' || this.state === 'pending') {
              this.close();
            } else {
              this.refresh();
            }
          },

          /**
           * @private
           */
          close: function () {
            if (this.state === 'notify_wait') {
              this.state = 'terminated';
              SIP.Timers.clearTimeout(this.timers.N);
              SIP.Timers.clearTimeout(this.timers.sub_duration);
              this.receiveResponse = function () { };

              delete this.ua.earlySubscriptions[this.request.call_id + this.request.from.parameters.tag + this.event];
            } else if (this.state !== 'terminated') {
              this.unsubscribe();
            }
          },

          /**
           * @private
           */
          createConfirmedDialog: function (message, type) {
            var dialog;

            this.terminateDialog();
            dialog = new SIP.Dialog(this, message, type);
            dialog.invite_seqnum = this.request.cseq;
            dialog.local_seqnum = this.request.cseq;

            if (!dialog.error) {
              this.dialog = dialog;
              return true;
            }
            else {
              return false;
            }
          },

          /**
           * @private
           */
          terminateDialog: function () {
            if (this.dialog) {
              delete this.ua.subscriptions[this.id];
              this.dialog.terminate();
              delete this.dialog;
            }
          },

          /**
           * @private
           */
          receiveRequest: function (request) {
            var sub_state, sub = this;

            function setExpiresTimeout() {
              if (sub_state.expires) {
                SIP.Timers.clearTimeout(sub.timers.sub_duration);
                sub_state.expires = Math.min(sub.expires,
                  Math.max(sub_state.expires, 0));
                sub.timers.sub_duration = SIP.Timers.setTimeout(sub.refresh.bind(sub),
                  sub_state.expires * 900);
              }
            }

            if (!this.matchEvent(request)) {
              request.reply(489);
              return;
            }

            if (!this.dialog) {
              if (this.createConfirmedDialog(request, 'UAS')) {
                this.id = this.dialog.id.toString();
                delete this.ua.earlySubscriptions[this.request.call_id + this.request.from.parameters.tag + this.event];
                this.ua.subscriptions[this.id] = this;
              }
            }

            sub_state = request.parseHeader('Subscription-State');

            request.reply(200, SIP.C.REASON_200);

            SIP.Timers.clearTimeout(this.timers.N);

            this.emit('notify', { request: request });


            if (this.state === 'terminated') {
              if (sub_state.state === 'terminated') {
                this.terminateDialog();
                SIP.Timers.clearTimeout(this.timers.N);
                SIP.Timers.clearTimeout(this.timers.sub_duration);

                delete this.ua.subscriptions[this.id];
              }
              return;
            }

            switch (sub_state.state) {
              case 'active':
                this.state = 'active';
                setExpiresTimeout();
                break;
              case 'pending':
                if (this.state === 'notify_wait') {
                  setExpiresTimeout();
                }
                this.state = 'pending';
                break;
              case 'terminated':
                SIP.Timers.clearTimeout(this.timers.sub_duration);
                if (sub_state.reason) {
                  this.logger.log('terminating subscription with reason ' + sub_state.reason);
                  switch (sub_state.reason) {
                    case 'deactivated':
                    case 'timeout':
                      this.subscribe();
                      return;
                    case 'probation':
                    case 'giveup':
                      if (sub_state.params && sub_state.params['retry-after']) {
                        this.timers.sub_duration = SIP.Timers.setTimeout(sub.subscribe.bind(sub), sub_state.params['retry-after']);
                      } else {
                        this.subscribe();
                      }
                      return;
                    case 'rejected':
                    case 'noresource':
                    case 'invariant':
                      break;
                  }
                }
                this.close();
                break;
            }
          },

          failed: function (response, cause) {
            this.close();
            this.emit('failed', response, cause);
            this.emit('rejected', response, cause);
            return this;
          },

          onDialogError: function (response) {
            this.failed(response, SIP.C.causes.DIALOG_ERROR);
          },

          /**
           * @private
           */
          matchEvent: function (request) {
            var event;

            if (!request.hasHeader('Event')) {
              this.logger.warn('missing Event header');
              return false;
            }
            if (!request.hasHeader('Subscription-State')) {
              this.logger.warn('missing Subscription-State header');
              return false;
            }

            event = request.parseHeader('event').event;

            if (this.event !== event) {
              this.logger.warn('event match failed');
              request.reply(481, 'Event Match Failed');
              return false;
            } else {
              return true;
            }
          }
        };
      };

    }, {}], 26: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP TIMERS
       */

      /**
       * @augments SIP
       */
      var
        T1 = 500,
        T2 = 4000,
        T4 = 5000;
      module.exports = function (timers) {
        var Timers = {
          T1: T1,
          T2: T2,
          T4: T4,
          TIMER_B: 64 * T1,
          TIMER_D: 0 * T1,
          TIMER_F: 64 * T1,
          TIMER_H: 64 * T1,
          TIMER_I: 0 * T1,
          TIMER_J: 0 * T1,
          TIMER_K: 0 * T4,
          TIMER_L: 64 * T1,
          TIMER_M: 64 * T1,
          TIMER_N: 64 * T1,
          PROVISIONAL_RESPONSE_INTERVAL: 60000
        };

        ['setTimeout', 'clearTimeout', 'setInterval', 'clearInterval']
          .forEach(function (name) {

            Timers[name] = function () {
              return timers[name].apply(timers, arguments);
            };
          });

        return Timers;
      };

    }, {}], 27: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP Transactions
       */

      /**
       * SIP Transactions module.
       * @augments SIP
       */
      module.exports = function (SIP) {
        var
          C = {
            STATUS_TRYING: 1,
            STATUS_PROCEEDING: 2,
            STATUS_CALLING: 3,
            STATUS_ACCEPTED: 4,
            STATUS_COMPLETED: 5,
            STATUS_TERMINATED: 6,
            STATUS_CONFIRMED: 7,

            NON_INVITE_CLIENT: 'nict',
            NON_INVITE_SERVER: 'nist',
            INVITE_CLIENT: 'ict',
            INVITE_SERVER: 'ist'
          };

        function buildViaHeader(request_sender, transport, id) {
          var via;
          via = 'SIP/2.0/' + (request_sender.ua.configuration.hackViaTcp ? 'TCP' : transport.server.scheme);
          via += ' ' + request_sender.ua.configuration.viaHost + ';branch=' + id;
          if (request_sender.ua.configuration.forceRport) {
            via += ';rport';
          }
          return via;
        }

        /**
         * @augments SIP.Transactions
         * @class Non Invite Client Transaction
         * @param {SIP.RequestSender} request_sender
         * @param {SIP.OutgoingRequest} request
         * @param {SIP.Transport} transport
         */
        var NonInviteClientTransaction = function (request_sender, request, transport) {
          var via;

          this.type = C.NON_INVITE_CLIENT;
          this.transport = transport;
          this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);
          this.request_sender = request_sender;
          this.request = request;

          this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);

          via = buildViaHeader(request_sender, transport, this.id);
          this.request.setHeader('via', via);

          this.request_sender.ua.newTransaction(this);
        };
        NonInviteClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);

        NonInviteClientTransaction.prototype.stateChanged = function (state) {
          this.state = state;
          this.emit('stateChanged');
        };

        NonInviteClientTransaction.prototype.send = function () {
          var tr = this;

          this.stateChanged(C.STATUS_TRYING);
          this.F = SIP.Timers.setTimeout(tr.timer_F.bind(tr), SIP.Timers.TIMER_F);

          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        };

        NonInviteClientTransaction.prototype.onTransportError = function () {
          this.logger.log('transport error occurred, deleting non-INVITE client transaction ' + this.id);
          SIP.Timers.clearTimeout(this.F);
          SIP.Timers.clearTimeout(this.K);
          this.stateChanged(C.STATUS_TERMINATED);
          this.request_sender.ua.destroyTransaction(this);
          this.request_sender.onTransportError();
        };

        NonInviteClientTransaction.prototype.timer_F = function () {
          this.logger.log('Timer F expired for non-INVITE client transaction ' + this.id);
          this.stateChanged(C.STATUS_TERMINATED);
          this.request_sender.ua.destroyTransaction(this);
          this.request_sender.onRequestTimeout();
        };

        NonInviteClientTransaction.prototype.timer_K = function () {
          this.stateChanged(C.STATUS_TERMINATED);
          this.request_sender.ua.destroyTransaction(this);
        };

        NonInviteClientTransaction.prototype.receiveResponse = function (response) {
          var
            tr = this,
            status_code = response.status_code;

          if (status_code < 200) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.request_sender.receiveResponse(response);
                break;
            }
          } else {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                SIP.Timers.clearTimeout(this.F);

                if (status_code === 408) {
                  this.request_sender.onRequestTimeout();
                } else {
                  this.request_sender.receiveResponse(response);
                }

                this.K = SIP.Timers.setTimeout(tr.timer_K.bind(tr), SIP.Timers.TIMER_K);
                break;
              case C.STATUS_COMPLETED:
                break;
            }
          }
        };



        /**
         * @augments SIP.Transactions
         * @class Invite Client Transaction
         * @param {SIP.RequestSender} request_sender
         * @param {SIP.OutgoingRequest} request
         * @param {SIP.Transport} transport
         */
        var InviteClientTransaction = function (request_sender, request, transport) {
          var via,
            tr = this;

          this.type = C.INVITE_CLIENT;
          this.transport = transport;
          this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);
          this.request_sender = request_sender;
          this.request = request;

          this.logger = request_sender.ua.getLogger('sip.transaction.ict', this.id);

          via = buildViaHeader(request_sender, transport, this.id);
          this.request.setHeader('via', via);

          this.request_sender.ua.newTransaction(this);

          this.request.cancel = function (reason, extraHeaders) {
            extraHeaders = (extraHeaders || []).slice();
            var length = extraHeaders.length;
            var extraHeadersString = null;
            for (var idx = 0; idx < length; idx++) {
              extraHeadersString = (extraHeadersString || '') + extraHeaders[idx].trim() + '\r\n';
            }

            tr.cancel_request(tr, reason, extraHeadersString);
          };
        };
        InviteClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);

        InviteClientTransaction.prototype.stateChanged = function (state) {
          this.state = state;
          this.emit('stateChanged');
        };

        InviteClientTransaction.prototype.send = function () {
          var tr = this;
          this.stateChanged(C.STATUS_CALLING);
          this.B = SIP.Timers.setTimeout(tr.timer_B.bind(tr), SIP.Timers.TIMER_B);

          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        };

        InviteClientTransaction.prototype.onTransportError = function () {
          this.logger.log('transport error occurred, deleting INVITE client transaction ' + this.id);
          SIP.Timers.clearTimeout(this.B);
          SIP.Timers.clearTimeout(this.D);
          SIP.Timers.clearTimeout(this.M);
          this.stateChanged(C.STATUS_TERMINATED);
          this.request_sender.ua.destroyTransaction(this);

          if (this.state !== C.STATUS_ACCEPTED) {
            this.request_sender.onTransportError();
          }
        };

        InviteClientTransaction.prototype.timer_M = function () {
          this.logger.log('Timer M expired for INVITE client transaction ' + this.id);

          if (this.state === C.STATUS_ACCEPTED) {
            SIP.Timers.clearTimeout(this.B);
            this.stateChanged(C.STATUS_TERMINATED);
            this.request_sender.ua.destroyTransaction(this);
          }
        };

        InviteClientTransaction.prototype.timer_B = function () {
          this.logger.log('Timer B expired for INVITE client transaction ' + this.id);
          if (this.state === C.STATUS_CALLING) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.request_sender.ua.destroyTransaction(this);
            this.request_sender.onRequestTimeout();
          }
        };

        InviteClientTransaction.prototype.timer_D = function () {
          this.logger.log('Timer D expired for INVITE client transaction ' + this.id);
          SIP.Timers.clearTimeout(this.B);
          this.stateChanged(C.STATUS_TERMINATED);
          this.request_sender.ua.destroyTransaction(this);
        };

        InviteClientTransaction.prototype.sendACK = function (response) {
          var tr = this;

          this.ack = 'ACK ' + this.request.ruri + ' SIP/2.0\r\n';
          this.ack += 'Via: ' + this.request.headers['Via'].toString() + '\r\n';

          if (this.request.headers['Route']) {
            this.ack += 'Route: ' + this.request.headers['Route'].toString() + '\r\n';
          }

          this.ack += 'To: ' + response.getHeader('to') + '\r\n';
          this.ack += 'From: ' + this.request.headers['From'].toString() + '\r\n';
          this.ack += 'Call-ID: ' + this.request.headers['Call-ID'].toString() + '\r\n';
          this.ack += 'Content-Length: 0\r\n';
          this.ack += 'CSeq: ' + this.request.headers['CSeq'].toString().split(' ')[0];
          this.ack += ' ACK\r\n\r\n';

          this.D = SIP.Timers.setTimeout(tr.timer_D.bind(tr), SIP.Timers.TIMER_D);

          this.transport.send(this.ack);
        };

        InviteClientTransaction.prototype.cancel_request = function (tr, reason, extraHeaders) {
          var request = tr.request;

          this.cancel = SIP.C.CANCEL + ' ' + request.ruri + ' SIP/2.0\r\n';
          this.cancel += 'Via: ' + request.headers['Via'].toString() + '\r\n';

          if (this.request.headers['Route']) {
            this.cancel += 'Route: ' + request.headers['Route'].toString() + '\r\n';
          }

          this.cancel += 'To: ' + request.headers['To'].toString() + '\r\n';
          this.cancel += 'From: ' + request.headers['From'].toString() + '\r\n';
          this.cancel += 'Call-ID: ' + request.headers['Call-ID'].toString() + '\r\n';
          this.cancel += 'CSeq: ' + request.headers['CSeq'].toString().split(' ')[0] +
            ' CANCEL\r\n';

          if (reason) {
            this.cancel += 'Reason: ' + reason + '\r\n';
          }

          if (extraHeaders) {
            this.cancel += extraHeaders;
          }

          this.cancel += 'Content-Length: 0\r\n\r\n';

          if (this.state === C.STATUS_PROCEEDING) {
            this.transport.send(this.cancel);
          }
        };

        InviteClientTransaction.prototype.receiveResponse = function (response) {
          var
            tr = this,
            status_code = response.status_code;

          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_CALLING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.request_sender.receiveResponse(response);
                if (this.cancel) {
                  this.transport.send(this.cancel);
                }
                break;
              case C.STATUS_PROCEEDING:
                this.request_sender.receiveResponse(response);
                break;
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.M = SIP.Timers.setTimeout(tr.timer_M.bind(tr), SIP.Timers.TIMER_M);
                this.request_sender.receiveResponse(response);
                break;
              case C.STATUS_ACCEPTED:
                this.request_sender.receiveResponse(response);
                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.sendACK(response);
                this.request_sender.receiveResponse(response);
                break;
              case C.STATUS_COMPLETED:
                this.sendACK(response);
                break;
            }
          }
        };


        /**
         * @augments SIP.Transactions
         * @class ACK Client Transaction
         * @param {SIP.RequestSender} request_sender
         * @param {SIP.OutgoingRequest} request
         * @param {SIP.Transport} transport
         */
        var AckClientTransaction = function (request_sender, request, transport) {
          var via;

          this.transport = transport;
          this.id = 'z9hG4bK' + Math.floor(Math.random() * 10000000);
          this.request_sender = request_sender;
          this.request = request;

          this.logger = request_sender.ua.getLogger('sip.transaction.nict', this.id);

          via = buildViaHeader(request_sender, transport, this.id);
          this.request.setHeader('via', via);
        };
        AckClientTransaction.prototype = Object.create(SIP.EventEmitter.prototype);

        AckClientTransaction.prototype.send = function () {
          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        };

        AckClientTransaction.prototype.onTransportError = function () {
          this.logger.log('transport error occurred, for an ACK client transaction ' + this.id);
          this.request_sender.onTransportError();
        };


        /**
         * @augments SIP.Transactions
         * @class Non Invite Server Transaction
         * @param {SIP.IncomingRequest} request
         * @param {SIP.UA} ua
         */
        var NonInviteServerTransaction = function (request, ua) {
          this.type = C.NON_INVITE_SERVER;
          this.id = request.via_branch;
          this.request = request;
          this.transport = request.transport;
          this.ua = ua;
          this.last_response = '';
          request.server_transaction = this;

          this.logger = ua.getLogger('sip.transaction.nist', this.id);

          this.state = C.STATUS_TRYING;

          ua.newTransaction(this);
        };
        NonInviteServerTransaction.prototype = Object.create(SIP.EventEmitter.prototype);

        NonInviteServerTransaction.prototype.stateChanged = function (state) {
          this.state = state;
          this.emit('stateChanged');
        };

        NonInviteServerTransaction.prototype.timer_J = function () {
          this.logger.log('Timer J expired for non-INVITE server transaction ' + this.id);
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        };

        NonInviteServerTransaction.prototype.onTransportError = function () {
          if (!this.transportError) {
            this.transportError = true;

            this.logger.log('transport error occurred, deleting non-INVITE server transaction ' + this.id);

            SIP.Timers.clearTimeout(this.J);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        };

        NonInviteServerTransaction.prototype.receiveResponse = function (status_code, response) {
          var tr = this;
          var deferred = SIP.Utils.defer();

          if (status_code === 100) {
            /* RFC 4320 4.1
                       * 'A SIP element MUST NOT
                       * send any provisional response with a
                       * Status-Code other than 100 to a non-INVITE request.'
                       */
            switch (this.state) {
              case C.STATUS_TRYING:
                this.stateChanged(C.STATUS_PROCEEDING);
                if (!this.transport.send(response)) {
                  this.onTransportError();
                }
                break;
              case C.STATUS_PROCEEDING:
                this.last_response = response;
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  deferred.reject();
                } else {
                  deferred.resolve();
                }
                break;
            }
          } else if (status_code >= 200 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.last_response = response;
                this.J = SIP.Timers.setTimeout(tr.timer_J.bind(tr), SIP.Timers.TIMER_J);
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  deferred.reject();
                } else {
                  deferred.resolve();
                }
                break;
              case C.STATUS_COMPLETED:
                break;
            }
          }

          return deferred.promise;
        };

        /**
         * @augments SIP.Transactions
         * @class Invite Server Transaction
         * @param {SIP.IncomingRequest} request
         * @param {SIP.UA} ua
         */
        var InviteServerTransaction = function (request, ua) {
          this.type = C.INVITE_SERVER;
          this.id = request.via_branch;
          this.request = request;
          this.transport = request.transport;
          this.ua = ua;
          this.last_response = '';
          request.server_transaction = this;

          this.logger = ua.getLogger('sip.transaction.ist', this.id);

          this.state = C.STATUS_PROCEEDING;

          ua.newTransaction(this);

          this.resendProvisionalTimer = null;

          request.reply(100);
        };
        InviteServerTransaction.prototype = Object.create(SIP.EventEmitter.prototype);

        InviteServerTransaction.prototype.stateChanged = function (state) {
          this.state = state;
          this.emit('stateChanged');
        };

        InviteServerTransaction.prototype.timer_H = function () {
          this.logger.log('Timer H expired for INVITE server transaction ' + this.id);

          if (this.state === C.STATUS_COMPLETED) {
            this.logger.warn('transactions', 'ACK for INVITE server transaction was never received, call will be terminated');
          }

          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        };

        InviteServerTransaction.prototype.timer_I = function () {
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        };

        InviteServerTransaction.prototype.timer_L = function () {
          this.logger.log('Timer L expired for INVITE server transaction ' + this.id);

          if (this.state === C.STATUS_ACCEPTED) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        };

        InviteServerTransaction.prototype.onTransportError = function () {
          if (!this.transportError) {
            this.transportError = true;

            this.logger.log('transport error occurred, deleting INVITE server transaction ' + this.id);

            if (this.resendProvisionalTimer !== null) {
              SIP.Timers.clearInterval(this.resendProvisionalTimer);
              this.resendProvisionalTimer = null;
            }

            SIP.Timers.clearTimeout(this.L);
            SIP.Timers.clearTimeout(this.H);
            SIP.Timers.clearTimeout(this.I);

            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        };

        InviteServerTransaction.prototype.resend_provisional = function () {
          if (!this.transport.send(this.last_response)) {
            this.onTransportError();
          }
        };

        InviteServerTransaction.prototype.receiveResponse = function (status_code, response) {
          var tr = this;
          var deferred = SIP.Utils.defer();

          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (!this.transport.send(response)) {
                  this.onTransportError();
                }
                this.last_response = response;
                break;
            }
          }

          if (status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {
            if (this.resendProvisionalTimer === null) {
              this.resendProvisionalTimer = SIP.Timers.setInterval(tr.resend_provisional.bind(tr),
                SIP.Timers.PROVISIONAL_RESPONSE_INTERVAL);
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.last_response = response;
                this.L = SIP.Timers.setTimeout(tr.timer_L.bind(tr), SIP.Timers.TIMER_L);

                if (this.resendProvisionalTimer !== null) {
                  SIP.Timers.clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }
              /* falls through */
              case C.STATUS_ACCEPTED:
                if (!this.transport.send(response)) {
                  this.onTransportError();
                  deferred.reject();
                } else {
                  deferred.resolve();
                }
                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (this.resendProvisionalTimer !== null) {
                  SIP.Timers.clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }

                if (!this.transport.send(response)) {
                  this.onTransportError();
                  deferred.reject();
                } else {
                  this.stateChanged(C.STATUS_COMPLETED);
                  this.H = SIP.Timers.setTimeout(tr.timer_H.bind(tr), SIP.Timers.TIMER_H);
                  deferred.resolve();
                }
                break;
            }
          }

          return deferred.promise;
        };

        /**
         * @function
         * @param {SIP.UA} ua
         * @param {SIP.IncomingRequest} request
         *
         * @return {boolean}
         * INVITE:
         *  _true_ if retransmission
         *  _false_ new request
         *
         * ACK:
         *  _true_  ACK to non2xx response
         *  _false_ ACK must be passed to TU (accepted state)
         *          ACK to 2xx response
         *
         * CANCEL:
         *  _true_  no matching invite transaction
         *  _false_ matching invite transaction and no final response sent
         *
         * OTHER:
         *  _true_  retransmission
         *  _false_ new request
         */
        var checkTransaction = function (ua, request) {
          var tr;

          switch (request.method) {
            case SIP.C.INVITE:
              tr = ua.transactions.ist[request.via_branch];
              if (tr) {
                switch (tr.state) {
                  case C.STATUS_PROCEEDING:
                    tr.transport.send(tr.last_response);
                    break;


                  case C.STATUS_ACCEPTED:
                    break;
                }
                return true;
              }
              break;
            case SIP.C.ACK:
              tr = ua.transactions.ist[request.via_branch];

              if (tr) {
                if (tr.state === C.STATUS_ACCEPTED) {
                  return false;
                } else if (tr.state === C.STATUS_COMPLETED) {
                  tr.stateChanged(C.STATUS_CONFIRMED);
                  tr.I = SIP.Timers.setTimeout(tr.timer_I.bind(tr), SIP.Timers.TIMER_I);
                  return true;
                }
              }

              else {
                return false;
              }
              break;
            case SIP.C.CANCEL:
              tr = ua.transactions.ist[request.via_branch];
              if (tr) {
                request.reply_sl(200);
                if (tr.state === C.STATUS_PROCEEDING) {
                  return false;
                } else {
                  return true;
                }
              } else {
                request.reply_sl(481);
                return true;
              }
              break;
            default:

              tr = ua.transactions.nist[request.via_branch];
              if (tr) {
                switch (tr.state) {
                  case C.STATUS_TRYING:
                    break;
                  case C.STATUS_PROCEEDING:
                  case C.STATUS_COMPLETED:
                    tr.transport.send(tr.last_response);
                    break;
                }
                return true;
              }
              break;
          }
        };

        SIP.Transactions = {
          C: C,
          checkTransaction: checkTransaction,
          NonInviteClientTransaction: NonInviteClientTransaction,
          InviteClientTransaction: InviteClientTransaction,
          AckClientTransaction: AckClientTransaction,
          NonInviteServerTransaction: NonInviteServerTransaction,
          InviteServerTransaction: InviteServerTransaction
        };

      };

    }, {}], 28: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview Transport
       */

      /**
       * @augments SIP
       * @class Transport
       * @param {SIP.UA} ua
       * @param {Object} server ws_server Object
       */
      module.exports = function (SIP, WebSocket) {
        var Transport,
          C = {
            STATUS_READY: 0,
            STATUS_DISCONNECTED: 1,
            STATUS_ERROR: 2
          };

        /**
         * Compute an amount of time in seconds to wait before sending another
         * keep-alive.
         * @returns {Number}
         */
        function computeKeepAliveTimeout(upperBound) {
          var lowerBound = upperBound * 0.8;
          return 1000 * (Math.random() * (upperBound - lowerBound) + lowerBound);
        }

        Transport = function (ua, server) {

          this.logger = ua.getLogger('sip.transport');
          this.ua = ua;
          this.ws = null;
          this.server = server;
          this.reconnection_attempts = 0;
          this.closed = false;
          this.connected = false;
          this.reconnectTimer = null;
          this.lastTransportError = {};

          this.keepAliveInterval = ua.configuration.keepAliveInterval;
          this.keepAliveTimeout = null;
          this.keepAliveTimer = null;

          this.ua.transport = this;

          this.connect();
        };

        Transport.prototype = {
          /**
           * Send a message.
           * @param {SIP.OutgoingRequest|String} msg
           * @returns {Boolean}
           */
          send: function (msg) {
            var message = msg.toString();

            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
              if (this.ua.configuration.traceSip === true) {
                this.logger.log('sending WebSocket message:\n\n' + message + '\n');
              }
              this.ws.send(message);
              return true;
            } else {
              this.logger.warn('unable to send message, WebSocket is not open');
              return false;
            }
          },

          /**
           * Send a keep-alive (a double-CRLF sequence).
           * @private
           * @returns {Boolean}
           */
          sendKeepAlive: function () {
            if (this.keepAliveTimeout) { return; }

            this.keepAliveTimeout = SIP.Timers.setTimeout(function () {
              this.ua.emit('keepAliveTimeout');
            }.bind(this), 10000);

            return this.send('\r\n\r\n');
          },

          /**
           * Start sending keep-alives.
           * @private
           */
          startSendingKeepAlives: function () {
            if (this.keepAliveInterval && !this.keepAliveTimer) {
              this.keepAliveTimer = SIP.Timers.setTimeout(function () {
                this.sendKeepAlive();
                this.keepAliveTimer = null;
                this.startSendingKeepAlives();
              }.bind(this), computeKeepAliveTimeout(this.keepAliveInterval));
            }
          },

          /**
           * Stop sending keep-alives.
           * @private
           */
          stopSendingKeepAlives: function () {
            SIP.Timers.clearTimeout(this.keepAliveTimer);
            SIP.Timers.clearTimeout(this.keepAliveTimeout);
            this.keepAliveTimer = null;
            this.keepAliveTimeout = null;
          },

          /**
           * Disconnect socket.
           */
          disconnect: function () {
            if (this.ws) {
              SIP.Timers.clearTimeout(this.reconnectTimer);

              this.stopSendingKeepAlives();

              this.closed = true;
              this.logger.log('closing WebSocket ' + this.server.ws_uri);
              this.ws.close();
              this.ws = null;
            }

            if (this.reconnectTimer !== null) {
              SIP.Timers.clearTimeout(this.reconnectTimer);
              this.reconnectTimer = null;
              this.ua.emit('disconnected', {
                transport: this,
                code: this.lastTransportError.code,
                reason: this.lastTransportError.reason
              });
            }
          },

          /**
           * Connect socket.
           */
          connect: function () {
            var transport = this;

            if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {
              this.logger.log('WebSocket ' + this.server.ws_uri + ' is already connected');
              return false;
            }

            if (this.ws) {
              this.ws.close();
              this.ws = null;
            }

            this.logger.log('connecting to WebSocket ' + this.server.ws_uri);
            this.ua.onTransportConnecting(this,
              (this.reconnection_attempts === 0) ? 1 : this.reconnection_attempts);

            try {
              this.ws = new WebSocket(this.server.ws_uri, 'sip');
            } catch (e) {
              this.logger.warn('error connecting to WebSocket ' + this.server.ws_uri + ': ' + e);
            }

            this.ws.binaryType = 'arraybuffer';

            this.ws.onopen = function () {
              transport.onOpen();
            };

            this.ws.onclose = function (e) {
              transport.onClose(e);
              this.onopen = null;
              this.onclose = null;
              this.onmessage = null;
              this.onerror = null;
            };

            this.ws.onmessage = function (e) {
              transport.onMessage(e);
            };

            this.ws.onerror = function (e) {
              transport.onError(e);
            };
          },


          /**
           * @event
           * @param {event} e
           */
          onOpen: function () {
            this.connected = true;

            this.logger.log('WebSocket ' + this.server.ws_uri + ' connected');
            if (this.reconnectTimer !== null) {
              SIP.Timers.clearTimeout(this.reconnectTimer);
              this.reconnectTimer = null;
            }
            this.reconnection_attempts = 0;
            this.closed = false;
            this.ua.onTransportConnected(this);
            this.startSendingKeepAlives();
          },

          /**
           * @event
           * @param {event} e
           */
          onClose: function (e) {
            var connected_before = this.connected;

            this.lastTransportError.code = e.code;
            this.lastTransportError.reason = e.reason;

            this.stopSendingKeepAlives();

            if (this.reconnection_attempts > 0) {
              this.logger.log('Reconnection attempt ' + this.reconnection_attempts + ' failed (code: ' + e.code + (e.reason ? '| reason: ' + e.reason : '') + ')');
              this.reconnect();
            } else {
              this.connected = false;
              this.logger.log('WebSocket disconnected (code: ' + e.code + (e.reason ? '| reason: ' + e.reason : '') + ')');

              if (e.wasClean === false) {
                this.logger.warn('WebSocket abrupt disconnection');
              }
              if (connected_before === true) {
                this.ua.onTransportClosed(this);
                if (!this.closed) {
                  this.reconnect();
                } else {
                  this.ua.emit('disconnected', {
                    transport: this,
                    code: this.lastTransportError.code,
                    reason: this.lastTransportError.reason
                  });

                }
              } else {

                this.ua.onTransportError(this);
              }
            }
          },

          /**
           * @event
           * @param {event} e
           */
          onMessage: function (e) {
            var message, transaction,
              data = e.data;

            if (data === '\r\n') {
              SIP.Timers.clearTimeout(this.keepAliveTimeout);
              this.keepAliveTimeout = null;

              if (this.ua.configuration.traceSip === true) {
                this.logger.log('received WebSocket message with CRLF Keep Alive response');
              }

              return;
            }

            else if (typeof data !== 'string') {
              try {
                data = String.fromCharCode.apply(null, new Uint8Array(data));
              } catch (evt) {
                this.logger.warn('received WebSocket binary message failed to be converted into string, message discarded');
                return;
              }

              if (this.ua.configuration.traceSip === true) {
                this.logger.log('received WebSocket binary message:\n\n' + data + '\n');
              }
            }

            else {
              if (this.ua.configuration.traceSip === true) {
                this.logger.log('received WebSocket text message:\n\n' + data + '\n');
              }
            }

            message = SIP.Parser.parseMessage(data, this.ua);

            if (!message) {
              return;
            }

            if (this.ua.status === SIP.UA.C.STATUS_USER_CLOSED && message instanceof SIP.IncomingRequest) {
              return;
            }

            if (SIP.sanityCheck(message, this.ua, this)) {
              if (message instanceof SIP.IncomingRequest) {
                message.transport = this;
                this.ua.receiveRequest(message);
              } else if (message instanceof SIP.IncomingResponse) {
                /* Unike stated in 18.1.2, if a response does not match
                              * any transaction, it is discarded here and no passed to the core
                              * in order to be discarded there.
                              */
                switch (message.method) {
                  case SIP.C.INVITE:
                    transaction = this.ua.transactions.ict[message.via_branch];
                    if (transaction) {
                      transaction.receiveResponse(message);
                    }
                    break;
                  case SIP.C.ACK:
                    break;
                  default:
                    transaction = this.ua.transactions.nict[message.via_branch];
                    if (transaction) {
                      transaction.receiveResponse(message);
                    }
                    break;
                }
              }
            }
          },

          /**
           * @event
           * @param {event} e
           */
          onError: function (e) {
            this.logger.warn('WebSocket connection error: ' + JSON.stringify(e));
          },

          /**
           * Reconnection attempt logic.
           * @private
           */
          reconnect: function () {
            var transport = this;

            this.reconnection_attempts += 1;

            if (this.reconnection_attempts > this.ua.configuration.wsServerMaxReconnection) {
              this.logger.warn('maximum reconnection attempts for WebSocket ' + this.server.ws_uri);
              this.ua.onTransportError(this);
            } else if (this.reconnection_attempts === 1) {
              this.logger.log('Connection to WebSocket ' + this.server.ws_uri + ' severed, attempting first reconnect');
              transport.connect();
            } else {
              this.logger.log('trying to reconnect to WebSocket ' + this.server.ws_uri + ' (reconnection attempt ' + this.reconnection_attempts + ')');

              this.reconnectTimer = SIP.Timers.setTimeout(function () {
                transport.connect();
                transport.reconnectTimer = null;
              }, this.ua.configuration.wsServerReconnectionTimeout * 1000);
            }
          }
        };

        Transport.C = C;
        return Transport;
      };

    }, {}], 29: [function (require, module, exports) {
      (function (global) {
        "use strict";
        /**
         * @augments SIP
         * @class Class creating a SIP User Agent.
         * @param {function returning SIP.MediaHandler} [configuration.mediaHandlerFactory]
         *        A function will be invoked by each of the UA's Sessions to build the MediaHandler for that Session.
         *        If no (or a falsy) value is provided, each Session will use a default (WebRTC) MediaHandler.
         *
         * @param {Object} [configuration.media] gets passed to SIP.MediaHandler.getDescription as mediaHint
         */
        module.exports = function (SIP, environment) {
          var UA,
            C = {
              STATUS_INIT: 0,
              STATUS_STARTING: 1,
              STATUS_READY: 2,
              STATUS_USER_CLOSED: 3,
              STATUS_NOT_READY: 4,

              CONFIGURATION_ERROR: 1,
              NETWORK_ERROR: 2,

              ALLOWED_METHODS: [
                'ACK',
                'CANCEL',
                'INVITE',
                'MESSAGE',
                'BYE',
                'OPTIONS',
                'INFO',
                'NOTIFY',
                'REFER'
              ],

              ACCEPTED_BODY_TYPES: [
                'application/sdp',
                'application/dtmf-relay'
              ],

              MAX_FORWARDS: 70,
              TAG_LENGTH: 10
            };

          UA = function (configuration) {
            var self = this;

            function selfEmit(type) {
              return self.emit.bind(self, type);
            }

            C.ACCEPTED_BODY_TYPES = C.ACCEPTED_BODY_TYPES.toString();

            this.log = new SIP.LoggerFactory();
            this.logger = this.getLogger('sip.ua');

            this.cache = {
              credentials: {}
            };

            this.configuration = {};
            this.dialogs = {};

            this.applicants = {};

            this.data = {};
            this.sessions = {};
            this.subscriptions = {};
            this.earlySubscriptions = {};
            this.transport = null;
            this.contact = null;
            this.status = C.STATUS_INIT;
            this.error = null;
            this.transactions = {
              nist: {},
              nict: {},
              ist: {},
              ict: {}
            };

            this.transportRecoverAttempts = 0;
            this.transportRecoveryTimer = null;

            Object.defineProperties(this, {
              transactionsCount: {
                get: function () {
                  var type,
                    transactions = ['nist', 'nict', 'ist', 'ict'],
                    count = 0;

                  for (type in transactions) {
                    count += Object.keys(this.transactions[transactions[type]]).length;
                  }

                  return count;
                }
              },

              nictTransactionsCount: {
                get: function () {
                  return Object.keys(this.transactions['nict']).length;
                }
              },

              nistTransactionsCount: {
                get: function () {
                  return Object.keys(this.transactions['nist']).length;
                }
              },

              ictTransactionsCount: {
                get: function () {
                  return Object.keys(this.transactions['ict']).length;
                }
              },

              istTransactionsCount: {
                get: function () {
                  return Object.keys(this.transactions['ist']).length;
                }
              }
            });

            /**
             * Load configuration
             *
             * @throws {SIP.Exceptions.ConfigurationError}
             * @throws {TypeError}
             */

            if (configuration === undefined) {
              configuration = {};
            } else if (typeof configuration === 'string' || configuration instanceof String) {
              configuration = {
                uri: configuration
              };
            }

            if (configuration.log) {
              if (configuration.log.hasOwnProperty('builtinEnabled')) {
                this.log.builtinEnabled = configuration.log.builtinEnabled;
              }

              if (configuration.log.hasOwnProperty('level')) {
                this.log.level = configuration.log.level;
              }

              if (configuration.log.hasOwnProperty('connector')) {
                this.log.connector = configuration.log.connector;
              }
            }

            try {
              this.loadConfig(configuration);
            } catch (e) {
              this.status = C.STATUS_NOT_READY;
              this.error = C.CONFIGURATION_ERROR;
              throw e;
            }

            this.registerContext = new SIP.RegisterContext(this);
            this.registerContext.on('failed', selfEmit('registrationFailed'));
            this.registerContext.on('registered', selfEmit('registered'));
            this.registerContext.on('unregistered', selfEmit('unregistered'));

            if (this.configuration.autostart) {
              this.start();
            }
          };
          UA.prototype = Object.create(SIP.EventEmitter.prototype);


          UA.prototype.register = function (options) {
            this.configuration.register = true;
            this.registerContext.register(options);

            return this;
          };

          /**
           * Unregister.
           *
           * @param {Boolean} [all] unregister all user bindings.
           *
           */
          UA.prototype.unregister = function (options) {
            this.configuration.register = false;

            var context = this.registerContext;
            this.afterConnected(context.unregister.bind(context, options));

            return this;
          };

          UA.prototype.isRegistered = function () {
            return this.registerContext.registered;
          };

          /**
           * Connection state.
           * @param {Boolean}
           */
          UA.prototype.isConnected = function () {
            return this.transport ? this.transport.connected : false;
          };

          UA.prototype.afterConnected = function afterConnected(callback) {
            if (this.isConnected()) {
              callback();
            } else {
              this.once('connected', callback);
            }
          };

          /**
           * Make an outgoing call.
           *
           * @param {String} target
           * @param {Object} views
           * @param {Object} [options.media] gets passed to SIP.MediaHandler.getDescription as mediaHint
           *
           * @throws {TypeError}
           *
           */
          UA.prototype.invite = function (target, options) {
            var context = new SIP.InviteClientContext(this, target, options);

            this.afterConnected(context.invite.bind(context));
            this.emit('inviteSent', context);
            return context;
          };

          UA.prototype.subscribe = function (target, event, options) {
            var sub = new SIP.Subscription(this, target, event, options);

            this.afterConnected(sub.subscribe.bind(sub));
            return sub;
          };

          /**
           * Send a message.
           *
           * @param {String} target
           * @param {String} body
           * @param {Object} [options]
           *
           * @throws {TypeError}
           *
           */
          UA.prototype.message = function (target, body, options) {
            if (body === undefined) {
              throw new TypeError('Not enough arguments');
            }

            options = Object.create(options || Object.prototype);
            options.contentType || (options.contentType = 'text/plain');
            options.body = body;

            return this.request(SIP.C.MESSAGE, target, options);
          };

          UA.prototype.request = function (method, target, options) {
            var req = new SIP.ClientContext(this, method, target, options);

            this.afterConnected(req.send.bind(req));
            return req;
          };

          /**
           * Gracefully close.
           *
           */
          UA.prototype.stop = function () {
            var session, subscription, applicant,
              ua = this;

            function transactionsListener() {
              if (ua.nistTransactionsCount === 0 && ua.nictTransactionsCount === 0) {
                ua.removeListener('transactionDestroyed', transactionsListener);
                ua.transport.disconnect();
              }
            }

            this.logger.log('user requested closure...');

            if (this.status === C.STATUS_USER_CLOSED) {
              this.logger.warn('UA already closed');
              return this;
            }

            SIP.Timers.clearTimeout(this.transportRecoveryTimer);

            this.logger.log('closing registerContext');
            this.registerContext.close();

            for (session in this.sessions) {
              this.logger.log('closing session ' + session);
              this.sessions[session].terminate();
            }

            for (subscription in this.subscriptions) {
              this.logger.log('unsubscribing from subscription ' + subscription);
              this.subscriptions[subscription].close();
            }

            for (subscription in this.earlySubscriptions) {
              this.logger.log('unsubscribing from early subscription ' + subscription);
              this.earlySubscriptions[subscription].close();
            }

            for (applicant in this.applicants) {
              this.applicants[applicant].close();
            }

            this.status = C.STATUS_USER_CLOSED;

            /*
                       * If the remaining transactions are all INVITE transactions, there is no need to
                       * wait anymore because every session has already been closed by this method.
                       * - locally originated sessions where terminated (CANCEL or BYE)
                       * - remotely originated sessions where rejected (4XX) or terminated (BYE)
                       * Remaining INVITE transactions belong tho sessions that where answered. This are in
                       * 'accepted' state due to timers 'L' and 'M' defined in [RFC 6026]
                       */
            if (this.nistTransactionsCount === 0 && this.nictTransactionsCount === 0) {
              this.transport.disconnect();
            } else {
              this.on('transactionDestroyed', transactionsListener);
            }

            if (typeof environment.removeEventListener === 'function') {

              if (!(global.chrome && global.chrome.app && global.chrome.app.runtime)) {
                environment.removeEventListener('unload', this.environListener);
              }
            }

            return this;
          };

          /**
           * Connect to the WS server if status = STATUS_INIT.
           * Resume UA after being closed.
           *
           */
          UA.prototype.start = function () {
            var server;

            this.logger.log('user requested startup...');
            if (this.status === C.STATUS_INIT) {
              server = this.getNextWsServer();
              this.status = C.STATUS_STARTING;
              new SIP.Transport(this, server);
            } else if (this.status === C.STATUS_USER_CLOSED) {
              this.logger.log('resuming');
              this.status = C.STATUS_READY;
              this.transport.connect();
            } else if (this.status === C.STATUS_STARTING) {
              this.logger.log('UA is in STARTING status, not opening new connection');
            } else if (this.status === C.STATUS_READY) {
              this.logger.log('UA is in READY status, not resuming');
            } else {
              this.logger.error('Connection is down. Auto-Recovery system is trying to connect');
            }

            if (this.configuration.autostop && typeof environment.addEventListener === 'function') {

              if (!(global.chrome && global.chrome.app && global.chrome.app.runtime)) {
                this.environListener = this.stop.bind(this);
                environment.addEventListener('unload', this.environListener);
              }
            }

            return this;
          };

          /**
           * Normalize a string into a valid SIP request URI
           *
           * @param {String} target
           *
           * @returns {SIP.URI|undefined}
           */
          UA.prototype.normalizeTarget = function (target) {
            return SIP.Utils.normalizeTarget(target, this.configuration.hostportParams);
          };




          UA.prototype.saveCredentials = function (credentials) {
            this.cache.credentials[credentials.realm] = this.cache.credentials[credentials.realm] || {};
            this.cache.credentials[credentials.realm][credentials.uri] = credentials;

            return this;
          };

          UA.prototype.getCredentials = function (request) {
            var realm, credentials;

            realm = request.ruri.host;

            if (this.cache.credentials[realm] && this.cache.credentials[realm][request.ruri]) {
              credentials = this.cache.credentials[realm][request.ruri];
              credentials.method = request.method;
            }

            return credentials;
          };

          UA.prototype.getLogger = function (category, label) {
            return this.log.getLogger(category, label);
          };

          /**
           * Transport Close event
           * @private
           * @event
           * @param {SIP.Transport} transport.
           */
          UA.prototype.onTransportClosed = function (transport) {
            var type, idx, length,
              client_transactions = ['nict', 'ict', 'nist', 'ist'];

            transport.server.status = SIP.Transport.C.STATUS_DISCONNECTED;
            this.logger.log('connection state set to ' + SIP.Transport.C.STATUS_DISCONNECTED);

            length = client_transactions.length;
            for (type = 0; type < length; type++) {
              for (idx in this.transactions[client_transactions[type]]) {
                this.transactions[client_transactions[type]][idx].onTransportError();
              }
            }

            if (!this.contact.pub_gruu) {
              this.closeSessionsOnTransportError();
            }

          };

          /**
           * Unrecoverable transport event.
           * Connection reattempt logic has been done and didn't success.
           * @private
           * @event
           * @param {SIP.Transport} transport.
           */
          UA.prototype.onTransportError = function (transport) {
            var server;

            this.logger.log('transport ' + transport.server.ws_uri + ' failed | connection state set to ' + SIP.Transport.C.STATUS_ERROR);


            transport.server.status = SIP.Transport.C.STATUS_ERROR;

            this.emit('disconnected', {
              transport: transport
            });

            if (this.status === C.STATUS_USER_CLOSED) {
              return;
            }

            server = this.getNextWsServer();

            if (server) {
              new SIP.Transport(this, server);
            } else {
              this.closeSessionsOnTransportError();
              if (!this.error || this.error !== C.NETWORK_ERROR) {
                this.status = C.STATUS_NOT_READY;
                this.error = C.NETWORK_ERROR;
              }

              this.recoverTransport();
            }
          };

          /**
           * Transport connection event.
           * @private
           * @event
           * @param {SIP.Transport} transport.
           */
          UA.prototype.onTransportConnected = function (transport) {
            this.transport = transport;


            this.transportRecoverAttempts = 0;

            transport.server.status = SIP.Transport.C.STATUS_READY;
            this.logger.log('connection state set to ' + SIP.Transport.C.STATUS_READY);

            if (this.status === C.STATUS_USER_CLOSED) {
              return;
            }

            this.status = C.STATUS_READY;
            this.error = null;

            if (this.configuration.register) {
              this.configuration.authenticationFactory.initialize().then(function () {
                this.registerContext.onTransportConnected();
              }.bind(this));
            }

            this.emit('connected', {
              transport: transport
            });
          };


          /**
           * Transport connecting event
           * @private
           * @param {SIP.Transport} transport.
           * #param {Integer} attempts.
           */
          UA.prototype.onTransportConnecting = function (transport, attempts) {
            this.emit('connecting', {
              transport: transport,
              attempts: attempts
            });
          };


          /**
           * new Transaction
           * @private
           * @param {SIP.Transaction} transaction.
           */
          UA.prototype.newTransaction = function (transaction) {
            this.transactions[transaction.type][transaction.id] = transaction;
            this.emit('newTransaction', { transaction: transaction });
          };


          /**
           * destroy Transaction
           * @private
           * @param {SIP.Transaction} transaction.
           */
          UA.prototype.destroyTransaction = function (transaction) {
            delete this.transactions[transaction.type][transaction.id];
            this.emit('transactionDestroyed', {
              transaction: transaction
            });
          };




          /**
           * Request reception
           * @private
           * @param {SIP.IncomingRequest} request.
           */
          UA.prototype.receiveRequest = function (request) {
            var dialog, session, message, earlySubscription,
              method = request.method,
              transaction,
              replaces,
              replacedDialog,
              self = this;

            function ruriMatches(uri) {
              return uri && uri.user === request.ruri.user;
            }


            if (!(ruriMatches(this.configuration.uri) ||
              ruriMatches(this.contact.uri) ||
              ruriMatches(this.contact.pub_gruu) ||
              ruriMatches(this.contact.temp_gruu))) {
              this.logger.warn('Request-URI does not point to us');
              if (request.method !== SIP.C.ACK) {
                request.reply_sl(404);
              }
              return;
            }


            if (request.ruri.scheme === SIP.C.SIPS) {
              request.reply_sl(416);
              return;
            }


            if (SIP.Transactions.checkTransaction(this, request)) {
              return;
            }

            /* RFC3261 12.2.2
                       * Requests that do not change in any way the state of a dialog may be
                       * received within a dialog (for example, an OPTIONS request).
                       * They are processed as if they had been received outside the dialog.
                       */
            if (method === SIP.C.OPTIONS) {
              new SIP.Transactions.NonInviteServerTransaction(request, this);
              request.reply(200, null, [
                'Allow: ' + SIP.UA.C.ALLOWED_METHODS.toString(),
                'Accept: ' + C.ACCEPTED_BODY_TYPES
              ]);
            } else if (method === SIP.C.MESSAGE) {
              message = new SIP.ServerContext(this, request);
              message.body = request.body;
              message.content_type = request.getHeader('Content-Type') || 'text/plain';

              request.reply(200, null);
              this.emit('message', message);
            } else if (method !== SIP.C.INVITE &&
              method !== SIP.C.ACK) {
              transaction = new SIP.ServerContext(this, request);
            }

            if (!request.to_tag) {
              switch (method) {
                case SIP.C.INVITE:
                  replaces =
                    this.configuration.replaces !== SIP.C.supported.UNSUPPORTED &&
                    request.parseHeader('replaces');

                  if (replaces) {
                    replacedDialog = this.dialogs[replaces.call_id + replaces.replaces_to_tag + replaces.replaces_from_tag];

                    if (!replacedDialog) {
                      request.reply_sl(481, null);
                      return;
                    } else if (replacedDialog.owner.status === SIP.Session.C.STATUS_TERMINATED) {
                      request.reply_sl(603, null);
                      return;
                    } else if (replacedDialog.state === SIP.Dialog.C.STATUS_CONFIRMED && replaces.early_only) {
                      request.reply_sl(486, null);
                      return;
                    }
                  }

                  var isMediaSupported = this.configuration.mediaHandlerFactory.isSupported;
                  if (!isMediaSupported || isMediaSupported()) {
                    session = new SIP.InviteServerContext(this, request);
                    session.replacee = replacedDialog && replacedDialog.owner;
                    session.on('invite', function () {
                      self.emit('invite', this);
                    });
                  } else {
                    this.logger.warn('INVITE received but WebRTC is not supported');
                    request.reply(488);
                  }
                  break;
                case SIP.C.BYE:
                  request.reply(481);
                  break;
                case SIP.C.CANCEL:
                  session = this.findSession(request);
                  if (session) {
                    session.receiveRequest(request);
                  } else {
                    this.logger.warn('received CANCEL request for a non existent session');
                  }
                  break;
                case SIP.C.ACK:
                  /* Absorb it.
                                   * ACK request without a corresponding Invite Transaction
                                   * and without To tag.
                                   */
                  break;
                case SIP.C.NOTIFY:
                  if (this.configuration.allowLegacyNotifications && this.listeners('notify').length > 0) {
                    request.reply(200, null);
                    self.emit('notify', { request: request });
                  } else {
                    request.reply(481, 'Subscription does not exist');
                  }
                  break;
                default:
                  request.reply(405);
                  break;
              }
            }
            else {
              dialog = this.findDialog(request);

              if (dialog) {
                if (method === SIP.C.INVITE) {
                  new SIP.Transactions.InviteServerTransaction(request, this);
                }
                dialog.receiveRequest(request);
              } else if (method === SIP.C.NOTIFY) {
                session = this.findSession(request);
                earlySubscription = this.findEarlySubscription(request);
                if (session) {
                  session.receiveRequest(request);
                } else if (earlySubscription) {
                  earlySubscription.receiveRequest(request);
                } else {
                  this.logger.warn('received NOTIFY request for a non existent session or subscription');
                  request.reply(481, 'Subscription does not exist');
                }
              }
              /* RFC3261 12.2.2
                           * Request with to tag, but no matching dialog found.
                           * Exception: ACK for an Invite request for which a dialog has not
                           * been created.
                           */
              else {
                if (method !== SIP.C.ACK) {
                  request.reply(481);
                }
              }
            }
          };


          /**
           * Get the session to which the request belongs to, if any.
           * @private
           * @param {SIP.IncomingRequest} request.
           * @returns {SIP.OutgoingSession|SIP.IncomingSession|null}
           */
          UA.prototype.findSession = function (request) {
            return this.sessions[request.call_id + request.from_tag] ||
              this.sessions[request.call_id + request.to_tag] ||
              null;
          };

          /**
           * Get the dialog to which the request belongs to, if any.
           * @private
           * @param {SIP.IncomingRequest}
           * @returns {SIP.Dialog|null}
           */
          UA.prototype.findDialog = function (request) {
            return this.dialogs[request.call_id + request.from_tag + request.to_tag] ||
              this.dialogs[request.call_id + request.to_tag + request.from_tag] ||
              null;
          };

          /**
           * Get the subscription which has not been confirmed to which the request belongs to, if any
           * @private
           * @param {SIP.IncomingRequest}
           * @returns {SIP.Subscription|null}
           */
          UA.prototype.findEarlySubscription = function (request) {
            return this.earlySubscriptions[request.call_id + request.to_tag + request.getHeader('event')] || null;
          };

          /**
           * Retrieve the next server to which connect.
           * @private
           * @returns {Object} ws_server
           */
          UA.prototype.getNextWsServer = function () {
            var idx, length, ws_server,
              candidates = [];

            length = this.configuration.wsServers.length;
            for (idx = 0; idx < length; idx++) {
              ws_server = this.configuration.wsServers[idx];

              if (ws_server.status === SIP.Transport.C.STATUS_ERROR) {
                continue;
              } else if (candidates.length === 0) {
                candidates.push(ws_server);
              } else if (ws_server.weight > candidates[0].weight) {
                candidates = [ws_server];
              } else if (ws_server.weight === candidates[0].weight) {
                candidates.push(ws_server);
              }
            }

            idx = Math.floor(Math.random() * candidates.length);

            return candidates[idx];
          };

          /**
           * Close all sessions on transport error.
           * @private
           */
          UA.prototype.closeSessionsOnTransportError = function () {
            var idx;

            for (idx in this.sessions) {
              this.sessions[idx].onTransportError();
            }
            this.registerContext.onTransportClosed();
          };

          UA.prototype.recoverTransport = function (ua) {
            var idx, length, k, nextRetry, count, server;

            ua = ua || this;
            count = ua.transportRecoverAttempts;

            length = ua.configuration.wsServers.length;
            for (idx = 0; idx < length; idx++) {
              ua.configuration.wsServers[idx].status = 0;
            }

            server = ua.getNextWsServer();

            k = Math.floor((Math.random() * Math.pow(2, count)) + 1);
            nextRetry = k * ua.configuration.connectionRecoveryMinInterval;

            if (nextRetry > ua.configuration.connectionRecoveryMaxInterval) {
              this.logger.log('time for next connection attempt exceeds connectionRecoveryMaxInterval, resetting counter');
              nextRetry = ua.configuration.connectionRecoveryMinInterval;
              count = 0;
            }

            this.logger.log('next connection attempt in ' + nextRetry + ' seconds');

            this.transportRecoveryTimer = SIP.Timers.setTimeout(
              function () {
                ua.transportRecoverAttempts = count + 1;
                new SIP.Transport(ua, server);
              }, nextRetry * 1000);
          };

          function checkAuthenticationFactory(authenticationFactory) {
            if (!(authenticationFactory instanceof Function)) {
              return;
            }
            if (!authenticationFactory.initialize) {
              authenticationFactory.initialize = function initialize() {
                return SIP.Utils.Promise.resolve();
              };
            }
            return authenticationFactory;
          }

          /**
           * Configuration load.
           * @private
           * returns {Boolean}
           */
          UA.prototype.loadConfig = function (configuration) {
            var parameter, value, checked_value, hostportParams, registrarServer,
              settings = {
                /* Host address
                              * Value to be set in Via sent_by and host part of Contact FQDN
                              */
                viaHost: SIP.Utils.createRandomToken(12) + '.invalid',

                uri: new SIP.URI('sip', 'anonymous.' + SIP.Utils.createRandomToken(6), 'anonymous.invalid', null, null),
                wsServers: [{
                  scheme: 'WSS',
                  sip_uri: '<sip:edge.sip.onsip.com;transport=ws;lr>',
                  status: 0,
                  weight: 0,
                  ws_uri: 'wss://edge.sip.onsip.com'
                }],

                custom: {},

                displayName: '',

                password: null,

                registerExpires: 600,
                register: true,
                registrarServer: null,

                wsServerMaxReconnection: 3,
                wsServerReconnectionTimeout: 4,

                connectionRecoveryMinInterval: 2,
                connectionRecoveryMaxInterval: 30,

                keepAliveInterval: 0,

                extraSupported: [],

                usePreloadedRoute: false,

                userAgentString: SIP.C.USER_AGENT,

                iceCheckingTimeout: 5000,
                noAnswerTimeout: 60,
                stunServers: ['stun:stun.l.google.com:19302'],
                turnServers: [],

                traceSip: false,

                hackViaTcp: false,
                hackIpInContact: false,
                hackWssInTransport: false,
                hackAllowUnregisteredOptionTags: false,
                hackCleanJitsiSdpImageattr: false,
                hackStripTcp: false,

                contactTransport: 'ws',
                forceRport: false,

                autostart: true,
                autostop: true,

                rel100: SIP.C.supported.UNSUPPORTED,


                replaces: SIP.C.supported.UNSUPPORTED,

                mediaHandlerFactory: SIP.WebRTC.MediaHandler.defaultFactory,

                authenticationFactory: checkAuthenticationFactory(function authenticationFactory(ua) {
                  return new SIP.DigestAuthentication(ua);
                }),

                allowLegacyNotifications: false
              };

            function aliasUnderscored(parameter, logger) {
              var underscored = parameter.replace(/([a-z][A-Z])/g, function (m) {
                return m[0] + '_' + m[1].toLowerCase();
              });

              if (parameter === underscored) {
                return;
              }

              var hasParameter = configuration.hasOwnProperty(parameter);
              if (configuration.hasOwnProperty(underscored)) {
                logger.warn(underscored + ' is deprecated, please use ' + parameter);
                if (hasParameter) {
                  logger.warn(parameter + ' overriding ' + underscored);
                }
              }

              configuration[parameter] = hasParameter ? configuration[parameter] : configuration[underscored];
            }

            var configCheck = this.getConfigurationCheck();

            for (parameter in configCheck.mandatory) {
              aliasUnderscored(parameter, this.logger);
              if (!configuration.hasOwnProperty(parameter)) {
                throw new SIP.Exceptions.ConfigurationError(parameter);
              } else {
                value = configuration[parameter];
                checked_value = configCheck.mandatory[parameter](value);
                if (checked_value !== undefined) {
                  settings[parameter] = checked_value;
                } else {
                  throw new SIP.Exceptions.ConfigurationError(parameter, value);
                }
              }
            }

            SIP.Utils.optionsOverride(configuration, 'rel100', 'reliable', true, this.logger, SIP.C.supported.UNSUPPORTED);

            var emptyArraysAllowed = ['stunServers', 'turnServers'];

            for (parameter in configCheck.optional) {
              aliasUnderscored(parameter, this.logger);
              if (configuration.hasOwnProperty(parameter)) {
                value = configuration[parameter];

                if (value instanceof Array && value.length === 0 && emptyArraysAllowed.indexOf(parameter) < 0) { continue; }

                if (value === null || value === "" || value === undefined) { continue; }
                else if (typeof (value) === 'number' && isNaN(value)) { continue; }

                checked_value = configCheck.optional[parameter](value);
                if (checked_value !== undefined) {
                  settings[parameter] = checked_value;
                } else {
                  throw new SIP.Exceptions.ConfigurationError(parameter, value);
                }
              }
            }


            if (settings.connectionRecoveryMaxInterval < settings.connectionRecoveryMinInterval) {
              throw new SIP.Exceptions.ConfigurationError('connectionRecoveryMaxInterval', settings.connectionRecoveryMaxInterval);
            }


            if (settings.displayName === 0) {
              settings.displayName = '0';
            }


            if (!settings.instanceId) {
              settings.instanceId = SIP.Utils.newUUID();
            }


            settings.sipjsId = SIP.Utils.createRandomToken(5);


            hostportParams = settings.uri.clone();
            hostportParams.user = null;
            settings.hostportParams = hostportParams.toRaw().replace(/^sip:/i, '');

            /* Check whether authorizationUser is explicitly defined.
                       * Take 'settings.uri.user' value if not.
                       */
            if (!settings.authorizationUser) {
              settings.authorizationUser = settings.uri.user;
            }

            /* If no 'registrarServer' is set use the 'uri' value without user portion. */
            if (!settings.registrarServer) {
              registrarServer = settings.uri.clone();
              registrarServer.user = null;
              settings.registrarServer = registrarServer;
            }

            settings.noAnswerTimeout = settings.noAnswerTimeout * 1000;

            if (settings.hackIpInContact) {
              if (typeof settings.hackIpInContact === 'boolean') {
                settings.viaHost = SIP.Utils.getRandomTestNetIP();
              }
              else if (typeof settings.hackIpInContact === 'string') {
                settings.viaHost = settings.hackIpInContact;
              }
            }

            if (settings.hackWssInTransport) {
              settings.contactTransport = 'wss';
            }

            this.contact = {
              pub_gruu: null,
              temp_gruu: null,
              uri: new SIP.URI('sip', SIP.Utils.createRandomToken(8), settings.viaHost, null, { transport: settings.contactTransport }),
              toString: function (options) {
                options = options || {};

                var
                  anonymous = options.anonymous || null,
                  outbound = options.outbound || null,
                  contact = '<';

                if (anonymous) {
                  contact += (this.temp_gruu || ('sip:anonymous@anonymous.invalid;transport=' + settings.contactTransport)).toString();
                } else {
                  contact += (this.pub_gruu || this.uri).toString();
                }

                if (outbound) {
                  contact += ';ob';
                }

                contact += '>';

                return contact;
              }
            };

            SIP.Utils.optionsOverride(settings, 'media', 'mediaConstraints', true, this.logger);

            var skeleton = {};
            for (parameter in settings) {
              skeleton[parameter] = {
                value: settings[parameter],
                writable: (parameter === 'register' || parameter === 'custom'),
                configurable: false
              };
            }

            Object.defineProperties(this.configuration, skeleton);

            this.logger.log('configuration parameters after validation:');
            for (parameter in settings) {
              switch (parameter) {
                case 'uri':
                case 'registrarServer':
                case 'mediaHandlerFactory':
                  this.logger.log('· ' + parameter + ': ' + settings[parameter]);
                  break;
                case 'password':
                  this.logger.log('· ' + parameter + ': ' + 'NOT SHOWN');
                  break;
                default:
                  this.logger.log('· ' + parameter + ': ' + JSON.stringify(settings[parameter]));
              }
            }

            return;
          };

          /**
           * Configuration checker.
           * @private
           * @return {Boolean}
           */
          UA.prototype.getConfigurationCheck = function () {
            return {
              mandatory: {
              },

              optional: {

                uri: function (uri) {
                  var parsed;

                  if (!(/^sip:/i).test(uri)) {
                    uri = SIP.C.SIP + ':' + uri;
                  }
                  parsed = SIP.URI.parse(uri);

                  if (!parsed) {
                    return;
                  } else if (!parsed.user) {
                    return;
                  } else {
                    return parsed;
                  }
                },

                wsServers: function (wsServers) {
                  var idx, length, url;

                  /* Allow defining wsServers parameter as:
                                   *  String: "host"
                                   *  Array of Strings: ["host1", "host2"]
                                   *  Array of Objects: [{ws_uri:"host1", weight:1}, {ws_uri:"host2", weight:0}]
                                   *  Array of Objects and Strings: [{ws_uri:"host1"}, "host2"]
                                   */
                  if (typeof wsServers === 'string') {
                    wsServers = [{ ws_uri: wsServers }];
                  } else if (wsServers instanceof Array) {
                    length = wsServers.length;
                    for (idx = 0; idx < length; idx++) {
                      if (typeof wsServers[idx] === 'string') {
                        wsServers[idx] = { ws_uri: wsServers[idx] };
                      }
                    }
                  } else {
                    return;
                  }

                  if (wsServers.length === 0) {
                    return false;
                  }

                  length = wsServers.length;
                  for (idx = 0; idx < length; idx++) {
                    if (!wsServers[idx].ws_uri) {
                      return;
                    }
                    if (wsServers[idx].weight && !Number(wsServers[idx].weight)) {
                      return;
                    }

                    url = SIP.Grammar.parse(wsServers[idx].ws_uri, 'absoluteURI');

                    if (url === -1) {
                      return;
                    } else if (['wss', 'ws', 'udp'].indexOf(url.scheme) < 0) {
                      return;
                    } else {
                      wsServers[idx].sip_uri = '<sip:' + url.host + (url.port ? ':' + url.port : '') + ';transport=' + url.scheme.replace(/^wss$/i, 'ws') + ';lr>';

                      if (!wsServers[idx].weight) {
                        wsServers[idx].weight = 0;
                      }

                      wsServers[idx].status = 0;
                      wsServers[idx].scheme = url.scheme.toUpperCase();
                    }
                  }
                  return wsServers;
                },

                authorizationUser: function (authorizationUser) {
                  if (SIP.Grammar.parse('"' + authorizationUser + '"', 'quoted_string') === -1) {
                    return;
                  } else {
                    return authorizationUser;
                  }
                },

                connectionRecoveryMaxInterval: function (connectionRecoveryMaxInterval) {
                  var value;
                  if (SIP.Utils.isDecimal(connectionRecoveryMaxInterval)) {
                    value = Number(connectionRecoveryMaxInterval);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                connectionRecoveryMinInterval: function (connectionRecoveryMinInterval) {
                  var value;
                  if (SIP.Utils.isDecimal(connectionRecoveryMinInterval)) {
                    value = Number(connectionRecoveryMinInterval);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                displayName: function (displayName) {
                  if (SIP.Grammar.parse('"' + displayName + '"', 'displayName') === -1) {
                    return;
                  } else {
                    return displayName;
                  }
                },

                hackViaTcp: function (hackViaTcp) {
                  if (typeof hackViaTcp === 'boolean') {
                    return hackViaTcp;
                  }
                },

                hackIpInContact: function (hackIpInContact) {
                  if (typeof hackIpInContact === 'boolean') {
                    return hackIpInContact;
                  }
                  else if (typeof hackIpInContact === 'string' && SIP.Grammar.parse(hackIpInContact, 'host') !== -1) {
                    return hackIpInContact;
                  }
                },

                iceCheckingTimeout: function (iceCheckingTimeout) {
                  if (SIP.Utils.isDecimal(iceCheckingTimeout)) {
                    return Math.max(500, iceCheckingTimeout);
                  }
                },

                hackWssInTransport: function (hackWssInTransport) {
                  if (typeof hackWssInTransport === 'boolean') {
                    return hackWssInTransport;
                  }
                },

                hackAllowUnregisteredOptionTags: function (hackAllowUnregisteredOptionTags) {
                  if (typeof hackAllowUnregisteredOptionTags === 'boolean') {
                    return hackAllowUnregisteredOptionTags;
                  }
                },

                hackCleanJitsiSdpImageattr: function (hackCleanJitsiSdpImageattr) {
                  if (typeof hackCleanJitsiSdpImageattr === 'boolean') {
                    return hackCleanJitsiSdpImageattr;
                  }
                },

                hackStripTcp: function (hackStripTcp) {
                  if (typeof hackStripTcp === 'boolean') {
                    return hackStripTcp;
                  }
                },

                contactTransport: function (contactTransport) {
                  if (typeof contactTransport === 'string') {
                    return contactTransport;
                  }
                },

                forceRport: function (forceRport) {
                  if (typeof forceRport === 'boolean') {
                    return forceRport;
                  }
                },

                instanceId: function (instanceId) {
                  if (typeof instanceId !== 'string') {
                    return;
                  }

                  if ((/^uuid:/i.test(instanceId))) {
                    instanceId = instanceId.substr(5);
                  }

                  if (SIP.Grammar.parse(instanceId, 'uuid') === -1) {
                    return;
                  } else {
                    return instanceId;
                  }
                },

                keepAliveInterval: function (keepAliveInterval) {
                  var value;
                  if (SIP.Utils.isDecimal(keepAliveInterval)) {
                    value = Number(keepAliveInterval);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                extraSupported: function (optionTags) {
                  var idx, length;

                  if (!(optionTags instanceof Array)) {
                    return;
                  }

                  length = optionTags.length;
                  for (idx = 0; idx < length; idx++) {
                    if (typeof optionTags[idx] !== 'string') {
                      return;
                    }
                  }

                  return optionTags;
                },

                noAnswerTimeout: function (noAnswerTimeout) {
                  var value;
                  if (SIP.Utils.isDecimal(noAnswerTimeout)) {
                    value = Number(noAnswerTimeout);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                password: function (password) {
                  return String(password);
                },

                rel100: function (rel100) {
                  if (rel100 === SIP.C.supported.REQUIRED) {
                    return SIP.C.supported.REQUIRED;
                  } else if (rel100 === SIP.C.supported.SUPPORTED) {
                    return SIP.C.supported.SUPPORTED;
                  } else {
                    return SIP.C.supported.UNSUPPORTED;
                  }
                },

                replaces: function (replaces) {
                  if (replaces === SIP.C.supported.REQUIRED) {
                    return SIP.C.supported.REQUIRED;
                  } else if (replaces === SIP.C.supported.SUPPORTED) {
                    return SIP.C.supported.SUPPORTED;
                  } else {
                    return SIP.C.supported.UNSUPPORTED;
                  }
                },

                register: function (register) {
                  if (typeof register === 'boolean') {
                    return register;
                  }
                },

                registerExpires: function (registerExpires) {
                  var value;
                  if (SIP.Utils.isDecimal(registerExpires)) {
                    value = Number(registerExpires);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                registrarServer: function (registrarServer) {
                  var parsed;

                  if (typeof registrarServer !== 'string') {
                    return;
                  }

                  if (!/^sip:/i.test(registrarServer)) {
                    registrarServer = SIP.C.SIP + ':' + registrarServer;
                  }
                  parsed = SIP.URI.parse(registrarServer);

                  if (!parsed) {
                    return;
                  } else if (parsed.user) {
                    return;
                  } else {
                    return parsed;
                  }
                },

                stunServers: function (stunServers) {
                  var idx, length, stun_server;

                  if (typeof stunServers === 'string') {
                    stunServers = [stunServers];
                  } else if (!(stunServers instanceof Array)) {
                    return;
                  }

                  length = stunServers.length;
                  for (idx = 0; idx < length; idx++) {
                    stun_server = stunServers[idx];
                    if (!(/^stuns?:/.test(stun_server))) {
                      stun_server = 'stun:' + stun_server;
                    }

                    if (SIP.Grammar.parse(stun_server, 'stun_URI') === -1) {
                      return;
                    } else {
                      stunServers[idx] = stun_server;
                    }
                  }
                  return stunServers;
                },

                traceSip: function (traceSip) {
                  if (typeof traceSip === 'boolean') {
                    return traceSip;
                  }
                },

                turnServers: function (turnServers) {
                  var idx, jdx, length, turn_server, num_turn_server_urls, url;

                  if (turnServers instanceof Array) {
                  } else {
                    turnServers = [turnServers];
                  }

                  length = turnServers.length;
                  for (idx = 0; idx < length; idx++) {
                    turn_server = turnServers[idx];
                    if (turn_server.server) {
                      turn_server.urls = [turn_server.server];
                    }

                    if (!turn_server.urls) {
                      return;
                    }

                    if (turn_server.urls instanceof Array) {
                      num_turn_server_urls = turn_server.urls.length;
                    } else {
                      turn_server.urls = [turn_server.urls];
                      num_turn_server_urls = 1;
                    }

                    for (jdx = 0; jdx < num_turn_server_urls; jdx++) {
                      url = turn_server.urls[jdx];

                      if (!(/^turns?:/.test(url))) {
                        url = 'turn:' + url;
                      }

                      if (SIP.Grammar.parse(url, 'turn_URI') === -1) {
                        return;
                      }
                    }
                  }
                  return turnServers;
                },

                rtcpMuxPolicy: function (rtcpMuxPolicy) {
                  if (typeof rtcpMuxPolicy === 'string') {
                    return rtcpMuxPolicy;
                  }
                },

                userAgentString: function (userAgentString) {
                  if (typeof userAgentString === 'string') {
                    return userAgentString;
                  }
                },

                usePreloadedRoute: function (usePreloadedRoute) {
                  if (typeof usePreloadedRoute === 'boolean') {
                    return usePreloadedRoute;
                  }
                },

                wsServerMaxReconnection: function (wsServerMaxReconnection) {
                  var value;
                  if (SIP.Utils.isDecimal(wsServerMaxReconnection)) {
                    value = Number(wsServerMaxReconnection);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                wsServerReconnectionTimeout: function (wsServerReconnectionTimeout) {
                  var value;
                  if (SIP.Utils.isDecimal(wsServerReconnectionTimeout)) {
                    value = Number(wsServerReconnectionTimeout);
                    if (value > 0) {
                      return value;
                    }
                  }
                },

                autostart: function (autostart) {
                  if (typeof autostart === 'boolean') {
                    return autostart;
                  }
                },

                autostop: function (autostop) {
                  if (typeof autostop === 'boolean') {
                    return autostop;
                  }
                },

                mediaHandlerFactory: function (mediaHandlerFactory) {
                  if (mediaHandlerFactory instanceof Function) {
                    var promisifiedFactory = function promisifiedFactory() {
                      var mediaHandler = mediaHandlerFactory.apply(this, arguments);

                      function patchMethod(methodName) {
                        var method = mediaHandler[methodName];
                        if (method.length > 1) {
                          var callbacksFirst = methodName === 'getDescription';
                          mediaHandler[methodName] = SIP.Utils.promisify(mediaHandler, methodName, callbacksFirst);
                        }
                      }

                      patchMethod('getDescription');
                      patchMethod('setDescription');

                      return mediaHandler;
                    };

                    promisifiedFactory.isSupported = mediaHandlerFactory.isSupported;
                    return promisifiedFactory;
                  }
                },

                authenticationFactory: checkAuthenticationFactory,

                allowLegacyNotifications: function (allowLegacyNotifications) {
                  if (typeof allowLegacyNotifications === 'boolean') {
                    return allowLegacyNotifications;
                  }
                },

                custom: function (custom) {
                  if (typeof custom === 'object') {
                    return custom;
                  }
                }
              }
            };
          };

          UA.C = C;
          SIP.UA = UA;
        };

      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, {}], 30: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview SIP URI
       */

      /**
       * @augments SIP
       * @class Class creating a SIP URI.
       *
       * @param {String} [scheme]
       * @param {String} [user]
       * @param {String} host
       * @param {String} [port]
       * @param {Object} [parameters]
       * @param {Object} [headers]
       *
       */
      module.exports = function (SIP) {
        var URI;

        URI = function (scheme, user, host, port, parameters, headers) {
          var param, header, raw, normal;

          if (!host) {
            throw new TypeError('missing or invalid "host" parameter');
          }

          scheme = scheme || SIP.C.SIP;
          this.parameters = {};
          this.headers = {};

          for (param in parameters) {
            this.setParam(param, parameters[param]);
          }

          for (header in headers) {
            this.setHeader(header, headers[header]);
          }

          raw = {
            scheme: scheme,
            user: user,
            host: host,
            port: port
          };

          normal = {
            scheme: scheme.toLowerCase(),
            user: user,
            host: host.toLowerCase(),
            port: port
          };

          Object.defineProperties(this, {
            _normal: {
              get: function () { return normal; }
            },

            _raw: {
              get: function () { return raw; }
            },

            scheme: {
              get: function () { return normal.scheme; },
              set: function (value) {
                raw.scheme = value;
                normal.scheme = value.toLowerCase();
              }
            },

            user: {
              get: function () { return normal.user; },
              set: function (value) {
                normal.user = raw.user = value;
              }
            },

            host: {
              get: function () { return normal.host; },
              set: function (value) {
                raw.host = value;
                normal.host = value.toLowerCase();
              }
            },

            aor: {
              get: function () { return normal.user + '@' + normal.host; }
            },

            port: {
              get: function () { return normal.port; },
              set: function (value) {
                normal.port = raw.port = value === 0 ? value : (parseInt(value, 10) || null);
              }
            }
          });
        };

        URI.prototype = {
          setParam: function (key, value) {
            if (key) {
              this.parameters[key.toLowerCase()] = (typeof value === 'undefined' || value === null) ? null : value.toString().toLowerCase();
            }
          },

          getParam: function (key) {
            if (key) {
              return this.parameters[key.toLowerCase()];
            }
          },

          hasParam: function (key) {
            if (key) {
              return (this.parameters.hasOwnProperty(key.toLowerCase()) && true) || false;
            }
          },

          deleteParam: function (parameter) {
            var value;
            parameter = parameter.toLowerCase();
            if (this.parameters.hasOwnProperty(parameter)) {
              value = this.parameters[parameter];
              delete this.parameters[parameter];
              return value;
            }
          },

          clearParams: function () {
            this.parameters = {};
          },

          setHeader: function (name, value) {
            this.headers[SIP.Utils.headerize(name)] = (value instanceof Array) ? value : [value];
          },

          getHeader: function (name) {
            if (name) {
              return this.headers[SIP.Utils.headerize(name)];
            }
          },

          hasHeader: function (name) {
            if (name) {
              return (this.headers.hasOwnProperty(SIP.Utils.headerize(name)) && true) || false;
            }
          },

          deleteHeader: function (header) {
            var value;
            header = SIP.Utils.headerize(header);
            if (this.headers.hasOwnProperty(header)) {
              value = this.headers[header];
              delete this.headers[header];
              return value;
            }
          },

          clearHeaders: function () {
            this.headers = {};
          },

          clone: function () {
            return new URI(
              this._raw.scheme,
              this._raw.user,
              this._raw.host,
              this._raw.port,
              JSON.parse(JSON.stringify(this.parameters)),
              JSON.parse(JSON.stringify(this.headers)));
          },

          toRaw: function () {
            return this._toString(this._raw);
          },

          toString: function () {
            return this._toString(this._normal);
          },

          _toString: function (uri) {
            var header, parameter, idx, uriString, headers = [];

            uriString = uri.scheme + ':';
            if (!uri.scheme.toLowerCase().match("^sips?$")) {
              uriString += "//";
            }
            if (uri.user) {
              uriString += SIP.Utils.escapeUser(uri.user) + '@';
            }
            uriString += uri.host;
            if (uri.port || uri.port === 0) {
              uriString += ':' + uri.port;
            }

            for (parameter in this.parameters) {
              uriString += ';' + parameter;

              if (this.parameters[parameter] !== null) {
                uriString += '=' + this.parameters[parameter];
              }
            }

            for (header in this.headers) {
              for (idx in this.headers[header]) {
                headers.push(header + '=' + this.headers[header][idx]);
              }
            }

            if (headers.length > 0) {
              uriString += '?' + headers.join('&');
            }

            return uriString;
          }
        };


        /**
         * Parse the given string and returns a SIP.URI instance or undefined if
         * it is an invalid URI.
         * @public
         * @param {String} uri
         */
        URI.parse = function (uri) {
          uri = SIP.Grammar.parse(uri, 'SIP_URI');

          if (uri !== -1) {
            return uri;
          } else {
            return undefined;
          }
        };

        SIP.URI = URI;
      };

    }, {}], 31: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview Utils
       */

      module.exports = function (SIP, environment) {
        var Utils;

        Utils = {

          Promise: environment.Promise,

          defer: function defer() {
            var deferred = {};
            deferred.promise = new Utils.Promise(function (resolve, reject) {
              deferred.resolve = resolve;
              deferred.reject = reject;
            });
            return deferred;
          },

          promisify: function promisify(object, methodName, callbacksFirst) {
            var oldMethod = object[methodName];
            return function promisifiedMethod(arg, onSuccess, onFailure) {
              return new Utils.Promise(function (resolve, reject) {
                var oldArgs = [arg, resolve, reject];
                if (callbacksFirst) {
                  oldArgs = [resolve, reject, arg];
                }
                oldMethod.apply(object, oldArgs);
              }).then(onSuccess, onFailure);
            };
          },

          augment: function (object, constructor, args, override) {
            var idx, proto;

            proto = constructor.prototype;
            for (idx in proto) {
              if (override || object[idx] === undefined) {
                object[idx] = proto[idx];
              }
            }

            constructor.apply(object, args);
          },

          optionsOverride: function (options, winner, loser, isDeprecated, logger, defaultValue) {
            if (isDeprecated && options[loser]) {
              logger.warn(loser + ' is deprecated, please use ' + winner + ' instead');
            }

            if (options[winner] && options[loser]) {
              logger.warn(winner + ' overriding ' + loser);
            }

            options[winner] = options[winner] || options[loser] || defaultValue;
          },

          str_utf8_length: function (string) {
            return encodeURIComponent(string).replace(/%[A-F\d]{2}/g, 'U').length;
          },

          generateFakeSDP: function (body) {
            if (!body) {
              return;
            }

            var start = body.indexOf('o=');
            var end = body.indexOf('\r\n', start);

            return 'v=0\r\n' + body.slice(start, end) + '\r\ns=-\r\nt=0 0\r\nc=IN IP4 0.0.0.0';
          },

          isFunction: function (fn) {
            if (fn !== undefined) {
              return Object.prototype.toString.call(fn) === '[object Function]';
            } else {
              return false;
            }
          },

          isDecimal: function (num) {
            return !isNaN(num) && (parseFloat(num) === parseInt(num, 10));
          },

          createRandomToken: function (size, base) {
            var i, r,
              token = '';

            base = base || 32;

            for (i = 0; i < size; i++) {
              r = Math.random() * base | 0;
              token += r.toString(base);
            }

            return token;
          },

          newTag: function () {
            return SIP.Utils.createRandomToken(SIP.UA.C.TAG_LENGTH);
          },

          newUUID: function () {
            var UUID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
              var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
              return v.toString(16);
            });

            return UUID;
          },

          hostType: function (host) {
            if (!host) {
              return;
            } else {
              host = SIP.Grammar.parse(host, 'host');
              if (host !== -1) {
                return host.host_type;
              }
            }
          },

          /**
           * Normalize SIP URI.
           * NOTE: It does not allow a SIP URI without username.
           * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.
           * Detects the domain part (if given) and properly hex-escapes the user portion.
           * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.
           * @private
           * @param {String} target
           * @param {String} [domain]
           */
          normalizeTarget: function (target, domain) {
            var uri, target_array, target_user, target_domain;

            if (!target) {
              return;
            } else if (target instanceof SIP.URI) {
              return target;


            } else if (typeof target === 'string') {
              target_array = target.split('@');

              switch (target_array.length) {
                case 1:
                  if (!domain) {
                    return;
                  }
                  target_user = target;
                  target_domain = domain;
                  break;
                case 2:
                  target_user = target_array[0];
                  target_domain = target_array[1];
                  break;
                default:
                  target_user = target_array.slice(0, target_array.length - 1).join('@');
                  target_domain = target_array[target_array.length - 1];
              }

              target_user = target_user.replace(/^(sips?|tel):/i, '');

              if (/^[\-\.\(\)]*\+?[0-9\-\.\(\)]+$/.test(target_user)) {
                target_user = target_user.replace(/[\-\.\(\)]/g, '');
              }

              target = SIP.C.SIP + ':' + SIP.Utils.escapeUser(target_user) + '@' + target_domain;

              if (uri = SIP.URI.parse(target)) {
                return uri;
              } else {
                return;
              }
            } else {
              return;
            }
          },

          /**
           * Hex-escape a SIP URI user.
           * @private
           * @param {String} user
           */
          escapeUser: function (user) {
            return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');
          },

          headerize: function (string) {
            var exceptions = {
                'Call-Id': 'Call-ID',
                'Cseq': 'CSeq',
                'Min-Se': 'Min-SE',
                'Rack': 'RAck',
                'Rseq': 'RSeq',
                'Www-Authenticate': 'WWW-Authenticate'
              },
              name = string.toLowerCase().replace(/_/g, '-').split('-'),
              hname = '',
              parts = name.length, part;

            for (part = 0; part < parts; part++) {
              if (part !== 0) {
                hname += '-';
              }
              hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);
            }
            if (exceptions[hname]) {
              hname = exceptions[hname];
            }
            return hname;
          },

          sipErrorCause: function (status_code) {
            var cause;

            for (cause in SIP.C.SIP_ERROR_CAUSES) {
              if (SIP.C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {
                return SIP.C.causes[cause];
              }
            }

            return SIP.C.causes.SIP_FAILURE_CODE;
          },

          getReasonPhrase: function getReasonPhrase(code, specific) {
            return specific || SIP.C.REASON_PHRASE[code] || '';
          },

          getReasonHeaderValue: function getReasonHeaderValue(code, reason) {
            reason = SIP.Utils.getReasonPhrase(code, reason);
            return 'SIP ;cause=' + code + ' ;text="' + reason + '"';
          },

          getCancelReason: function getCancelReason(code, reason) {
            if (code && code < 200 || code > 699) {
              throw new TypeError('Invalid status_code: ' + code);
            } else if (code) {
              return SIP.Utils.getReasonHeaderValue(code, reason);
            }
          },

          buildStatusLine: function buildStatusLine(code, reason) {
            code = code || null;
            reason = reason || null;

            if (!code || (code < 100 || code > 699)) {
              throw new TypeError('Invalid status_code: ' + code);
            } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {
              throw new TypeError('Invalid reason_phrase: ' + reason);
            }

            reason = Utils.getReasonPhrase(code, reason);

            return 'SIP/2.0 ' + code + ' ' + reason + '\r\n';
          },

          /**
           * Generate a random Test-Net IP (http://tools.ietf.org/html/rfc5735)
           * @private
           */
          getRandomTestNetIP: function () {
            function getOctet(from, to) {
              return Math.floor(Math.random() * (to - from + 1) + from);
            }
            return '192.0.2.' + getOctet(1, 254);
          },

          calculateMD5: function (string) {
            function RotateLeft(lValue, iShiftBits) {
              return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
            }

            function AddUnsigned(lX, lY) {
              var lX4, lY4, lX8, lY8, lResult;
              lX8 = (lX & 0x80000000);
              lY8 = (lY & 0x80000000);
              lX4 = (lX & 0x40000000);
              lY4 = (lY & 0x40000000);
              lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
              if (lX4 & lY4) {
                return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
              }
              if (lX4 | lY4) {
                if (lResult & 0x40000000) {
                  return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
                } else {
                  return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
                }
              } else {
                return (lResult ^ lX8 ^ lY8);
              }
            }

            function F(x, y, z) {
              return (x & y) | ((~x) & z);
            }

            function G(x, y, z) {
              return (x & z) | (y & (~z));
            }

            function H(x, y, z) {
              return (x ^ y ^ z);
            }

            function I(x, y, z) {
              return (y ^ (x | (~z)));
            }

            function FF(a, b, c, d, x, s, ac) {
              a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
              return AddUnsigned(RotateLeft(a, s), b);
            }

            function GG(a, b, c, d, x, s, ac) {
              a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
              return AddUnsigned(RotateLeft(a, s), b);
            }

            function HH(a, b, c, d, x, s, ac) {
              a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
              return AddUnsigned(RotateLeft(a, s), b);
            }

            function II(a, b, c, d, x, s, ac) {
              a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
              return AddUnsigned(RotateLeft(a, s), b);
            }

            function ConvertToWordArray(string) {
              var lWordCount;
              var lMessageLength = string.length;
              var lNumberOfWords_temp1 = lMessageLength + 8;
              var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
              var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
              var lWordArray = Array(lNumberOfWords - 1);
              var lBytePosition = 0;
              var lByteCount = 0;
              while (lByteCount < lMessageLength) {
                lWordCount = (lByteCount - (lByteCount % 4)) / 4;
                lBytePosition = (lByteCount % 4) * 8;
                lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
                lByteCount++;
              }
              lWordCount = (lByteCount - (lByteCount % 4)) / 4;
              lBytePosition = (lByteCount % 4) * 8;
              lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
              lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
              lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
              return lWordArray;
            }

            function WordToHex(lValue) {
              var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
              for (lCount = 0; lCount <= 3; lCount++) {
                lByte = (lValue >>> (lCount * 8)) & 255;
                WordToHexValue_temp = "0" + lByte.toString(16);
                WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
              }
              return WordToHexValue;
            }

            function Utf8Encode(string) {
              string = string.replace(/\r\n/g, "\n");
              var utftext = "";

              for (var n = 0; n < string.length; n++) {
                var c = string.charCodeAt(n);

                if (c < 128) {
                  utftext += String.fromCharCode(c);
                }
                else if ((c > 127) && (c < 2048)) {
                  utftext += String.fromCharCode((c >> 6) | 192);
                  utftext += String.fromCharCode((c & 63) | 128);
                }
                else {
                  utftext += String.fromCharCode((c >> 12) | 224);
                  utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                  utftext += String.fromCharCode((c & 63) | 128);
                }
              }
              return utftext;
            }

            var x = [];
            var k, AA, BB, CC, DD, a, b, c, d;
            var S11 = 7, S12 = 12, S13 = 17, S14 = 22;
            var S21 = 5, S22 = 9, S23 = 14, S24 = 20;
            var S31 = 4, S32 = 11, S33 = 16, S34 = 23;
            var S41 = 6, S42 = 10, S43 = 15, S44 = 21;

            string = Utf8Encode(string);

            x = ConvertToWordArray(string);

            a = 0x67452301; b = 0xEFCDAB89; c = 0x98BADCFE; d = 0x10325476;

            for (k = 0; k < x.length; k += 16) {
              AA = a; BB = b; CC = c; DD = d;
              a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
              d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
              c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
              b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
              a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
              d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
              c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
              b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
              a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
              d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
              c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
              b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
              a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
              d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
              c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
              b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
              a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
              d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
              c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
              b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
              a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
              d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
              c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
              b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
              a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
              d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
              c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
              b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
              a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
              d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
              c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
              b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
              a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
              d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
              c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
              b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
              a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
              d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
              c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
              b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
              a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
              d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
              c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
              b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
              a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
              d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
              c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
              b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
              a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
              d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
              c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
              b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
              a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
              d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
              c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
              b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
              a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
              d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
              c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
              b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
              a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
              d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
              c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
              b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
              a = AddUnsigned(a, AA);
              b = AddUnsigned(b, BB);
              c = AddUnsigned(c, CC);
              d = AddUnsigned(d, DD);
            }

            var temp = WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);

            return temp.toLowerCase();
          }
        };

        SIP.Utils = Utils;
      };

    }, {}], 32: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview WebRTC
       */

      module.exports = function (SIP, environment) {
        var WebRTC;

        WebRTC = {};

        WebRTC.MediaHandler = require('./WebRTC/MediaHandler')(SIP);
        WebRTC.MediaStreamManager = require('./WebRTC/MediaStreamManager')(SIP, environment);

        var _isSupported;

        WebRTC.isSupported = function () {
          if (_isSupported !== undefined) {
            return _isSupported;
          }

          WebRTC.MediaStream = environment.MediaStream;
          WebRTC.getUserMedia = environment.getUserMedia;
          WebRTC.RTCPeerConnection = environment.RTCPeerConnection;
          WebRTC.RTCSessionDescription = environment.RTCSessionDescription;

          if (WebRTC.RTCPeerConnection && WebRTC.RTCSessionDescription) {
            if (WebRTC.getUserMedia) {
              WebRTC.getUserMedia = SIP.Utils.promisify(environment, 'getUserMedia');
            }
            _isSupported = true;
          }
          else {
            _isSupported = false;
          }
          return _isSupported;
        };
        return WebRTC;
      };

    }, { "./WebRTC/MediaHandler": 33, "./WebRTC/MediaStreamManager": 34 }], 33: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview MediaHandler
       */

      /* MediaHandler
           * @class PeerConnection helper Class.
           * @param {SIP.Session} session
           * @param {Object} [options]
           * @param {SIP.WebRTC.MediaStreamManager} [options.mediaStreamManager]
           *        The MediaStreamManager to acquire/release streams from/to.
           *        If not provided, a default MediaStreamManager will be used.
           */
      module.exports = function (SIP) {

        var MediaHandler = function (session, options) {
          options = options || {};

          this.logger = session.ua.getLogger('sip.invitecontext.mediahandler', session.id);
          this.session = session;
          this.localMedia = null;
          this.ready = true;
          this.mediaStreamManager = options.mediaStreamManager || new SIP.WebRTC.MediaStreamManager(this.logger);
          this.audioMuted = false;
          this.videoMuted = false;
          this.local_hold = false;
          this.remote_hold = false;

          var servers = this.prepareIceServers(options.stunServers, options.turnServers);
          this.RTCConstraints = options.RTCConstraints || {};

          this.initPeerConnection(servers);

          function selfEmit(mh, event) {
            if (mh.mediaStreamManager.on) {
              mh.mediaStreamManager.on(event, function () {
                mh.emit.apply(mh, [event].concat(Array.prototype.slice.call(arguments)));
              });
            }
          }

          selfEmit(this, 'userMediaRequest');
          selfEmit(this, 'userMedia');
          selfEmit(this, 'userMediaFailed');
        };

        MediaHandler.defaultFactory = function defaultFactory(session, options) {
          return new MediaHandler(session, options);
        };
        MediaHandler.defaultFactory.isSupported = function () {
          return SIP.WebRTC.isSupported();
        };

        MediaHandler.prototype = Object.create(SIP.MediaHandler.prototype, {
          isReady: {
            writable: true, value: function isReady() {
              return this.ready;
            }
          },

          close: {
            writable: true, value: function close() {
              this.logger.log('closing PeerConnection');
              this._remoteStreams = [];

              if (this.peerConnection && this.peerConnection.signalingState !== 'closed') {
                this.peerConnection.close();

                if (this.localMedia) {
                  this.mediaStreamManager.release(this.localMedia);
                }
              }
            }
          },

          /**
           * @param {SIP.WebRTC.MediaStream | (getUserMedia constraints)} [mediaHint]
           *        the MediaStream (or the constraints describing it) to be used for the session
           */
          getDescription: {
            writable: true, value: function getDescription(mediaHint) {
              var self = this;
              var acquire = self.mediaStreamManager.acquire;
              if (acquire.length > 1) {
                acquire = SIP.Utils.promisify(this.mediaStreamManager, 'acquire', true);
              }
              mediaHint = mediaHint || {};
              if (mediaHint.dataChannel === true) {
                mediaHint.dataChannel = {};
              }
              this.mediaHint = mediaHint;

              /*
                           * 1. acquire streams (skip if MediaStreams passed in)
                           * 2. addStreams
                           * 3. createOffer/createAnswer
                           */

              var streamPromise;
              if (self.localMedia) {
                self.logger.log('already have local media');
                streamPromise = SIP.Utils.Promise.resolve(self.localMedia);
              }
              else {
                self.logger.log('acquiring local media');
                streamPromise = acquire.call(self.mediaStreamManager, mediaHint)
                  .then(function acquireSucceeded(streams) {
                    self.logger.log('acquired local media streams');
                    self.localMedia = streams;
                    self.session.connecting();
                    return streams;
                  }, function acquireFailed(err) {
                    self.logger.error('unable to acquire streams');
                    self.logger.error(err);
                    self.session.connecting();
                    throw err;
                  })
                  .then(this.addStreams.bind(this))
                ;
              }

              return streamPromise
                .then(function streamAdditionSucceeded() {
                  if (self.hasOffer('remote')) {
                    self.peerConnection.ondatachannel = function (evt) {
                      self.dataChannel = evt.channel;
                      self.emit('dataChannel', self.dataChannel);
                    };
                  } else if (mediaHint.dataChannel &&
                    self.peerConnection.createDataChannel) {
                    self.dataChannel = self.peerConnection.createDataChannel(
                      'sipjs',
                      mediaHint.dataChannel
                    );
                    self.emit('dataChannel', self.dataChannel);
                  }

                  self.render();
                  return self.createOfferOrAnswer(self.RTCConstraints);
                })
                .then(function (sdp) {
                  sdp = SIP.Hacks.Firefox.hasMissingCLineInSDP(sdp);

                  if (self.local_hold) {

                    if (!(/a=(sendrecv|sendonly|recvonly|inactive)/).test(sdp)) {
                      sdp = sdp.replace(/(m=[^\r]*\r\n)/g, '$1a=sendonly\r\n');
                    } else {
                      sdp = sdp.replace(/a=sendrecv\r\n/g, 'a=sendonly\r\n');
                      sdp = sdp.replace(/a=recvonly\r\n/g, 'a=inactive\r\n');
                    }
                  }

                  return {
                    body: sdp,
                    contentType: 'application/sdp'
                  };
                })
                ;
            }
          },

          /**
           * Check if a SIP message contains a session description.
           * @param {SIP.SIPMessage} message
           * @returns {boolean}
           */
          hasDescription: {
            writeable: true, value: function hasDescription(message) {
              return message.getHeader('Content-Type') === 'application/sdp' && !!message.body;
            }
          },

          /**
           * Set the session description contained in a SIP message.
           * @param {SIP.SIPMessage} message
           * @returns {Promise}
           */
          setDescription: {
            writable: true, value: function setDescription(message) {
              var self = this;
              var sdp = message.body;

              this.remote_hold = /a=(sendonly|inactive)/.test(sdp);

              sdp = SIP.Hacks.Firefox.cannotHandleExtraWhitespace(sdp);
              sdp = SIP.Hacks.AllBrowsers.maskDtls(sdp);

              var rawDescription = {
                type: this.hasOffer('local') ? 'answer' : 'offer',
                sdp: sdp
              };

              this.emit('setDescription', rawDescription);

              var description = new SIP.WebRTC.RTCSessionDescription(rawDescription);
              return SIP.Utils.promisify(this.peerConnection, 'setRemoteDescription')(description)
                .catch(function setRemoteDescriptionError(e) {
                  self.emit('peerConnection-setRemoteDescriptionFailed', e);
                  throw e;
                });
            }
          },

          /**
           * If the Session associated with this MediaHandler were to be referred,
           * what mediaHint should be provided to the UA's invite method?
           */
          getReferMedia: {
            writable: true, value: function getReferMedia() {
              function hasTracks(trackGetter, stream) {
                return stream[trackGetter]().length > 0;
              }

              function bothHaveTracks(trackGetter) {
                /* jshint validthis:true */
                return this.getLocalStreams().some(hasTracks.bind(null, trackGetter)) &&
                  this.getRemoteStreams().some(hasTracks.bind(null, trackGetter));
              }

              return {
                constraints: {
                  audio: bothHaveTracks.call(this, 'getAudioTracks'),
                  video: bothHaveTracks.call(this, 'getVideoTracks')
                }
              };
            }
          },

          updateIceServers: {
            writeable: true, value: function (options) {
              var servers = this.prepareIceServers(options.stunServers, options.turnServers);
              this.RTCConstraints = options.RTCConstraints || this.RTCConstraints;

              this.initPeerConnection(servers);

              /* once updateIce is implemented correctly, this is better than above
                          if (!this.peerConnection.updateIce) {
                            return;
                          }

                          this.peerConnection.updateIce({'iceServers': servers}, this.RTCConstraints);
                          */
            }
          },

          isMuted: {
            writable: true, value: function isMuted() {
              return {
                audio: this.audioMuted,
                video: this.videoMuted
              };
            }
          },

          mute: {
            writable: true, value: function mute(options) {
              if (this.getLocalStreams().length === 0) {
                return;
              }

              options = options || {
                audio: this.getLocalStreams()[0].getAudioTracks().length > 0,
                video: this.getLocalStreams()[0].getVideoTracks().length > 0
              };

              var audioMuted = false,
                videoMuted = false;

              if (options.audio && !this.audioMuted) {
                audioMuted = true;
                this.audioMuted = true;
                this.toggleMuteAudio(true);
              }

              if (options.video && !this.videoMuted) {
                videoMuted = true;
                this.videoMuted = true;
                this.toggleMuteVideo(true);
              }

              if (audioMuted || videoMuted) {
                return {
                  audio: audioMuted,
                  video: videoMuted
                };
                /*this.session.onmute({
                                audio: audioMuted,
                                video: videoMuted
                              });*/
              }
            }
          },

          unmute: {
            writable: true, value: function unmute(options) {
              if (this.getLocalStreams().length === 0) {
                return;
              }

              options = options || {
                audio: this.getLocalStreams()[0].getAudioTracks().length > 0,
                video: this.getLocalStreams()[0].getVideoTracks().length > 0
              };

              var audioUnMuted = false,
                videoUnMuted = false;

              if (options.audio && this.audioMuted) {
                audioUnMuted = true;
                this.audioMuted = false;
                this.toggleMuteAudio(false);
              }

              if (options.video && this.videoMuted) {
                videoUnMuted = true;
                this.videoMuted = false;
                this.toggleMuteVideo(false);
              }

              if (audioUnMuted || videoUnMuted) {
                return {
                  audio: audioUnMuted,
                  video: videoUnMuted
                };
                /*this.session.onunmute({
                                audio: audioUnMuted,
                                video: videoUnMuted
                              });*/
              }
            }
          },

          hold: {
            writable: true, value: function hold() {
              this.local_hold = true;
              this.toggleMuteAudio(true);
              this.toggleMuteVideo(true);
            }
          },

          unhold: {
            writable: true, value: function unhold() {
              this.local_hold = false;

              if (!this.audioMuted) {
                this.toggleMuteAudio(false);
              }

              if (!this.videoMuted) {
                this.toggleMuteVideo(false);
              }
            }
          },

          getLocalStreams: {
            writable: true, value: function getLocalStreams() {
              var pc = this.peerConnection;
              if (pc && pc.signalingState === 'closed') {
                this.logger.warn('peerConnection is closed, getLocalStreams returning []');
                return [];
              }
              return (pc.getLocalStreams && pc.getLocalStreams()) ||
                pc.localStreams || [];
            }
          },

          getRemoteStreams: {
            writable: true, value: function getRemoteStreams() {
              var pc = this.peerConnection;
              if (pc && pc.signalingState === 'closed') {
                this.logger.warn('peerConnection is closed, getRemoteStreams returning this._remoteStreams');
                return this._remoteStreams;
              }
              return (pc.getRemoteStreams && pc.getRemoteStreams()) ||
                pc.remoteStreams || [];
            }
          },

          render: {
            writable: true, value: function render(renderHint) {
              renderHint = renderHint || (this.mediaHint && this.mediaHint.render);
              if (!renderHint) {
                return false;
              }
              var streamGetters = {
                local: 'getLocalStreams',
                remote: 'getRemoteStreams'
              };
              Object.keys(streamGetters).forEach(function (loc) {
                var streamGetter = streamGetters[loc];
                var streams = this[streamGetter]();
                SIP.WebRTC.MediaStreamManager.render(streams, renderHint[loc]);
              }.bind(this));
            }
          },

          hasOffer: {
            writable: true, value: function hasOffer(where) {
              var offerState = 'have-' + where + '-offer';
              return this.peerConnection.signalingState === offerState;
            }
          },

          prepareIceServers: {
            writable: true, value: function prepareIceServers(stunServers, turnServers) {
              var servers = [],
                config = this.session.ua.configuration;

              stunServers = stunServers || config.stunServers;
              turnServers = turnServers || config.turnServers;

              [].concat(stunServers).forEach(function (server) {
                servers.push({ 'urls': server });
              });

              [].concat(turnServers).forEach(function (server) {
                var turnServer = { 'urls': server.urls };
                if (server.username) {
                  turnServer.username = server.username;
                }
                if (server.password) {
                  turnServer.credential = server.password;
                }
                servers.push(turnServer);
              });

              return servers;
            }
          },

          initPeerConnection: {
            writable: true, value: function initPeerConnection(servers) {
              var self = this,
                config = this.session.ua.configuration;

              this.onIceCompleted = SIP.Utils.defer();
              this.onIceCompleted.promise.then(function (pc) {
                self.emit('iceGatheringComplete', pc);
                if (self.iceCheckingTimer) {
                  SIP.Timers.clearTimeout(self.iceCheckingTimer);
                  self.iceCheckingTimer = null;
                }
              });

              if (this.peerConnection) {
                this.peerConnection.close();
              }

              var connConfig = {
                iceServers: servers
              };

              if (config.rtcpMuxPolicy) {
                connConfig.rtcpMuxPolicy = config.rtcpMuxPolicy;
              }

              this.peerConnection = new SIP.WebRTC.RTCPeerConnection(connConfig);


              this._remoteStreams = [];

              this.peerConnection.onaddstream = function (e) {
                self.logger.log('stream added: ' + e.stream.id);
                self._remoteStreams.push(e.stream);
                self.render();
                self.emit('addStream', e);
              };

              this.peerConnection.onremovestream = function (e) {
                self.logger.log('stream removed: ' + e.stream.id);
              };

              this.startIceCheckingTimer = function () {
                if (!self.iceCheckingTimer) {
                  self.iceCheckingTimer = SIP.Timers.setTimeout(function () {
                    self.logger.log('RTCIceChecking Timeout Triggered after ' + config.iceCheckingTimeout + ' milliseconds');
                    self.onIceCompleted.resolve(this);
                  }.bind(this.peerConnection), config.iceCheckingTimeout);
                }
              };

              this.peerConnection.onicecandidate = function (e) {
                self.emit('iceCandidate', e);
                if (e.candidate) {
                  self.logger.log('ICE candidate received: ' + (e.candidate.candidate === null ? null : e.candidate.candidate.trim()));
                  self.startIceCheckingTimer();
                } else {
                  self.onIceCompleted.resolve(this);
                }
              };

              this.peerConnection.onicegatheringstatechange = function () {
                self.logger.log('RTCIceGatheringState changed: ' + this.iceGatheringState);
                if (this.iceGatheringState === 'gathering') {
                  self.emit('iceGathering', this);
                }
                if (this.iceGatheringState === 'complete') {
                  self.onIceCompleted.resolve(this);
                }
              };

              this.peerConnection.oniceconnectionstatechange = function () {
                var stateEvent;

                if (this.iceConnectionState === 'checking') {
                  self.startIceCheckingTimer();
                }

                switch (this.iceConnectionState) {
                  case 'new':
                    stateEvent = 'iceConnection';
                    break;
                  case 'checking':
                    stateEvent = 'iceConnectionChecking';
                    break;
                  case 'connected':
                    stateEvent = 'iceConnectionConnected';
                    break;
                  case 'completed':
                    stateEvent = 'iceConnectionCompleted';
                    break;
                  case 'failed':
                    stateEvent = 'iceConnectionFailed';
                    break;
                  case 'disconnected':
                    stateEvent = 'iceConnectionDisconnected';
                    break;
                  case 'closed':
                    stateEvent = 'iceConnectionClosed';
                    break;
                  default:
                    self.logger.warn('Unknown iceConnection state:', this.iceConnectionState);
                    return;
                }
                self.emit(stateEvent, this);


              };

              this.peerConnection.onstatechange = function () {
                self.logger.log('PeerConnection state changed to "' + this.readyState + '"');
              };
            }
          },

          createOfferOrAnswer: {
            writable: true, value: function createOfferOrAnswer(constraints) {
              var self = this;
              var methodName;
              var pc = self.peerConnection;

              self.ready = false;
              methodName = self.hasOffer('remote') ? 'createAnswer' : 'createOffer';

              return SIP.Utils.promisify(pc, methodName, true)(constraints)
                .catch(function methodError(e) {
                  self.emit('peerConnection-' + methodName + 'Failed', e);
                  throw e;
                })
                .then(SIP.Utils.promisify(pc, 'setLocalDescription'))
                .catch(function localDescError(e) {
                  self.emit('peerConnection-selLocalDescriptionFailed', e);
                  throw e;
                })
                .then(function onSetLocalDescriptionSuccess() {
                  var deferred = SIP.Utils.defer();
                  if (pc.iceGatheringState === 'complete' && (pc.iceConnectionState === 'connected' || pc.iceConnectionState === 'completed')) {
                    deferred.resolve();
                  } else {
                    self.onIceCompleted.promise.then(deferred.resolve);
                  }
                  return deferred.promise;
                })
                .then(function readySuccess() {
                  var sdp = pc.localDescription.sdp;

                  sdp = SIP.Hacks.Chrome.needsExplicitlyInactiveSDP(sdp);
                  sdp = SIP.Hacks.AllBrowsers.unmaskDtls(sdp);

                  var sdpWrapper = {
                    type: methodName === 'createOffer' ? 'offer' : 'answer',
                    sdp: sdp
                  };

                  self.emit('getDescription', sdpWrapper);

                  if (self.session.ua.configuration.hackStripTcp) {
                    sdpWrapper.sdp = sdpWrapper.sdp.replace(/^a=candidate:\d+ \d+ tcp .*?\r\n/img, "");
                  }

                  self.ready = true;
                  return sdpWrapper.sdp;
                })
                .catch(function createOfferAnswerError(e) {
                  self.logger.error(e);
                  self.ready = true;
                  throw new SIP.Exceptions.GetDescriptionError(e);
                })
                ;
            }
          },

          addStreams: {
            writable: true, value: function addStreams(streams) {
              try {
                streams = [].concat(streams);
                streams.forEach(function (stream) {
                  this.peerConnection.addStream(stream);
                }, this);
              } catch (e) {
                this.logger.error('error adding stream');
                this.logger.error(e);
                return SIP.Utils.Promise.reject(e);
              }

              return SIP.Utils.Promise.resolve();
            }
          },

          toggleMuteHelper: {
            writable: true, value: function toggleMuteHelper(trackGetter, mute) {
              this.getLocalStreams().forEach(function (stream) {
                stream[trackGetter]().forEach(function (track) {
                  track.enabled = !mute;
                });
              });
            }
          },

          toggleMuteAudio: {
            writable: true, value: function toggleMuteAudio(mute) {
              this.toggleMuteHelper('getAudioTracks', mute);
            }
          },

          toggleMuteVideo: {
            writable: true, value: function toggleMuteVideo(mute) {
              this.toggleMuteHelper('getVideoTracks', mute);
            }
          }
        });

        return MediaHandler;
      };

    }, {}], 34: [function (require, module, exports) {
      "use strict";
      /**
       * @fileoverview MediaStreamManager
       */

      /* MediaStreamManager
           * @class Manages the acquisition and release of MediaStreams.
           * @param {mediaHint} [defaultMediaHint] The mediaHint to use if none is provided to acquire()
           */
      module.exports = function (SIP, environment) {

        var MediaStreamManager = function MediaStreamManager(logger, defaultMediaHint) {
          if (!SIP.WebRTC.isSupported()) {
            console.info("Media not supported!!!!");
          }

          this.mediaHint = defaultMediaHint || {
            constraints: { audio: true, video: true }
          };


          this.acquisitions = {};
        };
        MediaStreamManager.streamId = function (stream) {
          return stream.getAudioTracks().concat(stream.getVideoTracks())
            .map(function trackId(track) {
              return track.id;
            })
            .join('');
        };

        /**
         * @param {(Array of) MediaStream} streams - The streams to render
         *
         * @param {(Array of) HTMLMediaElement} elements
         *        - The <audio>/<video> element(s) that should render the streams
         *
         * Each stream in streams renders to the corresponding element in elements,
         * wrapping around elements if needed.
         */
        MediaStreamManager.render = function render(streams, elements) {
          if (!elements) {
            return false;
          }
          if (Array.isArray(elements) && !elements.length) {
            throw new TypeError('elements must not be empty');
          }

          function attachMediaStream(element, stream) {
            element.srcObject = stream;
          }

          function ensureMediaPlaying(mediaElement) {
            var interval = 100;
            mediaElement.ensurePlayingIntervalId = SIP.Timers.setInterval(function () {
              if (mediaElement.paused && mediaElement.srcObject) {
                mediaElement.play();
              }
              else {
                SIP.Timers.clearInterval(mediaElement.ensurePlayingIntervalId);
              }
            }, interval);
          }

          function attachAndPlay(elements, stream, index) {
            var element = elements[index % elements.length];
            if (typeof element === 'function') {
              element = element();
            }
            (environment.attachMediaStream || attachMediaStream)(element, stream);
            ensureMediaPlaying(element);
          }


          elements = [].concat(elements);
          [].concat(streams).forEach(attachAndPlay.bind(null, elements));
        };

        MediaStreamManager.prototype = Object.create(SIP.EventEmitter.prototype, {
          'acquire': {
            writable: true, value: function acquire(mediaHint) {
              mediaHint = Object.keys(mediaHint || {}).length ? mediaHint : this.mediaHint;

              var saveSuccess = function (isHintStream, streams) {
                streams = [].concat(streams);
                streams.forEach(function (stream) {
                  var streamId = MediaStreamManager.streamId(stream);
                  this.acquisitions[streamId] = !!isHintStream;
                }, this);
                return SIP.Utils.Promise.resolve(streams);
              }.bind(this);

              if (mediaHint.stream) {
                return saveSuccess(true, mediaHint.stream);
              } else {
                var constraints = mediaHint.constraints ||
                  (this.mediaHint && this.mediaHint.constraints) ||
                  { audio: true, video: true };

                var deferred = SIP.Utils.defer();

                /*
                               * Make the call asynchronous, so that ICCs have a chance
                               * to define callbacks to `userMediaRequest`
                               */
                SIP.Timers.setTimeout(function () {
                  this.emit('userMediaRequest', constraints);

                  var emitThenCall = function (eventName, callback) {
                    var callbackArgs = Array.prototype.slice.call(arguments, 2);
                    var newArgs = [eventName].concat(callbackArgs);

                    this.emit.apply(this, newArgs);

                    return callback.apply(null, callbackArgs);
                  }.bind(this);

                  if (constraints.audio || constraints.video) {
                    deferred.resolve(
                      SIP.WebRTC.getUserMedia(constraints)
                        .then(
                          emitThenCall.bind(this, 'userMedia', saveSuccess.bind(null, false)),
                          emitThenCall.bind(this, 'userMediaFailed', function (e) {
                            console.info(" ###### 【userMediaFailed】：" + e);
                            writeLog(" ###### 【userMediaFailed】：" + e);
                          })
                        )
                    );
                  } else {
                    deferred.resolve([]);
                  }
                }.bind(this), 0);

                return deferred.promise;
              }
            }
          },

          'release': {
            writable: true, value: function release(streams) {
              streams = [].concat(streams);
              streams.forEach(function (stream) {
                var streamId = MediaStreamManager.streamId(stream);
                if (this.acquisitions[streamId] === false) {
                  stream.getTracks().forEach(function (track) {
                    track.stop();
                  });
                }
                delete this.acquisitions[streamId];
              }, this);
            }
          },
        });

        return MediaStreamManager;
      };

    }, {}], 35: [function (require, module, exports) {
      (function (global) {
        "use strict";

        var toplevel = global.window || global;

        function getPrefixedProperty(object, name) {
          if (object == null) {
            return;
          }
          var capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
          var prefixedNames = [name, 'webkit' + capitalizedName, 'moz' + capitalizedName];
          for (var i in prefixedNames) {
            var property = object[prefixedNames[i]];
            if (property) {
              return property.bind(object);
            }
          }
        }

        module.exports = {
          WebSocket: toplevel.WebSocket,
          Transport: require('./Transport'),
          open: toplevel.open,
          Promise: toplevel.Promise,
          timers: toplevel,

          console: toplevel.console || {
            debug: function () { },
            log: function () { },
            warn: function () { },
            error: function () { }
          },

          MediaStream: getPrefixedProperty(toplevel, 'MediaStream'),
          getUserMedia: getPrefixedProperty(toplevel.navigator, 'getUserMedia'),
          RTCPeerConnection: getPrefixedProperty(toplevel, 'RTCPeerConnection'),
          RTCSessionDescription: getPrefixedProperty(toplevel, 'RTCSessionDescription'),

          addEventListener: getPrefixedProperty(toplevel, 'addEventListener'),
          removeEventListener: getPrefixedProperty(toplevel, 'removeEventListener'),
          HTMLMediaElement: toplevel.HTMLMediaElement,

          attachMediaStream: toplevel.attachMediaStream,
          createObjectURL: toplevel.URL && toplevel.URL.createObjectURL,
          revokeObjectURL: toplevel.URL && toplevel.URL.revokeObjectURL
        };

      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
    }, { "./Transport": 28 }], 36: [function (require, module, exports) {
      "use strict";
      module.exports = require('./SIP')(require('./environment'));

    }, { "./SIP": 19, "./environment": 35 }]
  }, {}, [36])(36)
});
/* sip-0.7.8.js 结束*/


/* 众麦zmindex.js 开始 */
var cti = new ClassXnCtiClient()
var ua = null;
var session = null;

var ws_type = 'wss';
var cti_serverid = '';
var cti_server = '';
var cti_port = '';

var sip_serverid = '';
var sip_server = '';
var sip_port = '';
var handcall = 0;

var agentid = '';
var compid = '';
var agentpwd = '';
var extensionpwd = '';


(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.JsSIP = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    "use strict";

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var Utils = require('./Utils');

    var JsSIP_C = require('./Constants');

    var Grammar = require('./Grammar');

    var URI = require('./URI');

    var Socket = require('./Socket');

    var Exceptions = require('./Exceptions');


    exports.settings = {
      authorization_user: null,
      password: null,
      realm: null,
      ha1: null,
      display_name: null,
      uri: null,
      contact_uri: null,
      instance_id: null,
      use_preloaded_route: false,
      session_timers: true,
      session_timers_refresh_method: JsSIP_C.UPDATE,
      no_answer_timeout: 60,
      register: true,
      register_expires: 600,
      registrar_server: null,
      sockets: null,
      connection_recovery_max_interval: JsSIP_C.CONNECTION_RECOVERY_MAX_INTERVAL,
      connection_recovery_min_interval: JsSIP_C.CONNECTION_RECOVERY_MIN_INTERVAL,

      /*
       * Host address.
       * Value to be set in Via sent_by and host part of Contact FQDN.
      */
      via_host: "".concat(Utils.createRandomToken(12), ".invalid")
    };

    var checks = {
      mandatory: {
        sockets: function sockets(_sockets2) {
          /* Allow defining sockets parameter as:
           *  Socket: socket
           *  Array of Socket: [socket1, socket2]
           *  Array of Objects: [{socket: socket1, weight:1}, {socket: Socket2, weight:0}]
           *  Array of Objects and Socket: [{socket: socket1}, socket2]
           */
          var _sockets = [];

          if (Socket.isSocket(_sockets2)) {
            _sockets.push({
              socket: _sockets2
            });
          } else if (Array.isArray(_sockets2) && _sockets2.length) {
            var _iterator = _createForOfIteratorHelper(_sockets2),
              _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var socket = _step.value;

                if (Object.prototype.hasOwnProperty.call(socket, 'socket') && Socket.isSocket(socket.socket)) {
                  _sockets.push(socket);
                } else if (Socket.isSocket(socket)) {
                  _sockets.push({
                    socket: socket
                  });
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          } else {
            return;
          }

          return _sockets;
        },
        uri: function uri(_uri) {
          if (!/^sip:/i.test(_uri)) {
            _uri = "".concat(JsSIP_C.SIP, ":").concat(_uri);
          }

          var parsed = URI.parse(_uri);

          if (!parsed) {
            return;
          } else if (!parsed.user) {
            return;
          } else {
            return parsed;
          }
        }
      },
      optional: {
        authorization_user: function authorization_user(_authorization_user) {
          if (Grammar.parse("\"".concat(_authorization_user, "\""), 'quoted_string') === -1) {
            return;
          } else {
            return _authorization_user;
          }
        },
        authorization_jwt: function authorization_jwt(_authorization_jwt) {
          if (typeof _authorization_jwt === 'string') {
            return _authorization_jwt;
          }
        },
        user_agent: function user_agent(_user_agent) {
          if (typeof _user_agent === 'string') {
            return _user_agent;
          }
        },
        connection_recovery_max_interval: function connection_recovery_max_interval(_connection_recovery_max_interval) {
          if (Utils.isDecimal(_connection_recovery_max_interval)) {
            var value = Number(_connection_recovery_max_interval);

            if (value > 0) {
              return value;
            }
          }
        },
        connection_recovery_min_interval: function connection_recovery_min_interval(_connection_recovery_min_interval) {
          if (Utils.isDecimal(_connection_recovery_min_interval)) {
            var value = Number(_connection_recovery_min_interval);

            if (value > 0) {
              return value;
            }
          }
        },
        contact_uri: function contact_uri(_contact_uri) {
          if (typeof _contact_uri === 'string') {
            var uri = Grammar.parse(_contact_uri, 'SIP_URI');

            if (uri !== -1) {
              return uri;
            }
          }
        },
        display_name: function display_name(_display_name) {
          return _display_name;
        },
        instance_id: function instance_id(_instance_id) {
          if (/^uuid:/i.test(_instance_id)) {
            _instance_id = _instance_id.substr(5);
          }

          if (Grammar.parse(_instance_id, 'uuid') === -1) {
            return;
          } else {
            return _instance_id;
          }
        },
        no_answer_timeout: function no_answer_timeout(_no_answer_timeout) {
          if (Utils.isDecimal(_no_answer_timeout)) {
            var value = Number(_no_answer_timeout);

            if (value > 0) {
              return value;
            }
          }
        },
        session_timers: function session_timers(_session_timers) {
          if (typeof _session_timers === 'boolean') {
            return _session_timers;
          }
        },
        session_timers_refresh_method: function session_timers_refresh_method(method) {
          if (typeof method === 'string') {
            method = method.toUpperCase();

            if (method === JsSIP_C.INVITE || method === JsSIP_C.UPDATE) {
              return method;
            }
          }
        },
        password: function password(_password) {
          return String(_password);
        },
        realm: function realm(_realm) {
          return String(_realm);
        },
        ha1: function ha1(_ha) {
          return String(_ha);
        },
        register: function register(_register) {
          if (typeof _register === 'boolean') {
            return _register;
          }
        },
        register_expires: function register_expires(_register_expires) {
          if (Utils.isDecimal(_register_expires)) {
            var value = Number(_register_expires);

            if (value > 0) {
              return value;
            }
          }
        },
        registrar_server: function registrar_server(_registrar_server) {
          if (!/^sip:/i.test(_registrar_server)) {
            _registrar_server = "".concat(JsSIP_C.SIP, ":").concat(_registrar_server);
          }

          var parsed = URI.parse(_registrar_server);

          if (!parsed) {
            return;
          } else if (parsed.user) {
            return;
          } else {
            return parsed;
          }
        },
        use_preloaded_route: function use_preloaded_route(_use_preloaded_route) {
          if (typeof _use_preloaded_route === 'boolean') {
            return _use_preloaded_route;
          }
        }
      }
    };

    exports.load = function (dst, src) {
      for (var parameter in checks.mandatory) {
        if (!src.hasOwnProperty(parameter)) {
          throw new Exceptions.ConfigurationError(parameter);
        } else {
          var value = src[parameter];
          var checked_value = checks.mandatory[parameter](value);

          if (checked_value !== undefined) {
            dst[parameter] = checked_value;
          } else {
            throw new Exceptions.ConfigurationError(parameter, value);
          }
        }
      }


      for (var _parameter in checks.optional) {
        if (src.hasOwnProperty(_parameter)) {
          var _value = src[_parameter];
          /* If the parameter value is null, empty string, undefined, empty array
           * or it's a number with NaN value, then apply its default value.
           */

          if (Utils.isEmpty(_value)) {
            continue;
          }

          var _checked_value = checks.optional[_parameter](_value);

          if (_checked_value !== undefined) {
            dst[_parameter] = _checked_value;
          } else {
            throw new Exceptions.ConfigurationError(_parameter, _value);
          }
        }
      }
    };
  },{"./Constants":2,"./Exceptions":6,"./Grammar":7,"./Socket":20,"./URI":25,"./Utils":26}],2:[function(require,module,exports){
    "use strict";

    var pkg = require('../package.json');

    module.exports = {
      USER_AGENT: "".concat(pkg.title, " ").concat(pkg.version),
      SIP: 'sip',
      SIPS: 'sips',
      causes: {
        CONNECTION_ERROR: 'Connection Error',
        REQUEST_TIMEOUT: 'Request Timeout',
        SIP_FAILURE_CODE: 'SIP Failure Code',
        INTERNAL_ERROR: 'Internal Error',
        BUSY: 'Busy',
        REJECTED: 'Rejected',
        REDIRECTED: 'Redirected',
        UNAVAILABLE: 'Unavailable',
        NOT_FOUND: 'Not Found',
        ADDRESS_INCOMPLETE: 'Address Incomplete',
        INCOMPATIBLE_SDP: 'Incompatible SDP',
        MISSING_SDP: 'Missing SDP',
        AUTHENTICATION_ERROR: 'Authentication Error',
        BYE: 'Terminated',
        WEBRTC_ERROR: 'WebRTC Error',
        CANCELED: 'Canceled',
        NO_ANSWER: 'No Answer',
        EXPIRES: 'Expires',
        NO_ACK: 'No ACK',
        DIALOG_ERROR: 'Dialog Error',
        USER_DENIED_MEDIA_ACCESS: 'User Denied Media Access',
        BAD_MEDIA_DESCRIPTION: 'Bad Media Description',
        RTP_TIMEOUT: 'RTP Timeout'
      },
      SIP_ERROR_CAUSES: {
        REDIRECTED: [300, 301, 302, 305, 380],
        BUSY: [486, 600],
        REJECTED: [403, 603],
        NOT_FOUND: [404, 604],
        UNAVAILABLE: [480, 410, 408, 430],
        ADDRESS_INCOMPLETE: [484, 424],
        INCOMPATIBLE_SDP: [488, 606],
        AUTHENTICATION_ERROR: [401, 407]
      },
      ACK: 'ACK',
      BYE: 'BYE',
      CANCEL: 'CANCEL',
      INFO: 'INFO',
      INVITE: 'INVITE',
      MESSAGE: 'MESSAGE',
      NOTIFY: 'NOTIFY',
      OPTIONS: 'OPTIONS',
      REGISTER: 'REGISTER',
      REFER: 'REFER',
      UPDATE: 'UPDATE',
      SUBSCRIBE: 'SUBSCRIBE',

      REASON_PHRASE: {
        100: 'Trying',
        180: 'Ringing',
        181: 'Call Is Being Forwarded',
        182: 'Queued',
        183: 'Session Progress',
        199: 'Early Dialog Terminated',
        200: 'OK',
        202: 'Accepted',
        204: 'No Notification',
        300: 'Multiple Choices',
        301: 'Moved Permanently',
        302: 'Moved Temporarily',
        305: 'Use Proxy',
        380: 'Alternative Service',
        400: 'Bad Request',
        401: 'Unauthorized',
        402: 'Payment Required',
        403: 'Forbidden',
        404: 'Not Found',
        405: 'Method Not Allowed',
        406: 'Not Acceptable',
        407: 'Proxy Authentication Required',
        408: 'Request Timeout',
        410: 'Gone',
        412: 'Conditional Request Failed',
        413: 'Request Entity Too Large',
        414: 'Request-URI Too Long',
        415: 'Unsupported Media Type',
        416: 'Unsupported URI Scheme',
        417: 'Unknown Resource-Priority',
        420: 'Bad Extension',
        421: 'Extension Required',
        422: 'Session Interval Too Small',
        423: 'Interval Too Brief',
        424: 'Bad Location Information',
        428: 'Use Identity Header',
        429: 'Provide Referrer Identity',
        430: 'Flow Failed',
        433: 'Anonymity Disallowed',
        436: 'Bad Identity-Info',
        437: 'Unsupported Certificate',
        438: 'Invalid Identity Header',
        439: 'First Hop Lacks Outbound Support',
        440: 'Max-Breadth Exceeded',
        469: 'Bad Info Package',
        470: 'Consent Needed',
        478: 'Unresolvable Destination',
        480: 'Temporarily Unavailable',
        481: 'Call/Transaction Does Not Exist',
        482: 'Loop Detected',
        483: 'Too Many Hops',
        484: 'Address Incomplete',
        485: 'Ambiguous',
        486: 'Busy Here',
        487: 'Request Terminated',
        488: 'Not Acceptable Here',
        489: 'Bad Event',
        491: 'Request Pending',
        493: 'Undecipherable',
        494: 'Security Agreement Required',
        500: 'JsSIP Internal Error',
        501: 'Not Implemented',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        504: 'Server Time-out',
        505: 'Version Not Supported',
        513: 'Message Too Large',
        580: 'Precondition Failure',
        600: 'Busy Everywhere',
        603: 'Decline',
        604: 'Does Not Exist Anywhere',
        606: 'Not Acceptable'
      },
      ALLOWED_METHODS: 'INVITE,ACK,CANCEL,BYE,UPDATE,MESSAGE,OPTIONS,REFER,INFO,NOTIFY',
      ACCEPTED_BODY_TYPES: 'application/sdp, application/dtmf-relay',
      MAX_FORWARDS: 69,
      SESSION_EXPIRES: 90,
      MIN_SESSION_EXPIRES: 60,
      CONNECTION_RECOVERY_MAX_INTERVAL: 30,
      CONNECTION_RECOVERY_MIN_INTERVAL: 2
    };
  },{"../package.json":38}],3:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var SIPMessage = require('./SIPMessage');

    var JsSIP_C = require('./Constants');

    var Transactions = require('./Transactions');

    var Dialog_RequestSender = require('./Dialog/RequestSender');

    var Utils = require('./Utils');

    var debug = require('debug')('JsSIP:Dialog');

    var C = {
      STATUS_EARLY: 1,
      STATUS_CONFIRMED: 2
    };

    module.exports = /*#__PURE__*/function () {
      _createClass(Dialog, null, [{
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      function Dialog(owner, message, type) {
        var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : C.STATUS_CONFIRMED;

        _classCallCheck(this, Dialog);

        this._owner = owner;
        this._ua = owner._ua;
        this._uac_pending_reply = false;
        this._uas_pending_reply = false;

        if (!message.hasHeader('contact')) {
          return {
            error: 'unable to create a Dialog without Contact header field'
          };
        }

        if (message instanceof SIPMessage.IncomingResponse) {
          state = message.status_code < 200 ? C.STATUS_EARLY : C.STATUS_CONFIRMED;
        }

        var contact = message.parseHeader('contact');

        if (type === 'UAS') {
          this._id = {
            call_id: message.call_id,
            local_tag: message.to_tag,
            remote_tag: message.from_tag,
            toString: function toString() {
              return this.call_id + this.local_tag + this.remote_tag;
            }
          };
          this._state = state;
          this._remote_seqnum = message.cseq;
          this._local_uri = message.parseHeader('to').uri;
          this._remote_uri = message.parseHeader('from').uri;
          this._remote_target = contact.uri;
          this._route_set = message.getHeaders('record-route');
          this._ack_seqnum = this._remote_seqnum;
        }
        else if (type === 'UAC') {
          this._id = {
            call_id: message.call_id,
            local_tag: message.from_tag,
            remote_tag: message.to_tag,
            toString: function toString() {
              return this.call_id + this.local_tag + this.remote_tag;
            }
          };
          this._state = state;
          this._local_seqnum = message.cseq;
          this._local_uri = message.parseHeader('from').uri;
          this._remote_uri = message.parseHeader('to').uri;
          this._remote_target = contact.uri;
          this._route_set = message.getHeaders('record-route').reverse();
          this._ack_seqnum = null;
        }

        this._ua.newDialog(this);

        debug("new ".concat(type, " dialog created with status ").concat(this._state === C.STATUS_EARLY ? 'EARLY' : 'CONFIRMED'));
      }

      _createClass(Dialog, [{
        key: "update",
        value: function update(message, type) {
          this._state = C.STATUS_CONFIRMED;
          debug("dialog ".concat(this._id.toString(), "  changed to CONFIRMED state"));

          if (type === 'UAC') {
            this._route_set = message.getHeaders('record-route').reverse();
          }
        }
      }, {
        key: "terminate",
        value: function terminate() {
          debug("dialog ".concat(this._id.toString(), " deleted"));

          this._ua.destroyDialog(this);
        }
      }, {
        key: "sendRequest",
        value: function sendRequest(method) {
          var _this = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = Utils.cloneObject(options.eventHandlers);
          var body = options.body || null;

          var request = this._createRequest(method, extraHeaders, body);


          eventHandlers.onAuthenticated = function () {
            _this._local_seqnum += 1;
          };

          var request_sender = new Dialog_RequestSender(this, request, eventHandlers);
          request_sender.send();

          return request;
        }
      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          if (!this._checkInDialogRequest(request)) {
            return;
          }


          if (request.method === JsSIP_C.ACK && this._ack_seqnum !== null) {
            this._ack_seqnum = null;
          }
          else if (request.method === JsSIP_C.INVITE) {
            this._ack_seqnum = request.cseq;
          }

          this._owner.receiveRequest(request);
        }

      }, {
        key: "_createRequest",
        value: function _createRequest(method, extraHeaders, body) {
          extraHeaders = Utils.cloneArray(extraHeaders);

          if (!this._local_seqnum) {
            this._local_seqnum = Math.floor(Math.random() * 10000);
          }

          var cseq = method === JsSIP_C.CANCEL || method === JsSIP_C.ACK ? this._local_seqnum : this._local_seqnum += 1;
          var request = new SIPMessage.OutgoingRequest(method, this._remote_target, this._ua, {
            'cseq': cseq,
            'call_id': this._id.call_id,
            'from_uri': this._local_uri,
            'from_tag': this._id.local_tag,
            'to_uri': this._remote_uri,
            'to_tag': this._id.remote_tag,
            'route_set': this._route_set
          }, extraHeaders, body);
          return request;
        }

      }, {
        key: "_checkInDialogRequest",
        value: function _checkInDialogRequest(request) {
          var _this2 = this;

          if (!this._remote_seqnum) {
            this._remote_seqnum = request.cseq;
          } else if (request.cseq < this._remote_seqnum) {
            if (request.method === JsSIP_C.ACK) {

              if (this._ack_seqnum === null || request.cseq !== this._ack_seqnum) {
                return false;
              }
            } else {
              request.reply(500);
              return false;
            }
          } else if (request.cseq > this._remote_seqnum) {
            this._remote_seqnum = request.cseq;
          }


          if (request.method === JsSIP_C.INVITE || request.method === JsSIP_C.UPDATE && request.body) {
            if (this._uac_pending_reply === true) {
              request.reply(491);
            } else if (this._uas_pending_reply === true) {
              var retryAfter = (Math.random() * 10 | 0) + 1;
              request.reply(500, null, ["Retry-After:".concat(retryAfter)]);
              return false;
            } else {
              this._uas_pending_reply = true;

              var stateChanged = function stateChanged() {
                if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED || request.server_transaction.state === Transactions.C.STATUS_COMPLETED || request.server_transaction.state === Transactions.C.STATUS_TERMINATED) {
                  request.server_transaction.removeListener('stateChanged', stateChanged);
                  _this2._uas_pending_reply = false;
                }
              };

              request.server_transaction.on('stateChanged', stateChanged);
            }

            if (request.hasHeader('contact')) {
              request.server_transaction.on('stateChanged', function () {
                if (request.server_transaction.state === Transactions.C.STATUS_ACCEPTED) {
                  _this2._remote_target = request.parseHeader('contact').uri;
                }
              });
            }
          } else if (request.method === JsSIP_C.NOTIFY) {
            if (request.hasHeader('contact')) {
              request.server_transaction.on('stateChanged', function () {
                if (request.server_transaction.state === Transactions.C.STATUS_COMPLETED) {
                  _this2._remote_target = request.parseHeader('contact').uri;
                }
              });
            }
          }

          return true;
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }, {
        key: "local_seqnum",
        get: function get() {
          return this._local_seqnum;
        },
        set: function set(num) {
          this._local_seqnum = num;
        }
      }, {
        key: "owner",
        get: function get() {
          return this._owner;
        }
      }, {
        key: "uac_pending_reply",
        get: function get() {
          return this._uac_pending_reply;
        },
        set: function set(pending) {
          this._uac_pending_reply = pending;
        }
      }, {
        key: "uas_pending_reply",
        get: function get() {
          return this._uas_pending_reply;
        }
      }]);

      return Dialog;
    }();
  },{"./Constants":2,"./Dialog/RequestSender":4,"./SIPMessage":19,"./Transactions":22,"./Utils":26,"debug":30}],4:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var JsSIP_C = require('../Constants');

    var Transactions = require('../Transactions');

    var RTCSession = require('../RTCSession');

    var RequestSender = require('../RequestSender');


    var EventHandlers = {
      onRequestTimeout: function onRequestTimeout() {},
      onTransportError: function onTransportError() {},
      onSuccessResponse: function onSuccessResponse() {},
      onErrorResponse: function onErrorResponse() {},
      onAuthenticated: function onAuthenticated() {},
      onDialogError: function onDialogError() {}
    };

    module.exports = /*#__PURE__*/function () {
      function DialogRequestSender(dialog, request, eventHandlers) {
        _classCallCheck(this, DialogRequestSender);

        this._dialog = dialog;
        this._ua = dialog._ua;
        this._request = request;
        this._eventHandlers = eventHandlers;

        this._reattempt = false;
        this._reattemptTimer = null;

        for (var handler in EventHandlers) {
          if (Object.prototype.hasOwnProperty.call(EventHandlers, handler)) {
            if (!this._eventHandlers[handler]) {
              this._eventHandlers[handler] = EventHandlers[handler];
            }
          }
        }
      }

      _createClass(DialogRequestSender, [{
        key: "send",
        value: function send() {
          var _this = this;

          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this._eventHandlers.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this._eventHandlers.onTransportError();
            },
            onAuthenticated: function onAuthenticated(request) {
              _this._eventHandlers.onAuthenticated(request);
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this._receiveResponse(response);
            }
          });
          request_sender.send();

          if ((this._request.method === JsSIP_C.INVITE || this._request.method === JsSIP_C.UPDATE && this._request.body) && request_sender.clientTransaction.state !== Transactions.C.STATUS_TERMINATED) {
            this._dialog.uac_pending_reply = true;

            var stateChanged = function stateChanged() {
              if (request_sender.clientTransaction.state === Transactions.C.STATUS_ACCEPTED || request_sender.clientTransaction.state === Transactions.C.STATUS_COMPLETED || request_sender.clientTransaction.state === Transactions.C.STATUS_TERMINATED) {
                request_sender.clientTransaction.removeListener('stateChanged', stateChanged);
                _this._dialog.uac_pending_reply = false;
              }
            };

            request_sender.clientTransaction.on('stateChanged', stateChanged);
          }
        }
      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          var _this2 = this;

          if (response.status_code === 408 || response.status_code === 481) {
            this._eventHandlers.onDialogError(response);
          } else if (response.method === JsSIP_C.INVITE && response.status_code === 491) {
            if (this._reattempt) {
              if (response.status_code >= 200 && response.status_code < 300) {
                this._eventHandlers.onSuccessResponse(response);
              } else if (response.status_code >= 300) {
                this._eventHandlers.onErrorResponse(response);
              }
            } else {
              this._request.cseq.value = this._dialog.local_seqnum += 1;
              this._reattemptTimer = setTimeout(function () {
                if (_this2._dialog.owner.status !== RTCSession.C.STATUS_TERMINATED) {
                  _this2._reattempt = true;

                  _this2._request_sender.send();
                }
              }, 1000);
            }
          } else if (response.status_code >= 200 && response.status_code < 300) {
            this._eventHandlers.onSuccessResponse(response);
          } else if (response.status_code >= 300) {
            this._eventHandlers.onErrorResponse(response);
          }
        }
      }, {
        key: "request",
        get: function get() {
          return this._request;
        }
      }]);

      return DialogRequestSender;
    }();
  },{"../Constants":2,"../RTCSession":12,"../RequestSender":18,"../Transactions":22}],5:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var Utils = require('./Utils');

    var debug = require('debug')('JsSIP:DigestAuthentication');

    var debugerror = require('debug')('JsSIP:ERROR:DigestAuthentication');

    debugerror.log = console.warn.bind(console);

    module.exports = /*#__PURE__*/function () {
      function DigestAuthentication(credentials) {
        _classCallCheck(this, DigestAuthentication);

        this._credentials = credentials;
        this._cnonce = null;
        this._nc = 0;
        this._ncHex = '00000000';
        this._algorithm = null;
        this._realm = null;
        this._nonce = null;
        this._opaque = null;
        this._stale = null;
        this._qop = null;
        this._method = null;
        this._uri = null;
        this._ha1 = null;
        this._response = null;
      }

      _createClass(DigestAuthentication, [{
        key: "get",
        value: function get(parameter) {
          switch (parameter) {
            case 'realm':
              return this._realm;

            case 'ha1':
              return this._ha1;

            default:
              debugerror('get() | cannot get "%s" parameter', parameter);
              return undefined;
          }
        }
        /**
         * Performs Digest authentication given a SIP request and the challenge
         * received in a response to that request.
         * Returns true if auth was successfully generated, false otherwise.
         */

      }, {
        key: "authenticate",
        value: function authenticate(_ref, challenge)
          /* test interface */
        {
          var method = _ref.method,
            ruri = _ref.ruri,
            body = _ref.body;
          var cnonce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          this._algorithm = challenge.algorithm;
          this._realm = challenge.realm;
          this._nonce = challenge.nonce;
          this._opaque = challenge.opaque;
          this._stale = challenge.stale;

          if (this._algorithm) {
            if (this._algorithm !== 'MD5') {
              debugerror('authenticate() | challenge with Digest algorithm different than "MD5", authentication aborted');
              return false;
            }
          } else {
            this._algorithm = 'MD5';
          }

          if (!this._nonce) {
            debugerror('authenticate() | challenge without Digest nonce, authentication aborted');
            return false;
          }

          if (!this._realm) {
            debugerror('authenticate() | challenge without Digest realm, authentication aborted');
            return false;
          }


          if (!this._credentials.password) {
            if (!this._credentials.ha1) {
              debugerror('authenticate() | no plain SIP password nor ha1 provided, authentication aborted');
              return false;
            }


            if (this._credentials.realm !== this._realm) {
              debugerror('authenticate() | no plain SIP password, and stored `realm` does not match the given `realm`, cannot authenticate [stored:"%s", given:"%s"]', this._credentials.realm, this._realm);
              return false;
            }
          }


          if (challenge.qop) {
            if (challenge.qop.indexOf('auth-int') > -1) {
              this._qop = 'auth-int';
            } else if (challenge.qop.indexOf('auth') > -1) {
              this._qop = 'auth';
            } else {
              debugerror('authenticate() | challenge without Digest qop different than "auth" or "auth-int", authentication aborted');
              return false;
            }
          } else {
            this._qop = null;
          }


          this._method = method;
          this._uri = ruri;
          this._cnonce = cnonce || Utils.createRandomToken(12);
          this._nc += 1;
          var hex = Number(this._nc).toString(16);
          this._ncHex = '00000000'.substr(0, 8 - hex.length) + hex;

          if (this._nc === 4294967296) {
            this._nc = 1;
            this._ncHex = '00000001';
          }


          if (this._credentials.password) {
            this._ha1 = Utils.calculateMD5("".concat(this._credentials.username, ":").concat(this._realm, ":").concat(this._credentials.password));
          }
          else {
            this._ha1 = this._credentials.ha1;
          }

          var a2;
          var ha2;

          if (this._qop === 'auth') {
            a2 = "".concat(this._method, ":").concat(this._uri);
            ha2 = Utils.calculateMD5(a2);
            debug('authenticate() | using qop=auth [a2:"%s"]', a2);

            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(this._ncHex, ":").concat(this._cnonce, ":auth:").concat(ha2));
          } else if (this._qop === 'auth-int') {

            a2 = "".concat(this._method, ":").concat(this._uri, ":").concat(Utils.calculateMD5(body ? body : ''));
            ha2 = Utils.calculateMD5(a2);
            debug('authenticate() | using qop=auth-int [a2:"%s"]', a2);
            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(this._ncHex, ":").concat(this._cnonce, ":auth-int:").concat(ha2));
          } else if (this._qop === null) {
            a2 = "".concat(this._method, ":").concat(this._uri);
            ha2 = Utils.calculateMD5(a2);
            debug('authenticate() | using qop=null [a2:"%s"]', a2);

            this._response = Utils.calculateMD5("".concat(this._ha1, ":").concat(this._nonce, ":").concat(ha2));
          }

          debug('authenticate() | response generated');
          return true;
        }
        /**
         * Return the Proxy-Authorization or WWW-Authorization header value.
         */

      }, {
        key: "toString",
        value: function toString() {
          var auth_params = [];

          if (!this._response) {
            throw new Error('response field does not exist, cannot generate Authorization header');
          }

          auth_params.push("algorithm=".concat(this._algorithm));
          auth_params.push("username=\"".concat(this._credentials.username, "\""));
          auth_params.push("realm=\"".concat(this._realm, "\""));
          auth_params.push("nonce=\"".concat(this._nonce, "\""));
          auth_params.push("uri=\"".concat(this._uri, "\""));
          auth_params.push("response=\"".concat(this._response, "\""));

          if (this._opaque) {
            auth_params.push("opaque=\"".concat(this._opaque, "\""));
          }

          if (this._qop) {
            auth_params.push("qop=".concat(this._qop));
            auth_params.push("cnonce=\"".concat(this._cnonce, "\""));
            auth_params.push("nc=".concat(this._ncHex));
          }

          return "Digest ".concat(auth_params.join(', '));
        }
      }]);

      return DigestAuthentication;
    }();
  },{"./Utils":26,"debug":30}],6:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

    function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    var ConfigurationError = /*#__PURE__*/function (_Error) {
      _inherits(ConfigurationError, _Error);

      var _super = _createSuper(ConfigurationError);

      function ConfigurationError(parameter, value) {
        var _this;

        _classCallCheck(this, ConfigurationError);

        _this = _super.call(this);
        _this.code = 1;
        _this.name = 'CONFIGURATION_ERROR';
        _this.parameter = parameter;
        _this.value = value;
        _this.message = !_this.value ? "Missing parameter: ".concat(_this.parameter) : "Invalid value ".concat(JSON.stringify(_this.value), " for parameter \"").concat(_this.parameter, "\"");
        return _this;
      }

      return ConfigurationError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    var InvalidStateError = /*#__PURE__*/function (_Error2) {
      _inherits(InvalidStateError, _Error2);

      var _super2 = _createSuper(InvalidStateError);

      function InvalidStateError(status) {
        var _this2;

        _classCallCheck(this, InvalidStateError);

        _this2 = _super2.call(this);
        _this2.code = 2;
        _this2.name = 'INVALID_STATE_ERROR';
        _this2.status = status;
        _this2.message = "Invalid status: ".concat(status);
        return _this2;
      }

      return InvalidStateError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    var NotSupportedError = /*#__PURE__*/function (_Error3) {
      _inherits(NotSupportedError, _Error3);

      var _super3 = _createSuper(NotSupportedError);

      function NotSupportedError(message) {
        var _this3;

        _classCallCheck(this, NotSupportedError);

        _this3 = _super3.call(this);
        _this3.code = 3;
        _this3.name = 'NOT_SUPPORTED_ERROR';
        _this3.message = message;
        return _this3;
      }

      return NotSupportedError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    var NotReadyError = /*#__PURE__*/function (_Error4) {
      _inherits(NotReadyError, _Error4);

      var _super4 = _createSuper(NotReadyError);

      function NotReadyError(message) {
        var _this4;

        _classCallCheck(this, NotReadyError);

        _this4 = _super4.call(this);
        _this4.code = 4;
        _this4.name = 'NOT_READY_ERROR';
        _this4.message = message;
        return _this4;
      }

      return NotReadyError;
    }( /*#__PURE__*/_wrapNativeSuper(Error));

    module.exports = {
      ConfigurationError: ConfigurationError,
      InvalidStateError: InvalidStateError,
      NotSupportedError: NotSupportedError,
      NotReadyError: NotReadyError
    };
  },{}],7:[function(require,module,exports){
    "use strict";

    module.exports = function () {

      function quote(s) {

        return '"' + s.replace(/\\/g, '\\\\')
          .replace(/"/g, '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g, '\\t')
          .replace(/\n/g, '\\n')
          .replace(/\f/g, '\\f')
          .replace(/\r/g, '\\r')
          .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape) + '"';
      }

      var result = {

        parse: function parse(input, startRule) {
          var parseFunctions = {
            "CRLF": parse_CRLF,
            "DIGIT": parse_DIGIT,
            "ALPHA": parse_ALPHA,
            "HEXDIG": parse_HEXDIG,
            "WSP": parse_WSP,
            "OCTET": parse_OCTET,
            "DQUOTE": parse_DQUOTE,
            "SP": parse_SP,
            "HTAB": parse_HTAB,
            "alphanum": parse_alphanum,
            "reserved": parse_reserved,
            "unreserved": parse_unreserved,
            "mark": parse_mark,
            "escaped": parse_escaped,
            "LWS": parse_LWS,
            "SWS": parse_SWS,
            "HCOLON": parse_HCOLON,
            "TEXT_UTF8_TRIM": parse_TEXT_UTF8_TRIM,
            "TEXT_UTF8char": parse_TEXT_UTF8char,
            "UTF8_NONASCII": parse_UTF8_NONASCII,
            "UTF8_CONT": parse_UTF8_CONT,
            "LHEX": parse_LHEX,
            "token": parse_token,
            "token_nodot": parse_token_nodot,
            "separators": parse_separators,
            "word": parse_word,
            "STAR": parse_STAR,
            "SLASH": parse_SLASH,
            "EQUAL": parse_EQUAL,
            "LPAREN": parse_LPAREN,
            "RPAREN": parse_RPAREN,
            "RAQUOT": parse_RAQUOT,
            "LAQUOT": parse_LAQUOT,
            "COMMA": parse_COMMA,
            "SEMI": parse_SEMI,
            "COLON": parse_COLON,
            "LDQUOT": parse_LDQUOT,
            "RDQUOT": parse_RDQUOT,
            "comment": parse_comment,
            "ctext": parse_ctext,
            "quoted_string": parse_quoted_string,
            "quoted_string_clean": parse_quoted_string_clean,
            "qdtext": parse_qdtext,
            "quoted_pair": parse_quoted_pair,
            "SIP_URI_noparams": parse_SIP_URI_noparams,
            "SIP_URI": parse_SIP_URI,
            "uri_scheme": parse_uri_scheme,
            "uri_scheme_sips": parse_uri_scheme_sips,
            "uri_scheme_sip": parse_uri_scheme_sip,
            "userinfo": parse_userinfo,
            "user": parse_user,
            "user_unreserved": parse_user_unreserved,
            "password": parse_password,
            "hostport": parse_hostport,
            "host": parse_host,
            "hostname": parse_hostname,
            "domainlabel": parse_domainlabel,
            "toplabel": parse_toplabel,
            "IPv6reference": parse_IPv6reference,
            "IPv6address": parse_IPv6address,
            "h16": parse_h16,
            "ls32": parse_ls32,
            "IPv4address": parse_IPv4address,
            "dec_octet": parse_dec_octet,
            "port": parse_port,
            "uri_parameters": parse_uri_parameters,
            "uri_parameter": parse_uri_parameter,
            "transport_param": parse_transport_param,
            "user_param": parse_user_param,
            "method_param": parse_method_param,
            "ttl_param": parse_ttl_param,
            "maddr_param": parse_maddr_param,
            "lr_param": parse_lr_param,
            "other_param": parse_other_param,
            "pname": parse_pname,
            "pvalue": parse_pvalue,
            "paramchar": parse_paramchar,
            "param_unreserved": parse_param_unreserved,
            "headers": parse_headers,
            "header": parse_header,
            "hname": parse_hname,
            "hvalue": parse_hvalue,
            "hnv_unreserved": parse_hnv_unreserved,
            "Request_Response": parse_Request_Response,
            "Request_Line": parse_Request_Line,
            "Request_URI": parse_Request_URI,
            "absoluteURI": parse_absoluteURI,
            "hier_part": parse_hier_part,
            "net_path": parse_net_path,
            "abs_path": parse_abs_path,
            "opaque_part": parse_opaque_part,
            "uric": parse_uric,
            "uric_no_slash": parse_uric_no_slash,
            "path_segments": parse_path_segments,
            "segment": parse_segment,
            "param": parse_param,
            "pchar": parse_pchar,
            "scheme": parse_scheme,
            "authority": parse_authority,
            "srvr": parse_srvr,
            "reg_name": parse_reg_name,
            "query": parse_query,
            "SIP_Version": parse_SIP_Version,
            "INVITEm": parse_INVITEm,
            "ACKm": parse_ACKm,
            "OPTIONSm": parse_OPTIONSm,
            "BYEm": parse_BYEm,
            "CANCELm": parse_CANCELm,
            "REGISTERm": parse_REGISTERm,
            "SUBSCRIBEm": parse_SUBSCRIBEm,
            "NOTIFYm": parse_NOTIFYm,
            "REFERm": parse_REFERm,
            "Method": parse_Method,
            "Status_Line": parse_Status_Line,
            "Status_Code": parse_Status_Code,
            "extension_code": parse_extension_code,
            "Reason_Phrase": parse_Reason_Phrase,
            "Allow_Events": parse_Allow_Events,
            "Call_ID": parse_Call_ID,
            "Contact": parse_Contact,
            "contact_param": parse_contact_param,
            "name_addr": parse_name_addr,
            "display_name": parse_display_name,
            "contact_params": parse_contact_params,
            "c_p_q": parse_c_p_q,
            "c_p_expires": parse_c_p_expires,
            "delta_seconds": parse_delta_seconds,
            "qvalue": parse_qvalue,
            "generic_param": parse_generic_param,
            "gen_value": parse_gen_value,
            "Content_Disposition": parse_Content_Disposition,
            "disp_type": parse_disp_type,
            "disp_param": parse_disp_param,
            "handling_param": parse_handling_param,
            "Content_Encoding": parse_Content_Encoding,
            "Content_Length": parse_Content_Length,
            "Content_Type": parse_Content_Type,
            "media_type": parse_media_type,
            "m_type": parse_m_type,
            "discrete_type": parse_discrete_type,
            "composite_type": parse_composite_type,
            "extension_token": parse_extension_token,
            "x_token": parse_x_token,
            "m_subtype": parse_m_subtype,
            "m_parameter": parse_m_parameter,
            "m_value": parse_m_value,
            "CSeq": parse_CSeq,
            "CSeq_value": parse_CSeq_value,
            "Expires": parse_Expires,
            "Event": parse_Event,
            "event_type": parse_event_type,
            "From": parse_From,
            "from_param": parse_from_param,
            "tag_param": parse_tag_param,
            "Max_Forwards": parse_Max_Forwards,
            "Min_Expires": parse_Min_Expires,
            "Name_Addr_Header": parse_Name_Addr_Header,
            "Proxy_Authenticate": parse_Proxy_Authenticate,
            "challenge": parse_challenge,
            "other_challenge": parse_other_challenge,
            "auth_param": parse_auth_param,
            "digest_cln": parse_digest_cln,
            "realm": parse_realm,
            "realm_value": parse_realm_value,
            "domain": parse_domain,
            "URI": parse_URI,
            "nonce": parse_nonce,
            "nonce_value": parse_nonce_value,
            "opaque": parse_opaque,
            "stale": parse_stale,
            "algorithm": parse_algorithm,
            "qop_options": parse_qop_options,
            "qop_value": parse_qop_value,
            "Proxy_Require": parse_Proxy_Require,
            "Record_Route": parse_Record_Route,
            "rec_route": parse_rec_route,
            "Reason": parse_Reason,
            "reason_param": parse_reason_param,
            "reason_cause": parse_reason_cause,
            "Require": parse_Require,
            "Route": parse_Route,
            "route_param": parse_route_param,
            "Subscription_State": parse_Subscription_State,
            "substate_value": parse_substate_value,
            "subexp_params": parse_subexp_params,
            "event_reason_value": parse_event_reason_value,
            "Subject": parse_Subject,
            "Supported": parse_Supported,
            "To": parse_To,
            "to_param": parse_to_param,
            "Via": parse_Via,
            "via_param": parse_via_param,
            "via_params": parse_via_params,
            "via_ttl": parse_via_ttl,
            "via_maddr": parse_via_maddr,
            "via_received": parse_via_received,
            "via_branch": parse_via_branch,
            "response_port": parse_response_port,
            "sent_protocol": parse_sent_protocol,
            "protocol_name": parse_protocol_name,
            "transport": parse_transport,
            "sent_by": parse_sent_by,
            "via_host": parse_via_host,
            "via_port": parse_via_port,
            "ttl": parse_ttl,
            "WWW_Authenticate": parse_WWW_Authenticate,
            "Session_Expires": parse_Session_Expires,
            "s_e_expires": parse_s_e_expires,
            "s_e_params": parse_s_e_params,
            "s_e_refresher": parse_s_e_refresher,
            "extension_header": parse_extension_header,
            "header_value": parse_header_value,
            "message_body": parse_message_body,
            "uuid_URI": parse_uuid_URI,
            "uuid": parse_uuid,
            "hex4": parse_hex4,
            "hex8": parse_hex8,
            "hex12": parse_hex12,
            "Refer_To": parse_Refer_To,
            "Replaces": parse_Replaces,
            "call_id": parse_call_id,
            "replaces_param": parse_replaces_param,
            "to_tag": parse_to_tag,
            "from_tag": parse_from_tag,
            "early_flag": parse_early_flag
          };

          if (startRule !== undefined) {
            if (parseFunctions[startRule] === undefined) {
              throw new Error("Invalid rule name: " + quote(startRule) + ".");
            }
          } else {
            startRule = "CRLF";
          }

          var pos = 0;
          var reportFailures = 0;
          var rightmostFailuresPos = 0;
          var rightmostFailuresExpected = [];

          function padLeft(input, padding, length) {
            var result = input;
            var padLength = length - input.length;

            for (var i = 0; i < padLength; i++) {
              result = padding + result;
            }

            return result;
          }

          function escape(ch) {
            var charCode = ch.charCodeAt(0);
            var escapeChar;
            var length;

            if (charCode <= 0xFF) {
              escapeChar = 'x';
              length = 2;
            } else {
              escapeChar = 'u';
              length = 4;
            }

            return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
          }

          function matchFailed(failure) {
            if (pos < rightmostFailuresPos) {
              return;
            }

            if (pos > rightmostFailuresPos) {
              rightmostFailuresPos = pos;
              rightmostFailuresExpected = [];
            }

            rightmostFailuresExpected.push(failure);
          }

          function parse_CRLF() {
            var result0;

            if (input.substr(pos, 2) === "\r\n") {
              result0 = "\r\n";
              pos += 2;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"\\r\\n\"");
              }
            }

            return result0;
          }

          function parse_DIGIT() {
            var result0;

            if (/^[0-9]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }

            return result0;
          }

          function parse_ALPHA() {
            var result0;

            if (/^[a-zA-Z]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[a-zA-Z]");
              }
            }

            return result0;
          }

          function parse_HEXDIG() {
            var result0;

            if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[0-9a-fA-F]");
              }
            }

            return result0;
          }

          function parse_WSP() {
            var result0;
            result0 = parse_SP();

            if (result0 === null) {
              result0 = parse_HTAB();
            }

            return result0;
          }

          function parse_OCTET() {
            var result0;

            if (/^[\0-\xFF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[\\0-\\xFF]");
              }
            }

            return result0;
          }

          function parse_DQUOTE() {
            var result0;

            if (/^["]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[\"]");
              }
            }

            return result0;
          }

          function parse_SP() {
            var result0;

            if (input.charCodeAt(pos) === 32) {
              result0 = " ";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }

            return result0;
          }

          function parse_HTAB() {
            var result0;

            if (input.charCodeAt(pos) === 9) {
              result0 = "\t";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"\\t\"");
              }
            }

            return result0;
          }

          function parse_alphanum() {
            var result0;

            if (/^[a-zA-Z0-9]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[a-zA-Z0-9]");
              }
            }

            return result0;
          }

          function parse_reserved() {
            var result0;

            if (input.charCodeAt(pos) === 59) {
              result0 = ";";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 47) {
                result0 = "/";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 63) {
                  result0 = "?";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"?\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 58) {
                    result0 = ":";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 64) {
                      result0 = "@";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"@\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 38) {
                        result0 = "&";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"&\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 61) {
                          result0 = "=";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"=\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result0 = "+";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }

                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 36) {
                              result0 = "$";
                              pos++;
                            } else {
                              result0 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"$\"");
                              }
                            }

                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 44) {
                                result0 = ",";
                                pos++;
                              } else {
                                result0 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\",\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_unreserved() {
            var result0;
            result0 = parse_alphanum();

            if (result0 === null) {
              result0 = parse_mark();
            }

            return result0;
          }

          function parse_mark() {
            var result0;

            if (input.charCodeAt(pos) === 45) {
              result0 = "-";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 95) {
                result0 = "_";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"_\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result0 = ".";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result0 = "!";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 126) {
                      result0 = "~";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"~\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result0 = "*";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 39) {
                          result0 = "'";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"'\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 40) {
                            result0 = "(";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"(\"");
                            }
                          }

                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 41) {
                              result0 = ")";
                              pos++;
                            } else {
                              result0 = null;

                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_escaped() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.charCodeAt(pos) === 37) {
              result0 = "%";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_HEXDIG();

              if (result1 !== null) {
                result2 = parse_HEXDIG();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, escaped) {
                return escaped.join('');
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_LWS() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            pos2 = pos;
            result0 = [];
            result1 = parse_WSP();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_WSP();
            }

            if (result0 !== null) {
              result1 = parse_CRLF();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos2;
              }
            } else {
              result0 = null;
              pos = pos2;
            }

            result0 = result0 !== null ? result0 : "";

            if (result0 !== null) {
              result2 = parse_WSP();

              if (result2 !== null) {
                result1 = [];

                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_WSP();
                }
              } else {
                result1 = null;
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return " ";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_SWS() {
            var result0;
            result0 = parse_LWS();
            result0 = result0 !== null ? result0 : "";
            return result0;
          }

          function parse_HCOLON() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            result1 = parse_SP();

            if (result1 === null) {
              result1 = parse_HTAB();
            }

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_SP();

              if (result1 === null) {
                result1 = parse_HTAB();
              }
            }

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ':';
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_TEXT_UTF8_TRIM() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result1 = parse_TEXT_UTF8char();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_TEXT_UTF8char();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = [];
              result3 = parse_LWS();

              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_LWS();
              }

              if (result2 !== null) {
                result3 = parse_TEXT_UTF8char();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = [];
                result3 = parse_LWS();

                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_LWS();
                }

                if (result2 !== null) {
                  result3 = parse_TEXT_UTF8char();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_TEXT_UTF8char() {
            var result0;

            if (/^[!-~]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[!-~]");
              }
            }

            if (result0 === null) {
              result0 = parse_UTF8_NONASCII();
            }

            return result0;
          }

          function parse_UTF8_NONASCII() {
            var result0;

            if (/^[\x80-\uFFFF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[\\x80-\\uFFFF]");
              }
            }

            return result0;
          }

          function parse_UTF8_CONT() {
            var result0;

            if (/^[\x80-\xBF]/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[\\x80-\\xBF]");
              }
            }

            return result0;
          }

          function parse_LHEX() {
            var result0;
            result0 = parse_DIGIT();

            if (result0 === null) {
              if (/^[a-f]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("[a-f]");
                }
              }
            }

            return result0;
          }

          function parse_token() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();

            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }

              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"%\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"_\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"`\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"'\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"~\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 46) {
                      result1 = ".";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 33) {
                        result1 = "!";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"!\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 37) {
                          result1 = "%";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"%\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 42) {
                            result1 = "*";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"*\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 95) {
                              result1 = "_";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"_\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"+\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 96) {
                                  result1 = "`";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"`\"");
                                  }
                                }

                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 39) {
                                    result1 = "'";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"'\"");
                                    }
                                  }

                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 126) {
                                      result1 = "~";
                                      pos++;
                                    } else {
                                      result1 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\"~\"");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_token_nodot() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();

            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }

              if (result1 === null) {
                if (input.charCodeAt(pos) === 33) {
                  result1 = "!";
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"!\"");
                  }
                }

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 37) {
                    result1 = "%";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"%\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 42) {
                      result1 = "*";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"*\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 95) {
                        result1 = "_";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"_\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result1 = "+";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"+\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 96) {
                            result1 = "`";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"`\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 39) {
                              result1 = "'";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"'\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 126) {
                                result1 = "~";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"~\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 33) {
                      result1 = "!";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"!\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 37) {
                        result1 = "%";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"%\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 42) {
                          result1 = "*";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"*\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 95) {
                            result1 = "_";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"_\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 43) {
                              result1 = "+";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"+\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 96) {
                                result1 = "`";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"`\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 39) {
                                  result1 = "'";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"'\"");
                                  }
                                }

                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 126) {
                                    result1 = "~";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"~\"");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_separators() {
            var result0;

            if (input.charCodeAt(pos) === 40) {
              result0 = "(";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 41) {
                result0 = ")";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 60) {
                  result0 = "<";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"<\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 62) {
                    result0 = ">";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\">\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 64) {
                      result0 = "@";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"@\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 44) {
                        result0 = ",";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 59) {
                          result0 = ";";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\";\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 58) {
                            result0 = ":";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 92) {
                              result0 = "\\";
                              pos++;
                            } else {
                              result0 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"\\\\\"");
                              }
                            }

                            if (result0 === null) {
                              result0 = parse_DQUOTE();

                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 47) {
                                  result0 = "/";
                                  pos++;
                                } else {
                                  result0 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"/\"");
                                  }
                                }

                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 91) {
                                    result0 = "[";
                                    pos++;
                                  } else {
                                    result0 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"[\"");
                                    }
                                  }

                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 93) {
                                      result0 = "]";
                                      pos++;
                                    } else {
                                      result0 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\"]\"");
                                      }
                                    }

                                    if (result0 === null) {
                                      if (input.charCodeAt(pos) === 63) {
                                        result0 = "?";
                                        pos++;
                                      } else {
                                        result0 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\"?\"");
                                        }
                                      }

                                      if (result0 === null) {
                                        if (input.charCodeAt(pos) === 61) {
                                          result0 = "=";
                                          pos++;
                                        } else {
                                          result0 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\"=\"");
                                          }
                                        }

                                        if (result0 === null) {
                                          if (input.charCodeAt(pos) === 123) {
                                            result0 = "{";
                                            pos++;
                                          } else {
                                            result0 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\"{\"");
                                            }
                                          }

                                          if (result0 === null) {
                                            if (input.charCodeAt(pos) === 125) {
                                              result0 = "}";
                                              pos++;
                                            } else {
                                              result0 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\"}\"");
                                              }
                                            }

                                            if (result0 === null) {
                                              result0 = parse_SP();

                                              if (result0 === null) {
                                                result0 = parse_HTAB();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_word() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_alphanum();

            if (result1 === null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }

              if (result1 === null) {
                if (input.charCodeAt(pos) === 46) {
                  result1 = ".";
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 33) {
                    result1 = "!";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"!\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 37) {
                      result1 = "%";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"%\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 42) {
                        result1 = "*";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"*\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 95) {
                          result1 = "_";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"_\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 43) {
                            result1 = "+";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"+\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 96) {
                              result1 = "`";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"`\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 39) {
                                result1 = "'";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"'\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 126) {
                                  result1 = "~";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"~\"");
                                  }
                                }

                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 40) {
                                    result1 = "(";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"(\"");
                                    }
                                  }

                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 41) {
                                      result1 = ")";
                                      pos++;
                                    } else {
                                      result1 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                      }
                                    }

                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 60) {
                                        result1 = "<";
                                        pos++;
                                      } else {
                                        result1 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\"<\"");
                                        }
                                      }

                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 62) {
                                          result1 = ">";
                                          pos++;
                                        } else {
                                          result1 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\">\"");
                                          }
                                        }

                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result1 = ":";
                                            pos++;
                                          } else {
                                            result1 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 92) {
                                              result1 = "\\";
                                              pos++;
                                            } else {
                                              result1 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\"\\\\\"");
                                              }
                                            }

                                            if (result1 === null) {
                                              result1 = parse_DQUOTE();

                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 47) {
                                                  result1 = "/";
                                                  pos++;
                                                } else {
                                                  result1 = null;

                                                  if (reportFailures === 0) {
                                                    matchFailed("\"/\"");
                                                  }
                                                }

                                                if (result1 === null) {
                                                  if (input.charCodeAt(pos) === 91) {
                                                    result1 = "[";
                                                    pos++;
                                                  } else {
                                                    result1 = null;

                                                    if (reportFailures === 0) {
                                                      matchFailed("\"[\"");
                                                    }
                                                  }

                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 93) {
                                                      result1 = "]";
                                                      pos++;
                                                    } else {
                                                      result1 = null;

                                                      if (reportFailures === 0) {
                                                        matchFailed("\"]\"");
                                                      }
                                                    }

                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 63) {
                                                        result1 = "?";
                                                        pos++;
                                                      } else {
                                                        result1 = null;

                                                        if (reportFailures === 0) {
                                                          matchFailed("\"?\"");
                                                        }
                                                      }

                                                      if (result1 === null) {
                                                        if (input.charCodeAt(pos) === 123) {
                                                          result1 = "{";
                                                          pos++;
                                                        } else {
                                                          result1 = null;

                                                          if (reportFailures === 0) {
                                                            matchFailed("\"{\"");
                                                          }
                                                        }

                                                        if (result1 === null) {
                                                          if (input.charCodeAt(pos) === 125) {
                                                            result1 = "}";
                                                            pos++;
                                                          } else {
                                                            result1 = null;

                                                            if (reportFailures === 0) {
                                                              matchFailed("\"}\"");
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_alphanum();

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result1 = "-";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 46) {
                      result1 = ".";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\".\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 33) {
                        result1 = "!";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"!\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 37) {
                          result1 = "%";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"%\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 42) {
                            result1 = "*";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"*\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 95) {
                              result1 = "_";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"_\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"+\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 96) {
                                  result1 = "`";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"`\"");
                                  }
                                }

                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 39) {
                                    result1 = "'";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"'\"");
                                    }
                                  }

                                  if (result1 === null) {
                                    if (input.charCodeAt(pos) === 126) {
                                      result1 = "~";
                                      pos++;
                                    } else {
                                      result1 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\"~\"");
                                      }
                                    }

                                    if (result1 === null) {
                                      if (input.charCodeAt(pos) === 40) {
                                        result1 = "(";
                                        pos++;
                                      } else {
                                        result1 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\"(\"");
                                        }
                                      }

                                      if (result1 === null) {
                                        if (input.charCodeAt(pos) === 41) {
                                          result1 = ")";
                                          pos++;
                                        } else {
                                          result1 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\")\"");
                                          }
                                        }

                                        if (result1 === null) {
                                          if (input.charCodeAt(pos) === 60) {
                                            result1 = "<";
                                            pos++;
                                          } else {
                                            result1 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\"<\"");
                                            }
                                          }

                                          if (result1 === null) {
                                            if (input.charCodeAt(pos) === 62) {
                                              result1 = ">";
                                              pos++;
                                            } else {
                                              result1 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\">\"");
                                              }
                                            }

                                            if (result1 === null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result1 = ":";
                                                pos++;
                                              } else {
                                                result1 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result1 === null) {
                                                if (input.charCodeAt(pos) === 92) {
                                                  result1 = "\\";
                                                  pos++;
                                                } else {
                                                  result1 = null;

                                                  if (reportFailures === 0) {
                                                    matchFailed("\"\\\\\"");
                                                  }
                                                }

                                                if (result1 === null) {
                                                  result1 = parse_DQUOTE();

                                                  if (result1 === null) {
                                                    if (input.charCodeAt(pos) === 47) {
                                                      result1 = "/";
                                                      pos++;
                                                    } else {
                                                      result1 = null;

                                                      if (reportFailures === 0) {
                                                        matchFailed("\"/\"");
                                                      }
                                                    }

                                                    if (result1 === null) {
                                                      if (input.charCodeAt(pos) === 91) {
                                                        result1 = "[";
                                                        pos++;
                                                      } else {
                                                        result1 = null;

                                                        if (reportFailures === 0) {
                                                          matchFailed("\"[\"");
                                                        }
                                                      }

                                                      if (result1 === null) {
                                                        if (input.charCodeAt(pos) === 93) {
                                                          result1 = "]";
                                                          pos++;
                                                        } else {
                                                          result1 = null;

                                                          if (reportFailures === 0) {
                                                            matchFailed("\"]\"");
                                                          }
                                                        }

                                                        if (result1 === null) {
                                                          if (input.charCodeAt(pos) === 63) {
                                                            result1 = "?";
                                                            pos++;
                                                          } else {
                                                            result1 = null;

                                                            if (reportFailures === 0) {
                                                              matchFailed("\"?\"");
                                                            }
                                                          }

                                                          if (result1 === null) {
                                                            if (input.charCodeAt(pos) === 123) {
                                                              result1 = "{";
                                                              pos++;
                                                            } else {
                                                              result1 = null;

                                                              if (reportFailures === 0) {
                                                                matchFailed("\"{\"");
                                                              }
                                                            }

                                                            if (result1 === null) {
                                                              if (input.charCodeAt(pos) === 125) {
                                                                result1 = "}";
                                                                pos++;
                                                              } else {
                                                                result1 = null;

                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"}\"");
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_STAR() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 42) {
                result1 = "*";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"*\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "*";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_SLASH() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 47) {
                result1 = "/";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "/";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_EQUAL() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "=";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_LPAREN() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 40) {
                result1 = "(";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "(";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_RPAREN() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 41) {
                result1 = ")";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ")";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_RAQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.charCodeAt(pos) === 62) {
              result0 = ">";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\">\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_SWS();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ">";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_LAQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 60) {
                result1 = "<";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"<\"");
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "<";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_COMMA() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 44) {
                result1 = ",";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ",";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_SEMI() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 59) {
                result1 = ";";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ";";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_COLON() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_SWS();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return ":";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_LDQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              result1 = parse_DQUOTE();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "\"";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_RDQUOT() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DQUOTE();

            if (result0 !== null) {
              result1 = parse_SWS();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return "\"";
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_comment() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_LPAREN();

            if (result0 !== null) {
              result1 = [];
              result2 = parse_ctext();

              if (result2 === null) {
                result2 = parse_quoted_pair();

                if (result2 === null) {
                  result2 = parse_comment();
                }
              }

              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_ctext();

                if (result2 === null) {
                  result2 = parse_quoted_pair();

                  if (result2 === null) {
                    result2 = parse_comment();
                  }
                }
              }

              if (result1 !== null) {
                result2 = parse_RPAREN();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_ctext() {
            var result0;

            if (/^[!-']/.test(input.charAt(pos))) {
              result0 = input.charAt(pos);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("[!-']");
              }
            }

            if (result0 === null) {
              if (/^[*-[]/.test(input.charAt(pos))) {
                result0 = input.charAt(pos);
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("[*-[]");
                }
              }

              if (result0 === null) {
                if (/^[\]-~]/.test(input.charAt(pos))) {
                  result0 = input.charAt(pos);
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("[\\]-~]");
                  }
                }

                if (result0 === null) {
                  result0 = parse_UTF8_NONASCII();

                  if (result0 === null) {
                    result0 = parse_LWS();
                  }
                }
              }
            }

            return result0;
          }

          function parse_quoted_string() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              result1 = parse_DQUOTE();

              if (result1 !== null) {
                result2 = [];
                result3 = parse_qdtext();

                if (result3 === null) {
                  result3 = parse_quoted_pair();
                }

                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_qdtext();

                  if (result3 === null) {
                    result3 = parse_quoted_pair();
                  }
                }

                if (result2 !== null) {
                  result3 = parse_DQUOTE();

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_quoted_string_clean() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SWS();

            if (result0 !== null) {
              result1 = parse_DQUOTE();

              if (result1 !== null) {
                result2 = [];
                result3 = parse_qdtext();

                if (result3 === null) {
                  result3 = parse_quoted_pair();
                }

                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_qdtext();

                  if (result3 === null) {
                    result3 = parse_quoted_pair();
                  }
                }

                if (result2 !== null) {
                  result3 = parse_DQUOTE();

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var trimmed = input.substring(pos, offset).trim();
                return trimmed.substring(1, trimmed.length - 1)
                  .replace(/\\([\x00-\x09\x0b-\x0c\x0e-\x7f])/g, '$1');
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_qdtext() {
            var result0;
            result0 = parse_LWS();

            if (result0 === null) {
              if (input.charCodeAt(pos) === 33) {
                result0 = "!";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }

              if (result0 === null) {
                if (/^[#-[]/.test(input.charAt(pos))) {
                  result0 = input.charAt(pos);
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("[#-[]");
                  }
                }

                if (result0 === null) {
                  if (/^[\]-~]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("[\\]-~]");
                    }
                  }

                  if (result0 === null) {
                    result0 = parse_UTF8_NONASCII();
                  }
                }
              }
            }

            return result0;
          }

          function parse_quoted_pair() {
            var result0, result1;
            var pos0;
            pos0 = pos;

            if (input.charCodeAt(pos) === 92) {
              result0 = "\\";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }

            if (result0 !== null) {
              if (/^[\0-\t]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("[\\0-\\t]");
                }
              }

              if (result1 === null) {
                if (/^[\x0B-\f]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("[\\x0B-\\f]");
                  }
                }

                if (result1 === null) {
                  if (/^[\x0E-]/.test(input.charAt(pos))) {
                    result1 = input.charAt(pos);
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("[\\x0E-]");
                    }
                  }
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_SIP_URI_noparams() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_uri_scheme();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_userinfo();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_hostport();

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                try {
                  data.uri = new URI(data.scheme, data.user, data.host, data.port);
                  delete data.scheme;
                  delete data.user;
                  delete data.host;
                  delete data.host_type;
                  delete data.port;
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_SIP_URI() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_uri_scheme();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_userinfo();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_hostport();

                  if (result3 !== null) {
                    result4 = parse_uri_parameters();

                    if (result4 !== null) {
                      result5 = parse_headers();
                      result5 = result5 !== null ? result5 : "";

                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var header;

                try {
                  data.uri = new URI(data.scheme, data.user, data.host, data.port, data.uri_params, data.uri_headers);
                  delete data.scheme;
                  delete data.user;
                  delete data.host;
                  delete data.host_type;
                  delete data.port;
                  delete data.uri_params;

                  if (startRule === 'SIP_URI') {
                    data = data.uri;
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_uri_scheme() {
            var result0;
            result0 = parse_uri_scheme_sips();

            if (result0 === null) {
              result0 = parse_uri_scheme_sip();
            }

            return result0;
          }

          function parse_uri_scheme_sips() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 4).toLowerCase() === "sips") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"sips\"");
              }
            }

            if (result0 !== null) {
              result0 = function (offset, scheme) {
                data.scheme = scheme.toLowerCase();
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_uri_scheme_sip() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"sip\"");
              }
            }

            if (result0 !== null) {
              result0 = function (offset, scheme) {
                data.scheme = scheme.toLowerCase();
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_userinfo() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_user();

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_password();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                if (input.charCodeAt(pos) === 64) {
                  result2 = "@";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"@\"");
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.user = decodeURIComponent(input.substring(pos - 1, offset));
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_user() {
            var result0, result1;
            result1 = parse_unreserved();

            if (result1 === null) {
              result1 = parse_escaped();

              if (result1 === null) {
                result1 = parse_user_unreserved();
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_unreserved();

                if (result1 === null) {
                  result1 = parse_escaped();

                  if (result1 === null) {
                    result1 = parse_user_unreserved();
                  }
                }
              }
            } else {
              result0 = null;
            }

            return result0;
          }

          function parse_user_unreserved() {
            var result0;

            if (input.charCodeAt(pos) === 38) {
              result0 = "&";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"&\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 61) {
                result0 = "=";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 43) {
                  result0 = "+";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"+\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 36) {
                    result0 = "$";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"$\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 44) {
                      result0 = ",";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 59) {
                        result0 = ";";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\";\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 63) {
                          result0 = "?";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"?\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 47) {
                            result0 = "/";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"/\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_password() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = [];
            result1 = parse_unreserved();

            if (result1 === null) {
              result1 = parse_escaped();

              if (result1 === null) {
                if (input.charCodeAt(pos) === 38) {
                  result1 = "&";
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 61) {
                    result1 = "=";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"=\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result1 = "+";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"+\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 36) {
                        result1 = "$";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"$\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 44) {
                          result1 = ",";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\",\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_unreserved();

              if (result1 === null) {
                result1 = parse_escaped();

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 38) {
                    result1 = "&";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"&\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 61) {
                      result1 = "=";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"=\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result1 = "+";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result1 = "$";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"$\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 44) {
                            result1 = ",";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\",\"");
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.password = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_hostport() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_host();

            if (result0 !== null) {
              pos1 = pos;

              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_port();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_host() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_hostname();

            if (result0 === null) {
              result0 = parse_IPv4address();

              if (result0 === null) {
                result0 = parse_IPv6reference();
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host = input.substring(pos, offset).toLowerCase();
                return data.host;
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_hostname() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            pos2 = pos;
            result1 = parse_domainlabel();

            if (result1 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;

                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }

              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos2;
              }
            } else {
              result1 = null;
              pos = pos2;
            }

            while (result1 !== null) {
              result0.push(result1);
              pos2 = pos;
              result1 = parse_domainlabel();

              if (result1 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  result2 = ".";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }
            }

            if (result0 !== null) {
              result1 = parse_toplabel();

              if (result1 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  result2 = ".";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host_type = 'domain';
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_domainlabel() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_alphanum();

            if (result0 !== null) {
              result1 = [];
              result2 = parse_alphanum();

              if (result2 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result2 = "-";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }

                if (result2 === null) {
                  if (input.charCodeAt(pos) === 95) {
                    result2 = "_";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"_\"");
                    }
                  }
                }
              }

              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_alphanum();

                if (result2 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result2 = "-";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result2 = "_";
                      pos++;
                    } else {
                      result2 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                  }
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_toplabel() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_ALPHA();

            if (result0 !== null) {
              result1 = [];
              result2 = parse_alphanum();

              if (result2 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result2 = "-";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }

                if (result2 === null) {
                  if (input.charCodeAt(pos) === 95) {
                    result2 = "_";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"_\"");
                    }
                  }
                }
              }

              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_alphanum();

                if (result2 === null) {
                  if (input.charCodeAt(pos) === 45) {
                    result2 = "-";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 95) {
                      result2 = "_";
                      pos++;
                    } else {
                      result2 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"_\"");
                      }
                    }
                  }
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_IPv6reference() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_IPv6address();

              if (result1 !== null) {
                if (input.charCodeAt(pos) === 93) {
                  result2 = "]";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"]\"");
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host_type = 'IPv6';
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_IPv6address() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_h16();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_h16();

                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result3 = ":";
                    pos++;
                  } else {
                    result3 = null;

                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }

                  if (result3 !== null) {
                    result4 = parse_h16();

                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result5 = ":";
                        pos++;
                      } else {
                        result5 = null;

                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }

                      if (result5 !== null) {
                        result6 = parse_h16();

                        if (result6 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result7 = ":";
                            pos++;
                          } else {
                            result7 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result7 !== null) {
                            result8 = parse_h16();

                            if (result8 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result9 = ":";
                                pos++;
                              } else {
                                result9 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }

                              if (result9 !== null) {
                                result10 = parse_h16();

                                if (result10 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result11 = ":";
                                    pos++;
                                  } else {
                                    result11 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }

                                  if (result11 !== null) {
                                    result12 = parse_ls32();

                                    if (result12 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 === null) {
              pos1 = pos;

              if (input.substr(pos, 2) === "::") {
                result0 = "::";
                pos += 2;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"::\"");
                }
              }

              if (result0 !== null) {
                result1 = parse_h16();

                if (result1 !== null) {
                  if (input.charCodeAt(pos) === 58) {
                    result2 = ":";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }

                  if (result2 !== null) {
                    result3 = parse_h16();

                    if (result3 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result4 = ":";
                        pos++;
                      } else {
                        result4 = null;

                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }

                      if (result4 !== null) {
                        result5 = parse_h16();

                        if (result5 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result6 = ":";
                            pos++;
                          } else {
                            result6 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result6 !== null) {
                            result7 = parse_h16();

                            if (result7 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result8 = ":";
                                pos++;
                              } else {
                                result8 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }

                              if (result8 !== null) {
                                result9 = parse_h16();

                                if (result9 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result10 = ":";
                                    pos++;
                                  } else {
                                    result10 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }

                                  if (result10 !== null) {
                                    result11 = parse_ls32();

                                    if (result11 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }

              if (result0 === null) {
                pos1 = pos;

                if (input.substr(pos, 2) === "::") {
                  result0 = "::";
                  pos += 2;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"::\"");
                  }
                }

                if (result0 !== null) {
                  result1 = parse_h16();

                  if (result1 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      result2 = ":";
                      pos++;
                    } else {
                      result2 = null;

                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }

                    if (result2 !== null) {
                      result3 = parse_h16();

                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result4 = ":";
                          pos++;
                        } else {
                          result4 = null;

                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }

                        if (result4 !== null) {
                          result5 = parse_h16();

                          if (result5 !== null) {
                            if (input.charCodeAt(pos) === 58) {
                              result6 = ":";
                              pos++;
                            } else {
                              result6 = null;

                              if (reportFailures === 0) {
                                matchFailed("\":\"");
                              }
                            }

                            if (result6 !== null) {
                              result7 = parse_h16();

                              if (result7 !== null) {
                                if (input.charCodeAt(pos) === 58) {
                                  result8 = ":";
                                  pos++;
                                } else {
                                  result8 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }

                                if (result8 !== null) {
                                  result9 = parse_ls32();

                                  if (result9 !== null) {
                                    result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }

                if (result0 === null) {
                  pos1 = pos;

                  if (input.substr(pos, 2) === "::") {
                    result0 = "::";
                    pos += 2;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"::\"");
                    }
                  }

                  if (result0 !== null) {
                    result1 = parse_h16();

                    if (result1 !== null) {
                      if (input.charCodeAt(pos) === 58) {
                        result2 = ":";
                        pos++;
                      } else {
                        result2 = null;

                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }

                      if (result2 !== null) {
                        result3 = parse_h16();

                        if (result3 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result4 = ":";
                            pos++;
                          } else {
                            result4 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result4 !== null) {
                            result5 = parse_h16();

                            if (result5 !== null) {
                              if (input.charCodeAt(pos) === 58) {
                                result6 = ":";
                                pos++;
                              } else {
                                result6 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\":\"");
                                }
                              }

                              if (result6 !== null) {
                                result7 = parse_ls32();

                                if (result7 !== null) {
                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }

                  if (result0 === null) {
                    pos1 = pos;

                    if (input.substr(pos, 2) === "::") {
                      result0 = "::";
                      pos += 2;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"::\"");
                      }
                    }

                    if (result0 !== null) {
                      result1 = parse_h16();

                      if (result1 !== null) {
                        if (input.charCodeAt(pos) === 58) {
                          result2 = ":";
                          pos++;
                        } else {
                          result2 = null;

                          if (reportFailures === 0) {
                            matchFailed("\":\"");
                          }
                        }

                        if (result2 !== null) {
                          result3 = parse_h16();

                          if (result3 !== null) {
                            if (input.charCodeAt(pos) === 58) {
                              result4 = ":";
                              pos++;
                            } else {
                              result4 = null;

                              if (reportFailures === 0) {
                                matchFailed("\":\"");
                              }
                            }

                            if (result4 !== null) {
                              result5 = parse_ls32();

                              if (result5 !== null) {
                                result0 = [result0, result1, result2, result3, result4, result5];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }

                    if (result0 === null) {
                      pos1 = pos;

                      if (input.substr(pos, 2) === "::") {
                        result0 = "::";
                        pos += 2;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"::\"");
                        }
                      }

                      if (result0 !== null) {
                        result1 = parse_h16();

                        if (result1 !== null) {
                          if (input.charCodeAt(pos) === 58) {
                            result2 = ":";
                            pos++;
                          } else {
                            result2 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result2 !== null) {
                            result3 = parse_ls32();

                            if (result3 !== null) {
                              result0 = [result0, result1, result2, result3];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }

                      if (result0 === null) {
                        pos1 = pos;

                        if (input.substr(pos, 2) === "::") {
                          result0 = "::";
                          pos += 2;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"::\"");
                          }
                        }

                        if (result0 !== null) {
                          result1 = parse_ls32();

                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }

                        if (result0 === null) {
                          pos1 = pos;

                          if (input.substr(pos, 2) === "::") {
                            result0 = "::";
                            pos += 2;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"::\"");
                            }
                          }

                          if (result0 !== null) {
                            result1 = parse_h16();

                            if (result1 !== null) {
                              result0 = [result0, result1];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }

                          if (result0 === null) {
                            pos1 = pos;
                            result0 = parse_h16();

                            if (result0 !== null) {
                              if (input.substr(pos, 2) === "::") {
                                result1 = "::";
                                pos += 2;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"::\"");
                                }
                              }

                              if (result1 !== null) {
                                result2 = parse_h16();

                                if (result2 !== null) {
                                  if (input.charCodeAt(pos) === 58) {
                                    result3 = ":";
                                    pos++;
                                  } else {
                                    result3 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }

                                  if (result3 !== null) {
                                    result4 = parse_h16();

                                    if (result4 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result5 = ":";
                                        pos++;
                                      } else {
                                        result5 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }

                                      if (result5 !== null) {
                                        result6 = parse_h16();

                                        if (result6 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result7 = ":";
                                            pos++;
                                          } else {
                                            result7 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result7 !== null) {
                                            result8 = parse_h16();

                                            if (result8 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result9 = ":";
                                                pos++;
                                              } else {
                                                result9 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result9 !== null) {
                                                result10 = parse_ls32();

                                                if (result10 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }

                            if (result0 === null) {
                              pos1 = pos;
                              result0 = parse_h16();

                              if (result0 !== null) {
                                pos2 = pos;

                                if (input.charCodeAt(pos) === 58) {
                                  result1 = ":";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\":\"");
                                  }
                                }

                                if (result1 !== null) {
                                  result2 = parse_h16();

                                  if (result2 !== null) {
                                    result1 = [result1, result2];
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }
                                } else {
                                  result1 = null;
                                  pos = pos2;
                                }

                                result1 = result1 !== null ? result1 : "";

                                if (result1 !== null) {
                                  if (input.substr(pos, 2) === "::") {
                                    result2 = "::";
                                    pos += 2;
                                  } else {
                                    result2 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"::\"");
                                    }
                                  }

                                  if (result2 !== null) {
                                    result3 = parse_h16();

                                    if (result3 !== null) {
                                      if (input.charCodeAt(pos) === 58) {
                                        result4 = ":";
                                        pos++;
                                      } else {
                                        result4 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }

                                      if (result4 !== null) {
                                        result5 = parse_h16();

                                        if (result5 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result6 = ":";
                                            pos++;
                                          } else {
                                            result6 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result6 !== null) {
                                            result7 = parse_h16();

                                            if (result7 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result8 = ":";
                                                pos++;
                                              } else {
                                                result8 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result8 !== null) {
                                                result9 = parse_ls32();

                                                if (result9 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }
                              } else {
                                result0 = null;
                                pos = pos1;
                              }

                              if (result0 === null) {
                                pos1 = pos;
                                result0 = parse_h16();

                                if (result0 !== null) {
                                  pos2 = pos;

                                  if (input.charCodeAt(pos) === 58) {
                                    result1 = ":";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\":\"");
                                    }
                                  }

                                  if (result1 !== null) {
                                    result2 = parse_h16();

                                    if (result2 !== null) {
                                      result1 = [result1, result2];
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }
                                  } else {
                                    result1 = null;
                                    pos = pos2;
                                  }

                                  result1 = result1 !== null ? result1 : "";

                                  if (result1 !== null) {
                                    pos2 = pos;

                                    if (input.charCodeAt(pos) === 58) {
                                      result2 = ":";
                                      pos++;
                                    } else {
                                      result2 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                      }
                                    }

                                    if (result2 !== null) {
                                      result3 = parse_h16();

                                      if (result3 !== null) {
                                        result2 = [result2, result3];
                                      } else {
                                        result2 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result2 = null;
                                      pos = pos2;
                                    }

                                    result2 = result2 !== null ? result2 : "";

                                    if (result2 !== null) {
                                      if (input.substr(pos, 2) === "::") {
                                        result3 = "::";
                                        pos += 2;
                                      } else {
                                        result3 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\"::\"");
                                        }
                                      }

                                      if (result3 !== null) {
                                        result4 = parse_h16();

                                        if (result4 !== null) {
                                          if (input.charCodeAt(pos) === 58) {
                                            result5 = ":";
                                            pos++;
                                          } else {
                                            result5 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result5 !== null) {
                                            result6 = parse_h16();

                                            if (result6 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result7 = ":";
                                                pos++;
                                              } else {
                                                result7 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result7 !== null) {
                                                result8 = parse_ls32();

                                                if (result8 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }
                                } else {
                                  result0 = null;
                                  pos = pos1;
                                }

                                if (result0 === null) {
                                  pos1 = pos;
                                  result0 = parse_h16();

                                  if (result0 !== null) {
                                    pos2 = pos;

                                    if (input.charCodeAt(pos) === 58) {
                                      result1 = ":";
                                      pos++;
                                    } else {
                                      result1 = null;

                                      if (reportFailures === 0) {
                                        matchFailed("\":\"");
                                      }
                                    }

                                    if (result1 !== null) {
                                      result2 = parse_h16();

                                      if (result2 !== null) {
                                        result1 = [result1, result2];
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }
                                    } else {
                                      result1 = null;
                                      pos = pos2;
                                    }

                                    result1 = result1 !== null ? result1 : "";

                                    if (result1 !== null) {
                                      pos2 = pos;

                                      if (input.charCodeAt(pos) === 58) {
                                        result2 = ":";
                                        pos++;
                                      } else {
                                        result2 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }

                                      if (result2 !== null) {
                                        result3 = parse_h16();

                                        if (result3 !== null) {
                                          result2 = [result2, result3];
                                        } else {
                                          result2 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result2 = null;
                                        pos = pos2;
                                      }

                                      result2 = result2 !== null ? result2 : "";

                                      if (result2 !== null) {
                                        pos2 = pos;

                                        if (input.charCodeAt(pos) === 58) {
                                          result3 = ":";
                                          pos++;
                                        } else {
                                          result3 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }

                                        if (result3 !== null) {
                                          result4 = parse_h16();

                                          if (result4 !== null) {
                                            result3 = [result3, result4];
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result3 = null;
                                          pos = pos2;
                                        }

                                        result3 = result3 !== null ? result3 : "";

                                        if (result3 !== null) {
                                          if (input.substr(pos, 2) === "::") {
                                            result4 = "::";
                                            pos += 2;
                                          } else {
                                            result4 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\"::\"");
                                            }
                                          }

                                          if (result4 !== null) {
                                            result5 = parse_h16();

                                            if (result5 !== null) {
                                              if (input.charCodeAt(pos) === 58) {
                                                result6 = ":";
                                                pos++;
                                              } else {
                                                result6 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result6 !== null) {
                                                result7 = parse_ls32();

                                                if (result7 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }
                                  } else {
                                    result0 = null;
                                    pos = pos1;
                                  }

                                  if (result0 === null) {
                                    pos1 = pos;
                                    result0 = parse_h16();

                                    if (result0 !== null) {
                                      pos2 = pos;

                                      if (input.charCodeAt(pos) === 58) {
                                        result1 = ":";
                                        pos++;
                                      } else {
                                        result1 = null;

                                        if (reportFailures === 0) {
                                          matchFailed("\":\"");
                                        }
                                      }

                                      if (result1 !== null) {
                                        result2 = parse_h16();

                                        if (result2 !== null) {
                                          result1 = [result1, result2];
                                        } else {
                                          result1 = null;
                                          pos = pos2;
                                        }
                                      } else {
                                        result1 = null;
                                        pos = pos2;
                                      }

                                      result1 = result1 !== null ? result1 : "";

                                      if (result1 !== null) {
                                        pos2 = pos;

                                        if (input.charCodeAt(pos) === 58) {
                                          result2 = ":";
                                          pos++;
                                        } else {
                                          result2 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }

                                        if (result2 !== null) {
                                          result3 = parse_h16();

                                          if (result3 !== null) {
                                            result2 = [result2, result3];
                                          } else {
                                            result2 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result2 = null;
                                          pos = pos2;
                                        }

                                        result2 = result2 !== null ? result2 : "";

                                        if (result2 !== null) {
                                          pos2 = pos;

                                          if (input.charCodeAt(pos) === 58) {
                                            result3 = ":";
                                            pos++;
                                          } else {
                                            result3 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result3 !== null) {
                                            result4 = parse_h16();

                                            if (result4 !== null) {
                                              result3 = [result3, result4];
                                            } else {
                                              result3 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result3 = null;
                                            pos = pos2;
                                          }

                                          result3 = result3 !== null ? result3 : "";

                                          if (result3 !== null) {
                                            pos2 = pos;

                                            if (input.charCodeAt(pos) === 58) {
                                              result4 = ":";
                                              pos++;
                                            } else {
                                              result4 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                              }
                                            }

                                            if (result4 !== null) {
                                              result5 = parse_h16();

                                              if (result5 !== null) {
                                                result4 = [result4, result5];
                                              } else {
                                                result4 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result4 = null;
                                              pos = pos2;
                                            }

                                            result4 = result4 !== null ? result4 : "";

                                            if (result4 !== null) {
                                              if (input.substr(pos, 2) === "::") {
                                                result5 = "::";
                                                pos += 2;
                                              } else {
                                                result5 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\"::\"");
                                                }
                                              }

                                              if (result5 !== null) {
                                                result6 = parse_ls32();

                                                if (result6 !== null) {
                                                  result0 = [result0, result1, result2, result3, result4, result5, result6];
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }
                                    } else {
                                      result0 = null;
                                      pos = pos1;
                                    }

                                    if (result0 === null) {
                                      pos1 = pos;
                                      result0 = parse_h16();

                                      if (result0 !== null) {
                                        pos2 = pos;

                                        if (input.charCodeAt(pos) === 58) {
                                          result1 = ":";
                                          pos++;
                                        } else {
                                          result1 = null;

                                          if (reportFailures === 0) {
                                            matchFailed("\":\"");
                                          }
                                        }

                                        if (result1 !== null) {
                                          result2 = parse_h16();

                                          if (result2 !== null) {
                                            result1 = [result1, result2];
                                          } else {
                                            result1 = null;
                                            pos = pos2;
                                          }
                                        } else {
                                          result1 = null;
                                          pos = pos2;
                                        }

                                        result1 = result1 !== null ? result1 : "";

                                        if (result1 !== null) {
                                          pos2 = pos;

                                          if (input.charCodeAt(pos) === 58) {
                                            result2 = ":";
                                            pos++;
                                          } else {
                                            result2 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result2 !== null) {
                                            result3 = parse_h16();

                                            if (result3 !== null) {
                                              result2 = [result2, result3];
                                            } else {
                                              result2 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result2 = null;
                                            pos = pos2;
                                          }

                                          result2 = result2 !== null ? result2 : "";

                                          if (result2 !== null) {
                                            pos2 = pos;

                                            if (input.charCodeAt(pos) === 58) {
                                              result3 = ":";
                                              pos++;
                                            } else {
                                              result3 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                              }
                                            }

                                            if (result3 !== null) {
                                              result4 = parse_h16();

                                              if (result4 !== null) {
                                                result3 = [result3, result4];
                                              } else {
                                                result3 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result3 = null;
                                              pos = pos2;
                                            }

                                            result3 = result3 !== null ? result3 : "";

                                            if (result3 !== null) {
                                              pos2 = pos;

                                              if (input.charCodeAt(pos) === 58) {
                                                result4 = ":";
                                                pos++;
                                              } else {
                                                result4 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result4 !== null) {
                                                result5 = parse_h16();

                                                if (result5 !== null) {
                                                  result4 = [result4, result5];
                                                } else {
                                                  result4 = null;
                                                  pos = pos2;
                                                }
                                              } else {
                                                result4 = null;
                                                pos = pos2;
                                              }

                                              result4 = result4 !== null ? result4 : "";

                                              if (result4 !== null) {
                                                pos2 = pos;

                                                if (input.charCodeAt(pos) === 58) {
                                                  result5 = ":";
                                                  pos++;
                                                } else {
                                                  result5 = null;

                                                  if (reportFailures === 0) {
                                                    matchFailed("\":\"");
                                                  }
                                                }

                                                if (result5 !== null) {
                                                  result6 = parse_h16();

                                                  if (result6 !== null) {
                                                    result5 = [result5, result6];
                                                  } else {
                                                    result5 = null;
                                                    pos = pos2;
                                                  }
                                                } else {
                                                  result5 = null;
                                                  pos = pos2;
                                                }

                                                result5 = result5 !== null ? result5 : "";

                                                if (result5 !== null) {
                                                  if (input.substr(pos, 2) === "::") {
                                                    result6 = "::";
                                                    pos += 2;
                                                  } else {
                                                    result6 = null;

                                                    if (reportFailures === 0) {
                                                      matchFailed("\"::\"");
                                                    }
                                                  }

                                                  if (result6 !== null) {
                                                    result7 = parse_h16();

                                                    if (result7 !== null) {
                                                      result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      } else {
                                        result0 = null;
                                        pos = pos1;
                                      }

                                      if (result0 === null) {
                                        pos1 = pos;
                                        result0 = parse_h16();

                                        if (result0 !== null) {
                                          pos2 = pos;

                                          if (input.charCodeAt(pos) === 58) {
                                            result1 = ":";
                                            pos++;
                                          } else {
                                            result1 = null;

                                            if (reportFailures === 0) {
                                              matchFailed("\":\"");
                                            }
                                          }

                                          if (result1 !== null) {
                                            result2 = parse_h16();

                                            if (result2 !== null) {
                                              result1 = [result1, result2];
                                            } else {
                                              result1 = null;
                                              pos = pos2;
                                            }
                                          } else {
                                            result1 = null;
                                            pos = pos2;
                                          }

                                          result1 = result1 !== null ? result1 : "";

                                          if (result1 !== null) {
                                            pos2 = pos;

                                            if (input.charCodeAt(pos) === 58) {
                                              result2 = ":";
                                              pos++;
                                            } else {
                                              result2 = null;

                                              if (reportFailures === 0) {
                                                matchFailed("\":\"");
                                              }
                                            }

                                            if (result2 !== null) {
                                              result3 = parse_h16();

                                              if (result3 !== null) {
                                                result2 = [result2, result3];
                                              } else {
                                                result2 = null;
                                                pos = pos2;
                                              }
                                            } else {
                                              result2 = null;
                                              pos = pos2;
                                            }

                                            result2 = result2 !== null ? result2 : "";

                                            if (result2 !== null) {
                                              pos2 = pos;

                                              if (input.charCodeAt(pos) === 58) {
                                                result3 = ":";
                                                pos++;
                                              } else {
                                                result3 = null;

                                                if (reportFailures === 0) {
                                                  matchFailed("\":\"");
                                                }
                                              }

                                              if (result3 !== null) {
                                                result4 = parse_h16();

                                                if (result4 !== null) {
                                                  result3 = [result3, result4];
                                                } else {
                                                  result3 = null;
                                                  pos = pos2;
                                                }
                                              } else {
                                                result3 = null;
                                                pos = pos2;
                                              }

                                              result3 = result3 !== null ? result3 : "";

                                              if (result3 !== null) {
                                                pos2 = pos;

                                                if (input.charCodeAt(pos) === 58) {
                                                  result4 = ":";
                                                  pos++;
                                                } else {
                                                  result4 = null;

                                                  if (reportFailures === 0) {
                                                    matchFailed("\":\"");
                                                  }
                                                }

                                                if (result4 !== null) {
                                                  result5 = parse_h16();

                                                  if (result5 !== null) {
                                                    result4 = [result4, result5];
                                                  } else {
                                                    result4 = null;
                                                    pos = pos2;
                                                  }
                                                } else {
                                                  result4 = null;
                                                  pos = pos2;
                                                }

                                                result4 = result4 !== null ? result4 : "";

                                                if (result4 !== null) {
                                                  pos2 = pos;

                                                  if (input.charCodeAt(pos) === 58) {
                                                    result5 = ":";
                                                    pos++;
                                                  } else {
                                                    result5 = null;

                                                    if (reportFailures === 0) {
                                                      matchFailed("\":\"");
                                                    }
                                                  }

                                                  if (result5 !== null) {
                                                    result6 = parse_h16();

                                                    if (result6 !== null) {
                                                      result5 = [result5, result6];
                                                    } else {
                                                      result5 = null;
                                                      pos = pos2;
                                                    }
                                                  } else {
                                                    result5 = null;
                                                    pos = pos2;
                                                  }

                                                  result5 = result5 !== null ? result5 : "";

                                                  if (result5 !== null) {
                                                    pos2 = pos;

                                                    if (input.charCodeAt(pos) === 58) {
                                                      result6 = ":";
                                                      pos++;
                                                    } else {
                                                      result6 = null;

                                                      if (reportFailures === 0) {
                                                        matchFailed("\":\"");
                                                      }
                                                    }

                                                    if (result6 !== null) {
                                                      result7 = parse_h16();

                                                      if (result7 !== null) {
                                                        result6 = [result6, result7];
                                                      } else {
                                                        result6 = null;
                                                        pos = pos2;
                                                      }
                                                    } else {
                                                      result6 = null;
                                                      pos = pos2;
                                                    }

                                                    result6 = result6 !== null ? result6 : "";

                                                    if (result6 !== null) {
                                                      if (input.substr(pos, 2) === "::") {
                                                        result7 = "::";
                                                        pos += 2;
                                                      } else {
                                                        result7 = null;

                                                        if (reportFailures === 0) {
                                                          matchFailed("\"::\"");
                                                        }
                                                      }

                                                      if (result7 !== null) {
                                                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                                                      } else {
                                                        result0 = null;
                                                        pos = pos1;
                                                      }
                                                    } else {
                                                      result0 = null;
                                                      pos = pos1;
                                                    }
                                                  } else {
                                                    result0 = null;
                                                    pos = pos1;
                                                  }
                                                } else {
                                                  result0 = null;
                                                  pos = pos1;
                                                }
                                              } else {
                                                result0 = null;
                                                pos = pos1;
                                              }
                                            } else {
                                              result0 = null;
                                              pos = pos1;
                                            }
                                          } else {
                                            result0 = null;
                                            pos = pos1;
                                          }
                                        } else {
                                          result0 = null;
                                          pos = pos1;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host_type = 'IPv6';
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_h16() {
            var result0, result1, result2, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_HEXDIG();

            if (result0 !== null) {
              result1 = parse_HEXDIG();
              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result2 = parse_HEXDIG();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_HEXDIG();
                  result3 = result3 !== null ? result3 : "";

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_ls32() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_h16();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_h16();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            if (result0 === null) {
              result0 = parse_IPv4address();
            }

            return result0;
          }

          function parse_IPv4address() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_dec_octet();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 46) {
                result1 = ".";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_dec_octet();

                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result3 = ".";
                    pos++;
                  } else {
                    result3 = null;

                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }

                  if (result3 !== null) {
                    result4 = parse_dec_octet();

                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 46) {
                        result5 = ".";
                        pos++;
                      } else {
                        result5 = null;

                        if (reportFailures === 0) {
                          matchFailed("\".\"");
                        }
                      }

                      if (result5 !== null) {
                        result6 = parse_dec_octet();

                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host_type = 'IPv4';
                return input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_dec_octet() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 2) === "25") {
              result0 = "25";
              pos += 2;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"25\"");
              }
            }

            if (result0 !== null) {
              if (/^[0-5]/.test(input.charAt(pos))) {
                result1 = input.charAt(pos);
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("[0-5]");
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            if (result0 === null) {
              pos0 = pos;

              if (input.charCodeAt(pos) === 50) {
                result0 = "2";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"2\"");
                }
              }

              if (result0 !== null) {
                if (/^[0-4]/.test(input.charAt(pos))) {
                  result1 = input.charAt(pos);
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("[0-4]");
                  }
                }

                if (result1 !== null) {
                  result2 = parse_DIGIT();

                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }

              if (result0 === null) {
                pos0 = pos;

                if (input.charCodeAt(pos) === 49) {
                  result0 = "1";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"1\"");
                  }
                }

                if (result0 !== null) {
                  result1 = parse_DIGIT();

                  if (result1 !== null) {
                    result2 = parse_DIGIT();

                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }

                if (result0 === null) {
                  pos0 = pos;

                  if (/^[1-9]/.test(input.charAt(pos))) {
                    result0 = input.charAt(pos);
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("[1-9]");
                    }
                  }

                  if (result0 !== null) {
                    result1 = parse_DIGIT();

                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }

                  if (result0 === null) {
                    result0 = parse_DIGIT();
                  }
                }
              }
            }

            return result0;
          }

          function parse_port() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();
            result0 = result0 !== null ? result0 : "";

            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result2 = parse_DIGIT();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";

                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, port) {
                port = parseInt(port.join(''));
                data.port = port;
                return port;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_uri_parameters() {
            var result0, result1, result2;
            var pos0;
            result0 = [];
            pos0 = pos;

            if (input.charCodeAt(pos) === 59) {
              result1 = ";";
              pos++;
            } else {
              result1 = null;

              if (reportFailures === 0) {
                matchFailed("\";\"");
              }
            }

            if (result1 !== null) {
              result2 = parse_uri_parameter();

              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = pos0;
              }
            } else {
              result1 = null;
              pos = pos0;
            }

            while (result1 !== null) {
              result0.push(result1);
              pos0 = pos;

              if (input.charCodeAt(pos) === 59) {
                result1 = ";";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_uri_parameter();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos0;
                }
              } else {
                result1 = null;
                pos = pos0;
              }
            }

            return result0;
          }

          function parse_uri_parameter() {
            var result0;
            result0 = parse_transport_param();

            if (result0 === null) {
              result0 = parse_user_param();

              if (result0 === null) {
                result0 = parse_method_param();

                if (result0 === null) {
                  result0 = parse_ttl_param();

                  if (result0 === null) {
                    result0 = parse_maddr_param();

                    if (result0 === null) {
                      result0 = parse_lr_param();

                      if (result0 === null) {
                        result0 = parse_other_param();
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_transport_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 10).toLowerCase() === "transport=") {
              result0 = input.substr(pos, 10);
              pos += 10;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"transport=\"");
              }
            }

            if (result0 !== null) {
              if (input.substr(pos, 3).toLowerCase() === "udp") {
                result1 = input.substr(pos, 3);
                pos += 3;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"udp\"");
                }
              }

              if (result1 === null) {
                if (input.substr(pos, 3).toLowerCase() === "tcp") {
                  result1 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"tcp\"");
                  }
                }

                if (result1 === null) {
                  if (input.substr(pos, 4).toLowerCase() === "sctp") {
                    result1 = input.substr(pos, 4);
                    pos += 4;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"sctp\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.substr(pos, 3).toLowerCase() === "tls") {
                      result1 = input.substr(pos, 3);
                      pos += 3;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"tls\"");
                      }
                    }

                    if (result1 === null) {
                      result1 = parse_token();
                    }
                  }
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, transport) {
                if (!data.uri_params) data.uri_params = {};
                data.uri_params['transport'] = transport.toLowerCase();
              }(pos0, result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_user_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 5).toLowerCase() === "user=") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"user=\"");
              }
            }

            if (result0 !== null) {
              if (input.substr(pos, 5).toLowerCase() === "phone") {
                result1 = input.substr(pos, 5);
                pos += 5;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"phone\"");
                }
              }

              if (result1 === null) {
                if (input.substr(pos, 2).toLowerCase() === "ip") {
                  result1 = input.substr(pos, 2);
                  pos += 2;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"ip\"");
                  }
                }

                if (result1 === null) {
                  result1 = parse_token();
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, user) {
                if (!data.uri_params) data.uri_params = {};
                data.uri_params['user'] = user.toLowerCase();
              }(pos0, result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_method_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 7).toLowerCase() === "method=") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"method=\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_Method();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, method) {
                if (!data.uri_params) data.uri_params = {};
                data.uri_params['method'] = method;
              }(pos0, result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_ttl_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 4).toLowerCase() === "ttl=") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"ttl=\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_ttl();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, ttl) {
                if (!data.params) data.params = {};
                data.params['ttl'] = ttl;
              }(pos0, result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_maddr_param() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 6).toLowerCase() === "maddr=") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"maddr=\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_host();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, maddr) {
                if (!data.uri_params) data.uri_params = {};
                data.uri_params['maddr'] = maddr;
              }(pos0, result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_lr_param() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 2).toLowerCase() === "lr") {
              result0 = input.substr(pos, 2);
              pos += 2;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"lr\"");
              }
            }

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                if (!data.uri_params) data.uri_params = {};
                data.uri_params['lr'] = undefined;
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_other_param() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_pname();

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_pvalue();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, param, value) {
                if (!data.uri_params) data.uri_params = {};

                if (typeof value === 'undefined') {
                  value = undefined;
                } else {
                  value = value[1];
                }

                data.uri_params[param.toLowerCase()] = value;
              }(pos0, result0[0], result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_pname() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_paramchar();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_paramchar();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, pname) {
                return pname.join('');
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_pvalue() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_paramchar();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_paramchar();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, pvalue) {
                return pvalue.join('');
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_paramchar() {
            var result0;
            result0 = parse_param_unreserved();

            if (result0 === null) {
              result0 = parse_unreserved();

              if (result0 === null) {
                result0 = parse_escaped();
              }
            }

            return result0;
          }

          function parse_param_unreserved() {
            var result0;

            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 93) {
                result0 = "]";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 47) {
                  result0 = "/";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 58) {
                    result0 = ":";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\":\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 38) {
                      result0 = "&";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"&\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result0 = "$";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"$\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_headers() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            pos0 = pos;

            if (input.charCodeAt(pos) === 63) {
              result0 = "?";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_header();

              if (result1 !== null) {
                result2 = [];
                pos1 = pos;

                if (input.charCodeAt(pos) === 38) {
                  result3 = "&";
                  pos++;
                } else {
                  result3 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"&\"");
                  }
                }

                if (result3 !== null) {
                  result4 = parse_header();

                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                } else {
                  result3 = null;
                  pos = pos1;
                }

                while (result3 !== null) {
                  result2.push(result3);
                  pos1 = pos;

                  if (input.charCodeAt(pos) === 38) {
                    result3 = "&";
                    pos++;
                  } else {
                    result3 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"&\"");
                    }
                  }

                  if (result3 !== null) {
                    result4 = parse_header();

                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_header() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_hname();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 61) {
                result1 = "=";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_hvalue();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, hname, hvalue) {
                hname = hname.join('').toLowerCase();
                hvalue = hvalue.join('');
                if (!data.uri_headers) data.uri_headers = {};

                if (!data.uri_headers[hname]) {
                  data.uri_headers[hname] = [hvalue];
                } else {
                  data.uri_headers[hname].push(hvalue);
                }
              }(pos0, result0[0], result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_hname() {
            var result0, result1;
            result1 = parse_hnv_unreserved();

            if (result1 === null) {
              result1 = parse_unreserved();

              if (result1 === null) {
                result1 = parse_escaped();
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_hnv_unreserved();

                if (result1 === null) {
                  result1 = parse_unreserved();

                  if (result1 === null) {
                    result1 = parse_escaped();
                  }
                }
              }
            } else {
              result0 = null;
            }

            return result0;
          }

          function parse_hvalue() {
            var result0, result1;
            result0 = [];
            result1 = parse_hnv_unreserved();

            if (result1 === null) {
              result1 = parse_unreserved();

              if (result1 === null) {
                result1 = parse_escaped();
              }
            }

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_hnv_unreserved();

              if (result1 === null) {
                result1 = parse_unreserved();

                if (result1 === null) {
                  result1 = parse_escaped();
                }
              }
            }

            return result0;
          }

          function parse_hnv_unreserved() {
            var result0;

            if (input.charCodeAt(pos) === 91) {
              result0 = "[";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }

            if (result0 === null) {
              if (input.charCodeAt(pos) === 93) {
                result0 = "]";
                pos++;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }

              if (result0 === null) {
                if (input.charCodeAt(pos) === 47) {
                  result0 = "/";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 63) {
                    result0 = "?";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"?\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 58) {
                      result0 = ":";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 43) {
                        result0 = "+";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"+\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 36) {
                          result0 = "$";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"$\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_Request_Response() {
            var result0;
            result0 = parse_Status_Line();

            if (result0 === null) {
              result0 = parse_Request_Line();
            }

            return result0;
          }

          function parse_Request_Line() {
            var result0, result1, result2, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_Method();

            if (result0 !== null) {
              result1 = parse_SP();

              if (result1 !== null) {
                result2 = parse_Request_URI();

                if (result2 !== null) {
                  result3 = parse_SP();

                  if (result3 !== null) {
                    result4 = parse_SIP_Version();

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Request_URI() {
            var result0;
            result0 = parse_SIP_URI();

            if (result0 === null) {
              result0 = parse_absoluteURI();
            }

            return result0;
          }

          function parse_absoluteURI() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_scheme();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 58) {
                result1 = ":";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\":\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_hier_part();

                if (result2 === null) {
                  result2 = parse_opaque_part();
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_hier_part() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_net_path();

            if (result0 === null) {
              result0 = parse_abs_path();
            }

            if (result0 !== null) {
              pos1 = pos;

              if (input.charCodeAt(pos) === 63) {
                result1 = "?";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"?\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_query();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_net_path() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 2) === "//") {
              result0 = "//";
              pos += 2;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"//\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_authority();

              if (result1 !== null) {
                result2 = parse_abs_path();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_abs_path() {
            var result0, result1;
            var pos0;
            pos0 = pos;

            if (input.charCodeAt(pos) === 47) {
              result0 = "/";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_path_segments();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_opaque_part() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_uric_no_slash();

            if (result0 !== null) {
              result1 = [];
              result2 = parse_uric();

              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_uric();
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_uric() {
            var result0;
            result0 = parse_reserved();

            if (result0 === null) {
              result0 = parse_unreserved();

              if (result0 === null) {
                result0 = parse_escaped();
              }
            }

            return result0;
          }

          function parse_uric_no_slash() {
            var result0;
            result0 = parse_unreserved();

            if (result0 === null) {
              result0 = parse_escaped();

              if (result0 === null) {
                if (input.charCodeAt(pos) === 59) {
                  result0 = ";";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 63) {
                    result0 = "?";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"?\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 58) {
                      result0 = ":";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 64) {
                        result0 = "@";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"@\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 38) {
                          result0 = "&";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"&\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 61) {
                            result0 = "=";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"=\"");
                            }
                          }

                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 43) {
                              result0 = "+";
                              pos++;
                            } else {
                              result0 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"+\"");
                              }
                            }

                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 36) {
                                result0 = "$";
                                pos++;
                              } else {
                                result0 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"$\"");
                                }
                              }

                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 44) {
                                  result0 = ",";
                                  pos++;
                                } else {
                                  result0 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\",\"");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_path_segments() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_segment();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;

              if (input.charCodeAt(pos) === 47) {
                result2 = "/";
                pos++;
              } else {
                result2 = null;

                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }

              if (result2 !== null) {
                result3 = parse_segment();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;

                if (input.charCodeAt(pos) === 47) {
                  result2 = "/";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"/\"");
                  }
                }

                if (result2 !== null) {
                  result3 = parse_segment();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_segment() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = [];
            result1 = parse_pchar();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_pchar();
            }

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;

              if (input.charCodeAt(pos) === 59) {
                result2 = ";";
                pos++;
              } else {
                result2 = null;

                if (reportFailures === 0) {
                  matchFailed("\";\"");
                }
              }

              if (result2 !== null) {
                result3 = parse_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;

                if (input.charCodeAt(pos) === 59) {
                  result2 = ";";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\";\"");
                  }
                }

                if (result2 !== null) {
                  result3 = parse_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_param() {
            var result0, result1;
            result0 = [];
            result1 = parse_pchar();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_pchar();
            }

            return result0;
          }

          function parse_pchar() {
            var result0;
            result0 = parse_unreserved();

            if (result0 === null) {
              result0 = parse_escaped();

              if (result0 === null) {
                if (input.charCodeAt(pos) === 58) {
                  result0 = ":";
                  pos++;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }

                if (result0 === null) {
                  if (input.charCodeAt(pos) === 64) {
                    result0 = "@";
                    pos++;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"@\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 38) {
                      result0 = "&";
                      pos++;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"&\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 61) {
                        result0 = "=";
                        pos++;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"=\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 43) {
                          result0 = "+";
                          pos++;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"+\"");
                          }
                        }

                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 36) {
                            result0 = "$";
                            pos++;
                          } else {
                            result0 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"$\"");
                            }
                          }

                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 44) {
                              result0 = ",";
                              pos++;
                            } else {
                              result0 = null;

                              if (reportFailures === 0) {
                                matchFailed("\",\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_scheme() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_ALPHA();

            if (result0 !== null) {
              result1 = [];
              result2 = parse_ALPHA();

              if (result2 === null) {
                result2 = parse_DIGIT();

                if (result2 === null) {
                  if (input.charCodeAt(pos) === 43) {
                    result2 = "+";
                    pos++;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }

                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 45) {
                      result2 = "-";
                      pos++;
                    } else {
                      result2 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }

                    if (result2 === null) {
                      if (input.charCodeAt(pos) === 46) {
                        result2 = ".";
                        pos++;
                      } else {
                        result2 = null;

                        if (reportFailures === 0) {
                          matchFailed("\".\"");
                        }
                      }
                    }
                  }
                }
              }

              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_ALPHA();

                if (result2 === null) {
                  result2 = parse_DIGIT();

                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 43) {
                      result2 = "+";
                      pos++;
                    } else {
                      result2 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"+\"");
                      }
                    }

                    if (result2 === null) {
                      if (input.charCodeAt(pos) === 45) {
                        result2 = "-";
                        pos++;
                      } else {
                        result2 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"-\"");
                        }
                      }

                      if (result2 === null) {
                        if (input.charCodeAt(pos) === 46) {
                          result2 = ".";
                          pos++;
                        } else {
                          result2 = null;

                          if (reportFailures === 0) {
                            matchFailed("\".\"");
                          }
                        }
                      }
                    }
                  }
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.scheme = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_authority() {
            var result0;
            result0 = parse_srvr();

            if (result0 === null) {
              result0 = parse_reg_name();
            }

            return result0;
          }

          function parse_srvr() {
            var result0, result1;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_userinfo();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"@\"");
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            result0 = result0 !== null ? result0 : "";

            if (result0 !== null) {
              result1 = parse_hostport();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            result0 = result0 !== null ? result0 : "";
            return result0;
          }

          function parse_reg_name() {
            var result0, result1;
            result1 = parse_unreserved();

            if (result1 === null) {
              result1 = parse_escaped();

              if (result1 === null) {
                if (input.charCodeAt(pos) === 36) {
                  result1 = "$";
                  pos++;
                } else {
                  result1 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"$\"");
                  }
                }

                if (result1 === null) {
                  if (input.charCodeAt(pos) === 44) {
                    result1 = ",";
                    pos++;
                  } else {
                    result1 = null;

                    if (reportFailures === 0) {
                      matchFailed("\",\"");
                    }
                  }

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 59) {
                      result1 = ";";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\";\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 58) {
                        result1 = ":";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\":\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 64) {
                          result1 = "@";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"@\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 38) {
                            result1 = "&";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"&\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 61) {
                              result1 = "=";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"=\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 43) {
                                result1 = "+";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"+\"");
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_unreserved();

                if (result1 === null) {
                  result1 = parse_escaped();

                  if (result1 === null) {
                    if (input.charCodeAt(pos) === 36) {
                      result1 = "$";
                      pos++;
                    } else {
                      result1 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"$\"");
                      }
                    }

                    if (result1 === null) {
                      if (input.charCodeAt(pos) === 44) {
                        result1 = ",";
                        pos++;
                      } else {
                        result1 = null;

                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }

                      if (result1 === null) {
                        if (input.charCodeAt(pos) === 59) {
                          result1 = ";";
                          pos++;
                        } else {
                          result1 = null;

                          if (reportFailures === 0) {
                            matchFailed("\";\"");
                          }
                        }

                        if (result1 === null) {
                          if (input.charCodeAt(pos) === 58) {
                            result1 = ":";
                            pos++;
                          } else {
                            result1 = null;

                            if (reportFailures === 0) {
                              matchFailed("\":\"");
                            }
                          }

                          if (result1 === null) {
                            if (input.charCodeAt(pos) === 64) {
                              result1 = "@";
                              pos++;
                            } else {
                              result1 = null;

                              if (reportFailures === 0) {
                                matchFailed("\"@\"");
                              }
                            }

                            if (result1 === null) {
                              if (input.charCodeAt(pos) === 38) {
                                result1 = "&";
                                pos++;
                              } else {
                                result1 = null;

                                if (reportFailures === 0) {
                                  matchFailed("\"&\"");
                                }
                              }

                              if (result1 === null) {
                                if (input.charCodeAt(pos) === 61) {
                                  result1 = "=";
                                  pos++;
                                } else {
                                  result1 = null;

                                  if (reportFailures === 0) {
                                    matchFailed("\"=\"");
                                  }
                                }

                                if (result1 === null) {
                                  if (input.charCodeAt(pos) === 43) {
                                    result1 = "+";
                                    pos++;
                                  } else {
                                    result1 = null;

                                    if (reportFailures === 0) {
                                      matchFailed("\"+\"");
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              result0 = null;
            }

            return result0;
          }

          function parse_query() {
            var result0, result1;
            result0 = [];
            result1 = parse_uric();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_uric();
            }

            return result0;
          }

          function parse_SIP_Version() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"SIP\"");
              }
            }

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 47) {
                result1 = "/";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"/\"");
                }
              }

              if (result1 !== null) {
                result3 = parse_DIGIT();

                if (result3 !== null) {
                  result2 = [];

                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_DIGIT();
                  }
                } else {
                  result2 = null;
                }

                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    result3 = ".";
                    pos++;
                  } else {
                    result3 = null;

                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }

                  if (result3 !== null) {
                    result5 = parse_DIGIT();

                    if (result5 !== null) {
                      result4 = [];

                      while (result5 !== null) {
                        result4.push(result5);
                        result5 = parse_DIGIT();
                      }
                    } else {
                      result4 = null;
                    }

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.sip_version = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_INVITEm() {
            var result0;

            if (input.substr(pos, 6) === "INVITE") {
              result0 = "INVITE";
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"INVITE\"");
              }
            }

            return result0;
          }

          function parse_ACKm() {
            var result0;

            if (input.substr(pos, 3) === "ACK") {
              result0 = "ACK";
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"ACK\"");
              }
            }

            return result0;
          }

          function parse_OPTIONSm() {
            var result0;

            if (input.substr(pos, 7) === "OPTIONS") {
              result0 = "OPTIONS";
              pos += 7;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"OPTIONS\"");
              }
            }

            return result0;
          }

          function parse_BYEm() {
            var result0;

            if (input.substr(pos, 3) === "BYE") {
              result0 = "BYE";
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"BYE\"");
              }
            }

            return result0;
          }

          function parse_CANCELm() {
            var result0;

            if (input.substr(pos, 6) === "CANCEL") {
              result0 = "CANCEL";
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"CANCEL\"");
              }
            }

            return result0;
          }

          function parse_REGISTERm() {
            var result0;

            if (input.substr(pos, 8) === "REGISTER") {
              result0 = "REGISTER";
              pos += 8;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"REGISTER\"");
              }
            }

            return result0;
          }

          function parse_SUBSCRIBEm() {
            var result0;

            if (input.substr(pos, 9) === "SUBSCRIBE") {
              result0 = "SUBSCRIBE";
              pos += 9;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"SUBSCRIBE\"");
              }
            }

            return result0;
          }

          function parse_NOTIFYm() {
            var result0;

            if (input.substr(pos, 6) === "NOTIFY") {
              result0 = "NOTIFY";
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"NOTIFY\"");
              }
            }

            return result0;
          }

          function parse_REFERm() {
            var result0;

            if (input.substr(pos, 5) === "REFER") {
              result0 = "REFER";
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"REFER\"");
              }
            }

            return result0;
          }

          function parse_Method() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_INVITEm();

            if (result0 === null) {
              result0 = parse_ACKm();

              if (result0 === null) {
                result0 = parse_OPTIONSm();

                if (result0 === null) {
                  result0 = parse_BYEm();

                  if (result0 === null) {
                    result0 = parse_CANCELm();

                    if (result0 === null) {
                      result0 = parse_REGISTERm();

                      if (result0 === null) {
                        result0 = parse_SUBSCRIBEm();

                        if (result0 === null) {
                          result0 = parse_NOTIFYm();

                          if (result0 === null) {
                            result0 = parse_REFERm();

                            if (result0 === null) {
                              result0 = parse_token();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.method = input.substring(pos, offset);
                return data.method;
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Status_Line() {
            var result0, result1, result2, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_SIP_Version();

            if (result0 !== null) {
              result1 = parse_SP();

              if (result1 !== null) {
                result2 = parse_Status_Code();

                if (result2 !== null) {
                  result3 = parse_SP();

                  if (result3 !== null) {
                    result4 = parse_Reason_Phrase();

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Status_Code() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_extension_code();

            if (result0 !== null) {
              result0 = function (offset, status_code) {
                data.status_code = parseInt(status_code.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_extension_code() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_DIGIT();

            if (result0 !== null) {
              result1 = parse_DIGIT();

              if (result1 !== null) {
                result2 = parse_DIGIT();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Reason_Phrase() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = [];
            result1 = parse_reserved();

            if (result1 === null) {
              result1 = parse_unreserved();

              if (result1 === null) {
                result1 = parse_escaped();

                if (result1 === null) {
                  result1 = parse_UTF8_NONASCII();

                  if (result1 === null) {
                    result1 = parse_UTF8_CONT();

                    if (result1 === null) {
                      result1 = parse_SP();

                      if (result1 === null) {
                        result1 = parse_HTAB();
                      }
                    }
                  }
                }
              }
            }

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_reserved();

              if (result1 === null) {
                result1 = parse_unreserved();

                if (result1 === null) {
                  result1 = parse_escaped();

                  if (result1 === null) {
                    result1 = parse_UTF8_NONASCII();

                    if (result1 === null) {
                      result1 = parse_UTF8_CONT();

                      if (result1 === null) {
                        result1 = parse_SP();

                        if (result1 === null) {
                          result1 = parse_HTAB();
                        }
                      }
                    }
                  }
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.reason_phrase = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Allow_Events() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_event_type();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_event_type();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_event_type();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Call_ID() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_word();

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"@\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_word();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Contact() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            result0 = parse_STAR();

            if (result0 === null) {
              pos1 = pos;
              result0 = parse_contact_param();

              if (result0 !== null) {
                result1 = [];
                pos2 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_contact_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }

                while (result2 !== null) {
                  result1.push(result2);
                  pos2 = pos;
                  result2 = parse_COMMA();

                  if (result2 !== null) {
                    result3 = parse_contact_param();

                    if (result3 !== null) {
                      result2 = [result2, result3];
                    } else {
                      result2 = null;
                      pos = pos2;
                    }
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                }

                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var idx, length;
                length = data.multi_header.length;

                for (idx = 0; idx < length; idx++) {
                  if (data.multi_header[idx].parsed === null) {
                    data = null;
                    break;
                  }
                }

                if (data !== null) {
                  data = data.multi_header;
                } else {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_contact_param() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();

            if (result0 === null) {
              result0 = parse_name_addr();
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_contact_params();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_contact_params();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var header;
                if (!data.multi_header) data.multi_header = [];

                try {
                  header = new NameAddrHeader(data.uri, data.display_name, data.params);
                  delete data.uri;
                  delete data.display_name;
                  delete data.params;
                } catch (e) {
                  header = null;
                }

                data.multi_header.push({
                  'possition': pos,
                  'offset': offset,
                  'parsed': header
                });
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_name_addr() {
            var result0, result1, result2, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_display_name();
            result0 = result0 !== null ? result0 : "";

            if (result0 !== null) {
              result1 = parse_LAQUOT();

              if (result1 !== null) {
                result2 = parse_SIP_URI();

                if (result2 !== null) {
                  result3 = parse_RAQUOT();

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_display_name() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_LWS();

              if (result2 !== null) {
                result3 = parse_token();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_LWS();

                if (result2 !== null) {
                  result3 = parse_token();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 === null) {
              result0 = parse_quoted_string_clean();
            }

            if (result0 !== null) {
              result0 = function (offset, display_name) {
                if (typeof display_name === 'string') {
                  data.display_name = display_name;
                } else {
                  data.display_name = display_name[1].reduce(function (acc, cur) {
                    return acc + cur[0] + cur[1];
                  }, display_name[0]);
                }
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_contact_params() {
            var result0;
            result0 = parse_c_p_q();

            if (result0 === null) {
              result0 = parse_c_p_expires();

              if (result0 === null) {
                result0 = parse_generic_param();
              }
            }

            return result0;
          }

          function parse_c_p_q() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 1).toLowerCase() === "q") {
              result0 = input.substr(pos, 1);
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"q\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_qvalue();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, q) {
                if (!data.params) data.params = {};
                data.params['q'] = q;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_c_p_expires() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 7).toLowerCase() === "expires") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"expires\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_delta_seconds();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, expires) {
                if (!data.params) data.params = {};
                data.params['expires'] = expires;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_delta_seconds() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, delta_seconds) {
                return parseInt(delta_seconds.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_qvalue() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;

            if (input.charCodeAt(pos) === 48) {
              result0 = "0";
              pos++;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"0\"");
              }
            }

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 46) {
                result1 = ".";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_DIGIT();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";

                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";

                    if (result4 !== null) {
                      result1 = [result1, result2, result3, result4];
                    } else {
                      result1 = null;
                      pos = pos2;
                    }
                  } else {
                    result1 = null;
                    pos = pos2;
                  }
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                return parseFloat(input.substring(pos, offset));
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_generic_param() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              pos2 = pos;
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_gen_value();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, param, value) {
                if (!data.params) data.params = {};

                if (typeof value === 'undefined') {
                  value = undefined;
                } else {
                  value = value[1];
                }

                data.params[param.toLowerCase()] = value;
              }(pos0, result0[0], result0[1]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_gen_value() {
            var result0;
            result0 = parse_token();

            if (result0 === null) {
              result0 = parse_host();

              if (result0 === null) {
                result0 = parse_quoted_string();
              }
            }

            return result0;
          }

          function parse_Content_Disposition() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_disp_type();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_disp_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_disp_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_disp_type() {
            var result0;

            if (input.substr(pos, 6).toLowerCase() === "render") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"render\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 7).toLowerCase() === "session") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"session\"");
                }
              }

              if (result0 === null) {
                if (input.substr(pos, 4).toLowerCase() === "icon") {
                  result0 = input.substr(pos, 4);
                  pos += 4;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"icon\"");
                  }
                }

                if (result0 === null) {
                  if (input.substr(pos, 5).toLowerCase() === "alert") {
                    result0 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"alert\"");
                    }
                  }

                  if (result0 === null) {
                    result0 = parse_token();
                  }
                }
              }
            }

            return result0;
          }

          function parse_disp_param() {
            var result0;
            result0 = parse_handling_param();

            if (result0 === null) {
              result0 = parse_generic_param();
            }

            return result0;
          }

          function parse_handling_param() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 8).toLowerCase() === "handling") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"handling\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                if (input.substr(pos, 8).toLowerCase() === "optional") {
                  result2 = input.substr(pos, 8);
                  pos += 8;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"optional\"");
                  }
                }

                if (result2 === null) {
                  if (input.substr(pos, 8).toLowerCase() === "required") {
                    result2 = input.substr(pos, 8);
                    pos += 8;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"required\"");
                    }
                  }

                  if (result2 === null) {
                    result2 = parse_token();
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Content_Encoding() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_token();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_token();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Content_Length() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, length) {
                data = parseInt(length.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Content_Type() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_media_type();

            if (result0 !== null) {
              result0 = function (offset) {
                data = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_media_type() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_m_type();

            if (result0 !== null) {
              result1 = parse_SLASH();

              if (result1 !== null) {
                result2 = parse_m_subtype();

                if (result2 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_SEMI();

                  if (result4 !== null) {
                    result5 = parse_m_parameter();

                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }

                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_SEMI();

                    if (result4 !== null) {
                      result5 = parse_m_parameter();

                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_m_type() {
            var result0;
            result0 = parse_discrete_type();

            if (result0 === null) {
              result0 = parse_composite_type();
            }

            return result0;
          }

          function parse_discrete_type() {
            var result0;

            if (input.substr(pos, 4).toLowerCase() === "text") {
              result0 = input.substr(pos, 4);
              pos += 4;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"text\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 5).toLowerCase() === "image") {
                result0 = input.substr(pos, 5);
                pos += 5;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"image\"");
                }
              }

              if (result0 === null) {
                if (input.substr(pos, 5).toLowerCase() === "audio") {
                  result0 = input.substr(pos, 5);
                  pos += 5;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"audio\"");
                  }
                }

                if (result0 === null) {
                  if (input.substr(pos, 5).toLowerCase() === "video") {
                    result0 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"video\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.substr(pos, 11).toLowerCase() === "application") {
                      result0 = input.substr(pos, 11);
                      pos += 11;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"application\"");
                      }
                    }

                    if (result0 === null) {
                      result0 = parse_extension_token();
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_composite_type() {
            var result0;

            if (input.substr(pos, 7).toLowerCase() === "message") {
              result0 = input.substr(pos, 7);
              pos += 7;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"message\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 9).toLowerCase() === "multipart") {
                result0 = input.substr(pos, 9);
                pos += 9;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"multipart\"");
                }
              }

              if (result0 === null) {
                result0 = parse_extension_token();
              }
            }

            return result0;
          }

          function parse_extension_token() {
            var result0;
            result0 = parse_token();

            if (result0 === null) {
              result0 = parse_x_token();
            }

            return result0;
          }

          function parse_x_token() {
            var result0, result1;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 2).toLowerCase() === "x-") {
              result0 = input.substr(pos, 2);
              pos += 2;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"x-\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_token();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_m_subtype() {
            var result0;
            result0 = parse_extension_token();

            if (result0 === null) {
              result0 = parse_token();
            }

            return result0;
          }

          function parse_m_parameter() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_m_value();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_m_value() {
            var result0;
            result0 = parse_token();

            if (result0 === null) {
              result0 = parse_quoted_string();
            }

            return result0;
          }

          function parse_CSeq() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_CSeq_value();

            if (result0 !== null) {
              result1 = parse_LWS();

              if (result1 !== null) {
                result2 = parse_Method();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_CSeq_value() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, cseq_value) {
                data.value = parseInt(cseq_value.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();

            if (result0 !== null) {
              result0 = function (offset, expires) {
                data = expires;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Event() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_event_type();

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_generic_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_generic_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, event_type) {
                data.event = event_type.join('').toLowerCase();
              }(pos0, result0[0]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_event_type() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token_nodot();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;

              if (input.charCodeAt(pos) === 46) {
                result2 = ".";
                pos++;
              } else {
                result2 = null;

                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }

              if (result2 !== null) {
                result3 = parse_token_nodot();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;

                if (input.charCodeAt(pos) === 46) {
                  result2 = ".";
                  pos++;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }

                if (result2 !== null) {
                  result3 = parse_token_nodot();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_From() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();

            if (result0 === null) {
              result0 = parse_name_addr();
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_from_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_from_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var tag = data.tag;

                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);

                  if (tag) {
                    data.setParam('tag', tag);
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_from_param() {
            var result0;
            result0 = parse_tag_param();

            if (result0 === null) {
              result0 = parse_generic_param();
            }

            return result0;
          }

          function parse_tag_param() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 3).toLowerCase() === "tag") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"tag\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, tag) {
                data.tag = tag;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Max_Forwards() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result1 = parse_DIGIT();

            if (result1 !== null) {
              result0 = [];

              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_DIGIT();
              }
            } else {
              result0 = null;
            }

            if (result0 !== null) {
              result0 = function (offset, forwards) {
                data = parseInt(forwards.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Min_Expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();

            if (result0 !== null) {
              result0 = function (offset, min_expires) {
                data = min_expires;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Name_Addr_Header() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = [];
            result1 = parse_display_name();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_display_name();
            }

            if (result0 !== null) {
              result1 = parse_LAQUOT();

              if (result1 !== null) {
                result2 = parse_SIP_URI();

                if (result2 !== null) {
                  result3 = parse_RAQUOT();

                  if (result3 !== null) {
                    result4 = [];
                    pos2 = pos;
                    result5 = parse_SEMI();

                    if (result5 !== null) {
                      result6 = parse_generic_param();

                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }

                    while (result5 !== null) {
                      result4.push(result5);
                      pos2 = pos;
                      result5 = parse_SEMI();

                      if (result5 !== null) {
                        result6 = parse_generic_param();

                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    }

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Proxy_Authenticate() {
            var result0;
            result0 = parse_challenge();
            return result0;
          }

          function parse_challenge() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;

            if (input.substr(pos, 6).toLowerCase() === "digest") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"Digest\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_LWS();

              if (result1 !== null) {
                result2 = parse_digest_cln();

                if (result2 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_COMMA();

                  if (result4 !== null) {
                    result5 = parse_digest_cln();

                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }

                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_COMMA();

                    if (result4 !== null) {
                      result5 = parse_digest_cln();

                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            if (result0 === null) {
              result0 = parse_other_challenge();
            }

            return result0;
          }

          function parse_other_challenge() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = parse_LWS();

              if (result1 !== null) {
                result2 = parse_auth_param();

                if (result2 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_COMMA();

                  if (result4 !== null) {
                    result5 = parse_auth_param();

                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }

                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_COMMA();

                    if (result4 !== null) {
                      result5 = parse_auth_param();

                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_auth_param() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 === null) {
                  result2 = parse_quoted_string();
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_digest_cln() {
            var result0;
            result0 = parse_realm();

            if (result0 === null) {
              result0 = parse_domain();

              if (result0 === null) {
                result0 = parse_nonce();

                if (result0 === null) {
                  result0 = parse_opaque();

                  if (result0 === null) {
                    result0 = parse_stale();

                    if (result0 === null) {
                      result0 = parse_algorithm();

                      if (result0 === null) {
                        result0 = parse_qop_options();

                        if (result0 === null) {
                          result0 = parse_auth_param();
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_realm() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 5).toLowerCase() === "realm") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"realm\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_realm_value();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_realm_value() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_quoted_string_clean();

            if (result0 !== null) {
              result0 = function (offset, realm) {
                data.realm = realm;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_domain() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1;
            pos0 = pos;

            if (input.substr(pos, 6).toLowerCase() === "domain") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"domain\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_LDQUOT();

                if (result2 !== null) {
                  result3 = parse_URI();

                  if (result3 !== null) {
                    result4 = [];
                    pos1 = pos;
                    result6 = parse_SP();

                    if (result6 !== null) {
                      result5 = [];

                      while (result6 !== null) {
                        result5.push(result6);
                        result6 = parse_SP();
                      }
                    } else {
                      result5 = null;
                    }

                    if (result5 !== null) {
                      result6 = parse_URI();

                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos1;
                      }
                    } else {
                      result5 = null;
                      pos = pos1;
                    }

                    while (result5 !== null) {
                      result4.push(result5);
                      pos1 = pos;
                      result6 = parse_SP();

                      if (result6 !== null) {
                        result5 = [];

                        while (result6 !== null) {
                          result5.push(result6);
                          result6 = parse_SP();
                        }
                      } else {
                        result5 = null;
                      }

                      if (result5 !== null) {
                        result6 = parse_URI();

                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos1;
                        }
                      } else {
                        result5 = null;
                        pos = pos1;
                      }
                    }

                    if (result4 !== null) {
                      result5 = parse_RDQUOT();

                      if (result5 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5];
                      } else {
                        result0 = null;
                        pos = pos0;
                      }
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_URI() {
            var result0;
            result0 = parse_absoluteURI();

            if (result0 === null) {
              result0 = parse_abs_path();
            }

            return result0;
          }

          function parse_nonce() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 5).toLowerCase() === "nonce") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"nonce\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_nonce_value();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_nonce_value() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_quoted_string_clean();

            if (result0 !== null) {
              result0 = function (offset, nonce) {
                data.nonce = nonce;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_opaque() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 6).toLowerCase() === "opaque") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"opaque\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_quoted_string_clean();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, opaque) {
                data.opaque = opaque;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_stale() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;

            if (input.substr(pos, 5).toLowerCase() === "stale") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"stale\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                pos1 = pos;

                if (input.substr(pos, 4).toLowerCase() === "true") {
                  result2 = input.substr(pos, 4);
                  pos += 4;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"true\"");
                  }
                }

                if (result2 !== null) {
                  result2 = function (offset) {
                    data.stale = true;
                  }(pos1);
                }

                if (result2 === null) {
                  pos = pos1;
                }

                if (result2 === null) {
                  pos1 = pos;

                  if (input.substr(pos, 5).toLowerCase() === "false") {
                    result2 = input.substr(pos, 5);
                    pos += 5;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"false\"");
                    }
                  }

                  if (result2 !== null) {
                    result2 = function (offset) {
                      data.stale = false;
                    }(pos1);
                  }

                  if (result2 === null) {
                    pos = pos1;
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_algorithm() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 9).toLowerCase() === "algorithm") {
              result0 = input.substr(pos, 9);
              pos += 9;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"algorithm\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                if (input.substr(pos, 3).toLowerCase() === "md5") {
                  result2 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"MD5\"");
                  }
                }

                if (result2 === null) {
                  if (input.substr(pos, 8).toLowerCase() === "md5-sess") {
                    result2 = input.substr(pos, 8);
                    pos += 8;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"MD5-sess\"");
                    }
                  }

                  if (result2 === null) {
                    result2 = parse_token();
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, algorithm) {
                data.algorithm = algorithm.toUpperCase();
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_qop_options() {
            var result0, result1, result2, result3, result4, result5, result6;
            var pos0, pos1, pos2;
            pos0 = pos;

            if (input.substr(pos, 3).toLowerCase() === "qop") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"qop\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_LDQUOT();

                if (result2 !== null) {
                  pos1 = pos;
                  result3 = parse_qop_value();

                  if (result3 !== null) {
                    result4 = [];
                    pos2 = pos;

                    if (input.charCodeAt(pos) === 44) {
                      result5 = ",";
                      pos++;
                    } else {
                      result5 = null;

                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }

                    if (result5 !== null) {
                      result6 = parse_qop_value();

                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    } else {
                      result5 = null;
                      pos = pos2;
                    }

                    while (result5 !== null) {
                      result4.push(result5);
                      pos2 = pos;

                      if (input.charCodeAt(pos) === 44) {
                        result5 = ",";
                        pos++;
                      } else {
                        result5 = null;

                        if (reportFailures === 0) {
                          matchFailed("\",\"");
                        }
                      }

                      if (result5 !== null) {
                        result6 = parse_qop_value();

                        if (result6 !== null) {
                          result5 = [result5, result6];
                        } else {
                          result5 = null;
                          pos = pos2;
                        }
                      } else {
                        result5 = null;
                        pos = pos2;
                      }
                    }

                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = pos1;
                    }
                  } else {
                    result3 = null;
                    pos = pos1;
                  }

                  if (result3 !== null) {
                    result4 = parse_RDQUOT();

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_qop_value() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 8).toLowerCase() === "auth-int") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"auth-int\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 4).toLowerCase() === "auth") {
                result0 = input.substr(pos, 4);
                pos += 4;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"auth\"");
                }
              }

              if (result0 === null) {
                result0 = parse_token();
              }
            }

            if (result0 !== null) {
              result0 = function (offset, qop_value) {
                data.qop || (data.qop = []);
                data.qop.push(qop_value.toLowerCase());
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Proxy_Require() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_token();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_token();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Record_Route() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_rec_route();

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_rec_route();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_rec_route();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var idx, length;
                length = data.multi_header.length;

                for (idx = 0; idx < length; idx++) {
                  if (data.multi_header[idx].parsed === null) {
                    data = null;
                    break;
                  }
                }

                if (data !== null) {
                  data = data.multi_header;
                } else {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_rec_route() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_name_addr();

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_generic_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_generic_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var header;
                if (!data.multi_header) data.multi_header = [];

                try {
                  header = new NameAddrHeader(data.uri, data.display_name, data.params);
                  delete data.uri;
                  delete data.display_name;
                  delete data.params;
                } catch (e) {
                  header = null;
                }

                data.multi_header.push({
                  'possition': pos,
                  'offset': offset,
                  'parsed': header
                });
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Reason() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"SIP\"");
              }
            }

            if (result0 === null) {
              result0 = parse_token();
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_reason_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_reason_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, protocol) {
                data.protocol = protocol.toLowerCase();
                if (!data.params) data.params = {};

                if (data.params.text && data.params.text[0] === '"') {
                  var text = data.params.text;
                  data.text = text.substring(1, text.length - 1);
                  delete data.params.text;
                }
              }(pos0, result0[0]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_reason_param() {
            var result0;
            result0 = parse_reason_cause();

            if (result0 === null) {
              result0 = parse_generic_param();
            }

            return result0;
          }

          function parse_reason_cause() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 5).toLowerCase() === "cause") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"cause\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result3 = parse_DIGIT();

                if (result3 !== null) {
                  result2 = [];

                  while (result3 !== null) {
                    result2.push(result3);
                    result3 = parse_DIGIT();
                  }
                } else {
                  result2 = null;
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, cause) {
                data.cause = parseInt(cause.join(''));
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Require() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_token();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_token();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Route() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_route_param();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_route_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_route_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_route_param() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_name_addr();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_generic_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_generic_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Subscription_State() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_substate_value();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_subexp_params();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_subexp_params();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_substate_value() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 6).toLowerCase() === "active") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"active\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 7).toLowerCase() === "pending") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"pending\"");
                }
              }

              if (result0 === null) {
                if (input.substr(pos, 10).toLowerCase() === "terminated") {
                  result0 = input.substr(pos, 10);
                  pos += 10;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"terminated\"");
                  }
                }

                if (result0 === null) {
                  result0 = parse_token();
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.state = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_subexp_params() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 6).toLowerCase() === "reason") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"reason\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_event_reason_value();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, reason) {
                if (typeof reason !== 'undefined') data.reason = reason;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;

              if (input.substr(pos, 7).toLowerCase() === "expires") {
                result0 = input.substr(pos, 7);
                pos += 7;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"expires\"");
                }
              }

              if (result0 !== null) {
                result1 = parse_EQUAL();

                if (result1 !== null) {
                  result2 = parse_delta_seconds();

                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }

              if (result0 !== null) {
                result0 = function (offset, expires) {
                  if (typeof expires !== 'undefined') data.expires = expires;
                }(pos0, result0[2]);
              }

              if (result0 === null) {
                pos = pos0;
              }

              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;

                if (input.substr(pos, 11).toLowerCase() === "retry_after") {
                  result0 = input.substr(pos, 11);
                  pos += 11;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"retry_after\"");
                  }
                }

                if (result0 !== null) {
                  result1 = parse_EQUAL();

                  if (result1 !== null) {
                    result2 = parse_delta_seconds();

                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }

                if (result0 !== null) {
                  result0 = function (offset, retry_after) {
                    if (typeof retry_after !== 'undefined') data.retry_after = retry_after;
                  }(pos0, result0[2]);
                }

                if (result0 === null) {
                  pos = pos0;
                }

                if (result0 === null) {
                  result0 = parse_generic_param();
                }
              }
            }

            return result0;
          }

          function parse_event_reason_value() {
            var result0;

            if (input.substr(pos, 11).toLowerCase() === "deactivated") {
              result0 = input.substr(pos, 11);
              pos += 11;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"deactivated\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 9).toLowerCase() === "probation") {
                result0 = input.substr(pos, 9);
                pos += 9;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"probation\"");
                }
              }

              if (result0 === null) {
                if (input.substr(pos, 8).toLowerCase() === "rejected") {
                  result0 = input.substr(pos, 8);
                  pos += 8;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"rejected\"");
                  }
                }

                if (result0 === null) {
                  if (input.substr(pos, 7).toLowerCase() === "timeout") {
                    result0 = input.substr(pos, 7);
                    pos += 7;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"timeout\"");
                    }
                  }

                  if (result0 === null) {
                    if (input.substr(pos, 6).toLowerCase() === "giveup") {
                      result0 = input.substr(pos, 6);
                      pos += 6;
                    } else {
                      result0 = null;

                      if (reportFailures === 0) {
                        matchFailed("\"giveup\"");
                      }
                    }

                    if (result0 === null) {
                      if (input.substr(pos, 10).toLowerCase() === "noresource") {
                        result0 = input.substr(pos, 10);
                        pos += 10;
                      } else {
                        result0 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"noresource\"");
                        }
                      }

                      if (result0 === null) {
                        if (input.substr(pos, 9).toLowerCase() === "invariant") {
                          result0 = input.substr(pos, 9);
                          pos += 9;
                        } else {
                          result0 = null;

                          if (reportFailures === 0) {
                            matchFailed("\"invariant\"");
                          }
                        }

                        if (result0 === null) {
                          result0 = parse_token();
                        }
                      }
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_Subject() {
            var result0;
            result0 = parse_TEXT_UTF8_TRIM();
            result0 = result0 !== null ? result0 : "";
            return result0;
          }

          function parse_Supported() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_token();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_token();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            result0 = result0 !== null ? result0 : "";
            return result0;
          }

          function parse_To() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();

            if (result0 === null) {
              result0 = parse_name_addr();
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_to_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_to_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                var tag = data.tag;

                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);

                  if (tag) {
                    data.setParam('tag', tag);
                  }
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_to_param() {
            var result0;
            result0 = parse_tag_param();

            if (result0 === null) {
              result0 = parse_generic_param();
            }

            return result0;
          }

          function parse_Via() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_via_param();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_COMMA();

              if (result2 !== null) {
                result3 = parse_via_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_COMMA();

                if (result2 !== null) {
                  result3 = parse_via_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_via_param() {
            var result0, result1, result2, result3, result4, result5;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_sent_protocol();

            if (result0 !== null) {
              result1 = parse_LWS();

              if (result1 !== null) {
                result2 = parse_sent_by();

                if (result2 !== null) {
                  result3 = [];
                  pos1 = pos;
                  result4 = parse_SEMI();

                  if (result4 !== null) {
                    result5 = parse_via_params();

                    if (result5 !== null) {
                      result4 = [result4, result5];
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  } else {
                    result4 = null;
                    pos = pos1;
                  }

                  while (result4 !== null) {
                    result3.push(result4);
                    pos1 = pos;
                    result4 = parse_SEMI();

                    if (result4 !== null) {
                      result5 = parse_via_params();

                      if (result5 !== null) {
                        result4 = [result4, result5];
                      } else {
                        result4 = null;
                        pos = pos1;
                      }
                    } else {
                      result4 = null;
                      pos = pos1;
                    }
                  }

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_via_params() {
            var result0;
            result0 = parse_via_ttl();

            if (result0 === null) {
              result0 = parse_via_maddr();

              if (result0 === null) {
                result0 = parse_via_received();

                if (result0 === null) {
                  result0 = parse_via_branch();

                  if (result0 === null) {
                    result0 = parse_response_port();

                    if (result0 === null) {
                      result0 = parse_generic_param();
                    }
                  }
                }
              }
            }

            return result0;
          }

          function parse_via_ttl() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 3).toLowerCase() === "ttl") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"ttl\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_ttl();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, via_ttl_value) {
                data.ttl = via_ttl_value;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_via_maddr() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 5).toLowerCase() === "maddr") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"maddr\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_host();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, via_maddr) {
                data.maddr = via_maddr;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_via_received() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 8).toLowerCase() === "received") {
              result0 = input.substr(pos, 8);
              pos += 8;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"received\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_IPv4address();

                if (result2 === null) {
                  result2 = parse_IPv6address();
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, via_received) {
                data.received = via_received;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_via_branch() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 6).toLowerCase() === "branch") {
              result0 = input.substr(pos, 6);
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"branch\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, via_branch) {
                data.branch = via_branch;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_response_port() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 5).toLowerCase() === "rport") {
              result0 = input.substr(pos, 5);
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"rport\"");
              }
            }

            if (result0 !== null) {
              pos2 = pos;
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = [];
                result3 = parse_DIGIT();

                while (result3 !== null) {
                  result2.push(result3);
                  result3 = parse_DIGIT();
                }

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                if (typeof response_port !== 'undefined') data.rport = response_port.join('');
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_sent_protocol() {
            var result0, result1, result2, result3, result4;
            var pos0;
            pos0 = pos;
            result0 = parse_protocol_name();

            if (result0 !== null) {
              result1 = parse_SLASH();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result3 = parse_SLASH();

                  if (result3 !== null) {
                    result4 = parse_transport();

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_protocol_name() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 3).toLowerCase() === "sip") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"SIP\"");
              }
            }

            if (result0 === null) {
              result0 = parse_token();
            }

            if (result0 !== null) {
              result0 = function (offset, via_protocol) {
                data.protocol = via_protocol;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_transport() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 3).toLowerCase() === "udp") {
              result0 = input.substr(pos, 3);
              pos += 3;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"UDP\"");
              }
            }

            if (result0 === null) {
              if (input.substr(pos, 3).toLowerCase() === "tcp") {
                result0 = input.substr(pos, 3);
                pos += 3;
              } else {
                result0 = null;

                if (reportFailures === 0) {
                  matchFailed("\"TCP\"");
                }
              }

              if (result0 === null) {
                if (input.substr(pos, 3).toLowerCase() === "tls") {
                  result0 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result0 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"TLS\"");
                  }
                }

                if (result0 === null) {
                  if (input.substr(pos, 4).toLowerCase() === "sctp") {
                    result0 = input.substr(pos, 4);
                    pos += 4;
                  } else {
                    result0 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"SCTP\"");
                    }
                  }

                  if (result0 === null) {
                    result0 = parse_token();
                  }
                }
              }
            }

            if (result0 !== null) {
              result0 = function (offset, via_transport) {
                data.transport = via_transport;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_sent_by() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_via_host();

            if (result0 !== null) {
              pos1 = pos;
              result1 = parse_COLON();

              if (result1 !== null) {
                result2 = parse_via_port();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos1;
                }
              } else {
                result1 = null;
                pos = pos1;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_via_host() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_IPv4address();

            if (result0 === null) {
              result0 = parse_IPv6reference();

              if (result0 === null) {
                result0 = parse_hostname();
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.host = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_via_port() {
            var result0, result1, result2, result3, result4;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();
            result0 = result0 !== null ? result0 : "";

            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result2 = parse_DIGIT();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result3 = parse_DIGIT();
                  result3 = result3 !== null ? result3 : "";

                  if (result3 !== null) {
                    result4 = parse_DIGIT();
                    result4 = result4 !== null ? result4 : "";

                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, via_sent_by_port) {
                data.port = parseInt(via_sent_by_port.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_ttl() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_DIGIT();

            if (result0 !== null) {
              result1 = parse_DIGIT();
              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result2 = parse_DIGIT();
                result2 = result2 !== null ? result2 : "";

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, ttl) {
                return parseInt(ttl.join(''));
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_WWW_Authenticate() {
            var result0;
            result0 = parse_challenge();
            return result0;
          }

          function parse_Session_Expires() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_s_e_expires();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_s_e_params();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_s_e_params();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_s_e_expires() {
            var result0;
            var pos0;
            pos0 = pos;
            result0 = parse_delta_seconds();

            if (result0 !== null) {
              result0 = function (offset, expires) {
                data.expires = expires;
              }(pos0, result0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_s_e_params() {
            var result0;
            result0 = parse_s_e_refresher();

            if (result0 === null) {
              result0 = parse_generic_param();
            }

            return result0;
          }

          function parse_s_e_refresher() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 9).toLowerCase() === "refresher") {
              result0 = input.substr(pos, 9);
              pos += 9;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"refresher\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                if (input.substr(pos, 3).toLowerCase() === "uac") {
                  result2 = input.substr(pos, 3);
                  pos += 3;
                } else {
                  result2 = null;

                  if (reportFailures === 0) {
                    matchFailed("\"uac\"");
                  }
                }

                if (result2 === null) {
                  if (input.substr(pos, 3).toLowerCase() === "uas") {
                    result2 = input.substr(pos, 3);
                    pos += 3;
                  } else {
                    result2 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"uas\"");
                    }
                  }
                }

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, s_e_refresher_value) {
                data.refresher = s_e_refresher_value.toLowerCase();
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_extension_header() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_token();

            if (result0 !== null) {
              result1 = parse_HCOLON();

              if (result1 !== null) {
                result2 = parse_header_value();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_header_value() {
            var result0, result1;
            result0 = [];
            result1 = parse_TEXT_UTF8char();

            if (result1 === null) {
              result1 = parse_UTF8_CONT();

              if (result1 === null) {
                result1 = parse_LWS();
              }
            }

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_TEXT_UTF8char();

              if (result1 === null) {
                result1 = parse_UTF8_CONT();

                if (result1 === null) {
                  result1 = parse_LWS();
                }
              }
            }

            return result0;
          }

          function parse_message_body() {
            var result0, result1;
            result0 = [];
            result1 = parse_OCTET();

            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_OCTET();
            }

            return result0;
          }

          function parse_uuid_URI() {
            var result0, result1;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 5) === "uuid:") {
              result0 = "uuid:";
              pos += 5;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"uuid:\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_uuid();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_uuid() {
            var result0, result1, result2, result3, result4, result5, result6, result7, result8;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_hex8();

            if (result0 !== null) {
              if (input.charCodeAt(pos) === 45) {
                result1 = "-";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_hex4();

                if (result2 !== null) {
                  if (input.charCodeAt(pos) === 45) {
                    result3 = "-";
                    pos++;
                  } else {
                    result3 = null;

                    if (reportFailures === 0) {
                      matchFailed("\"-\"");
                    }
                  }

                  if (result3 !== null) {
                    result4 = parse_hex4();

                    if (result4 !== null) {
                      if (input.charCodeAt(pos) === 45) {
                        result5 = "-";
                        pos++;
                      } else {
                        result5 = null;

                        if (reportFailures === 0) {
                          matchFailed("\"-\"");
                        }
                      }

                      if (result5 !== null) {
                        result6 = parse_hex4();

                        if (result6 !== null) {
                          if (input.charCodeAt(pos) === 45) {
                            result7 = "-";
                            pos++;
                          } else {
                            result7 = null;

                            if (reportFailures === 0) {
                              matchFailed("\"-\"");
                            }
                          }

                          if (result7 !== null) {
                            result8 = parse_hex12();

                            if (result8 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, uuid) {
                data = input.substring(pos + 5, offset);
              }(pos0, result0[0]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_hex4() {
            var result0, result1, result2, result3;
            var pos0;
            pos0 = pos;
            result0 = parse_HEXDIG();

            if (result0 !== null) {
              result1 = parse_HEXDIG();

              if (result1 !== null) {
                result2 = parse_HEXDIG();

                if (result2 !== null) {
                  result3 = parse_HEXDIG();

                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = pos0;
                  }
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_hex8() {
            var result0, result1;
            var pos0;
            pos0 = pos;
            result0 = parse_hex4();

            if (result0 !== null) {
              result1 = parse_hex4();

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_hex12() {
            var result0, result1, result2;
            var pos0;
            pos0 = pos;
            result0 = parse_hex4();

            if (result0 !== null) {
              result1 = parse_hex4();

              if (result1 !== null) {
                result2 = parse_hex4();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos0;
                }
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_Refer_To() {
            var result0, result1, result2, result3;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_SIP_URI_noparams();

            if (result0 === null) {
              result0 = parse_name_addr();
            }

            if (result0 !== null) {
              result1 = [];
              pos2 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_generic_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos2;
                }
              } else {
                result2 = null;
                pos = pos2;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos2 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_generic_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos2;
                  }
                } else {
                  result2 = null;
                  pos = pos2;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                try {
                  data = new NameAddrHeader(data.uri, data.display_name, data.params);
                } catch (e) {
                  data = -1;
                }
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_Replaces() {
            var result0, result1, result2, result3;
            var pos0, pos1;
            pos0 = pos;
            result0 = parse_call_id();

            if (result0 !== null) {
              result1 = [];
              pos1 = pos;
              result2 = parse_SEMI();

              if (result2 !== null) {
                result3 = parse_replaces_param();

                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos1;
                }
              } else {
                result2 = null;
                pos = pos1;
              }

              while (result2 !== null) {
                result1.push(result2);
                pos1 = pos;
                result2 = parse_SEMI();

                if (result2 !== null) {
                  result3 = parse_replaces_param();

                  if (result3 !== null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos1;
                  }
                } else {
                  result2 = null;
                  pos = pos1;
                }
              }

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos0;
              }
            } else {
              result0 = null;
              pos = pos0;
            }

            return result0;
          }

          function parse_call_id() {
            var result0, result1, result2;
            var pos0, pos1, pos2;
            pos0 = pos;
            pos1 = pos;
            result0 = parse_word();

            if (result0 !== null) {
              pos2 = pos;

              if (input.charCodeAt(pos) === 64) {
                result1 = "@";
                pos++;
              } else {
                result1 = null;

                if (reportFailures === 0) {
                  matchFailed("\"@\"");
                }
              }

              if (result1 !== null) {
                result2 = parse_word();

                if (result2 !== null) {
                  result1 = [result1, result2];
                } else {
                  result1 = null;
                  pos = pos2;
                }
              } else {
                result1 = null;
                pos = pos2;
              }

              result1 = result1 !== null ? result1 : "";

              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.call_id = input.substring(pos, offset);
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_replaces_param() {
            var result0;
            result0 = parse_to_tag();

            if (result0 === null) {
              result0 = parse_from_tag();

              if (result0 === null) {
                result0 = parse_early_flag();

                if (result0 === null) {
                  result0 = parse_generic_param();
                }
              }
            }

            return result0;
          }

          function parse_to_tag() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 6) === "to-tag") {
              result0 = "to-tag";
              pos += 6;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"to-tag\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, to_tag) {
                data.to_tag = to_tag;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_from_tag() {
            var result0, result1, result2;
            var pos0, pos1;
            pos0 = pos;
            pos1 = pos;

            if (input.substr(pos, 8) === "from-tag") {
              result0 = "from-tag";
              pos += 8;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"from-tag\"");
              }
            }

            if (result0 !== null) {
              result1 = parse_EQUAL();

              if (result1 !== null) {
                result2 = parse_token();

                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }

            if (result0 !== null) {
              result0 = function (offset, from_tag) {
                data.from_tag = from_tag;
              }(pos0, result0[2]);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function parse_early_flag() {
            var result0;
            var pos0;
            pos0 = pos;

            if (input.substr(pos, 10) === "early-only") {
              result0 = "early-only";
              pos += 10;
            } else {
              result0 = null;

              if (reportFailures === 0) {
                matchFailed("\"early-only\"");
              }
            }

            if (result0 !== null) {
              result0 = function (offset) {
                data.early_only = true;
              }(pos0);
            }

            if (result0 === null) {
              pos = pos0;
            }

            return result0;
          }

          function cleanupExpected(expected) {
            expected.sort();
            var lastExpected = null;
            var cleanExpected = [];

            for (var i = 0; i < expected.length; i++) {
              if (expected[i] !== lastExpected) {
                cleanExpected.push(expected[i]);
                lastExpected = expected[i];
              }
            }

            return cleanExpected;
          }

          function computeErrorPosition() {
            /*
             * The first idea was to use |String.split| to break the input up to the
             * error position along newlines and derive the line and column from
             * there. However IE's |split| implementation is so broken that it was
             * enough to prevent it.
             */
            var line = 1;
            var column = 1;
            var seenCR = false;

            for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
              var ch = input.charAt(i);

              if (ch === "\n") {
                if (!seenCR) {
                  line++;
                }

                column = 1;
                seenCR = false;
              } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                line++;
                column = 1;
                seenCR = true;
              } else {
                column++;
                seenCR = false;
              }
            }

            return {
              line: line,
              column: column
            };
          }

          var URI = require('./URI');

          var NameAddrHeader = require('./NameAddrHeader');

          var data = {};
          var result = parseFunctions[startRule]();
          /*
           * The parser is now in one of the following three states:
           *
           * 1. The parser successfully parsed the whole input.
           *
           *    - |result !== null|
           *    - |pos === input.length|
           *    - |rightmostFailuresExpected| may or may not contain something
           *
           * 2. The parser successfully parsed only a part of the input.
           *
           *    - |result !== null|
           *    - |pos < input.length|
           *    - |rightmostFailuresExpected| may or may not contain something
           *
           * 3. The parser did not successfully parse any part of the input.
           *
           *   - |result === null|
           *   - |pos === 0|
           *   - |rightmostFailuresExpected| contains at least one failure
           *
           * All code following this comment (including called functions) must
           * handle these states.
           */

          if (result === null || pos !== input.length) {
            var offset = Math.max(pos, rightmostFailuresPos);
            var found = offset < input.length ? input.charAt(offset) : null;
            var errorPosition = computeErrorPosition();
            new this.SyntaxError(cleanupExpected(rightmostFailuresExpected), found, offset, errorPosition.line, errorPosition.column);
            return -1;
          }

          return data;
        },

        /* Returns the parser source code. */
        toSource: function toSource() {
          return this._source;
        }
      };
      /* Thrown when a parser encounters a syntax error. */

      result.SyntaxError = function (expected, found, offset, line, column) {
        function buildMessage(expected, found) {
          var expectedHumanized, foundHumanized;

          switch (expected.length) {
            case 0:
              expectedHumanized = "end of input";
              break;

            case 1:
              expectedHumanized = expected[0];
              break;

            default:
              expectedHumanized = expected.slice(0, expected.length - 1).join(", ") + " or " + expected[expected.length - 1];
          }

          foundHumanized = found ? quote(found) : "end of input";
          return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
        }

        this.name = "SyntaxError";
        this.expected = expected;
        this.found = found;
        this.message = buildMessage(expected, found);
        this.offset = offset;
        this.line = line;
        this.column = column;
      };

      result.SyntaxError.prototype = Error.prototype;
      return result;
    }();
  },{"./NameAddrHeader":10,"./URI":25}],8:[function(require,module,exports){
    "use strict";

    var pkg = require('../package.json');

    var C = require('./Constants');

    var Exceptions = require('./Exceptions');

    var Utils = require('./Utils');

    var UA = require('./UA');

    var URI = require('./URI');

    var NameAddrHeader = require('./NameAddrHeader');

    var Grammar = require('./Grammar');

    var WebSocketInterface = require('./WebSocketInterface');

    var debug = require('debug')('JsSIP');

    debug('version %s', pkg.version);
    /**
     * Expose the JsSIP module.
     */

    module.exports = {
      C: C,
      Exceptions: Exceptions,
      Utils: Utils,
      UA: UA,
      URI: URI,
      NameAddrHeader: NameAddrHeader,
      WebSocketInterface: WebSocketInterface,
      Grammar: Grammar,
      debug: require('debug'),

      get name() {
        return pkg.title;
      },

      get version() {
        return pkg.version;
      }

    };
  },{"../package.json":38,"./Constants":2,"./Exceptions":6,"./Grammar":7,"./NameAddrHeader":10,"./UA":24,"./URI":25,"./Utils":26,"./WebSocketInterface":27,"debug":30}],9:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var JsSIP_C = require('./Constants');

    var SIPMessage = require('./SIPMessage');

    var Utils = require('./Utils');

    var RequestSender = require('./RequestSender');

    var Exceptions = require('./Exceptions');

    var debug = require('debug')('JsSIP:Message');

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(Message, _EventEmitter);

      var _super = _createSuper(Message);

      function Message(ua) {
        var _this;

        _classCallCheck(this, Message);

        _this = _super.call(this);
        _this._ua = ua;
        _this._request = null;
        _this._closed = false;
        _this._direction = null;
        _this._local_identity = null;
        _this._remote_identity = null;

        _this._is_replied = false;

        _this._data = {};
        return _this;
      }

      _createClass(Message, [{
        key: "send",
        value: function send(target, body) {
          var _this2 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          var originalTarget = target;

          if (target === undefined || body === undefined) {
            throw new TypeError('Not enough arguments');
          }


          target = this._ua.normalizeTarget(target);

          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }


          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = Utils.cloneObject(options.eventHandlers);
          var contentType = options.contentType || 'text/plain';

          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }

          extraHeaders.push("Content-Type: ".concat(contentType));
          this._request = new SIPMessage.OutgoingRequest(JsSIP_C.MESSAGE, target, this._ua, null, extraHeaders);

          if (body) {
            this._request.body = body;
          }

          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this2._onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this2._onTransportError();
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this2._receiveResponse(response);
            }
          });

          this._newMessage('local', this._request);

          request_sender.send();
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          this._request = request;

          this._newMessage('remote', request);


          if (!this._is_replied) {
            this._is_replied = true;
            request.reply(200);
          }

          this._close();
        }
        /**
         * Accept the incoming Message
         * Only valid for incoming Messages
         */

      }, {
        key: "accept",
        value: function accept() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;

          if (this._direction !== 'incoming') {
            throw new Exceptions.NotSupportedError('"accept" not supported for outgoing Message');
          }

          if (this._is_replied) {
            throw new Error('incoming Message already replied');
          }

          this._is_replied = true;

          this._request.reply(200, null, extraHeaders, body);
        }
        /**
         * Reject the incoming Message
         * Only valid for incoming Messages
         */

      }, {
        key: "reject",
        value: function reject() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var status_code = options.status_code || 480;
          var reason_phrase = options.reason_phrase;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;

          if (this._direction !== 'incoming') {
            throw new Exceptions.NotSupportedError('"reject" not supported for outgoing Message');
          }

          if (this._is_replied) {
            throw new Error('incoming Message already replied');
          }

          if (status_code < 300 || status_code >= 700) {
            throw new TypeError("Invalid status_code: ".concat(status_code));
          }

          this._is_replied = true;

          this._request.reply(status_code, reason_phrase, extraHeaders, body);
        }
      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          if (this._closed) {
            return;
          }

          switch (true) {
            case /^1[0-9]{2}$/.test(response.status_code):
              break;

            case /^2[0-9]{2}$/.test(response.status_code):
              this._succeeded('remote', response);

              break;

            default:
            {
              var cause = Utils.sipErrorCause(response.status_code);

              this._failed('remote', response, cause);

              break;
            }
          }
        }
      }, {
        key: "_onRequestTimeout",
        value: function _onRequestTimeout() {
          if (this._closed) {
            return;
          }

          this._failed('system', null, JsSIP_C.causes.REQUEST_TIMEOUT);
        }
      }, {
        key: "_onTransportError",
        value: function _onTransportError() {
          if (this._closed) {
            return;
          }

          this._failed('system', null, JsSIP_C.causes.CONNECTION_ERROR);
        }
      }, {
        key: "_close",
        value: function _close() {
          this._closed = true;

          this._ua.destroyMessage(this);
        }
        /**
         * Internal Callbacks
         */

      }, {
        key: "_newMessage",
        value: function _newMessage(originator, request) {
          if (originator === 'remote') {
            this._direction = 'incoming';
            this._local_identity = request.to;
            this._remote_identity = request.from;
          } else if (originator === 'local') {
            this._direction = 'outgoing';
            this._local_identity = request.from;
            this._remote_identity = request.to;
          }

          this._ua.newMessage(this, {
            originator: originator,
            message: this,
            request: request
          });
        }
      }, {
        key: "_failed",
        value: function _failed(originator, response, cause) {
          debug('MESSAGE failed');

          this._close();

          debug('emit "failed"');
          this.emit('failed', {
            originator: originator,
            response: response || null,
            cause: cause
          });
        }
      }, {
        key: "_succeeded",
        value: function _succeeded(originator, response) {
          debug('MESSAGE succeeded');

          this._close();

          debug('emit "succeeded"');
          this.emit('succeeded', {
            originator: originator,
            response: response
          });
        }
      }, {
        key: "direction",
        get: function get() {
          return this._direction;
        }
      }, {
        key: "local_identity",
        get: function get() {
          return this._local_identity;
        }
      }, {
        key: "remote_identity",
        get: function get() {
          return this._remote_identity;
        }
      }]);

      return Message;
    }(EventEmitter);
  },{"./Constants":2,"./Exceptions":6,"./RequestSender":18,"./SIPMessage":19,"./Utils":26,"debug":30,"events":29}],10:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var URI = require('./URI');

    var Grammar = require('./Grammar');

    module.exports = /*#__PURE__*/function () {
      _createClass(NameAddrHeader, null, [{
        key: "parse",

        /**
         * Parse the given string and returns a NameAddrHeader instance or undefined if
         * it is an invalid NameAddrHeader.
         */
        value: function parse(name_addr_header) {
          name_addr_header = Grammar.parse(name_addr_header, 'Name_Addr_Header');

          if (name_addr_header !== -1) {
            return name_addr_header;
          } else {
            return undefined;
          }
        }
      }]);

      function NameAddrHeader(uri, display_name, parameters) {
        _classCallCheck(this, NameAddrHeader);

        if (!uri || !(uri instanceof URI)) {
          throw new TypeError('missing or invalid "uri" parameter');
        }


        this._uri = uri;
        this._parameters = {};
        this.display_name = display_name;

        for (var param in parameters) {
          if (Object.prototype.hasOwnProperty.call(parameters, param)) {
            this.setParam(param, parameters[param]);
          }
        }
      }

      _createClass(NameAddrHeader, [{
        key: "setParam",
        value: function setParam(key, value) {
          if (key) {
            this._parameters[key.toLowerCase()] = typeof value === 'undefined' || value === null ? null : value.toString();
          }
        }
      }, {
        key: "getParam",
        value: function getParam(key) {
          if (key) {
            return this._parameters[key.toLowerCase()];
          }
        }
      }, {
        key: "hasParam",
        value: function hasParam(key) {
          if (key) {
            return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;
          }
        }
      }, {
        key: "deleteParam",
        value: function deleteParam(parameter) {
          parameter = parameter.toLowerCase();

          if (this._parameters.hasOwnProperty(parameter)) {
            var value = this._parameters[parameter];
            delete this._parameters[parameter];
            return value;
          }
        }
      }, {
        key: "clearParams",
        value: function clearParams() {
          this._parameters = {};
        }
      }, {
        key: "clone",
        value: function clone() {
          return new NameAddrHeader(this._uri.clone(), this._display_name, JSON.parse(JSON.stringify(this._parameters)));
        }
      }, {
        key: "_quote",
        value: function _quote(str) {
          return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
        }
      }, {
        key: "toString",
        value: function toString() {
          var body = this._display_name ? "\"".concat(this._quote(this._display_name), "\" ") : '';
          body += "<".concat(this._uri.toString(), ">");

          for (var parameter in this._parameters) {
            if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {
              body += ";".concat(parameter);

              if (this._parameters[parameter] !== null) {
                body += "=".concat(this._parameters[parameter]);
              }
            }
          }

          return body;
        }
      }, {
        key: "uri",
        get: function get() {
          return this._uri;
        }
      }, {
        key: "display_name",
        get: function get() {
          return this._display_name;
        },
        set: function set(value) {
          this._display_name = value === 0 ? '0' : value;
        }
      }]);

      return NameAddrHeader;
    }();
  },{"./Grammar":7,"./URI":25}],11:[function(require,module,exports){
    "use strict";

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var Grammar = require('./Grammar');

    var SIPMessage = require('./SIPMessage');

    var debugerror = require('debug')('JsSIP:ERROR:Parser');

    debugerror.log = console.warn.bind(console);
    /**
     * Parse SIP Message
     */

    exports.parseMessage = function (data, ua) {
      var message;
      var bodyStart;
      var headerEnd = data.indexOf('\r\n');

      if (headerEnd === -1) {
        debugerror('parseMessage() | no CRLF found, not a SIP message');
        return;
      }


      var firstLine = data.substring(0, headerEnd);
      var parsed = Grammar.parse(firstLine, 'Request_Response');

      if (parsed === -1) {
        debugerror("parseMessage() | error parsing first line of SIP message: \"".concat(firstLine, "\""));
        return;
      } else if (!parsed.status_code) {
        message = new SIPMessage.IncomingRequest(ua);
        message.method = parsed.method;
        message.ruri = parsed.uri;
      } else {
        message = new SIPMessage.IncomingResponse();
        message.status_code = parsed.status_code;
        message.reason_phrase = parsed.reason_phrase;
      }

      message.data = data;
      var headerStart = headerEnd + 2;
      /* Loop over every line in data. Detect the end of each header and parse
      * it or simply add to the headers collection.
      */

      while (true) {
        headerEnd = getHeader(data, headerStart);

        if (headerEnd === -2) {
          bodyStart = headerStart + 2;
          break;
        }
        else if (headerEnd === -1) {
          debugerror('parseMessage() | malformed message');
          return;
        }

        parsed = parseHeader(message, data, headerStart, headerEnd);

        if (parsed !== true) {
          debugerror('parseMessage() |', parsed.error);
          return;
        }

        headerStart = headerEnd + 2;
      }
      /* RFC3261 18.3.
       * If there are additional bytes in the transport packet
       * beyond the end of the body, they MUST be discarded.
       */


      if (message.hasHeader('content-length')) {
        var contentLength = message.getHeader('content-length');
        message.body = data.substr(bodyStart, contentLength);
      } else {
        message.body = data.substring(bodyStart);
      }

      return message;
    };
    /**
     * Extract and parse every header of a SIP message.
     */


    function getHeader(data, headerStart) {
      var start = headerStart;

      var end = 0;

      var partialEnd = 0;

      if (data.substring(start, start + 2).match(/(^\r\n)/)) {
        return -2;
      }

      while (end === 0) {
        partialEnd = data.indexOf('\r\n', start);

        if (partialEnd === -1) {
          return partialEnd;
        }

        if (!data.substring(partialEnd + 2, partialEnd + 4).match(/(^\r\n)/) && data.charAt(partialEnd + 2).match(/(^\s+)/)) {
          start = partialEnd + 2;
        } else {
          end = partialEnd;
        }
      }

      return end;
    }

    function parseHeader(message, data, headerStart, headerEnd) {
      var parsed;
      var hcolonIndex = data.indexOf(':', headerStart);
      var headerName = data.substring(headerStart, hcolonIndex).trim();
      var headerValue = data.substring(hcolonIndex + 1, headerEnd).trim();

      switch (headerName.toLowerCase()) {
        case 'via':
        case 'v':
          message.addHeader('via', headerValue);

          if (message.getHeaders('via').length === 1) {
            parsed = message.parseHeader('Via');

            if (parsed) {
              message.via = parsed;
              message.via_branch = parsed.branch;
            }
          } else {
            parsed = 0;
          }

          break;

        case 'from':
        case 'f':
          message.setHeader('from', headerValue);
          parsed = message.parseHeader('from');

          if (parsed) {
            message.from = parsed;
            message.from_tag = parsed.getParam('tag');
          }

          break;

        case 'to':
        case 't':
          message.setHeader('to', headerValue);
          parsed = message.parseHeader('to');

          if (parsed) {
            message.to = parsed;
            message.to_tag = parsed.getParam('tag');
          }

          break;

        case 'record-route':
          parsed = Grammar.parse(headerValue, 'Record_Route');

          if (parsed === -1) {
            parsed = undefined;
          } else {
            var _iterator = _createForOfIteratorHelper(parsed),
              _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var header = _step.value;
                message.addHeader('record-route', headerValue.substring(header.possition, header.offset));
                message.headers['Record-Route'][message.getHeaders('record-route').length - 1].parsed = header.parsed;
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }

          break;

        case 'call-id':
        case 'i':
          message.setHeader('call-id', headerValue);
          parsed = message.parseHeader('call-id');

          if (parsed) {
            message.call_id = headerValue;
          }

          break;

        case 'contact':
        case 'm':
          parsed = Grammar.parse(headerValue, 'Contact');

          if (parsed === -1) {
            parsed = undefined;
          } else {
            var _iterator2 = _createForOfIteratorHelper(parsed),
              _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var _header = _step2.value;
                message.addHeader('contact', headerValue.substring(_header.possition, _header.offset));
                message.headers.Contact[message.getHeaders('contact').length - 1].parsed = _header.parsed;
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }

          break;

        case 'content-length':
        case 'l':
          message.setHeader('content-length', headerValue);
          parsed = message.parseHeader('content-length');
          break;

        case 'content-type':
        case 'c':
          message.setHeader('content-type', headerValue);
          parsed = message.parseHeader('content-type');
          break;

        case 'cseq':
          message.setHeader('cseq', headerValue);
          parsed = message.parseHeader('cseq');

          if (parsed) {
            message.cseq = parsed.value;
          }

          if (message instanceof SIPMessage.IncomingResponse) {
            message.method = parsed.method;
          }

          break;

        case 'max-forwards':
          message.setHeader('max-forwards', headerValue);
          parsed = message.parseHeader('max-forwards');
          break;

        case 'www-authenticate':
          message.setHeader('www-authenticate', headerValue);
          parsed = message.parseHeader('www-authenticate');
          break;

        case 'proxy-authenticate':
          message.setHeader('proxy-authenticate', headerValue);
          parsed = message.parseHeader('proxy-authenticate');
          break;

        case 'session-expires':
        case 'x':
          message.setHeader('session-expires', headerValue);
          parsed = message.parseHeader('session-expires');

          if (parsed) {
            message.session_expires = parsed.expires;
            message.session_expires_refresher = parsed.refresher;
          }

          break;

        case 'refer-to':
        case 'r':
          message.setHeader('refer-to', headerValue);
          parsed = message.parseHeader('refer-to');

          if (parsed) {
            message.refer_to = parsed;
          }

          break;

        case 'replaces':
          message.setHeader('replaces', headerValue);
          parsed = message.parseHeader('replaces');

          if (parsed) {
            message.replaces = parsed;
          }

          break;

        case 'event':
        case 'o':
          message.setHeader('event', headerValue);
          parsed = message.parseHeader('event');

          if (parsed) {
            message.event = parsed;
          }

          break;

        default:
          message.addHeader(headerName, headerValue);
          parsed = 0;
      }

      if (parsed === undefined) {
        return {
          error: "error parsing header \"".concat(headerName, "\"")
        };
      } else {
        return true;
      }
    }
  },{"./Grammar":7,"./SIPMessage":19,"debug":30}],12:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    /* globals RTCPeerConnection: false, RTCSessionDescription: false */
    var EventEmitter = require('events').EventEmitter;

    var sdp_transform = require('sdp-transform');

    var JsSIP_C = require('./Constants');

    var Exceptions = require('./Exceptions');

    var Transactions = require('./Transactions');

    var Utils = require('./Utils');

    var Timers = require('./Timers');

    var SIPMessage = require('./SIPMessage');

    var Dialog = require('./Dialog');

    var RequestSender = require('./RequestSender');

    var RTCSession_DTMF = require('./RTCSession/DTMF');

    var RTCSession_Info = require('./RTCSession/Info');

    var RTCSession_ReferNotifier = require('./RTCSession/ReferNotifier');

    var RTCSession_ReferSubscriber = require('./RTCSession/ReferSubscriber');

    var URI = require('./URI');

    var debug = require('debug')('JsSIP:RTCSession');

    var debugerror = require('debug')('JsSIP:ERROR:RTCSession');

    debugerror.log = console.warn.bind(console);
    var C = {
      STATUS_NULL: 0,
      STATUS_INVITE_SENT: 1,
      STATUS_1XX_RECEIVED: 2,
      STATUS_INVITE_RECEIVED: 3,
      STATUS_WAITING_FOR_ANSWER: 4,
      STATUS_ANSWERED: 5,
      STATUS_WAITING_FOR_ACK: 6,
      STATUS_CANCELED: 7,
      STATUS_TERMINATED: 8,
      STATUS_CONFIRMED: 9
    };
    /**
     * Local variables.
     */

    var holdMediaTypes = ['audio', 'video'];

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(RTCSession, _EventEmitter);

      var _super = _createSuper(RTCSession);

      _createClass(RTCSession, null, [{
        key: "C",

        /**
         * Expose C object.
         */
        get: function get() {
          return C;
        }
      }]);

      function RTCSession(ua) {
        var _this;

        _classCallCheck(this, RTCSession);

        debug('new');
        _this = _super.call(this);
        _this._id = null;
        _this._ua = ua;
        _this._status = C.STATUS_NULL;
        _this._dialog = null;
        _this._earlyDialogs = {};
        _this._contact = null;
        _this._from_tag = null;
        _this._to_tag = null;
        _this._connection = null;
        _this._connectionPromiseQueue = Promise.resolve();

        _this._request = null;

        _this._is_canceled = false;
        _this._cancel_reason = '';

        _this._is_confirmed = false;

        _this._late_sdp = false;
        _this._rtcOfferConstraints = null;
        _this._rtcAnswerConstraints = null;

        _this._localMediaStream = null;
        _this._localMediaStreamLocallyGenerated = false;

        _this._rtcReady = true;

        _this._timers = {
          ackTimer: null,
          expiresTimer: null,
          invite2xxTimer: null,
          userNoAnswerTimer: null
        };

        _this._direction = null;
        _this._local_identity = null;
        _this._remote_identity = null;
        _this._start_time = null;
        _this._end_time = null;
        _this._tones = null;

        _this._audioMuted = false;
        _this._videoMuted = false;
        _this._localHold = false;
        _this._remoteHold = false;

        _this._sessionTimers = {
          enabled: _this._ua.configuration.session_timers,
          refreshMethod: _this._ua.configuration.session_timers_refresh_method,
          defaultExpires: JsSIP_C.SESSION_EXPIRES,
          currentExpires: null,
          running: false,
          refresher: false,
          timer: null

        };

        _this._referSubscribers = {};

        _this._data = {};
        return _this;
      }
      /**
       * User API
       */


      _createClass(RTCSession, [{
        key: "isInProgress",
        value: function isInProgress() {
          switch (this._status) {
            case C.STATUS_NULL:
            case C.STATUS_INVITE_SENT:
            case C.STATUS_1XX_RECEIVED:
            case C.STATUS_INVITE_RECEIVED:
            case C.STATUS_WAITING_FOR_ANSWER:
              return true;

            default:
              return false;
          }
        }
      }, {
        key: "isEstablished",
        value: function isEstablished() {
          switch (this._status) {
            case C.STATUS_ANSWERED:
            case C.STATUS_WAITING_FOR_ACK:
            case C.STATUS_CONFIRMED:
              return true;

            default:
              return false;
          }
        }
      }, {
        key: "isEnded",
        value: function isEnded() {
          switch (this._status) {
            case C.STATUS_CANCELED:
            case C.STATUS_TERMINATED:
              return true;

            default:
              return false;
          }
        }
      }, {
        key: "isMuted",
        value: function isMuted() {
          return {
            audio: this._audioMuted,
            video: this._videoMuted
          };
        }
      }, {
        key: "isOnHold",
        value: function isOnHold() {
          return {
            local: this._localHold,
            remote: this._remoteHold
          };
        }
      }, {
        key: "connect",
        value: function connect(target) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          var initCallback = arguments.length > 2 ? arguments[2] : undefined;
          debug('connect()');
          var originalTarget = target;
          var eventHandlers = Utils.cloneObject(options.eventHandlers);
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var mediaConstraints = Utils.cloneObject(options.mediaConstraints, {
            audio: true,
            video: true
          });
          var mediaStream = options.mediaStream || null;
          var pcConfig = Utils.cloneObject(options.pcConfig, {
            iceServers: []
          });
          var rtcConstraints = options.rtcConstraints || null;
          var rtcOfferConstraints = options.rtcOfferConstraints || null;
          this._rtcOfferConstraints = rtcOfferConstraints;
          this._rtcAnswerConstraints = options.rtcAnswerConstraints || null;
          this._data = options.data || this._data;

          if (target === undefined) {
            throw new TypeError('Not enough arguments');
          }

          if (this._status !== C.STATUS_NULL) {
            throw new Exceptions.InvalidStateError(this._status);
          }


          if (!window.RTCPeerConnection) {
            throw new Exceptions.NotSupportedError('WebRTC not supported');
          }


          target = this._ua.normalizeTarget(target);

          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }


          if (this._sessionTimers.enabled) {
            if (Utils.isDecimal(options.sessionTimersExpires)) {
              if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {
                this._sessionTimers.defaultExpires = options.sessionTimersExpires;
              } else {
                this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
              }
            }
          }


          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }


          this._from_tag = Utils.newTag();

          var anonymous = options.anonymous || false;
          var requestParams = {
            from_tag: this._from_tag
          };
          this._contact = this._ua.contact.toString({
            anonymous: anonymous,
            outbound: true
          });

          if (anonymous) {
            requestParams.from_display_name = 'Anonymous';
            requestParams.from_uri = new URI('sip', 'anonymous', 'anonymous.invalid');
            extraHeaders.push("P-Preferred-Identity: ".concat(this._ua.configuration.uri.toString()));
            extraHeaders.push('Privacy: id');
          }

          extraHeaders.push("Contact: ".concat(this._contact));
          extraHeaders.push('Content-Type: application/sdp');

          if (this._sessionTimers.enabled) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.defaultExpires));
          }

          this._request = new SIPMessage.InitialOutgoingInviteRequest(target, this._ua, requestParams, extraHeaders);
          this._id = this._request.call_id + this._from_tag;

          this._createRTCConnection(pcConfig, rtcConstraints);


          this._direction = 'outgoing';
          this._local_identity = this._request.from;
          this._remote_identity = this._request.to;

          if (initCallback) {
            initCallback(this);
          }

          this._newRTCSession('local', this._request);

          this._sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream);
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request, initCallback) {
          var _this2 = this;

          debug('init_incoming()');
          var expires;
          var contentType = request.getHeader('Content-Type');

          if (request.body && contentType !== 'application/sdp') {
            request.reply(415);
            return;
          }


          this._status = C.STATUS_INVITE_RECEIVED;
          this._from_tag = request.from_tag;
          this._id = request.call_id + this._from_tag;
          this._request = request;
          this._contact = this._ua.contact.toString();

          if (request.hasHeader('expires')) {
            expires = request.getHeader('expires') * 1000;
          }
          /* Set the to_tag before
           * replying a response code that will create a dialog.
           */


          request.to_tag = Utils.newTag();

          if (!this._createDialog(request, 'UAS', true)) {
            request.reply(500, 'Missing Contact header field');
            return;
          }

          if (request.body) {
            this._late_sdp = false;
          } else {
            this._late_sdp = true;
          }

          this._status = C.STATUS_WAITING_FOR_ANSWER;

          this._timers.userNoAnswerTimer = setTimeout(function () {
            request.reply(408);

            _this2._failed('local', null, JsSIP_C.causes.NO_ANSWER);
          }, this._ua.configuration.no_answer_timeout);
          /* Set expiresTimer
           * RFC3261 13.3.1
           */

          if (expires) {
            this._timers.expiresTimer = setTimeout(function () {
              if (_this2._status === C.STATUS_WAITING_FOR_ANSWER) {
                request.reply(487);

                _this2._failed('system', null, JsSIP_C.causes.EXPIRES);
              }
            }, expires);
          }


          this._direction = 'incoming';
          this._local_identity = request.to;
          this._remote_identity = request.from;
          if (initCallback) {
            initCallback(this);
          }


          this._newRTCSession('remote', request);


          if (this._status === C.STATUS_TERMINATED) {
            return;
          }


          request.reply(180, null, ["Contact: ".concat(this._contact)]);

          this._progress('local', null);
        }
        /**
         * Answer the call.
         */

      }, {
        key: "answer",
        value: function answer() {
          var _this3 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          debug('answer()');
          var request = this._request;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var mediaConstraints = Utils.cloneObject(options.mediaConstraints);
          var mediaStream = options.mediaStream || null;
          var pcConfig = Utils.cloneObject(options.pcConfig, {
            iceServers: []
          });
          var rtcConstraints = options.rtcConstraints || null;
          var rtcAnswerConstraints = options.rtcAnswerConstraints || null;
          var rtcOfferConstraints = options.rtcOfferConstraints || {};
          var tracks;
          var peerHasAudioLine = false;
          var peerHasVideoLine = false;
          var peerOffersFullAudio = false;
          var peerOffersFullVideo = false;
          this._rtcAnswerConstraints = rtcAnswerConstraints;
          this._rtcOfferConstraints = options.rtcOfferConstraints || null;
          this._data = options.data || this._data;
          if (this._direction !== 'incoming') {
            throw new Exceptions.NotSupportedError('"answer" not supported for outgoing RTCSession');
          }


          if (this._status !== C.STATUS_WAITING_FOR_ANSWER) {
            throw new Exceptions.InvalidStateError(this._status);
          }


          if (this._sessionTimers.enabled) {
            if (Utils.isDecimal(options.sessionTimersExpires)) {
              if (options.sessionTimersExpires >= JsSIP_C.MIN_SESSION_EXPIRES) {
                this._sessionTimers.defaultExpires = options.sessionTimersExpires;
              } else {
                this._sessionTimers.defaultExpires = JsSIP_C.SESSION_EXPIRES;
              }
            }
          }

          this._status = C.STATUS_ANSWERED;

          if (!this._createDialog(request, 'UAS')) {
            request.reply(500, 'Error creating dialog');
            return;
          }

          clearTimeout(this._timers.userNoAnswerTimer);
          extraHeaders.unshift("Contact: ".concat(this._contact));

          var sdp = request.parseSDP();
          if (!Array.isArray(sdp.media)) {
            sdp.media = [sdp.media];
          }


          var _iterator = _createForOfIteratorHelper(sdp.media),
            _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var m = _step.value;

              if (m.type === 'audio') {
                peerHasAudioLine = true;

                if (!m.direction || m.direction === 'sendrecv') {
                  peerOffersFullAudio = true;
                }
              }

              if (m.type === 'video') {
                peerHasVideoLine = true;

                if (!m.direction || m.direction === 'sendrecv') {
                  peerOffersFullVideo = true;
                }
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          if (mediaStream && mediaConstraints.audio === false) {
            tracks = mediaStream.getAudioTracks();

            var _iterator2 = _createForOfIteratorHelper(tracks),
              _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var track = _step2.value;
                mediaStream.removeTrack(track);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }


          if (mediaStream && mediaConstraints.video === false) {
            tracks = mediaStream.getVideoTracks();

            var _iterator3 = _createForOfIteratorHelper(tracks),
              _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _track = _step3.value;
                mediaStream.removeTrack(_track);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }


          if (!mediaStream && mediaConstraints.audio === undefined) {
            mediaConstraints.audio = peerOffersFullAudio;
          }

          if (!mediaStream && mediaConstraints.video === undefined) {
            mediaConstraints.video = peerOffersFullVideo;
          }


          if (!mediaStream && !peerHasAudioLine && !rtcOfferConstraints.offerToReceiveAudio) {
            mediaConstraints.audio = false;
          }


          if (!mediaStream && !peerHasVideoLine && !rtcOfferConstraints.offerToReceiveVideo) {
            mediaConstraints.video = false;
          }


          this._createRTCConnection(pcConfig, rtcConstraints);

          Promise.resolve()
            .then(function () {
              if (mediaStream) {
                return mediaStream;
              }
              else if (mediaConstraints.audio || mediaConstraints.video) {
                _this3._localMediaStreamLocallyGenerated = true;
                return navigator.mediaDevices.getUserMedia(mediaConstraints)["catch"](function (error) {
                  if (_this3._status === C.STATUS_TERMINATED) {
                    throw new Error('terminated');
                  }

                  request.reply(480);

                  _this3._failed('local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);

                  debugerror('emit "getusermediafailed" [error:%o]', error);

                  _this3.emit('getusermediafailed', error);

                  throw new Error('getUserMedia() failed');
                });
              }
            })
            .then(function (stream) {
              if (_this3._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }

              _this3._localMediaStream = stream;

              if (stream) {
                stream.getTracks().forEach(function (track) {
                  _this3._connection.addTrack(track, stream);
                });
              }
            })
            .then(function () {
              if (_this3._late_sdp) {
                return;
              }

              var e = {
                originator: 'remote',
                type: 'offer',
                sdp: request.body
              };
              debug('emit "sdp"');

              _this3.emit('sdp', e);

              var offer = new RTCSessionDescription({
                type: 'offer',
                sdp: e.sdp
              });
              _this3._connectionPromiseQueue = _this3._connectionPromiseQueue.then(function () {
                return _this3._connection.setRemoteDescription(offer);
              })["catch"](function (error) {
                request.reply(488);

                _this3._failed('system', null, JsSIP_C.causes.WEBRTC_ERROR);

                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                _this3.emit('peerconnection:setremotedescriptionfailed', error);

                throw new Error('peerconnection.setRemoteDescription() failed');
              });
              return _this3._connectionPromiseQueue;
            })
            .then(function () {
              if (_this3._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }


              _this3._connecting(request);

              if (!_this3._late_sdp) {
                return _this3._createLocalDescription('answer', rtcAnswerConstraints)["catch"](function () {
                  request.reply(500);
                  throw new Error('_createLocalDescription() failed');
                });
              } else {
                return _this3._createLocalDescription('offer', _this3._rtcOfferConstraints)["catch"](function () {
                  request.reply(500);
                  throw new Error('_createLocalDescription() failed');
                });
              }
            })
            .then(function (desc) {
              if (_this3._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }

              _this3._handleSessionTimersInIncomingRequest(request, extraHeaders);

              request.reply(200, null, extraHeaders, desc, function () {
                _this3._status = C.STATUS_WAITING_FOR_ACK;

                _this3._setInvite2xxTimer(request, desc);

                _this3._setACKTimer();

                _this3._accepted('local');
              }, function () {
                _this3._failed('system', null, JsSIP_C.causes.CONNECTION_ERROR);
              });
            })["catch"](function (error) {
            if (_this3._status === C.STATUS_TERMINATED) {
              return;
            }

            debugerror(error);
          });
        }
        /**
         * Terminate the call.
         */

      }, {
        key: "terminate",
        value: function terminate() {
          var _this4 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          debug('terminate()');
          var cause = options.cause || JsSIP_C.causes.BYE;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var body = options.body;
          var cancel_reason;
          var status_code = options.status_code;
          var reason_phrase = options.reason_phrase;

          if (this._status === C.STATUS_TERMINATED) {
            throw new Exceptions.InvalidStateError(this._status);
          }

          switch (this._status) {
            case C.STATUS_NULL:
            case C.STATUS_INVITE_SENT:
            case C.STATUS_1XX_RECEIVED:
              debug('canceling session');

              if (status_code && (status_code < 200 || status_code >= 700)) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              } else if (status_code) {
                reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';
                cancel_reason = "SIP ;cause=".concat(status_code, " ;text=\"").concat(reason_phrase, "\"");
              }


              if (this._status === C.STATUS_NULL || this._status === C.STATUS_INVITE_SENT) {
                this._is_canceled = true;
                this._cancel_reason = cancel_reason;
              } else if (this._status === C.STATUS_1XX_RECEIVED) {
                this._request.cancel(cancel_reason);
              }

              this._status = C.STATUS_CANCELED;

              this._failed('local', null, JsSIP_C.causes.CANCELED);

              break;

            case C.STATUS_WAITING_FOR_ANSWER:
            case C.STATUS_ANSWERED:
              debug('rejecting session');
              status_code = status_code || 480;

              if (status_code < 300 || status_code >= 700) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              }

              this._request.reply(status_code, reason_phrase, extraHeaders, body);

              this._failed('local', null, JsSIP_C.causes.REJECTED);

              break;

            case C.STATUS_WAITING_FOR_ACK:
            case C.STATUS_CONFIRMED:
              debug('terminating session');
              reason_phrase = options.reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';

              if (status_code && (status_code < 200 || status_code >= 700)) {
                throw new TypeError("Invalid status_code: ".concat(status_code));
              } else if (status_code) {
                extraHeaders.push("Reason: SIP ;cause=".concat(status_code, "; text=\"").concat(reason_phrase, "\""));
              }
              /* RFC 3261 section 15 (Terminating a session):
                *
                * "...the callee's UA MUST NOT send a BYE on a confirmed dialog
                * until it has received an ACK for its 2xx response or until the server
                * transaction times out."
                */


              if (this._status === C.STATUS_WAITING_FOR_ACK && this._direction === 'incoming' && this._request.server_transaction.state !== Transactions.C.STATUS_TERMINATED) {
                var dialog = this._dialog;

                this.receiveRequest = function (_ref) {
                  var method = _ref.method;

                  if (method === JsSIP_C.ACK) {
                    _this4.sendRequest(JsSIP_C.BYE, {
                      extraHeaders: extraHeaders,
                      body: body
                    });

                    dialog.terminate();
                  }
                };


                this._request.server_transaction.on('stateChanged', function () {
                  if (_this4._request.server_transaction.state === Transactions.C.STATUS_TERMINATED) {
                    _this4.sendRequest(JsSIP_C.BYE, {
                      extraHeaders: extraHeaders,
                      body: body
                    });

                    dialog.terminate();
                  }
                });

                this._ended('local', null, cause);


                this._dialog = dialog;

                this._ua.newDialog(dialog);
              } else {
                this.sendRequest(JsSIP_C.BYE, {
                  extraHeaders: extraHeaders,
                  body: body
                });

                this._ended('local', null, cause);
              }

          }
        }
      }, {
        key: "sendDTMF",
        value: function sendDTMF(tones) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          debug('sendDTMF() | tones: %s', tones);
          var position = 0;
          var duration = options.duration || null;
          var interToneGap = options.interToneGap || null;

          if (tones === undefined) {
            throw new TypeError('Not enough arguments');
          }


          if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._status);
          }


          if (typeof tones === 'number') {
            tones = tones.toString();
          }


          if (!tones || typeof tones !== 'string' || !tones.match(/^[0-9A-DR#*,]+$/i)) {
            throw new TypeError("Invalid tones: ".concat(tones));
          }


          if (duration && !Utils.isDecimal(duration)) {
            throw new TypeError("Invalid tone duration: ".concat(duration));
          } else if (!duration) {
            duration = RTCSession_DTMF.C.DEFAULT_DURATION;
          } else if (duration < RTCSession_DTMF.C.MIN_DURATION) {
            debug("\"duration\" value is lower than the minimum allowed, setting it to ".concat(RTCSession_DTMF.C.MIN_DURATION, " milliseconds"));
            duration = RTCSession_DTMF.C.MIN_DURATION;
          } else if (duration > RTCSession_DTMF.C.MAX_DURATION) {
            debug("\"duration\" value is greater than the maximum allowed, setting it to ".concat(RTCSession_DTMF.C.MAX_DURATION, " milliseconds"));
            duration = RTCSession_DTMF.C.MAX_DURATION;
          } else {
            duration = Math.abs(duration);
          }

          options.duration = duration;

          if (interToneGap && !Utils.isDecimal(interToneGap)) {
            throw new TypeError("Invalid interToneGap: ".concat(interToneGap));
          } else if (!interToneGap) {
            interToneGap = RTCSession_DTMF.C.DEFAULT_INTER_TONE_GAP;
          } else if (interToneGap < RTCSession_DTMF.C.MIN_INTER_TONE_GAP) {
            debug("\"interToneGap\" value is lower than the minimum allowed, setting it to ".concat(RTCSession_DTMF.C.MIN_INTER_TONE_GAP, " milliseconds"));
            interToneGap = RTCSession_DTMF.C.MIN_INTER_TONE_GAP;
          } else {
            interToneGap = Math.abs(interToneGap);
          }

          if (this._tones) {
            this._tones += tones;
            return;
          }

          this._tones = tones;

          _sendDTMF.call(this);

          function _sendDTMF() {
            var _this5 = this;

            var timeout;

            if (this._status === C.STATUS_TERMINATED || !this._tones || position >= this._tones.length) {
              this._tones = null;
              return;
            }

            var tone = this._tones[position];
            position += 1;

            if (tone === ',') {
              timeout = 2000;
            } else {
              var dtmf = new RTCSession_DTMF(this);
              options.eventHandlers = {
                onFailed: function onFailed() {
                  _this5._tones = null;
                }
              };
              dtmf.send(tone, options);
              timeout = duration + interToneGap;
            }

            setTimeout(_sendDTMF.bind(this), timeout);
          }
        }
      }, {
        key: "sendInfo",
        value: function sendInfo(contentType, body) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          debug('sendInfo()');

          if (this._status !== C.STATUS_CONFIRMED && this._status !== C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._status);
          }

          var info = new RTCSession_Info(this);
          info.send(contentType, body, options);
        }
        /**
         * Mute
         */

      }, {
        key: "mute",
        value: function mute() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            audio: true,
            video: false
          };
          debug('mute()');
          var audioMuted = false,
            videoMuted = false;

          if (this._audioMuted === false && options.audio) {
            audioMuted = true;
            this._audioMuted = true;

            this._toggleMuteAudio(true);
          }

          if (this._videoMuted === false && options.video) {
            videoMuted = true;
            this._videoMuted = true;

            this._toggleMuteVideo(true);
          }

          if (audioMuted === true || videoMuted === true) {
            this._onmute({
              audio: audioMuted,
              video: videoMuted
            });
          }
        }
        /**
         * Unmute
         */

      }, {
        key: "unmute",
        value: function unmute() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
            audio: true,
            video: true
          };
          debug('unmute()');
          var audioUnMuted = false,
            videoUnMuted = false;

          if (this._audioMuted === true && options.audio) {
            audioUnMuted = true;
            this._audioMuted = false;

            if (this._localHold === false) {
              this._toggleMuteAudio(false);
            }
          }

          if (this._videoMuted === true && options.video) {
            videoUnMuted = true;
            this._videoMuted = false;

            if (this._localHold === false) {
              this._toggleMuteVideo(false);
            }
          }

          if (audioUnMuted === true || videoUnMuted === true) {
            this._onunmute({
              audio: audioUnMuted,
              video: videoUnMuted
            });
          }
        }
        /**
         * Hold
         */

      }, {
        key: "hold",
        value: function hold() {
          var _this6 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : undefined;
          debug('hold()');

          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }

          if (this._localHold === true) {
            return false;
          }

          if (!this._isReadyToReOffer()) {
            return false;
          }

          this._localHold = true;

          this._onhold('local');

          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this6.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: 'Hold Failed'
              });
            }
          };

          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers: eventHandlers,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers: eventHandlers,
              extraHeaders: options.extraHeaders
            });
          }

          return true;
        }
      }, {
        key: "unhold",
        value: function unhold() {
          var _this7 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : undefined;
          debug('unhold()');

          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }

          if (this._localHold === false) {
            return false;
          }

          if (!this._isReadyToReOffer()) {
            return false;
          }

          this._localHold = false;

          this._onunhold('local');

          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this7.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: 'Unhold Failed'
              });
            }
          };

          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers: eventHandlers,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers: eventHandlers,
              extraHeaders: options.extraHeaders
            });
          }

          return true;
        }
      }, {
        key: "renegotiate",
        value: function renegotiate() {
          var _this8 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var done = arguments.length > 1 ? arguments[1] : undefined;
          debug('renegotiate()');
          var rtcOfferConstraints = options.rtcOfferConstraints || null;

          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }

          if (!this._isReadyToReOffer()) {
            return false;
          }

          var eventHandlers = {
            succeeded: function succeeded() {
              if (done) {
                done();
              }
            },
            failed: function failed() {
              _this8.terminate({
                cause: JsSIP_C.causes.WEBRTC_ERROR,
                status_code: 500,
                reason_phrase: 'Media Renegotiation Failed'
              });
            }
          };

          this._setLocalMediaStatus();

          if (options.useUpdate) {
            this._sendUpdate({
              sdpOffer: true,
              eventHandlers: eventHandlers,
              rtcOfferConstraints: rtcOfferConstraints,
              extraHeaders: options.extraHeaders
            });
          } else {
            this._sendReinvite({
              eventHandlers: eventHandlers,
              rtcOfferConstraints: rtcOfferConstraints,
              extraHeaders: options.extraHeaders
            });
          }

          return true;
        }
        /**
         * Refer
         */

      }, {
        key: "refer",
        value: function refer(target, options) {
          var _this9 = this;

          debug('refer()');
          var originalTarget = target;

          if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
            return false;
          }


          target = this._ua.normalizeTarget(target);

          if (!target) {
            throw new TypeError("Invalid target: ".concat(originalTarget));
          }

          var referSubscriber = new RTCSession_ReferSubscriber(this);
          referSubscriber.sendRefer(target, options);

          var id = referSubscriber.id;
          this._referSubscribers[id] = referSubscriber;

          referSubscriber.on('requestFailed', function () {
            delete _this9._referSubscribers[id];
          });
          referSubscriber.on('accepted', function () {
            delete _this9._referSubscribers[id];
          });
          referSubscriber.on('failed', function () {
            delete _this9._referSubscribers[id];
          });
          return referSubscriber;
        }
        /**
         * Send a generic in-dialog Request
         */

      }, {
        key: "sendRequest",
        value: function sendRequest(method, options) {
          debug('sendRequest()');
          return this._dialog.sendRequest(method, options);
        }
        /**
         * In dialog Request Reception
         */

      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          var _this10 = this;

          debug('receiveRequest()');

          if (request.method === JsSIP_C.CANCEL) {
            /* RFC3261 15 States that a UAS may have accepted an invitation while a CANCEL
            * was in progress and that the UAC MAY continue with the session established by
            * any 2xx response, or MAY terminate with BYE. JsSIP does continue with the
            * established session. So the CANCEL is processed only if the session is not yet
            * established.
            */

            /*
            * Terminate the whole session in case the user didn't accept (or yet send the answer)
            * nor reject the request opening the session.
            */
            if (this._status === C.STATUS_WAITING_FOR_ANSWER || this._status === C.STATUS_ANSWERED) {
              this._status = C.STATUS_CANCELED;

              this._request.reply(487);

              this._failed('remote', request, JsSIP_C.causes.CANCELED);
            }
          } else {
            switch (request.method) {
              case JsSIP_C.ACK:
                if (this._status !== C.STATUS_WAITING_FOR_ACK) {
                  return;
                }


                this._status = C.STATUS_CONFIRMED;
                clearTimeout(this._timers.ackTimer);
                clearTimeout(this._timers.invite2xxTimer);

                if (this._late_sdp) {
                  if (!request.body) {
                    this.terminate({
                      cause: JsSIP_C.causes.MISSING_SDP,
                      status_code: 400
                    });
                    break;
                  }

                  var e = {
                    originator: 'remote',
                    type: 'answer',
                    sdp: request.body
                  };
                  debug('emit "sdp"');
                  this.emit('sdp', e);
                  var answer = new RTCSessionDescription({
                    type: 'answer',
                    sdp: e.sdp
                  });
                  this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
                    return _this10._connection.setRemoteDescription(answer);
                  }).then(function () {
                    if (!_this10._is_confirmed) {
                      _this10._confirmed('remote', request);
                    }
                  })["catch"](function (error) {
                    _this10.terminate({
                      cause: JsSIP_C.causes.BAD_MEDIA_DESCRIPTION,
                      status_code: 488
                    });

                    debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                    _this10.emit('peerconnection:setremotedescriptionfailed', error);
                  });
                } else if (!this._is_confirmed) {
                  this._confirmed('remote', request);
                }

                break;

              case JsSIP_C.BYE:
                if (this._status === C.STATUS_CONFIRMED || this._status === C.STATUS_WAITING_FOR_ACK) {
                  request.reply(200);

                  this._ended('remote', request, JsSIP_C.causes.BYE);
                } else if (this._status === C.STATUS_INVITE_RECEIVED) {
                  request.reply(200);

                  this._request.reply(487, 'BYE Received');

                  this._ended('remote', request, JsSIP_C.causes.BYE);
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              case JsSIP_C.INVITE:
                if (this._status === C.STATUS_CONFIRMED) {
                  if (request.hasHeader('replaces')) {
                    this._receiveReplaces(request);
                  } else {
                    this._receiveReinvite(request);
                  }
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              case JsSIP_C.INFO:
                if (this._status === C.STATUS_1XX_RECEIVED || this._status === C.STATUS_WAITING_FOR_ANSWER || this._status === C.STATUS_ANSWERED || this._status === C.STATUS_WAITING_FOR_ACK || this._status === C.STATUS_CONFIRMED) {
                  var contentType = request.getHeader('content-type');

                  if (contentType && contentType.match(/^application\/dtmf-relay/i)) {
                    new RTCSession_DTMF(this).init_incoming(request);
                  } else if (contentType !== undefined) {
                    new RTCSession_Info(this).init_incoming(request);
                  } else {
                    request.reply(415);
                  }
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              case JsSIP_C.UPDATE:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveUpdate(request);
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              case JsSIP_C.REFER:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveRefer(request);
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              case JsSIP_C.NOTIFY:
                if (this._status === C.STATUS_CONFIRMED) {
                  this._receiveNotify(request);
                } else {
                  request.reply(403, 'Wrong Status');
                }

                break;

              default:
                request.reply(501);
            }
          }
        }
        /**
         * Session Callbacks
         */

      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugerror('onTransportError()');

          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 500,
              reason_phrase: JsSIP_C.causes.CONNECTION_ERROR,
              cause: JsSIP_C.causes.CONNECTION_ERROR
            });
          }
        }
      }, {
        key: "onRequestTimeout",
        value: function onRequestTimeout() {
          debugerror('onRequestTimeout()');

          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 408,
              reason_phrase: JsSIP_C.causes.REQUEST_TIMEOUT,
              cause: JsSIP_C.causes.REQUEST_TIMEOUT
            });
          }
        }
      }, {
        key: "onDialogError",
        value: function onDialogError() {
          debugerror('onDialogError()');

          if (this._status !== C.STATUS_TERMINATED) {
            this.terminate({
              status_code: 500,
              reason_phrase: JsSIP_C.causes.DIALOG_ERROR,
              cause: JsSIP_C.causes.DIALOG_ERROR
            });
          }
        }

      }, {
        key: "newDTMF",
        value: function newDTMF(data) {
          debug('newDTMF()');
          this.emit('newDTMF', data);
        }

      }, {
        key: "newInfo",
        value: function newInfo(data) {
          debug('newInfo()');
          this.emit('newInfo', data);
        }
        /**
         * Check if RTCSession is ready for an outgoing re-INVITE or UPDATE with SDP.
         */

      }, {
        key: "_isReadyToReOffer",
        value: function _isReadyToReOffer() {
          if (!this._rtcReady) {
            debug('_isReadyToReOffer() | internal WebRTC status not ready');
            return false;
          }


          if (!this._dialog) {
            debug('_isReadyToReOffer() | session not established yet');
            return false;
          }


          if (this._dialog.uac_pending_reply === true || this._dialog.uas_pending_reply === true) {
            debug('_isReadyToReOffer() | there is another INVITE/UPDATE transaction in progress');
            return false;
          }

          return true;
        }
      }, {
        key: "_close",
        value: function _close() {
          debug('close()');

          if (this._status === C.STATUS_TERMINATED) {
            return;
          }

          this._status = C.STATUS_TERMINATED;

          if (this._connection) {
            try {
              this._connection.close();
            } catch (error) {
              debugerror('close() | error closing the RTCPeerConnection: %o', error);
            }
          }


          if (this._localMediaStream && this._localMediaStreamLocallyGenerated) {
            debug('close() | closing local MediaStream');
            Utils.closeMediaStream(this._localMediaStream);
          }


          for (var timer in this._timers) {
            if (Object.prototype.hasOwnProperty.call(this._timers, timer)) {
              clearTimeout(this._timers[timer]);
            }
          }


          clearTimeout(this._sessionTimers.timer);

          if (this._dialog) {
            this._dialog.terminate();

            delete this._dialog;
          }


          for (var dialog in this._earlyDialogs) {
            if (Object.prototype.hasOwnProperty.call(this._earlyDialogs, dialog)) {
              this._earlyDialogs[dialog].terminate();

              delete this._earlyDialogs[dialog];
            }
          }


          for (var subscriber in this._referSubscribers) {
            if (Object.prototype.hasOwnProperty.call(this._referSubscribers, subscriber)) {
              delete this._referSubscribers[subscriber];
            }
          }

          this._ua.destroyRTCSession(this);
        }
        /**
         * Private API.
         */

        /**
         * RFC3261 13.3.1.4
         * Response retransmissions cannot be accomplished by transaction layer
         *  since it is destroyed when receiving the first 2xx answer
         */

      }, {
        key: "_setInvite2xxTimer",
        value: function _setInvite2xxTimer(request, body) {
          var timeout = Timers.T1;

          function invite2xxRetransmission() {
            if (this._status !== C.STATUS_WAITING_FOR_ACK) {
              return;
            }

            request.reply(200, null, ["Contact: ".concat(this._contact)], body);

            if (timeout < Timers.T2) {
              timeout = timeout * 2;

              if (timeout > Timers.T2) {
                timeout = Timers.T2;
              }
            }

            this._timers.invite2xxTimer = setTimeout(invite2xxRetransmission.bind(this), timeout);
          }

          this._timers.invite2xxTimer = setTimeout(invite2xxRetransmission.bind(this), timeout);
        }
        /**
         * RFC3261 14.2
         * If a UAS generates a 2xx response and never receives an ACK,
         *  it SHOULD generate a BYE to terminate the dialog.
         */

      }, {
        key: "_setACKTimer",
        value: function _setACKTimer() {
          var _this11 = this;

          this._timers.ackTimer = setTimeout(function () {
            if (_this11._status === C.STATUS_WAITING_FOR_ACK) {
              debug('no ACK received, terminating the session');
              clearTimeout(_this11._timers.invite2xxTimer);

              _this11.sendRequest(JsSIP_C.BYE);

              _this11._ended('remote', null, JsSIP_C.causes.NO_ACK);
            }
          }, Timers.TIMER_H);
        }
      }, {
        key: "_createRTCConnection",
        value: function _createRTCConnection(pcConfig, rtcConstraints) {
          var _this12 = this;

          this._connection = new RTCPeerConnection(pcConfig, rtcConstraints);

          this._connection.addEventListener('iceconnectionstatechange', function () {
            var state = _this12._connection.iceConnectionState;

            if (state === 'failed') {
              _this12.terminate({
                cause: JsSIP_C.causes.RTP_TIMEOUT,
                status_code: 408,
                reason_phrase: JsSIP_C.causes.RTP_TIMEOUT
              });
            }
          });

          debug('emit "peerconnection"');
          this.emit('peerconnection', {
            peerconnection: this._connection
          });
        }
      }, {
        key: "_createLocalDescription",
        value: function _createLocalDescription(type, constraints) {
          var _this13 = this;

          debug('createLocalDescription()');
          if (type !== 'offer' && type !== 'answer') throw new Error("createLocalDescription() | invalid type \"".concat(type, "\""));
          var connection = this._connection;
          this._rtcReady = false;
          return Promise.resolve()
            .then(function () {
              if (type === 'offer') {
                return connection.createOffer(constraints)["catch"](function (error) {
                  debugerror('emit "peerconnection:createofferfailed" [error:%o]', error);

                  _this13.emit('peerconnection:createofferfailed', error);

                  return Promise.reject(error);
                });
              } else {
                return connection.createAnswer(constraints)["catch"](function (error) {
                  debugerror('emit "peerconnection:createanswerfailed" [error:%o]', error);

                  _this13.emit('peerconnection:createanswerfailed', error);

                  return Promise.reject(error);
                });
              }
            })
            .then(function (desc) {
              return connection.setLocalDescription(desc)["catch"](function (error) {
                _this13._rtcReady = true;
                debugerror('emit "peerconnection:setlocaldescriptionfailed" [error:%o]', error);

                _this13.emit('peerconnection:setlocaldescriptionfailed', error);

                return Promise.reject(error);
              });
            }).then(function () {
              if (connection.iceGatheringState === 'complete') {
                _this13._rtcReady = true;
                var e = {
                  originator: 'local',
                  type: type,
                  sdp: connection.localDescription.sdp
                };
                debug('emit "sdp"');

                _this13.emit('sdp', e);

                return Promise.resolve(e.sdp);
              }


              return new Promise(function (resolve) {
                var finished = false;
                var iceCandidateListener;
                var iceGatheringStateListener;

                var ready = function ready() {
                  connection.removeEventListener('icecandidate', iceCandidateListener);
                  connection.removeEventListener('icegatheringstatechange', iceGatheringStateListener);
                  finished = true;
                  _this13._rtcReady = true;
                  var e = {
                    originator: 'local',
                    type: type,
                    sdp: connection.localDescription.sdp
                  };
                  debug('emit "sdp"');

                  _this13.emit('sdp', e);

                  resolve(e.sdp);
                };

                connection.addEventListener('icecandidate', iceCandidateListener = function iceCandidateListener(event) {
                  var candidate = event.candidate;

                  if (candidate) {
                    _this13.emit('icecandidate', {
                      candidate: candidate,
                      ready: ready
                    });
                  } else if (!finished) {
                    ready();
                  }
                });
                connection.addEventListener('icegatheringstatechange', iceGatheringStateListener = function iceGatheringStateListener() {
                  if (connection.iceGatheringState === 'complete' && !finished) {
                    ready();
                  }
                });
              });
            });
        }
        /**
         * Dialog Management
         */

      }, {
        key: "_createDialog",
        value: function _createDialog(message, type, early) {
          var local_tag = type === 'UAS' ? message.to_tag : message.from_tag;
          var remote_tag = type === 'UAS' ? message.from_tag : message.to_tag;
          var id = message.call_id + local_tag + remote_tag;
          var early_dialog = this._earlyDialogs[id];

          if (early) {
            if (early_dialog) {
              return true;
            } else {
              early_dialog = new Dialog(this, message, type, Dialog.C.STATUS_EARLY);

              if (early_dialog.error) {
                debug(early_dialog.error);

                this._failed('remote', message, JsSIP_C.causes.INTERNAL_ERROR);

                return false;
              } else {
                this._earlyDialogs[id] = early_dialog;
                return true;
              }
            }
          }
          else {
            this._from_tag = message.from_tag;
            this._to_tag = message.to_tag;

            if (early_dialog) {
              early_dialog.update(message, type);
              this._dialog = early_dialog;
              delete this._earlyDialogs[id];
              return true;
            }


            var dialog = new Dialog(this, message, type);

            if (dialog.error) {
              debug(dialog.error);

              this._failed('remote', message, JsSIP_C.causes.INTERNAL_ERROR);

              return false;
            } else {
              this._dialog = dialog;
              return true;
            }
          }
        }
        /**
         * In dialog INVITE Reception
         */

      }, {
        key: "_receiveReinvite",
        value: function _receiveReinvite(request) {
          var _this14 = this;

          debug('receiveReinvite()');
          var contentType = request.getHeader('Content-Type');
          var data = {
            request: request,
            callback: undefined,
            reject: reject.bind(this)
          };
          var rejected = false;

          function reject() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            rejected = true;
            var status_code = options.status_code || 403;
            var reason_phrase = options.reason_phrase || '';
            var extraHeaders = Utils.cloneArray(options.extraHeaders);

            if (this._status !== C.STATUS_CONFIRMED) {
              return false;
            }

            if (status_code < 300 || status_code >= 700) {
              throw new TypeError("Invalid status_code: ".concat(status_code));
            }

            request.reply(status_code, reason_phrase, extraHeaders);
          }


          this.emit('reinvite', data);

          if (rejected) {
            return;
          }

          this._late_sdp = false;

          if (!request.body) {
            this._late_sdp = true;

            if (this._remoteHold) {
              this._remoteHold = false;

              this._onunhold('remote');
            }

            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
              return _this14._createLocalDescription('offer', _this14._rtcOfferConstraints);
            }).then(function (sdp) {
              sendAnswer.call(_this14, sdp);
            })["catch"](function () {
              request.reply(500);
            });
            return;
          }


          if (contentType !== 'application/sdp') {
            debug('invalid Content-Type');
            request.reply(415);
            return;
          }

          this._processInDialogSdpOffer(request)
            .then(function (desc) {
              if (_this14._status === C.STATUS_TERMINATED) {
                return;
              }

              sendAnswer.call(_this14, desc);
            })["catch"](function (error) {
            debugerror(error);
          });

          function sendAnswer(desc) {
            var _this15 = this;

            var extraHeaders = ["Contact: ".concat(this._contact)];

            this._handleSessionTimersInIncomingRequest(request, extraHeaders);

            if (this._late_sdp) {
              desc = this._mangleOffer(desc);
            }

            request.reply(200, null, extraHeaders, desc, function () {
              _this15._status = C.STATUS_WAITING_FOR_ACK;

              _this15._setInvite2xxTimer(request, desc);

              _this15._setACKTimer();
            });

            if (typeof data.callback === 'function') {
              data.callback();
            }
          }
        }
        /**
         * In dialog UPDATE Reception
         */

      }, {
        key: "_receiveUpdate",
        value: function _receiveUpdate(request) {
          var _this16 = this;

          debug('receiveUpdate()');
          var contentType = request.getHeader('Content-Type');
          var data = {
            request: request,
            callback: undefined,
            reject: reject.bind(this)
          };
          var rejected = false;

          function reject() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            rejected = true;
            var status_code = options.status_code || 403;
            var reason_phrase = options.reason_phrase || '';
            var extraHeaders = Utils.cloneArray(options.extraHeaders);

            if (this._status !== C.STATUS_CONFIRMED) {
              return false;
            }

            if (status_code < 300 || status_code >= 700) {
              throw new TypeError("Invalid status_code: ".concat(status_code));
            }

            request.reply(status_code, reason_phrase, extraHeaders);
          }


          this.emit('update', data);

          if (rejected) {
            return;
          }

          if (!request.body) {
            sendAnswer.call(this, null);
            return;
          }

          if (contentType !== 'application/sdp') {
            debug('invalid Content-Type');
            request.reply(415);
            return;
          }

          this._processInDialogSdpOffer(request)
            .then(function (desc) {
              if (_this16._status === C.STATUS_TERMINATED) {
                return;
              }

              sendAnswer.call(_this16, desc);
            })["catch"](function (error) {
            debugerror(error);
          });

          function sendAnswer(desc) {
            var extraHeaders = ["Contact: ".concat(this._contact)];

            this._handleSessionTimersInIncomingRequest(request, extraHeaders);

            request.reply(200, null, extraHeaders, desc);
            if (typeof data.callback === 'function') {
              data.callback();
            }
          }
        }
      }, {
        key: "_processInDialogSdpOffer",
        value: function _processInDialogSdpOffer(request) {
          var _this17 = this;

          debug('_processInDialogSdpOffer()');
          var sdp = request.parseSDP();
          var hold = false;

          var _iterator4 = _createForOfIteratorHelper(sdp.media),
            _step4;

          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var m = _step4.value;

              if (holdMediaTypes.indexOf(m.type) === -1) {
                continue;
              }

              var direction = m.direction || sdp.direction || 'sendrecv';

              if (direction === 'sendonly' || direction === 'inactive') {
                hold = true;
              }
              else {
                hold = false;
                break;
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }

          var e = {
            originator: 'remote',
            type: 'offer',
            sdp: request.body
          };
          debug('emit "sdp"');
          this.emit('sdp', e);
          var offer = new RTCSessionDescription({
            type: 'offer',
            sdp: e.sdp
          });
          this._connectionPromiseQueue = this._connectionPromiseQueue
            .then(function () {
              if (_this17._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }

              return _this17._connection.setRemoteDescription(offer)["catch"](function (error) {
                request.reply(488);
                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                _this17.emit('peerconnection:setremotedescriptionfailed', error);

                throw new Error('peerconnection.setRemoteDescription() failed');
              });
            }).then(function () {
              if (_this17._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }

              if (_this17._remoteHold === true && hold === false) {
                _this17._remoteHold = false;

                _this17._onunhold('remote');
              } else if (_this17._remoteHold === false && hold === true) {
                _this17._remoteHold = true;

                _this17._onhold('remote');
              }
            })
            .then(function () {
              if (_this17._status === C.STATUS_TERMINATED) {
                throw new Error('terminated');
              }

              return _this17._createLocalDescription('answer', _this17._rtcAnswerConstraints)["catch"](function () {
                request.reply(500);
                throw new Error('_createLocalDescription() failed');
              });
            });
          return this._connectionPromiseQueue;
        }
        /**
         * In dialog Refer Reception
         */

      }, {
        key: "_receiveRefer",
        value: function _receiveRefer(request) {
          var _this18 = this;

          debug('receiveRefer()');

          if (!request.refer_to) {
            debug('no Refer-To header field present in REFER');
            request.reply(400);
            return;
          }

          if (request.refer_to.uri.scheme !== JsSIP_C.SIP) {
            debug('Refer-To header field points to a non-SIP URI scheme');
            request.reply(416);
            return;
          }


          request.reply(202);
          var notifier = new RTCSession_ReferNotifier(this, request.cseq);
          debug('emit "refer"');

          this.emit('refer', {
            request: request,
            accept: function accept(initCallback, options) {
              _accept.call(_this18, initCallback, options);
            },
            reject: function reject() {
              _reject.call(_this18);
            }
          });

          function _accept(initCallback) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            initCallback = typeof initCallback === 'function' ? initCallback : null;

            if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
              return false;
            }

            var session = new RTCSession(this._ua);
            session.on('progress', function (_ref2) {
              var response = _ref2.response;
              notifier.notify(response.status_code, response.reason_phrase);
            });
            session.on('accepted', function (_ref3) {
              var response = _ref3.response;
              notifier.notify(response.status_code, response.reason_phrase);
            });
            session.on('_failed', function (_ref4) {
              var message = _ref4.message,
                cause = _ref4.cause;

              if (message) {
                notifier.notify(message.status_code, message.reason_phrase);
              } else {
                notifier.notify(487, cause);
              }
            });

            if (request.refer_to.uri.hasHeader('replaces')) {
              var replaces = decodeURIComponent(request.refer_to.uri.getHeader('replaces'));
              options.extraHeaders = Utils.cloneArray(options.extraHeaders);
              options.extraHeaders.push("Replaces: ".concat(replaces));
            }

            session.connect(request.refer_to.uri.toAor(), options, initCallback);
          }

          function _reject() {
            notifier.notify(603);
          }
        }
        /**
         * In dialog Notify Reception
         */

      }, {
        key: "_receiveNotify",
        value: function _receiveNotify(request) {
          debug('receiveNotify()');

          if (!request.event) {
            request.reply(400);
          }

          switch (request.event.event) {
            case 'refer':
            {
              var id;
              var referSubscriber;

              if (request.event.params && request.event.params.id) {
                id = request.event.params.id;
                referSubscriber = this._referSubscribers[id];
              } else if (Object.keys(this._referSubscribers).length === 1) {
                referSubscriber = this._referSubscribers[Object.keys(this._referSubscribers)[0]];
              } else {
                request.reply(400, 'Missing event id parameter');
                return;
              }

              if (!referSubscriber) {
                request.reply(481, 'Subscription does not exist');
                return;
              }

              referSubscriber.receiveNotify(request);
              request.reply(200);
              break;
            }

            default:
            {
              request.reply(489);
            }
          }
        }
        /**
         * INVITE with Replaces Reception
         */

      }, {
        key: "_receiveReplaces",
        value: function _receiveReplaces(request) {
          var _this20 = this;

          debug('receiveReplaces()');

          function _accept2(initCallback) {
            var _this19 = this;

            if (this._status !== C.STATUS_WAITING_FOR_ACK && this._status !== C.STATUS_CONFIRMED) {
              return false;
            }

            var session = new RTCSession(this._ua);

            session.on('confirmed', function () {
              _this19.terminate();
            });
            session.init_incoming(request, initCallback);
          }

          function _reject2() {
            debug('Replaced INVITE rejected by the user');
            request.reply(486);
          }


          this.emit('replaces', {
            request: request,
            accept: function accept(initCallback) {
              _accept2.call(_this20, initCallback);
            },
            reject: function reject() {
              _reject2.call(_this20);
            }
          });
        }
        /**
         * Initial Request Sender
         */

      }, {
        key: "_sendInitialRequest",
        value: function _sendInitialRequest(mediaConstraints, rtcOfferConstraints, mediaStream) {
          var _this21 = this;

          var request_sender = new RequestSender(this._ua, this._request, {
            onRequestTimeout: function onRequestTimeout() {
              _this21.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this21.onTransportError();
            },
            onAuthenticated: function onAuthenticated(request) {
              _this21._request = request;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this21._receiveInviteResponse(response);
            }
          });

          Promise.resolve()
            .then(function () {
              if (mediaStream) {
                return mediaStream;
              }
              else if (mediaConstraints.audio || mediaConstraints.video) {
                _this21._localMediaStreamLocallyGenerated = true;
                return navigator.mediaDevices.getUserMedia(mediaConstraints)["catch"](function (error) {
                  if (_this21._status === C.STATUS_TERMINATED) {
                    throw new Error('terminated');
                  }

                  _this21._failed('local', null, JsSIP_C.causes.USER_DENIED_MEDIA_ACCESS);

                  debugerror('emit "getusermediafailed" [error:%o]', error);

                  _this21.emit('getusermediafailed', error);

                  throw error;
                });
              }
            }).then(function (stream) {
            if (_this21._status === C.STATUS_TERMINATED) {
              throw new Error('terminated');
            }

            _this21._localMediaStream = stream;

            if (stream) {
              stream.getTracks().forEach(function (track) {
                _this21._connection.addTrack(track, stream);
              });
            }


            _this21._connecting(_this21._request);

            return _this21._createLocalDescription('offer', rtcOfferConstraints)["catch"](function (error) {
              _this21._failed('local', null, JsSIP_C.causes.WEBRTC_ERROR);

              throw error;
            });
          }).then(function (desc) {
            if (_this21._is_canceled || _this21._status === C.STATUS_TERMINATED) {
              throw new Error('terminated');
            }

            _this21._request.body = desc;
            _this21._status = C.STATUS_INVITE_SENT;
            debug('emit "sending" [request:%o]', _this21._request);
            _this21.emit('sending', {
              request: _this21._request
            });

            request_sender.send();
          })["catch"](function (error) {
            if (_this21._status === C.STATUS_TERMINATED) {
              return;
            }

            debugerror(error);
          });
        }
        /**
         * Reception of Response for Initial INVITE
         */

      }, {
        key: "_receiveInviteResponse",
        value: function _receiveInviteResponse(response) {
          var _this22 = this;

          debug('receiveInviteResponse()');
          if (this._dialog && response.status_code >= 200 && response.status_code <= 299) {
            /*
             * If it is a retransmission from the endpoint that established
             * the dialog, send an ACK
             */
            if (this._dialog.id.call_id === response.call_id && this._dialog.id.local_tag === response.from_tag && this._dialog.id.remote_tag === response.to_tag) {
              this.sendRequest(JsSIP_C.ACK);
              return;
            }
            else {
              var dialog = new Dialog(this, response, 'UAC');

              if (dialog.error !== undefined) {
                debug(dialog.error);
                return;
              }

              this.sendRequest(JsSIP_C.ACK);
              this.sendRequest(JsSIP_C.BYE);
              return;
            }
          }


          if (this._is_canceled) {
            if (response.status_code >= 100 && response.status_code < 200) {
              this._request.cancel(this._cancel_reason);
            } else if (response.status_code >= 200 && response.status_code < 299) {
              this._acceptAndTerminate(response);
            }

            return;
          }

          if (this._status !== C.STATUS_INVITE_SENT && this._status !== C.STATUS_1XX_RECEIVED) {
            return;
          }

          switch (true) {
            case /^100$/.test(response.status_code):
              this._status = C.STATUS_1XX_RECEIVED;
              break;

            case /^1[0-9]{2}$/.test(response.status_code):
            {
              if (!response.to_tag) {
                debug('1xx response received without to tag');
                break;
              }


              if (response.hasHeader('contact')) {
                if (!this._createDialog(response, 'UAC', true)) {
                  break;
                }
              }

              this._status = C.STATUS_1XX_RECEIVED;

              this._progress('remote', response);

              if (!response.body) {
                break;
              }

              var e = {
                originator: 'remote',
                type: 'answer',
                sdp: response.body
              };
              debug('emit "sdp"');
              this.emit('sdp', e);
              var answer = new RTCSessionDescription({
                type: 'answer',
                sdp: e.sdp
              });
              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
                return _this22._connection.setRemoteDescription(answer);
              })["catch"](function (error) {
                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                _this22.emit('peerconnection:setremotedescriptionfailed', error);
              });
              break;
            }

            case /^2[0-9]{2}$/.test(response.status_code):
            {
              this._status = C.STATUS_CONFIRMED;

              if (!response.body) {
                this._acceptAndTerminate(response, 400, JsSIP_C.causes.MISSING_SDP);

                this._failed('remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);

                break;
              }


              if (!this._createDialog(response, 'UAC')) {
                break;
              }

              var _e = {
                originator: 'remote',
                type: 'answer',
                sdp: response.body
              };
              debug('emit "sdp"');
              this.emit('sdp', _e);

              var _answer = new RTCSessionDescription({
                type: 'answer',
                sdp: _e.sdp
              });

              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {

                if (_this22._connection.signalingState === 'stable') {
                  return _this22._connection.createOffer(_this22._rtcOfferConstraints).then(function (offer) {
                    return _this22._connection.setLocalDescription(offer);
                  })["catch"](function (error) {
                    _this22._acceptAndTerminate(response, 500, error.toString());

                    _this22._failed('local', response, JsSIP_C.causes.WEBRTC_ERROR);
                  });
                }
              }).then(function () {
                _this22._connection.setRemoteDescription(_answer).then(function () {
                  _this22._handleSessionTimersInIncomingResponse(response);

                  _this22._accepted('remote', response);

                  _this22.sendRequest(JsSIP_C.ACK);

                  _this22._confirmed('local', null);
                })["catch"](function (error) {
                  _this22._acceptAndTerminate(response, 488, 'Not Acceptable Here');

                  _this22._failed('remote', response, JsSIP_C.causes.BAD_MEDIA_DESCRIPTION);

                  debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                  _this22.emit('peerconnection:setremotedescriptionfailed', error);
                });
              });
              break;
            }

            default:
            {
              var cause = Utils.sipErrorCause(response.status_code);

              this._failed('remote', response, cause);
            }
          }
        }
        /**
         * Send Re-INVITE
         */

      }, {
        key: "_sendReinvite",
        value: function _sendReinvite() {
          var _this23 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          debug('sendReinvite()');
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = Utils.cloneObject(options.eventHandlers);
          var rtcOfferConstraints = options.rtcOfferConstraints || this._rtcOfferConstraints || null;
          var succeeded = false;
          extraHeaders.push("Contact: ".concat(this._contact));
          extraHeaders.push('Content-Type: application/sdp');

          if (this._sessionTimers.running) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(this._sessionTimers.refresher ? 'uac' : 'uas'));
          }

          this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
            return _this23._createLocalDescription('offer', rtcOfferConstraints);
          }).then(function (sdp) {
            sdp = _this23._mangleOffer(sdp);
            var e = {
              originator: 'local',
              type: 'offer',
              sdp: sdp
            };
            debug('emit "sdp"');

            _this23.emit('sdp', e);

            _this23.sendRequest(JsSIP_C.INVITE, {
              extraHeaders: extraHeaders,
              body: sdp,
              eventHandlers: {
                onSuccessResponse: function onSuccessResponse(response) {
                  onSucceeded.call(_this23, response);
                  succeeded = true;
                },
                onErrorResponse: function onErrorResponse(response) {
                  onFailed.call(_this23, response);
                },
                onTransportError: function onTransportError() {
                  _this23.onTransportError();

                },
                onRequestTimeout: function onRequestTimeout() {
                  _this23.onRequestTimeout();

                },
                onDialogError: function onDialogError() {
                  _this23.onDialogError();

                }
              }
            });
          })["catch"](function () {
            onFailed();
          });

          function onSucceeded(response) {
            var _this24 = this;

            if (this._status === C.STATUS_TERMINATED) {
              return;
            }

            this.sendRequest(JsSIP_C.ACK);

            if (succeeded) {
              return;
            }


            this._handleSessionTimersInIncomingResponse(response);


            if (!response.body) {
              onFailed.call(this);
              return;
            } else if (response.getHeader('Content-Type') !== 'application/sdp') {
              onFailed.call(this);
              return;
            }

            var e = {
              originator: 'remote',
              type: 'answer',
              sdp: response.body
            };
            debug('emit "sdp"');
            this.emit('sdp', e);
            var answer = new RTCSessionDescription({
              type: 'answer',
              sdp: e.sdp
            });
            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
              return _this24._connection.setRemoteDescription(answer);
            }).then(function () {
              if (eventHandlers.succeeded) {
                eventHandlers.succeeded(response);
              }
            })["catch"](function (error) {
              onFailed.call(_this24);
              debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

              _this24.emit('peerconnection:setremotedescriptionfailed', error);
            });
          }

          function onFailed(response) {
            if (eventHandlers.failed) {
              eventHandlers.failed(response);
            }
          }
        }
        /**
         * Send UPDATE
         */

      }, {
        key: "_sendUpdate",
        value: function _sendUpdate() {
          var _this25 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          debug('sendUpdate()');
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = Utils.cloneObject(options.eventHandlers);
          var rtcOfferConstraints = options.rtcOfferConstraints || this._rtcOfferConstraints || null;
          var sdpOffer = options.sdpOffer || false;
          var succeeded = false;
          extraHeaders.push("Contact: ".concat(this._contact));

          if (this._sessionTimers.running) {
            extraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(this._sessionTimers.refresher ? 'uac' : 'uas'));
          }

          if (sdpOffer) {
            extraHeaders.push('Content-Type: application/sdp');
            this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
              return _this25._createLocalDescription('offer', rtcOfferConstraints);
            }).then(function (sdp) {
              sdp = _this25._mangleOffer(sdp);
              var e = {
                originator: 'local',
                type: 'offer',
                sdp: sdp
              };
              debug('emit "sdp"');

              _this25.emit('sdp', e);

              _this25.sendRequest(JsSIP_C.UPDATE, {
                extraHeaders: extraHeaders,
                body: sdp,
                eventHandlers: {
                  onSuccessResponse: function onSuccessResponse(response) {
                    onSucceeded.call(_this25, response);
                    succeeded = true;
                  },
                  onErrorResponse: function onErrorResponse(response) {
                    onFailed.call(_this25, response);
                  },
                  onTransportError: function onTransportError() {
                    _this25.onTransportError();

                  },
                  onRequestTimeout: function onRequestTimeout() {
                    _this25.onRequestTimeout();

                  },
                  onDialogError: function onDialogError() {
                    _this25.onDialogError();

                  }
                }
              });
            })["catch"](function () {
              onFailed.call(_this25);
            });
          }
          else {
            this.sendRequest(JsSIP_C.UPDATE, {
              extraHeaders: extraHeaders,
              eventHandlers: {
                onSuccessResponse: function onSuccessResponse(response) {
                  onSucceeded.call(_this25, response);
                },
                onErrorResponse: function onErrorResponse(response) {
                  onFailed.call(_this25, response);
                },
                onTransportError: function onTransportError() {
                  _this25.onTransportError();

                },
                onRequestTimeout: function onRequestTimeout() {
                  _this25.onRequestTimeout();

                },
                onDialogError: function onDialogError() {
                  _this25.onDialogError();

                }
              }
            });
          }

          function onSucceeded(response) {
            var _this26 = this;

            if (this._status === C.STATUS_TERMINATED) {
              return;
            }


            if (succeeded) {
              return;
            }


            this._handleSessionTimersInIncomingResponse(response);


            if (sdpOffer) {
              if (!response.body) {
                onFailed.call(this);
                return;
              } else if (response.getHeader('Content-Type') !== 'application/sdp') {
                onFailed.call(this);
                return;
              }

              var e = {
                originator: 'remote',
                type: 'answer',
                sdp: response.body
              };
              debug('emit "sdp"');
              this.emit('sdp', e);
              var answer = new RTCSessionDescription({
                type: 'answer',
                sdp: e.sdp
              });
              this._connectionPromiseQueue = this._connectionPromiseQueue.then(function () {
                return _this26._connection.setRemoteDescription(answer);
              }).then(function () {
                if (eventHandlers.succeeded) {
                  eventHandlers.succeeded(response);
                }
              })["catch"](function (error) {
                onFailed.call(_this26);
                debugerror('emit "peerconnection:setremotedescriptionfailed" [error:%o]', error);

                _this26.emit('peerconnection:setremotedescriptionfailed', error);
              });
            }
            else if (eventHandlers.succeeded) {
              eventHandlers.succeeded(response);
            }
          }

          function onFailed(response) {
            if (eventHandlers.failed) {
              eventHandlers.failed(response);
            }
          }
        }
      }, {
        key: "_acceptAndTerminate",
        value: function _acceptAndTerminate(response, status_code, reason_phrase) {
          debug('acceptAndTerminate()');
          var extraHeaders = [];

          if (status_code) {
            reason_phrase = reason_phrase || JsSIP_C.REASON_PHRASE[status_code] || '';
            extraHeaders.push("Reason: SIP ;cause=".concat(status_code, "; text=\"").concat(reason_phrase, "\""));
          }


          if (this._dialog || this._createDialog(response, 'UAC')) {
            this.sendRequest(JsSIP_C.ACK);
            this.sendRequest(JsSIP_C.BYE, {
              extraHeaders: extraHeaders
            });
          }


          this._status = C.STATUS_TERMINATED;
        }
        /**
         * Correctly set the SDP direction attributes if the call is on local hold
         */

      }, {
        key: "_mangleOffer",
        value: function _mangleOffer(sdp) {
          if (!this._localHold && !this._remoteHold) {
            return sdp;
          }

          sdp = sdp_transform.parse(sdp);

          if (this._localHold && !this._remoteHold) {
            debug('mangleOffer() | me on hold, mangling offer');

            var _iterator5 = _createForOfIteratorHelper(sdp.media),
              _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var m = _step5.value;

                if (holdMediaTypes.indexOf(m.type) === -1) {
                  continue;
                }

                if (!m.direction) {
                  m.direction = 'sendonly';
                } else if (m.direction === 'sendrecv') {
                  m.direction = 'sendonly';
                } else if (m.direction === 'recvonly') {
                  m.direction = 'inactive';
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
          else if (this._localHold && this._remoteHold) {
            debug('mangleOffer() | both on hold, mangling offer');

            var _iterator6 = _createForOfIteratorHelper(sdp.media),
              _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var _m = _step6.value;

                if (holdMediaTypes.indexOf(_m.type) === -1) {
                  continue;
                }

                _m.direction = 'inactive';
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }
          }
          else if (this._remoteHold) {
            debug('mangleOffer() | remote on hold, mangling offer');

            var _iterator7 = _createForOfIteratorHelper(sdp.media),
              _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var _m2 = _step7.value;

                if (holdMediaTypes.indexOf(_m2.type) === -1) {
                  continue;
                }

                if (!_m2.direction) {
                  _m2.direction = 'recvonly';
                } else if (_m2.direction === 'sendrecv') {
                  _m2.direction = 'recvonly';
                } else if (_m2.direction === 'recvonly') {
                  _m2.direction = 'inactive';
                }
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }

          return sdp_transform.write(sdp);
        }
      }, {
        key: "_setLocalMediaStatus",
        value: function _setLocalMediaStatus() {
          var enableAudio = true,
            enableVideo = true;

          if (this._localHold || this._remoteHold) {
            enableAudio = false;
            enableVideo = false;
          }

          if (this._audioMuted) {
            enableAudio = false;
          }

          if (this._videoMuted) {
            enableVideo = false;
          }

          this._toggleMuteAudio(!enableAudio);

          this._toggleMuteVideo(!enableVideo);
        }
        /**
         * Handle SessionTimers for an incoming INVITE or UPDATE.
         * @param  {IncomingRequest} request
         * @param  {Array} responseExtraHeaders  Extra headers for the 200 response.
         */

      }, {
        key: "_handleSessionTimersInIncomingRequest",
        value: function _handleSessionTimersInIncomingRequest(request, responseExtraHeaders) {
          if (!this._sessionTimers.enabled) {
            return;
          }

          var session_expires_refresher;

          if (request.session_expires && request.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {
            this._sessionTimers.currentExpires = request.session_expires;
            session_expires_refresher = request.session_expires_refresher || 'uas';
          } else {
            this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
            session_expires_refresher = 'uas';
          }

          responseExtraHeaders.push("Session-Expires: ".concat(this._sessionTimers.currentExpires, ";refresher=").concat(session_expires_refresher));
          this._sessionTimers.refresher = session_expires_refresher === 'uas';

          this._runSessionTimer();
        }
        /**
         * Handle SessionTimers for an incoming response to INVITE or UPDATE.
         * @param  {IncomingResponse} response
         */

      }, {
        key: "_handleSessionTimersInIncomingResponse",
        value: function _handleSessionTimersInIncomingResponse(response) {
          if (!this._sessionTimers.enabled) {
            return;
          }

          var session_expires_refresher;

          if (response.session_expires && response.session_expires >= JsSIP_C.MIN_SESSION_EXPIRES) {
            this._sessionTimers.currentExpires = response.session_expires;
            session_expires_refresher = response.session_expires_refresher || 'uac';
          } else {
            this._sessionTimers.currentExpires = this._sessionTimers.defaultExpires;
            session_expires_refresher = 'uac';
          }

          this._sessionTimers.refresher = session_expires_refresher === 'uac';

          this._runSessionTimer();
        }
      }, {
        key: "_runSessionTimer",
        value: function _runSessionTimer() {
          var _this27 = this;

          var expires = this._sessionTimers.currentExpires;
          this._sessionTimers.running = true;
          clearTimeout(this._sessionTimers.timer);

          if (this._sessionTimers.refresher) {
            this._sessionTimers.timer = setTimeout(function () {
              if (_this27._status === C.STATUS_TERMINATED) {
                return;
              }

              debug('runSessionTimer() | sending session refresh request');

              if (_this27._sessionTimers.refreshMethod === JsSIP_C.UPDATE) {
                _this27._sendUpdate();
              } else {
                _this27._sendReinvite();
              }
            }, expires * 500);
          }
          else {
            this._sessionTimers.timer = setTimeout(function () {
              if (_this27._status === C.STATUS_TERMINATED) {
                return;
              }

              debugerror('runSessionTimer() | timer expired, terminating the session');

              _this27.terminate({
                cause: JsSIP_C.causes.REQUEST_TIMEOUT,
                status_code: 408,
                reason_phrase: 'Session Timer Expired'
              });
            }, expires * 1100);
          }
        }
      }, {
        key: "_toggleMuteAudio",
        value: function _toggleMuteAudio(mute) {
          var senders = this._connection.getSenders().filter(function (sender) {
            return sender.track && sender.track.kind === 'audio';
          });

          var _iterator8 = _createForOfIteratorHelper(senders),
            _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var sender = _step8.value;
              sender.track.enabled = !mute;
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      }, {
        key: "_toggleMuteVideo",
        value: function _toggleMuteVideo(mute) {
          var senders = this._connection.getSenders().filter(function (sender) {
            return sender.track && sender.track.kind === 'video';
          });

          var _iterator9 = _createForOfIteratorHelper(senders),
            _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var sender = _step9.value;
              sender.track.enabled = !mute;
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }
        }
      }, {
        key: "_newRTCSession",
        value: function _newRTCSession(originator, request) {
          debug('newRTCSession()');

          this._ua.newRTCSession(this, {
            originator: originator,
            session: this,
            request: request
          });
        }
      }, {
        key: "_connecting",
        value: function _connecting(request) {
          debug('session connecting');
          debug('emit "connecting"');
          this.emit('connecting', {
            request: request
          });
        }
      }, {
        key: "_progress",
        value: function _progress(originator, response) {
          debug('session progress');
          debug('emit "progress"');
          this.emit('progress', {
            originator: originator,
            response: response || null
          });
        }
      }, {
        key: "_accepted",
        value: function _accepted(originator, message) {
          debug('session accepted');
          this._start_time = new Date();
          debug('emit "accepted"');
          this.emit('accepted', {
            originator: originator,
            response: message || null
          });
        }
      }, {
        key: "_confirmed",
        value: function _confirmed(originator, ack) {
          debug('session confirmed');
          this._is_confirmed = true;
          debug('emit "confirmed"');
          this.emit('confirmed', {
            originator: originator,
            ack: ack || null
          });
        }
      }, {
        key: "_ended",
        value: function _ended(originator, message, cause) {
          debug('session ended');
          this._end_time = new Date();

          this._close();

          debug('emit "ended"');
          this.emit('ended', {
            originator: originator,
            message: message || null,
            cause: cause
          });
        }
      }, {
        key: "_failed",
        value: function _failed(originator, message, cause) {
          debug('session failed');

          debug('emit "_failed"');
          this.emit('_failed', {
            originator: originator,
            message: message || null,
            cause: cause
          });

          this._close();

          debug('emit "failed"');
          this.emit('failed', {
            originator: originator,
            message: message || null,
            cause: cause
          });
        }
      }, {
        key: "_onhold",
        value: function _onhold(originator) {
          debug('session onhold');

          this._setLocalMediaStatus();

          debug('emit "hold"');
          this.emit('hold', {
            originator: originator
          });
        }
      }, {
        key: "_onunhold",
        value: function _onunhold(originator) {
          debug('session onunhold');

          this._setLocalMediaStatus();

          debug('emit "unhold"');
          this.emit('unhold', {
            originator: originator
          });
        }
      }, {
        key: "_onmute",
        value: function _onmute(_ref5) {
          var audio = _ref5.audio,
            video = _ref5.video;
          debug('session onmute');

          this._setLocalMediaStatus();

          debug('emit "muted"');
          this.emit('muted', {
            audio: audio,
            video: video
          });
        }
      }, {
        key: "_onunmute",
        value: function _onunmute(_ref6) {
          var audio = _ref6.audio,
            video = _ref6.video;
          debug('session onunmute');

          this._setLocalMediaStatus();

          debug('emit "unmuted"');
          this.emit('unmuted', {
            audio: audio,
            video: video
          });
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }

      }, {
        key: "causes",
        get: function get() {
          return JsSIP_C.causes;
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }, {
        key: "connection",
        get: function get() {
          return this._connection;
        }
      }, {
        key: "contact",
        get: function get() {
          return this._contact;
        }
      }, {
        key: "direction",
        get: function get() {
          return this._direction;
        }
      }, {
        key: "local_identity",
        get: function get() {
          return this._local_identity;
        }
      }, {
        key: "remote_identity",
        get: function get() {
          return this._remote_identity;
        }
      }, {
        key: "start_time",
        get: function get() {
          return this._start_time;
        }
      }, {
        key: "end_time",
        get: function get() {
          return this._end_time;
        }
      }, {
        key: "data",
        get: function get() {
          return this._data;
        },
        set: function set(_data) {
          this._data = _data;
        }
      }, {
        key: "status",
        get: function get() {
          return this._status;
        }
      }]);

      return RTCSession;
    }(EventEmitter);
  },{"./Constants":2,"./Dialog":3,"./Exceptions":6,"./RTCSession/DTMF":13,"./RTCSession/Info":14,"./RTCSession/ReferNotifier":15,"./RTCSession/ReferSubscriber":16,"./RequestSender":18,"./SIPMessage":19,"./Timers":21,"./Transactions":22,"./URI":25,"./Utils":26,"debug":30,"events":29,"sdp-transform":35}],13:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var JsSIP_C = require('../Constants');

    var Exceptions = require('../Exceptions');

    var Utils = require('../Utils');

    var debug = require('debug')('JsSIP:RTCSession:DTMF');

    var debugerror = require('debug')('JsSIP:ERROR:RTCSession:DTMF');

    debugerror.log = console.warn.bind(console);
    var C = {
      MIN_DURATION: 70,
      MAX_DURATION: 6000,
      DEFAULT_DURATION: 100,
      MIN_INTER_TONE_GAP: 50,
      DEFAULT_INTER_TONE_GAP: 500
    };

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(DTMF, _EventEmitter);

      var _super = _createSuper(DTMF);

      function DTMF(session) {
        var _this;

        _classCallCheck(this, DTMF);

        _this = _super.call(this);
        _this._session = session;
        _this._direction = null;
        _this._tone = null;
        _this._duration = null;
        _this._request = null;
        return _this;
      }

      _createClass(DTMF, [{
        key: "send",
        value: function send(tone) {
          var _this2 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          if (tone === undefined) {
            throw new TypeError('Not enough arguments');
          }

          this._direction = 'outgoing';

          if (this._session.status !== this._session.C.STATUS_CONFIRMED && this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._session.status);
          }

          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          this.eventHandlers = Utils.cloneObject(options.eventHandlers);

          if (typeof tone === 'string') {
            tone = tone.toUpperCase();
          } else if (typeof tone === 'number') {
            tone = tone.toString();
          } else {
            throw new TypeError("Invalid tone: ".concat(tone));
          }


          if (!tone.match(/^[0-9A-DR#*]$/)) {
            throw new TypeError("Invalid tone: ".concat(tone));
          } else {
            this._tone = tone;
          }


          this._duration = options.duration;
          extraHeaders.push('Content-Type: application/dtmf-relay');
          var body = "Signal=".concat(this._tone, "\r\n");
          body += "Duration=".concat(this._duration);

          this._session.newDTMF({
            originator: 'local',
            dtmf: this,
            request: this._request
          });

          this._session.sendRequest(JsSIP_C.INFO, {
            extraHeaders: extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2.emit('succeeded', {
                  originator: 'remote',
                  response: response
                });
              },
              onErrorResponse: function onErrorResponse(response) {
                if (_this2.eventHandlers.onFailed) {
                  _this2.eventHandlers.onFailed();
                }

                _this2.emit('failed', {
                  originator: 'remote',
                  response: response
                });
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._session.onRequestTimeout();
              },
              onTransportError: function onTransportError() {
                _this2._session.onTransportError();
              },
              onDialogError: function onDialogError() {
                _this2._session.onDialogError();
              }
            },
            body: body
          });
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          var reg_tone = /^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/;
          var reg_duration = /^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;
          this._direction = 'incoming';
          this._request = request;
          request.reply(200);

          if (request.body) {
            var body = request.body.split('\n');

            if (body.length >= 1) {
              if (reg_tone.test(body[0])) {
                this._tone = body[0].replace(reg_tone, '$2');
              }
            }

            if (body.length >= 2) {
              if (reg_duration.test(body[1])) {
                this._duration = parseInt(body[1].replace(reg_duration, '$2'), 10);
              }
            }
          }

          if (!this._duration) {
            this._duration = C.DEFAULT_DURATION;
          }

          if (!this._tone) {
            debug('invalid INFO DTMF received, discarded');
          } else {
            this._session.newDTMF({
              originator: 'remote',
              dtmf: this,
              request: request
            });
          }
        }
      }, {
        key: "tone",
        get: function get() {
          return this._tone;
        }
      }, {
        key: "duration",
        get: function get() {
          return this._duration;
        }
      }]);

      return DTMF;
    }(EventEmitter);
    /**
     * Expose C object.
     */


    module.exports.C = C;
  },{"../Constants":2,"../Exceptions":6,"../Utils":26,"debug":30,"events":29}],14:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var debugerror = require('debug')('JsSIP:ERROR:RTCSession:Info');

    debugerror.log = console.warn.bind(console);

    var JsSIP_C = require('../Constants');

    var Exceptions = require('../Exceptions');

    var Utils = require('../Utils');

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(Info, _EventEmitter);

      var _super = _createSuper(Info);

      function Info(session) {
        var _this;

        _classCallCheck(this, Info);

        _this = _super.call(this);
        _this._session = session;
        _this._direction = null;
        _this._contentType = null;
        _this._body = null;
        return _this;
      }

      _createClass(Info, [{
        key: "send",
        value: function send(contentType, body) {
          var _this2 = this;

          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          this._direction = 'outgoing';

          if (contentType === undefined) {
            throw new TypeError('Not enough arguments');
          }


          if (this._session.status !== this._session.C.STATUS_CONFIRMED && this._session.status !== this._session.C.STATUS_WAITING_FOR_ACK) {
            throw new Exceptions.InvalidStateError(this._session.status);
          }

          this._contentType = contentType;
          this._body = body;
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          extraHeaders.push("Content-Type: ".concat(contentType));

          this._session.newInfo({
            originator: 'local',
            info: this,
            request: this.request
          });

          this._session.sendRequest(JsSIP_C.INFO, {
            extraHeaders: extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2.emit('succeeded', {
                  originator: 'remote',
                  response: response
                });
              },
              onErrorResponse: function onErrorResponse(response) {
                _this2.emit('failed', {
                  originator: 'remote',
                  response: response
                });
              },
              onTransportError: function onTransportError() {
                _this2._session.onTransportError();
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._session.onRequestTimeout();
              },
              onDialogError: function onDialogError() {
                _this2._session.onDialogError();
              }
            },
            body: body
          });
        }
      }, {
        key: "init_incoming",
        value: function init_incoming(request) {
          this._direction = 'incoming';
          this.request = request;
          request.reply(200);
          this._contentType = request.getHeader('content-type');
          this._body = request.body;

          this._session.newInfo({
            originator: 'remote',
            info: this,
            request: request
          });
        }
      }, {
        key: "contentType",
        get: function get() {
          return this._contentType;
        }
      }, {
        key: "body",
        get: function get() {
          return this._body;
        }
      }]);

      return Info;
    }(EventEmitter);
  },{"../Constants":2,"../Exceptions":6,"../Utils":26,"debug":30,"events":29}],15:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var JsSIP_C = require('../Constants');

    var debug = require('debug')('JsSIP:RTCSession:ReferNotifier');

    var C = {
      event_type: 'refer',
      body_type: 'message/sipfrag;version=2.0',
      expires: 300
    };

    module.exports = /*#__PURE__*/function () {
      function ReferNotifier(session, id, expires) {
        _classCallCheck(this, ReferNotifier);

        this._session = session;
        this._id = id;
        this._expires = expires || C.expires;
        this._active = true;

        this.notify(100);
      }

      _createClass(ReferNotifier, [{
        key: "notify",
        value: function notify(code, reason) {
          debug('notify()');

          if (this._active === false) {
            return;
          }

          reason = reason || JsSIP_C.REASON_PHRASE[code] || '';
          var state;

          if (code >= 200) {
            state = 'terminated;reason=noresource';
          } else {
            state = "active;expires=".concat(this._expires);
          }


          this._session.sendRequest(JsSIP_C.NOTIFY, {
            extraHeaders: ["Event: ".concat(C.event_type, ";id=").concat(this._id), "Subscription-State: ".concat(state), "Content-Type: ".concat(C.body_type)],
            body: "SIP/2.0 ".concat(code, " ").concat(reason),
            eventHandlers: {
              onErrorResponse: function onErrorResponse() {
                this._active = false;
              }
            }
          });
        }
      }]);

      return ReferNotifier;
    }();
  },{"../Constants":2,"debug":30}],16:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var JsSIP_C = require('../Constants');

    var Grammar = require('../Grammar');

    var Utils = require('../Utils');

    var debug = require('debug')('JsSIP:RTCSession:ReferSubscriber');

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(ReferSubscriber, _EventEmitter);

      var _super = _createSuper(ReferSubscriber);

      function ReferSubscriber(session) {
        var _this;

        _classCallCheck(this, ReferSubscriber);

        _this = _super.call(this);
        _this._id = null;
        _this._session = session;
        return _this;
      }

      _createClass(ReferSubscriber, [{
        key: "sendRefer",
        value: function sendRefer(target) {
          var _this2 = this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
          debug('sendRefer()');
          var extraHeaders = Utils.cloneArray(options.extraHeaders);
          var eventHandlers = Utils.cloneObject(options.eventHandlers);

          for (var event in eventHandlers) {
            if (Object.prototype.hasOwnProperty.call(eventHandlers, event)) {
              this.on(event, eventHandlers[event]);
            }
          }


          var replaces = null;

          if (options.replaces) {
            replaces = options.replaces._request.call_id;
            replaces += ";to-tag=".concat(options.replaces._to_tag);
            replaces += ";from-tag=".concat(options.replaces._from_tag);
            replaces = encodeURIComponent(replaces);
          }


          var referTo = "Refer-To: <".concat(target).concat(replaces ? "?Replaces=".concat(replaces) : '', ">");
          extraHeaders.push(referTo);

          var referredBy = "Referred-By: <".concat(this._session._ua._configuration.uri._scheme, ":").concat(this._session._ua._configuration.uri._user, "@").concat(this._session._ua._configuration.uri._host, ">");
          extraHeaders.push(referredBy);
          extraHeaders.push("Contact: ".concat(this._session.contact));

          var request = this._session.sendRequest(JsSIP_C.REFER, {
            extraHeaders: extraHeaders,
            eventHandlers: {
              onSuccessResponse: function onSuccessResponse(response) {
                _this2._requestSucceeded(response);
              },
              onErrorResponse: function onErrorResponse(response) {
                _this2._requestFailed(response, JsSIP_C.causes.REJECTED);
              },
              onTransportError: function onTransportError() {
                _this2._requestFailed(null, JsSIP_C.causes.CONNECTION_ERROR);
              },
              onRequestTimeout: function onRequestTimeout() {
                _this2._requestFailed(null, JsSIP_C.causes.REQUEST_TIMEOUT);
              },
              onDialogError: function onDialogError() {
                _this2._requestFailed(null, JsSIP_C.causes.DIALOG_ERROR);
              }
            }
          });

          this._id = request.cseq;
        }
      }, {
        key: "receiveNotify",
        value: function receiveNotify(request) {
          debug('receiveNotify()');

          if (!request.body) {
            return;
          }

          var status_line = Grammar.parse(request.body.trim(), 'Status_Line');

          if (status_line === -1) {
            debug("receiveNotify() | error parsing NOTIFY body: \"".concat(request.body, "\""));
            return;
          }

          switch (true) {
            case /^100$/.test(status_line.status_code):
              this.emit('trying', {
                request: request,
                status_line: status_line
              });
              break;

            case /^1[0-9]{2}$/.test(status_line.status_code):
              this.emit('progress', {
                request: request,
                status_line: status_line
              });
              break;

            case /^2[0-9]{2}$/.test(status_line.status_code):
              this.emit('accepted', {
                request: request,
                status_line: status_line
              });
              break;

            default:
              this.emit('failed', {
                request: request,
                status_line: status_line
              });
              break;
          }
        }
      }, {
        key: "_requestSucceeded",
        value: function _requestSucceeded(response) {
          debug('REFER succeeded');
          debug('emit "requestSucceeded"');
          this.emit('requestSucceeded', {
            response: response
          });
        }
      }, {
        key: "_requestFailed",
        value: function _requestFailed(response, cause) {
          debug('REFER failed');
          debug('emit "requestFailed"');
          this.emit('requestFailed', {
            response: response || null,
            cause: cause
          });
        }
      }, {
        key: "id",
        get: function get() {
          return this._id;
        }
      }]);

      return ReferSubscriber;
    }(EventEmitter);
  },{"../Constants":2,"../Grammar":7,"../Utils":26,"debug":30,"events":29}],17:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var Utils = require('./Utils');

    var JsSIP_C = require('./Constants');

    var SIPMessage = require('./SIPMessage');

    var RequestSender = require('./RequestSender');

    var debug = require('debug')('JsSIP:Registrator');

    var MIN_REGISTER_EXPIRES = 10;

    module.exports = /*#__PURE__*/function () {
      function Registrator(ua, transport) {
        _classCallCheck(this, Registrator);

        var reg_id = 1;

        this._ua = ua;
        this._transport = transport;
        this._registrar = ua.configuration.registrar_server;
        this._expires = ua.configuration.register_expires;

        this._call_id = Utils.createRandomToken(22);
        this._cseq = 0;
        this._to_uri = ua.configuration.uri;
        this._registrationTimer = null;

        this._registering = false;

        this._registered = false;

        this._contact = this._ua.contact.toString();

        this._contact += ';+sip.ice';

        this._extraHeaders = [];

        this._extraContactParams = '';

        if (reg_id) {
          this._contact += ";reg-id=".concat(reg_id);
          this._contact += ";+sip.instance=\"<urn:uuid:".concat(this._ua.configuration.instance_id, ">\"");
        }
      }

      _createClass(Registrator, [{
        key: "setExtraHeaders",
        value: function setExtraHeaders(extraHeaders) {
          if (!Array.isArray(extraHeaders)) {
            extraHeaders = [];
          }

          this._extraHeaders = extraHeaders.slice();
        }
      }, {
        key: "setExtraContactParams",
        value: function setExtraContactParams(extraContactParams) {
          if (!(extraContactParams instanceof Object)) {
            extraContactParams = {};
          }


          this._extraContactParams = '';

          for (var param_key in extraContactParams) {
            if (Object.prototype.hasOwnProperty.call(extraContactParams, param_key)) {
              var param_value = extraContactParams[param_key];
              this._extraContactParams += ";".concat(param_key);

              if (param_value) {
                this._extraContactParams += "=".concat(param_value);
              }
            }
          }
        }
      }, {
        key: "register",
        value: function register() {
          var _this = this;

          if (this._registering) {
            debug('Register request in progress...');
            return;
          }

          var extraHeaders = this._extraHeaders.slice();

          extraHeaders.push("Contact: ".concat(this._contact, ";expires=").concat(this._expires).concat(this._extraContactParams));
          extraHeaders.push("Expires: ".concat(this._expires));
          var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {
            'to_uri': this._to_uri,
            'call_id': this._call_id,
            'cseq': this._cseq += 1
          }, extraHeaders);
          var request_sender = new RequestSender(this._ua, request, {
            onRequestTimeout: function onRequestTimeout() {
              _this._registrationFailure(null, JsSIP_C.causes.REQUEST_TIMEOUT);
            },
            onTransportError: function onTransportError() {
              _this._registrationFailure(null, JsSIP_C.causes.CONNECTION_ERROR);
            },
            onAuthenticated: function onAuthenticated() {
              _this._cseq += 1;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              if (response.cseq !== _this._cseq) {
                return;
              }


              if (_this._registrationTimer !== null) {
                clearTimeout(_this._registrationTimer);
                _this._registrationTimer = null;
              }

              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code):
                {
                  break;
                }

                case /^2[0-9]{2}$/.test(response.status_code):
                {
                  _this._registering = false;

                  if (!response.hasHeader('Contact')) {
                    debug('no Contact header in response to REGISTER, response ignored');
                    break;
                  }

                  var contacts = response.headers['Contact'].reduce(function (a, b) {
                    return a.concat(b.parsed);
                  }, []);

                  var contact = contacts.find(function (element) {
                    return element.uri.user === _this._ua.contact.uri.user;
                  });

                  if (!contact) {
                    debug('no Contact header pointing to us, response ignored');
                    break;
                  }

                  var expires = contact.getParam('expires');

                  if (!expires && response.hasHeader('expires')) {
                    expires = response.getHeader('expires');
                  }

                  if (!expires) {
                    expires = _this._expires;
                  }

                  expires = Number(expires);
                  if (expires < MIN_REGISTER_EXPIRES) expires = MIN_REGISTER_EXPIRES;
                  _this._registrationTimer = setTimeout(function () {
                    _this._registrationTimer = null;

                    if (_this._ua.listeners('registrationExpiring').length === 0) {
                      _this.register();
                    } else {
                      _this._ua.emit('registrationExpiring');
                    }
                  }, expires * 1000 - 5000);

                  if (contact.hasParam('temp-gruu')) {
                    _this._ua.contact.temp_gruu = contact.getParam('temp-gruu').replace(/"/g, '');
                  }

                  if (contact.hasParam('pub-gruu')) {
                    _this._ua.contact.pub_gruu = contact.getParam('pub-gruu').replace(/"/g, '');
                  }

                  if (!_this._registered) {
                    _this._registered = true;

                    _this._ua.registered({
                      response: response
                    });
                  }

                  break;
                }

                case /^423$/.test(response.status_code):
                {
                  if (response.hasHeader('min-expires')) {
                    _this._expires = Number(response.getHeader('min-expires'));
                    if (_this._expires < MIN_REGISTER_EXPIRES) _this._expires = MIN_REGISTER_EXPIRES;
                    _this.register();
                  } else {
                    debug('423 response received for REGISTER without Min-Expires');

                    _this._registrationFailure(response, JsSIP_C.causes.SIP_FAILURE_CODE);
                  }

                  break;
                }

                default:
                {
                  var cause = Utils.sipErrorCause(response.status_code);

                  _this._registrationFailure(response, cause);
                }
              }
            }
          });
          this._registering = true;
          request_sender.send();
        }
      }, {
        key: "unregister",
        value: function unregister() {
          var _this2 = this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          if (!this._registered) {
            debug('already unregistered');
            return;
          }

          this._registered = false;

          if (this._registrationTimer !== null) {
            clearTimeout(this._registrationTimer);
            this._registrationTimer = null;
          }

          var extraHeaders = this._extraHeaders.slice();

          if (options.all) {
            extraHeaders.push("Contact: *".concat(this._extraContactParams));
          } else {
            extraHeaders.push("Contact: ".concat(this._contact, ";expires=0").concat(this._extraContactParams));
          }

          extraHeaders.push('Expires: 0');
          var request = new SIPMessage.OutgoingRequest(JsSIP_C.REGISTER, this._registrar, this._ua, {
            'to_uri': this._to_uri,
            'call_id': this._call_id,
            'cseq': this._cseq += 1
          }, extraHeaders);
          var request_sender = new RequestSender(this._ua, request, {
            onRequestTimeout: function onRequestTimeout() {
              _this2._unregistered(null, JsSIP_C.causes.REQUEST_TIMEOUT);
            },
            onTransportError: function onTransportError() {
              _this2._unregistered(null, JsSIP_C.causes.CONNECTION_ERROR);
            },
            onAuthenticated: function onAuthenticated() {
              _this2._cseq += 1;
            },
            onReceiveResponse: function onReceiveResponse(response) {
              switch (true) {
                case /^1[0-9]{2}$/.test(response.status_code):
                  break;

                case /^2[0-9]{2}$/.test(response.status_code):
                  _this2._unregistered(response);

                  break;

                default:
                {
                  var cause = Utils.sipErrorCause(response.status_code);

                  _this2._unregistered(response, cause);
                }
              }
            }
          });
          request_sender.send();
        }
      }, {
        key: "close",
        value: function close() {
          if (this._registered) {
            this.unregister();
          }
        }
      }, {
        key: "onTransportClosed",
        value: function onTransportClosed() {
          this._registering = false;

          if (this._registrationTimer !== null) {
            clearTimeout(this._registrationTimer);
            this._registrationTimer = null;
          }

          if (this._registered) {
            this._registered = false;

            this._ua.unregistered({});
          }
        }
      }, {
        key: "_registrationFailure",
        value: function _registrationFailure(response, cause) {
          this._registering = false;

          this._ua.registrationFailed({
            response: response || null,
            cause: cause
          });

          if (this._registered) {
            this._registered = false;

            this._ua.unregistered({
              response: response || null,
              cause: cause
            });
          }
        }
      }, {
        key: "_unregistered",
        value: function _unregistered(response, cause) {
          this._registering = false;
          this._registered = false;

          this._ua.unregistered({
            response: response || null,
            cause: cause || null
          });
        }
      }, {
        key: "registered",
        get: function get() {
          return this._registered;
        }
      }]);

      return Registrator;
    }();
  },{"./Constants":2,"./RequestSender":18,"./SIPMessage":19,"./Utils":26,"debug":30}],18:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var JsSIP_C = require('./Constants');

    var DigestAuthentication = require('./DigestAuthentication');

    var Transactions = require('./Transactions');

    var debug = require('debug')('JsSIP:RequestSender');

    var EventHandlers = {
      onRequestTimeout: function onRequestTimeout() {},
      onTransportError: function onTransportError() {},
      onReceiveResponse: function onReceiveResponse() {},
      onAuthenticated: function onAuthenticated() {}
    };

    module.exports = /*#__PURE__*/function () {
      function RequestSender(ua, request, eventHandlers) {
        _classCallCheck(this, RequestSender);

        this._ua = ua;
        this._eventHandlers = eventHandlers;
        this._method = request.method;
        this._request = request;
        this._auth = null;
        this._challenged = false;
        this._staled = false;

        for (var handler in EventHandlers) {
          if (Object.prototype.hasOwnProperty.call(EventHandlers, handler)) {
            if (!this._eventHandlers[handler]) {
              this._eventHandlers[handler] = EventHandlers[handler];
            }
          }
        }

        if (ua.status === ua.C.STATUS_USER_CLOSED && (this._method !== JsSIP_C.BYE || this._method !== JsSIP_C.ACK)) {
          this._eventHandlers.onTransportError();
        }
      }
      /**
       * Create the client transaction and send the message.
       */


      _createClass(RequestSender, [{
        key: "send",
        value: function send() {
          var _this = this;

          var eventHandlers = {
            onRequestTimeout: function onRequestTimeout() {
              _this._eventHandlers.onRequestTimeout();
            },
            onTransportError: function onTransportError() {
              _this._eventHandlers.onTransportError();
            },
            onReceiveResponse: function onReceiveResponse(response) {
              _this._receiveResponse(response);
            }
          };

          switch (this._method) {
            case 'INVITE':
              this.clientTransaction = new Transactions.InviteClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
              break;

            case 'ACK':
              this.clientTransaction = new Transactions.AckClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
              break;

            default:
              this.clientTransaction = new Transactions.NonInviteClientTransaction(this._ua, this._ua.transport, this._request, eventHandlers);
          }


          if (this._ua._configuration.authorization_jwt) {
            this._request.setHeader('Authorization', this._ua._configuration.authorization_jwt);
          }

          this.clientTransaction.send();
        }
        /**
         * Called from client transaction when receiving a correct response to the request.
         * Authenticate request if needed or pass the response back to the applicant.
         */

      }, {
        key: "_receiveResponse",
        value: function _receiveResponse(response) {
          var challenge;
          var authorization_header_name;
          var status_code = response.status_code;
          /*
          * Authentication
          * Authenticate once. _challenged_ flag used to avoid infinite authentications.
          */

          if ((status_code === 401 || status_code === 407) && (this._ua.configuration.password !== null || this._ua.configuration.ha1 !== null)) {
            if (response.status_code === 401) {
              challenge = response.parseHeader('www-authenticate');
              authorization_header_name = 'authorization';
            } else {
              challenge = response.parseHeader('proxy-authenticate');
              authorization_header_name = 'proxy-authorization';
            }


            if (!challenge) {
              debug("".concat(response.status_code, " with wrong or missing challenge, cannot authenticate"));

              this._eventHandlers.onReceiveResponse(response);

              return;
            }

            if (!this._challenged || !this._staled && challenge.stale === true) {
              if (!this._auth) {
                this._auth = new DigestAuthentication({
                  username: this._ua.configuration.authorization_user,
                  password: this._ua.configuration.password,
                  realm: this._ua.configuration.realm,
                  ha1: this._ua.configuration.ha1
                });
              }


              if (!this._auth.authenticate(this._request, challenge)) {
                this._eventHandlers.onReceiveResponse(response);

                return;
              }

              this._challenged = true;

              this._ua.set('realm', this._auth.get('realm'));

              this._ua.set('ha1', this._auth.get('ha1'));

              if (challenge.stale) {
                this._staled = true;
              }

              this._request = this._request.clone();
              this._request.cseq += 1;

              this._request.setHeader('cseq', "".concat(this._request.cseq, " ").concat(this._method));

              this._request.setHeader(authorization_header_name, this._auth.toString());

              this._eventHandlers.onAuthenticated(this._request);

              this.send();
            } else {
              this._eventHandlers.onReceiveResponse(response);
            }
          } else {
            this._eventHandlers.onReceiveResponse(response);
          }
        }
      }]);

      return RequestSender;
    }();
  },{"./Constants":2,"./DigestAuthentication":5,"./Transactions":22,"debug":30}],19:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var sdp_transform = require('sdp-transform');

    var JsSIP_C = require('./Constants');

    var Utils = require('./Utils');

    var NameAddrHeader = require('./NameAddrHeader');

    var Grammar = require('./Grammar');

    var debug = require('debug')('JsSIP:SIPMessage');
    /**
     * -param {String} method request method
     * -param {String} ruri request uri
     * -param {UA} ua
     * -param {Object} params parameters that will have priority over ua.configuration parameters:
     * <br>
     *  - cseq, call_id, from_tag, from_uri, from_display_name, to_uri, to_tag, route_set
     * -param {Object} [headers] extra headers
     * -param {String} [body]
     */


    var OutgoingRequest = /*#__PURE__*/function () {
      function OutgoingRequest(method, ruri, ua, params, extraHeaders, body) {
        _classCallCheck(this, OutgoingRequest);

        if (!method || !ruri || !ua) {
          return null;
        }

        params = params || {};
        this.ua = ua;
        this.headers = {};
        this.method = method;
        this.ruri = ruri;
        this.body = body;
        this.extraHeaders = Utils.cloneArray(extraHeaders);

        if (params.route_set) {
          this.setHeader('route', params.route_set);
        } else if (ua.configuration.use_preloaded_route) {
          this.setHeader('route', "<".concat(ua.transport.sip_uri, ";lr>"));
        }


        this.setHeader('via', '');

        this.setHeader('max-forwards', JsSIP_C.MAX_FORWARDS);

        var to_uri = params.to_uri || ruri;
        var to_params = params.to_tag ? {
          tag: params.to_tag
        } : null;
        var to_display_name = typeof params.to_display_name !== 'undefined' ? params.to_display_name : null;
        this.to = new NameAddrHeader(to_uri, to_display_name, to_params);
        this.setHeader('to', this.to.toString());

        var from_uri = params.from_uri || ua.configuration.uri;
        var from_params = {
          tag: params.from_tag || Utils.newTag()
        };
        var display_name;

        if (typeof params.from_display_name !== 'undefined') {
          display_name = params.from_display_name;
        } else if (ua.configuration.display_name) {
          display_name = ua.configuration.display_name;
        } else {
          display_name = null;
        }

        this.from = new NameAddrHeader(from_uri, display_name, from_params);
        this.setHeader('from', this.from.toString());

        var call_id = params.call_id || ua.configuration.jssip_id + Utils.createRandomToken(15);
        this.call_id = call_id;
        this.setHeader('call-id', call_id);

        var cseq = params.cseq || Math.floor(Math.random() * 10000);
        this.cseq = cseq;
        this.setHeader('cseq', "".concat(cseq, " ").concat(method));
      }
      /**
       * Replace the the given header by the given value.
       * -param {String} name header name
       * -param {String | Array} value header value
       */


      _createClass(OutgoingRequest, [{
        key: "setHeader",
        value: function setHeader(name, value) {
          var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), 'i');

          for (var idx = 0; idx < this.extraHeaders.length; idx++) {
            if (regexp.test(this.extraHeaders[idx])) {
              this.extraHeaders.splice(idx, 1);
            }
          }

          this.headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];
        }
        /**
         * Get the value of the given header name at the given position.
         * -param {String} name header name
         * -returns {String|undefined} Returns the specified header, null if header doesn't exist.
         */

      }, {
        key: "getHeader",
        value: function getHeader(name) {
          var headers = this.headers[Utils.headerize(name)];

          if (headers) {
            if (headers[0]) {
              return headers[0];
            }
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), 'i');

            var _iterator = _createForOfIteratorHelper(this.extraHeaders),
              _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var header = _step.value;

                if (regexp.test(header)) {
                  return header.substring(header.indexOf(':') + 1).trim();
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }

          return;
        }
        /**
         * Get the header/s of the given name.
         * -param {String} name header name
         * -returns {Array} Array with all the headers of the specified name.
         */

      }, {
        key: "getHeaders",
        value: function getHeaders(name) {
          var headers = this.headers[Utils.headerize(name)];
          var result = [];

          if (headers) {
            var _iterator2 = _createForOfIteratorHelper(headers),
              _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var header = _step2.value;
                result.push(header);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            return result;
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), 'i');

            var _iterator3 = _createForOfIteratorHelper(this.extraHeaders),
              _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _header = _step3.value;

                if (regexp.test(_header)) {
                  result.push(_header.substring(_header.indexOf(':') + 1).trim());
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            return result;
          }
        }
        /**
         * Verify the existence of the given header.
         * -param {String} name header name
         * -returns {boolean} true if header with given name exists, false otherwise
         */

      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          if (this.headers[Utils.headerize(name)]) {
            return true;
          } else {
            var regexp = new RegExp("^\\s*".concat(name, "\\s*:"), 'i');

            var _iterator4 = _createForOfIteratorHelper(this.extraHeaders),
              _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var header = _step4.value;

                if (regexp.test(header)) {
                  return true;
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }

          return false;
        }
        /**
         * Parse the current body as a SDP and store the resulting object
         * into this.sdp.
         * -param {Boolean} force: Parse even if this.sdp already exists.
         *
         * Returns this.sdp.
         */

      }, {
        key: "parseSDP",
        value: function parseSDP(force) {
          if (!force && this.sdp) {
            return this.sdp;
          } else {
            this.sdp = sdp_transform.parse(this.body || '');
            return this.sdp;
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          var msg = "".concat(this.method, " ").concat(this.ruri, " SIP/2.0\r\n");

          for (var headerName in this.headers) {
            if (Object.prototype.hasOwnProperty.call(this.headers, headerName)) {
              var _iterator5 = _createForOfIteratorHelper(this.headers[headerName]),
                _step5;

              try {
                for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                  var headerValue = _step5.value;
                  msg += "".concat(headerName, ": ").concat(headerValue, "\r\n");
                }
              } catch (err) {
                _iterator5.e(err);
              } finally {
                _iterator5.f();
              }
            }
          }

          var _iterator6 = _createForOfIteratorHelper(this.extraHeaders),
            _step6;

          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var header = _step6.value;
              msg += "".concat(header.trim(), "\r\n");
            }

          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }

          var supported = [];

          switch (this.method) {
            case JsSIP_C.REGISTER:
              supported.push('path', 'gruu');
              break;

            case JsSIP_C.INVITE:
              if (this.ua.configuration.session_timers) {
                supported.push('timer');
              }

              if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {
                supported.push('gruu');
              }

              supported.push('ice', 'replaces');
              break;

            case JsSIP_C.UPDATE:
              if (this.ua.configuration.session_timers) {
                supported.push('timer');
              }

              supported.push('ice');
              break;
          }

          supported.push('outbound');
          var userAgent = this.ua.configuration.user_agent || JsSIP_C.USER_AGENT;

          msg += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
          msg += "Supported: ".concat(supported, "\r\n");
          msg += "User-Agent: ".concat(userAgent, "\r\n");

          if (this.body) {
            var length = Utils.str_utf8_length(this.body);
            msg += "Content-Length: ".concat(length, "\r\n\r\n");
            msg += this.body;
          } else {
            msg += 'Content-Length: 0\r\n\r\n';
          }

          return msg;
        }
      }, {
        key: "clone",
        value: function clone() {
          var request = new OutgoingRequest(this.method, this.ruri, this.ua);
          Object.keys(this.headers).forEach(function (name) {
            request.headers[name] = this.headers[name].slice();
          }, this);
          request.body = this.body;
          request.extraHeaders = Utils.cloneArray(this.extraHeaders);
          request.to = this.to;
          request.from = this.from;
          request.call_id = this.call_id;
          request.cseq = this.cseq;
          return request;
        }
      }]);

      return OutgoingRequest;
    }();

    var InitialOutgoingInviteRequest = /*#__PURE__*/function (_OutgoingRequest) {
      _inherits(InitialOutgoingInviteRequest, _OutgoingRequest);

      var _super = _createSuper(InitialOutgoingInviteRequest);

      function InitialOutgoingInviteRequest(ruri, ua, params, extraHeaders, body) {
        var _this;

        _classCallCheck(this, InitialOutgoingInviteRequest);

        _this = _super.call(this, JsSIP_C.INVITE, ruri, ua, params, extraHeaders, body);
        _this.transaction = null;
        return _this;
      }

      _createClass(InitialOutgoingInviteRequest, [{
        key: "cancel",
        value: function cancel(reason) {
          this.transaction.cancel(reason);
        }
      }, {
        key: "clone",
        value: function clone() {
          var request = new InitialOutgoingInviteRequest(this.ruri, this.ua);
          Object.keys(this.headers).forEach(function (name) {
            request.headers[name] = this.headers[name].slice();
          }, this);
          request.body = this.body;
          request.extraHeaders = Utils.cloneArray(this.extraHeaders);
          request.to = this.to;
          request.from = this.from;
          request.call_id = this.call_id;
          request.cseq = this.cseq;
          request.transaction = this.transaction;
          return request;
        }
      }]);

      return InitialOutgoingInviteRequest;
    }(OutgoingRequest);

    var IncomingMessage = /*#__PURE__*/function () {
      function IncomingMessage() {
        _classCallCheck(this, IncomingMessage);

        this.data = null;
        this.headers = null;
        this.method = null;
        this.via = null;
        this.via_branch = null;
        this.call_id = null;
        this.cseq = null;
        this.from = null;
        this.from_tag = null;
        this.to = null;
        this.to_tag = null;
        this.body = null;
        this.sdp = null;
      }
      /**
       * Insert a header of the given name and value into the last position of the
       * header array.
       */


      _createClass(IncomingMessage, [{
        key: "addHeader",
        value: function addHeader(name, value) {
          var header = {
            raw: value
          };
          name = Utils.headerize(name);

          if (this.headers[name]) {
            this.headers[name].push(header);
          } else {
            this.headers[name] = [header];
          }
        }
        /**
         * Get the value of the given header name at the given position.
         */

      }, {
        key: "getHeader",
        value: function getHeader(name) {
          var header = this.headers[Utils.headerize(name)];

          if (header) {
            if (header[0]) {
              return header[0].raw;
            }
          } else {
            return;
          }
        }
        /**
         * Get the header/s of the given name.
         */

      }, {
        key: "getHeaders",
        value: function getHeaders(name) {
          var headers = this.headers[Utils.headerize(name)];
          var result = [];

          if (!headers) {
            return [];
          }

          var _iterator7 = _createForOfIteratorHelper(headers),
            _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var header = _step7.value;
              result.push(header.raw);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          return result;
        }
        /**
         * Verify the existence of the given header.
         */

      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          return this.headers[Utils.headerize(name)] ? true : false;
        }
        /**
         * Parse the given header on the given index.
         * -param {String} name header name
         * -param {Number} [idx=0] header index
         * -returns {Object|undefined} Parsed header object, undefined if the header
         *  is not present or in case of a parsing error.
         */

      }, {
        key: "parseHeader",
        value: function parseHeader(name) {
          var idx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          name = Utils.headerize(name);

          if (!this.headers[name]) {
            debug("header \"".concat(name, "\" not present"));
            return;
          } else if (idx >= this.headers[name].length) {
            debug("not so many \"".concat(name, "\" headers present"));
            return;
          }

          var header = this.headers[name][idx];
          var value = header.raw;

          if (header.parsed) {
            return header.parsed;
          }


          var parsed = Grammar.parse(value, name.replace(/-/g, '_'));

          if (parsed === -1) {
            this.headers[name].splice(idx, 1);

            debug("error parsing \"".concat(name, "\" header field with value \"").concat(value, "\""));
            return;
          } else {
            header.parsed = parsed;
            return parsed;
          }
        }
        /**
         * Message Header attribute selector. Alias of parseHeader.
         * -param {String} name header name
         * -param {Number} [idx=0] header index
         * -returns {Object|undefined} Parsed header object, undefined if the header
         *  is not present or in case of a parsing error.
         *
         * -example
         * message.s('via',3).port
         */

      }, {
        key: "s",
        value: function s(name, idx) {
          return this.parseHeader(name, idx);
        }
        /**
         * Replace the value of the given header by the value.
         * -param {String} name header name
         * -param {String} value header value
         */

      }, {
        key: "setHeader",
        value: function setHeader(name, value) {
          var header = {
            raw: value
          };
          this.headers[Utils.headerize(name)] = [header];
        }
        /**
         * Parse the current body as a SDP and store the resulting object
         * into this.sdp.
         * -param {Boolean} force: Parse even if this.sdp already exists.
         *
         * Returns this.sdp.
         */

      }, {
        key: "parseSDP",
        value: function parseSDP(force) {
          if (!force && this.sdp) {
            return this.sdp;
          } else {
            this.sdp = sdp_transform.parse(this.body || '');
            return this.sdp;
          }
        }
      }, {
        key: "toString",
        value: function toString() {
          return this.data;
        }
      }]);

      return IncomingMessage;
    }();

    var IncomingRequest = /*#__PURE__*/function (_IncomingMessage) {
      _inherits(IncomingRequest, _IncomingMessage);

      var _super2 = _createSuper(IncomingRequest);

      function IncomingRequest(ua) {
        var _this2;

        _classCallCheck(this, IncomingRequest);

        _this2 = _super2.call(this);
        _this2.ua = ua;
        _this2.headers = {};
        _this2.ruri = null;
        _this2.transport = null;
        _this2.server_transaction = null;
        return _this2;
      }
      /**
       * Stateful reply.
       * -param {Number} code status code
       * -param {String} reason reason phrase
       * -param {Object} headers extra headers
       * -param {String} body body
       * -param {Function} [onSuccess] onSuccess callback
       * -param {Function} [onFailure] onFailure callback
       */


      _createClass(IncomingRequest, [{
        key: "reply",
        value: function reply(code, reason, extraHeaders, body, onSuccess, onFailure) {
          var supported = [];
          var to = this.getHeader('To');
          code = code || null;
          reason = reason || null;

          if (!code || code < 100 || code > 699) {
            throw new TypeError("Invalid status_code: ".concat(code));
          } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {
            throw new TypeError("Invalid reason_phrase: ".concat(reason));
          }

          reason = reason || JsSIP_C.REASON_PHRASE[code] || '';
          extraHeaders = Utils.cloneArray(extraHeaders);
          var response = "SIP/2.0 ".concat(code, " ").concat(reason, "\r\n");

          if (this.method === JsSIP_C.INVITE && code > 100 && code <= 200) {
            var headers = this.getHeaders('record-route');

            var _iterator8 = _createForOfIteratorHelper(headers),
              _step8;

            try {
              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                var header = _step8.value;
                response += "Record-Route: ".concat(header, "\r\n");
              }
            } catch (err) {
              _iterator8.e(err);
            } finally {
              _iterator8.f();
            }
          }

          var vias = this.getHeaders('via');

          var _iterator9 = _createForOfIteratorHelper(vias),
            _step9;

          try {
            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
              var via = _step9.value;
              response += "Via: ".concat(via, "\r\n");
            }
          } catch (err) {
            _iterator9.e(err);
          } finally {
            _iterator9.f();
          }

          if (!this.to_tag && code > 100) {
            to += ";tag=".concat(Utils.newTag());
          } else if (this.to_tag && !this.s('to').hasParam('tag')) {
            to += ";tag=".concat(this.to_tag);
          }

          response += "To: ".concat(to, "\r\n");
          response += "From: ".concat(this.getHeader('From'), "\r\n");
          response += "Call-ID: ".concat(this.call_id, "\r\n");
          response += "CSeq: ".concat(this.cseq, " ").concat(this.method, "\r\n");

          var _iterator10 = _createForOfIteratorHelper(extraHeaders),
            _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var _header2 = _step10.value;
              response += "".concat(_header2.trim(), "\r\n");
            }

          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          switch (this.method) {
            case JsSIP_C.INVITE:
              if (this.ua.configuration.session_timers) {
                supported.push('timer');
              }

              if (this.ua.contact.pub_gruu || this.ua.contact.temp_gruu) {
                supported.push('gruu');
              }

              supported.push('ice', 'replaces');
              break;

            case JsSIP_C.UPDATE:
              if (this.ua.configuration.session_timers) {
                supported.push('timer');
              }

              if (body) {
                supported.push('ice');
              }

              supported.push('replaces');
          }

          supported.push('outbound');

          if (this.method === JsSIP_C.OPTIONS) {
            response += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
            response += "Accept: ".concat(JsSIP_C.ACCEPTED_BODY_TYPES, "\r\n");
          } else if (code === 405) {
            response += "Allow: ".concat(JsSIP_C.ALLOWED_METHODS, "\r\n");
          } else if (code === 415) {
            response += "Accept: ".concat(JsSIP_C.ACCEPTED_BODY_TYPES, "\r\n");
          }

          response += "Supported: ".concat(supported, "\r\n");

          if (body) {
            var length = Utils.str_utf8_length(body);
            response += 'Content-Type: application/sdp\r\n';
            response += "Content-Length: ".concat(length, "\r\n\r\n");
            response += body;
          } else {
            response += "Content-Length: ".concat(0, "\r\n\r\n");
          }

          this.server_transaction.receiveResponse(code, response, onSuccess, onFailure);
        }
        /**
         * Stateless reply.
         * -param {Number} code status code
         * -param {String} reason reason phrase
         */

      }, {
        key: "reply_sl",
        value: function reply_sl() {
          var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var vias = this.getHeaders('via');

          if (!code || code < 100 || code > 699) {
            throw new TypeError("Invalid status_code: ".concat(code));
          } else if (reason && typeof reason !== 'string' && !(reason instanceof String)) {
            throw new TypeError("Invalid reason_phrase: ".concat(reason));
          }

          reason = reason || JsSIP_C.REASON_PHRASE[code] || '';
          var response = "SIP/2.0 ".concat(code, " ").concat(reason, "\r\n");

          var _iterator11 = _createForOfIteratorHelper(vias),
            _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var via = _step11.value;
              response += "Via: ".concat(via, "\r\n");
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }

          var to = this.getHeader('To');

          if (!this.to_tag && code > 100) {
            to += ";tag=".concat(Utils.newTag());
          } else if (this.to_tag && !this.s('to').hasParam('tag')) {
            to += ";tag=".concat(this.to_tag);
          }

          response += "To: ".concat(to, "\r\n");
          response += "From: ".concat(this.getHeader('From'), "\r\n");
          response += "Call-ID: ".concat(this.call_id, "\r\n");
          response += "CSeq: ".concat(this.cseq, " ").concat(this.method, "\r\n");
          response += "Content-Length: ".concat(0, "\r\n\r\n");
          this.transport.send(response);
        }
      }]);

      return IncomingRequest;
    }(IncomingMessage);

    var IncomingResponse = /*#__PURE__*/function (_IncomingMessage2) {
      _inherits(IncomingResponse, _IncomingMessage2);

      var _super3 = _createSuper(IncomingResponse);

      function IncomingResponse() {
        var _this3;

        _classCallCheck(this, IncomingResponse);

        _this3 = _super3.call(this);
        _this3.headers = {};
        _this3.status_code = null;
        _this3.reason_phrase = null;
        return _this3;
      }

      return IncomingResponse;
    }(IncomingMessage);

    module.exports = {
      OutgoingRequest: OutgoingRequest,
      InitialOutgoingInviteRequest: InitialOutgoingInviteRequest,
      IncomingRequest: IncomingRequest,
      IncomingResponse: IncomingResponse
    };
  },{"./Constants":2,"./Grammar":7,"./NameAddrHeader":10,"./Utils":26,"debug":30,"sdp-transform":35}],20:[function(require,module,exports){
    "use strict";

    var Utils = require('./Utils');

    var Grammar = require('./Grammar');

    var debugerror = require('debug')('JsSIP:ERROR:Socket');

    debugerror.log = console.warn.bind(console);


    exports.isSocket = function (socket) {
      if (Array.isArray(socket)) {
        return false;
      }

      if (typeof socket === 'undefined') {
        debugerror('undefined JsSIP.Socket instance');
        return false;
      }


      try {
        if (!Utils.isString(socket.url)) {
          debugerror('missing or invalid JsSIP.Socket url property');
          throw new Error();
        }

        if (!Utils.isString(socket.via_transport)) {
          debugerror('missing or invalid JsSIP.Socket via_transport property');
          throw new Error();
        }

        if (Grammar.parse(socket.sip_uri, 'SIP_URI') === -1) {
          debugerror('missing or invalid JsSIP.Socket sip_uri property');
          throw new Error();
        }
      } catch (e) {
        return false;
      }


      try {
        ['connect', 'disconnect', 'send'].forEach(function (method) {
          if (!Utils.isFunction(socket[method])) {
            debugerror("missing or invalid JsSIP.Socket method: ".concat(method));
            throw new Error();
          }
        });
      } catch (e) {
        return false;
      }

      return true;
    };
  },{"./Grammar":7,"./Utils":26,"debug":30}],21:[function(require,module,exports){
    "use strict";

    var T1 = 500,
      T2 = 4000,
      T4 = 5000;
    module.exports = {
      T1: T1,
      T2: T2,
      T4: T4,
      TIMER_B: 64 * T1,
      TIMER_D: 0 * T1,
      TIMER_F: 64 * T1,
      TIMER_H: 64 * T1,
      TIMER_I: 0 * T1,
      TIMER_J: 0 * T1,
      TIMER_K: 0 * T4,
      TIMER_L: 64 * T1,
      TIMER_M: 64 * T1,
      PROVISIONAL_RESPONSE_INTERVAL: 60000

    };
  },{}],22:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var JsSIP_C = require('./Constants');

    var SIPMessage = require('./SIPMessage');

    var Timers = require('./Timers');

    var debugnict = require('debug')('JsSIP:NonInviteClientTransaction');

    var debugict = require('debug')('JsSIP:InviteClientTransaction');

    var debugact = require('debug')('JsSIP:AckClientTransaction');

    var debugnist = require('debug')('JsSIP:NonInviteServerTransaction');

    var debugist = require('debug')('JsSIP:InviteServerTransaction');

    var C = {
      STATUS_TRYING: 1,
      STATUS_PROCEEDING: 2,
      STATUS_CALLING: 3,
      STATUS_ACCEPTED: 4,
      STATUS_COMPLETED: 5,
      STATUS_TERMINATED: 6,
      STATUS_CONFIRMED: 7,
      NON_INVITE_CLIENT: 'nict',
      NON_INVITE_SERVER: 'nist',
      INVITE_CLIENT: 'ict',
      INVITE_SERVER: 'ist'
    };

    var NonInviteClientTransaction = /*#__PURE__*/function (_EventEmitter) {
      _inherits(NonInviteClientTransaction, _EventEmitter);

      var _super = _createSuper(NonInviteClientTransaction);

      function NonInviteClientTransaction(ua, transport, request, eventHandlers) {
        var _this;

        _classCallCheck(this, NonInviteClientTransaction);

        _this = _super.call(this);
        _this.type = C.NON_INVITE_CLIENT;
        _this.id = "z9hG4bK".concat(Math.floor(Math.random() * 10000000));
        _this.ua = ua;
        _this.transport = transport;
        _this.request = request;
        _this.eventHandlers = eventHandlers;
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this.id);

        _this.request.setHeader('via', via);

        _this.ua.newTransaction(_assertThisInitialized(_this));

        return _this;
      }

      _createClass(NonInviteClientTransaction, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit('stateChanged');
        }
      }, {
        key: "send",
        value: function send() {
          var _this2 = this;

          this.stateChanged(C.STATUS_TRYING);
          this.F = setTimeout(function () {
            _this2.timer_F();
          }, Timers.TIMER_F);

          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugnict("transport error occurred, deleting transaction ".concat(this.id));
          clearTimeout(this.F);
          clearTimeout(this.K);
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
          this.eventHandlers.onTransportError();
        }
      }, {
        key: "timer_F",
        value: function timer_F() {
          debugnict("Timer F expired for transaction ".concat(this.id));
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
          this.eventHandlers.onRequestTimeout();
        }
      }, {
        key: "timer_K",
        value: function timer_K() {
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(response) {
          var _this3 = this;

          var status_code = response.status_code;

          if (status_code < 200) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                clearTimeout(this.F);

                if (status_code === 408) {
                  this.eventHandlers.onRequestTimeout();
                } else {
                  this.eventHandlers.onReceiveResponse(response);
                }

                this.K = setTimeout(function () {
                  _this3.timer_K();
                }, Timers.TIMER_K);
                break;

              case C.STATUS_COMPLETED:
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      return NonInviteClientTransaction;
    }(EventEmitter);

    var InviteClientTransaction = /*#__PURE__*/function (_EventEmitter2) {
      _inherits(InviteClientTransaction, _EventEmitter2);

      var _super2 = _createSuper(InviteClientTransaction);

      function InviteClientTransaction(ua, transport, request, eventHandlers) {
        var _this4;

        _classCallCheck(this, InviteClientTransaction);

        _this4 = _super2.call(this);
        _this4.type = C.INVITE_CLIENT;
        _this4.id = "z9hG4bK".concat(Math.floor(Math.random() * 10000000));
        _this4.ua = ua;
        _this4.transport = transport;
        _this4.request = request;
        _this4.eventHandlers = eventHandlers;
        request.transaction = _assertThisInitialized(_this4);
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this4.id);

        _this4.request.setHeader('via', via);

        _this4.ua.newTransaction(_assertThisInitialized(_this4));

        return _this4;
      }

      _createClass(InviteClientTransaction, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit('stateChanged');
        }
      }, {
        key: "send",
        value: function send() {
          var _this5 = this;

          this.stateChanged(C.STATUS_CALLING);
          this.B = setTimeout(function () {
            _this5.timer_B();
          }, Timers.TIMER_B);

          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          clearTimeout(this.B);
          clearTimeout(this.D);
          clearTimeout(this.M);

          if (this.state !== C.STATUS_ACCEPTED) {
            debugict("transport error occurred, deleting transaction ".concat(this.id));
            this.eventHandlers.onTransportError();
          }

          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }

      }, {
        key: "timer_M",
        value: function timer_M() {
          debugict("Timer M expired for transaction ".concat(this.id));

          if (this.state === C.STATUS_ACCEPTED) {
            clearTimeout(this.B);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }

      }, {
        key: "timer_B",
        value: function timer_B() {
          debugict("Timer B expired for transaction ".concat(this.id));

          if (this.state === C.STATUS_CALLING) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
            this.eventHandlers.onRequestTimeout();
          }
        }
      }, {
        key: "timer_D",
        value: function timer_D() {
          debugict("Timer D expired for transaction ".concat(this.id));
          clearTimeout(this.B);
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "sendACK",
        value: function sendACK(response) {
          var _this6 = this;

          var ack = new SIPMessage.OutgoingRequest(JsSIP_C.ACK, this.request.ruri, this.ua, {
            'route_set': this.request.getHeaders('route'),
            'call_id': this.request.getHeader('call-id'),
            'cseq': this.request.cseq
          });
          ack.setHeader('from', this.request.getHeader('from'));
          ack.setHeader('via', this.request.getHeader('via'));
          ack.setHeader('to', response.getHeader('to'));
          this.D = setTimeout(function () {
            _this6.timer_D();
          }, Timers.TIMER_D);
          this.transport.send(ack);
        }
      }, {
        key: "cancel",
        value: function cancel(reason) {
          if (this.state !== C.STATUS_PROCEEDING) {
            return;
          }

          var cancel = new SIPMessage.OutgoingRequest(JsSIP_C.CANCEL, this.request.ruri, this.ua, {
            'route_set': this.request.getHeaders('route'),
            'call_id': this.request.getHeader('call-id'),
            'cseq': this.request.cseq
          });
          cancel.setHeader('from', this.request.getHeader('from'));
          cancel.setHeader('via', this.request.getHeader('via'));
          cancel.setHeader('to', this.request.getHeader('to'));

          if (reason) {
            cancel.setHeader('reason', reason);
          }

          this.transport.send(cancel);
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(response) {
          var _this7 = this;

          var status_code = response.status_code;

          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_CALLING:
                this.stateChanged(C.STATUS_PROCEEDING);
                this.eventHandlers.onReceiveResponse(response);
                break;

              case C.STATUS_PROCEEDING:
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.M = setTimeout(function () {
                  _this7.timer_M();
                }, Timers.TIMER_M);
                this.eventHandlers.onReceiveResponse(response);
                break;

              case C.STATUS_ACCEPTED:
                this.eventHandlers.onReceiveResponse(response);
                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_CALLING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.sendACK(response);
                this.eventHandlers.onReceiveResponse(response);
                break;

              case C.STATUS_COMPLETED:
                this.sendACK(response);
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      return InviteClientTransaction;
    }(EventEmitter);

    var AckClientTransaction = /*#__PURE__*/function (_EventEmitter3) {
      _inherits(AckClientTransaction, _EventEmitter3);

      var _super3 = _createSuper(AckClientTransaction);

      function AckClientTransaction(ua, transport, request, eventHandlers) {
        var _this8;

        _classCallCheck(this, AckClientTransaction);

        _this8 = _super3.call(this);
        _this8.id = "z9hG4bK".concat(Math.floor(Math.random() * 10000000));
        _this8.transport = transport;
        _this8.request = request;
        _this8.eventHandlers = eventHandlers;
        var via = "SIP/2.0/".concat(transport.via_transport);
        via += " ".concat(ua.configuration.via_host, ";branch=").concat(_this8.id);

        _this8.request.setHeader('via', via);

        return _this8;
      }

      _createClass(AckClientTransaction, [{
        key: "send",
        value: function send() {
          if (!this.transport.send(this.request)) {
            this.onTransportError();
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          debugact("transport error occurred for transaction ".concat(this.id));
          this.eventHandlers.onTransportError();
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      return AckClientTransaction;
    }(EventEmitter);

    var NonInviteServerTransaction = /*#__PURE__*/function (_EventEmitter4) {
      _inherits(NonInviteServerTransaction, _EventEmitter4);

      var _super4 = _createSuper(NonInviteServerTransaction);

      function NonInviteServerTransaction(ua, transport, request) {
        var _this9;

        _classCallCheck(this, NonInviteServerTransaction);

        _this9 = _super4.call(this);
        _this9.type = C.NON_INVITE_SERVER;
        _this9.id = request.via_branch;
        _this9.ua = ua;
        _this9.transport = transport;
        _this9.request = request;
        _this9.last_response = '';
        request.server_transaction = _assertThisInitialized(_this9);
        _this9.state = C.STATUS_TRYING;
        ua.newTransaction(_assertThisInitialized(_this9));
        return _this9;
      }

      _createClass(NonInviteServerTransaction, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit('stateChanged');
        }
      }, {
        key: "timer_J",
        value: function timer_J() {
          debugnist("Timer J expired for transaction ".concat(this.id));
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          if (!this.transportError) {
            this.transportError = true;
            debugnist("transport error occurred, deleting transaction ".concat(this.id));
            clearTimeout(this.J);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "receiveResponse",
        value: function receiveResponse(status_code, response, onSuccess, onFailure) {
          var _this10 = this;

          if (status_code === 100) {
            /* RFC 4320 4.1
             * 'A SIP element MUST NOT
             * send any provisional response with a
             * Status-Code other than 100 to a non-INVITE request.'
             */
            switch (this.state) {
              case C.STATUS_TRYING:
                this.stateChanged(C.STATUS_PROCEEDING);

                if (!this.transport.send(response)) {
                  this.onTransportError();
                }

                break;

              case C.STATUS_PROCEEDING:
                this.last_response = response;

                if (!this.transport.send(response)) {
                  this.onTransportError();

                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }

                break;
            }
          } else if (status_code >= 200 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_TRYING:
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_COMPLETED);
                this.last_response = response;
                this.J = setTimeout(function () {
                  _this10.timer_J();
                }, Timers.TIMER_J);

                if (!this.transport.send(response)) {
                  this.onTransportError();

                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }

                break;

              case C.STATUS_COMPLETED:
                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      return NonInviteServerTransaction;
    }(EventEmitter);

    var InviteServerTransaction = /*#__PURE__*/function (_EventEmitter5) {
      _inherits(InviteServerTransaction, _EventEmitter5);

      var _super5 = _createSuper(InviteServerTransaction);

      function InviteServerTransaction(ua, transport, request) {
        var _this11;

        _classCallCheck(this, InviteServerTransaction);

        _this11 = _super5.call(this);
        _this11.type = C.INVITE_SERVER;
        _this11.id = request.via_branch;
        _this11.ua = ua;
        _this11.transport = transport;
        _this11.request = request;
        _this11.last_response = '';
        request.server_transaction = _assertThisInitialized(_this11);
        _this11.state = C.STATUS_PROCEEDING;
        ua.newTransaction(_assertThisInitialized(_this11));
        _this11.resendProvisionalTimer = null;
        request.reply(100);
        return _this11;
      }

      _createClass(InviteServerTransaction, [{
        key: "stateChanged",
        value: function stateChanged(state) {
          this.state = state;
          this.emit('stateChanged');
        }
      }, {
        key: "timer_H",
        value: function timer_H() {
          debugist("Timer H expired for transaction ".concat(this.id));

          if (this.state === C.STATUS_COMPLETED) {
            debugist('ACK not received, dialog will be terminated');
          }

          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }
      }, {
        key: "timer_I",
        value: function timer_I() {
          this.stateChanged(C.STATUS_TERMINATED);
          this.ua.destroyTransaction(this);
        }

      }, {
        key: "timer_L",
        value: function timer_L() {
          debugist("Timer L expired for transaction ".concat(this.id));

          if (this.state === C.STATUS_ACCEPTED) {
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "onTransportError",
        value: function onTransportError() {
          if (!this.transportError) {
            this.transportError = true;
            debugist("transport error occurred, deleting transaction ".concat(this.id));

            if (this.resendProvisionalTimer !== null) {
              clearInterval(this.resendProvisionalTimer);
              this.resendProvisionalTimer = null;
            }

            clearTimeout(this.L);
            clearTimeout(this.H);
            clearTimeout(this.I);
            this.stateChanged(C.STATUS_TERMINATED);
            this.ua.destroyTransaction(this);
          }
        }
      }, {
        key: "resend_provisional",
        value: function resend_provisional() {
          if (!this.transport.send(this.last_response)) {
            this.onTransportError();
          }
        }

      }, {
        key: "receiveResponse",
        value: function receiveResponse(status_code, response, onSuccess, onFailure) {
          var _this12 = this;

          if (status_code >= 100 && status_code <= 199) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (!this.transport.send(response)) {
                  this.onTransportError();
                }

                this.last_response = response;
                break;
            }
          }

          if (status_code > 100 && status_code <= 199 && this.state === C.STATUS_PROCEEDING) {
            if (this.resendProvisionalTimer === null) {
              this.resendProvisionalTimer = setInterval(function () {
                _this12.resend_provisional();
              }, Timers.PROVISIONAL_RESPONSE_INTERVAL);
            }
          } else if (status_code >= 200 && status_code <= 299) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                this.stateChanged(C.STATUS_ACCEPTED);
                this.last_response = response;
                this.L = setTimeout(function () {
                  _this12.timer_L();
                }, Timers.TIMER_L);

                if (this.resendProvisionalTimer !== null) {
                  clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }

              /* falls through */

              case C.STATUS_ACCEPTED:
                if (!this.transport.send(response)) {
                  this.onTransportError();

                  if (onFailure) {
                    onFailure();
                  }
                } else if (onSuccess) {
                  onSuccess();
                }

                break;
            }
          } else if (status_code >= 300 && status_code <= 699) {
            switch (this.state) {
              case C.STATUS_PROCEEDING:
                if (this.resendProvisionalTimer !== null) {
                  clearInterval(this.resendProvisionalTimer);
                  this.resendProvisionalTimer = null;
                }

                if (!this.transport.send(response)) {
                  this.onTransportError();

                  if (onFailure) {
                    onFailure();
                  }
                } else {
                  this.stateChanged(C.STATUS_COMPLETED);
                  this.H = setTimeout(function () {
                    _this12.timer_H();
                  }, Timers.TIMER_H);

                  if (onSuccess) {
                    onSuccess();
                  }
                }

                break;
            }
          }
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      return InviteServerTransaction;
    }(EventEmitter);
    /**
     * INVITE:
     *  _true_ if retransmission
     *  _false_ new request
     *
     * ACK:
     *  _true_  ACK to non2xx response
     *  _false_ ACK must be passed to TU (accepted state)
     *          ACK to 2xx response
     *
     * CANCEL:
     *  _true_  no matching invite transaction
     *  _false_ matching invite transaction and no final response sent
     *
     * OTHER:
     *  _true_  retransmission
     *  _false_ new request
     */


    function checkTransaction(_ref, request) {
      var _transactions = _ref._transactions;
      var tr;

      switch (request.method) {
        case JsSIP_C.INVITE:
          tr = _transactions.ist[request.via_branch];

          if (tr) {
            switch (tr.state) {
              case C.STATUS_PROCEEDING:
                tr.transport.send(tr.last_response);
                break;


              case C.STATUS_ACCEPTED:
                break;
            }

            return true;
          }

          break;

        case JsSIP_C.ACK:
          tr = _transactions.ist[request.via_branch];

          if (tr) {
            if (tr.state === C.STATUS_ACCEPTED) {
              return false;
            } else if (tr.state === C.STATUS_COMPLETED) {
              tr.state = C.STATUS_CONFIRMED;
              tr.I = setTimeout(function () {
                tr.timer_I();
              }, Timers.TIMER_I);
              return true;
            }
          }
          else {
            return false;
          }

          break;

        case JsSIP_C.CANCEL:
          tr = _transactions.ist[request.via_branch];

          if (tr) {
            request.reply_sl(200);

            if (tr.state === C.STATUS_PROCEEDING) {
              return false;
            } else {
              return true;
            }
          } else {
            request.reply_sl(481);
            return true;
          }

        default:
          tr = _transactions.nist[request.via_branch];

          if (tr) {
            switch (tr.state) {
              case C.STATUS_TRYING:
                break;

              case C.STATUS_PROCEEDING:
              case C.STATUS_COMPLETED:
                tr.transport.send(tr.last_response);
                break;
            }

            return true;
          }

          break;
      }
    }

    module.exports = {
      C: C,
      NonInviteClientTransaction: NonInviteClientTransaction,
      InviteClientTransaction: InviteClientTransaction,
      AckClientTransaction: AckClientTransaction,
      NonInviteServerTransaction: NonInviteServerTransaction,
      InviteServerTransaction: InviteServerTransaction,
      checkTransaction: checkTransaction
    };
  },{"./Constants":2,"./SIPMessage":19,"./Timers":21,"debug":30,"events":29}],23:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var Socket = require('./Socket');

    var debug = require('debug')('JsSIP:Transport');

    var debugerror = require('debug')('JsSIP:ERROR:Transport');

    var JsSIP_C = require('./Constants');

    debugerror.log = console.warn.bind(console);
    /**
     * Constants
     */

    var C = {
      STATUS_CONNECTED: 0,
      STATUS_CONNECTING: 1,
      STATUS_DISCONNECTED: 2,
      SOCKET_STATUS_READY: 0,
      SOCKET_STATUS_ERROR: 1,
      recovery_options: {
        min_interval: JsSIP_C.CONNECTION_RECOVERY_MIN_INTERVAL,
        max_interval: JsSIP_C.CONNECTION_RECOVERY_MAX_INTERVAL
      }
    };
    /*
     * Manages one or multiple JsSIP.Socket instances.
     * Is reponsible for transport recovery logic among all socket instances.
     *
     * @socket JsSIP::Socket instance
     */

    module.exports = /*#__PURE__*/function () {
      function Transport(sockets) {
        var recovery_options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : C.recovery_options;

        _classCallCheck(this, Transport);

        debug('new()');
        this.status = C.STATUS_DISCONNECTED;

        this.socket = null;

        this.sockets = [];
        this.recovery_options = recovery_options;
        this.recover_attempts = 0;
        this.recovery_timer = null;
        this.close_requested = false;

        if (typeof sockets === 'undefined') {
          throw new TypeError('Invalid argument.' + ' undefined \'sockets\' argument');
        }

        if (!(sockets instanceof Array)) {
          sockets = [sockets];
        }

        sockets.forEach(function (socket) {
          if (!Socket.isSocket(socket.socket)) {
            throw new TypeError('Invalid argument.' + ' invalid \'JsSIP.Socket\' instance');
          }

          if (socket.weight && !Number(socket.weight)) {
            throw new TypeError('Invalid argument.' + ' \'weight\' attribute is not a number');
          }

          this.sockets.push({
            socket: socket.socket,
            weight: socket.weight || 0,
            status: C.SOCKET_STATUS_READY
          });
        }, this);

        this._getSocket();
      }
      /**
       * Instance Methods
       */


      _createClass(Transport, [{
        key: "connect",
        value: function connect() {
          debug('connect()');

          if (this.isConnected()) {
            debug('Transport is already connected');
            return;
          } else if (this.isConnecting()) {
            debug('Transport is connecting');
            return;
          }

          this.close_requested = false;
          this.status = C.STATUS_CONNECTING;
          this.onconnecting({
            socket: this.socket,
            attempts: this.recover_attempts
          });

          if (!this.close_requested) {
            this.socket.onconnect = this._onConnect.bind(this);
            this.socket.ondisconnect = this._onDisconnect.bind(this);
            this.socket.ondata = this._onData.bind(this);
            this.socket.connect();
          }

          return;
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          debug('close()');
          this.close_requested = true;
          this.recover_attempts = 0;
          this.status = C.STATUS_DISCONNECTED;
          if (this.recovery_timer !== null) {
            clearTimeout(this.recovery_timer);
            this.recovery_timer = null;
          }

          this.socket.onconnect = function () {};

          this.socket.ondisconnect = function () {};

          this.socket.ondata = function () {};

          this.socket.disconnect();
          this.ondisconnect({
            socket: this.socket,
            error: false
          });
        }
      }, {
        key: "send",
        value: function send(data) {
          debug('send()');

          if (!this.isConnected()) {
            debugerror('unable to send message, transport is not connected');
            return false;
          }

          var message = data.toString();
          debug("sending message:\n\n".concat(message, "\n"));
          return this.socket.send(message);
        }
      }, {
        key: "isConnected",
        value: function isConnected() {
          return this.status === C.STATUS_CONNECTED;
        }
      }, {
        key: "isConnecting",
        value: function isConnecting() {
          return this.status === C.STATUS_CONNECTING;
        }
        /**
         * Private API.
         */

      }, {
        key: "_reconnect",
        value: function _reconnect() {
          var _this = this;

          this.recover_attempts += 1;
          var k = Math.floor(Math.random() * Math.pow(2, this.recover_attempts) + 1);

          if (k < this.recovery_options.min_interval) {
            k = this.recovery_options.min_interval;
          } else if (k > this.recovery_options.max_interval) {
            k = this.recovery_options.max_interval;
          }

          debug("reconnection attempt: ".concat(this.recover_attempts, ". next connection attempt in ").concat(k, " seconds"));
          this.recovery_timer = setTimeout(function () {
            if (!_this.close_requested && !(_this.isConnected() || _this.isConnecting())) {
              _this._getSocket();


              _this.connect();
            }
          }, k * 1000);
        }
        /**
         * get the next available socket with higher weight
         */

      }, {
        key: "_getSocket",
        value: function _getSocket() {
          var candidates = [];
          this.sockets.forEach(function (socket) {
            if (socket.status === C.SOCKET_STATUS_ERROR) {
              return;
            } else if (candidates.length === 0) {
              candidates.push(socket);
            } else if (socket.weight > candidates[0].weight) {
              candidates = [socket];
            } else if (socket.weight === candidates[0].weight) {
              candidates.push(socket);
            }
          });

          if (candidates.length === 0) {
            this.sockets.forEach(function (socket) {
              socket.status = C.SOCKET_STATUS_READY;
            });

            this._getSocket();

            return;
          }

          var idx = Math.floor(Math.random() * candidates.length);
          this.socket = candidates[idx].socket;
        }
        /**
         * Socket Event Handlers
         */

      }, {
        key: "_onConnect",
        value: function _onConnect() {
          this.recover_attempts = 0;
          this.status = C.STATUS_CONNECTED;

          if (this.recovery_timer !== null) {
            clearTimeout(this.recovery_timer);
            this.recovery_timer = null;
          }

          this.onconnect({
            socket: this
          });
        }
      }, {
        key: "_onDisconnect",
        value: function _onDisconnect(error, code, reason) {
          this.status = C.STATUS_DISCONNECTED;
          this.ondisconnect({
            socket: this.socket,
            error: error,
            code: code,
            reason: reason
          });

          if (this.close_requested) {
            return;
          }
          else {
            this.sockets.forEach(function (socket) {
              if (this.socket === socket.socket) {
                socket.status = C.SOCKET_STATUS_ERROR;
              }
            }, this);
          }

          this._reconnect(error);
        }
      }, {
        key: "_onData",
        value: function _onData(data) {
          if (data === '\r\n') {
            debug('received message with CRLF Keep Alive response');
            return;
          }
          else if (typeof data !== 'string') {
            try {
              data = String.fromCharCode.apply(null, new Uint8Array(data));
            } catch (evt) {
              debug('received binary message failed to be converted into string,' + ' message discarded');
              return;
            }

            debug("received binary message:\n\n".concat(data, "\n"));
          }
          else {
            debug("received text message:\n\n".concat(data, "\n"));
          }

          this.ondata({
            transport: this,
            message: data
          });
        }
      }, {
        key: "via_transport",
        get: function get() {
          return this.socket.via_transport;
        }
      }, {
        key: "url",
        get: function get() {
          return this.socket.url;
        }
      }, {
        key: "sip_uri",
        get: function get() {
          return this.socket.sip_uri;
        }
      }]);

      return Transport;
    }();
  },{"./Constants":2,"./Socket":20,"debug":30}],24:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

    function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

    function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

    function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

    var EventEmitter = require('events').EventEmitter;

    var JsSIP_C = require('./Constants');

    var Registrator = require('./Registrator');

    var RTCSession = require('./RTCSession');

    var Message = require('./Message');

    var Transactions = require('./Transactions');

    var Transport = require('./Transport');

    var Utils = require('./Utils');

    var Exceptions = require('./Exceptions');

    var URI = require('./URI');

    var Parser = require('./Parser');

    var SIPMessage = require('./SIPMessage');

    var sanityCheck = require('./sanityCheck');

    var config = require('./Config');

    var debug = require('debug')('JsSIP:UA');

    var debugerror = require('debug')('JsSIP:ERROR:UA');

    debugerror.log = console.warn.bind(console);
    var C = {
      STATUS_INIT: 0,
      STATUS_READY: 1,
      STATUS_USER_CLOSED: 2,
      STATUS_NOT_READY: 3,
      CONFIGURATION_ERROR: 1,
      NETWORK_ERROR: 2
    };
    /**
     * The User-Agent class.
     * @class JsSIP.UA
     * @param {Object} configuration Configuration parameters.
     * @throws {JsSIP.Exceptions.ConfigurationError} If a configuration parameter is invalid.
     * @throws {TypeError} If no configuration is given.
     */

    module.exports = /*#__PURE__*/function (_EventEmitter) {
      _inherits(UA, _EventEmitter);

      var _super = _createSuper(UA);

      _createClass(UA, null, [{
        key: "C",
        get: function get() {
          return C;
        }
      }]);

      function UA(configuration) {
        var _this;

        _classCallCheck(this, UA);

        debug('new() [configuration:%o]', configuration);
        _this = _super.call(this);
        _this._cache = {
          credentials: {}
        };
        _this._configuration = Object.assign({}, config.settings);
        _this._dynConfiguration = {};
        _this._dialogs = {};

        _this._applicants = {};
        _this._sessions = {};
        _this._transport = null;
        _this._contact = null;
        _this._status = C.STATUS_INIT;
        _this._error = null;
        _this._transactions = {
          nist: {},
          nict: {},
          ist: {},
          ict: {}
        };

        _this._data = {};
        _this._closeTimer = null;

        if (configuration === undefined) {
          throw new TypeError('Not enough arguments');
        }


        try {
          _this._loadConfig(configuration);
        } catch (e) {
          _this._status = C.STATUS_NOT_READY;
          _this._error = C.CONFIGURATION_ERROR;
          throw e;
        }

        _this._registrator = new Registrator(_assertThisInitialized(_this));
        return _this;
      }

      _createClass(UA, [{
        key: "start",


        /**
         * Connect to the server if status = STATUS_INIT.
         * Resume UA after being closed.
         */
        value: function start() {
          debug('start()');

          if (this._status === C.STATUS_INIT) {
            this._transport.connect();
          } else if (this._status === C.STATUS_USER_CLOSED) {
            debug('restarting UA');

            if (this._closeTimer !== null) {
              clearTimeout(this._closeTimer);
              this._closeTimer = null;

              this._transport.disconnect();
            }


            this._status = C.STATUS_INIT;

            this._transport.connect();
          } else if (this._status === C.STATUS_READY) {
            debug('UA is in READY status, not restarted');
          } else {
            debug('ERROR: connection is down, Auto-Recovery system is trying to reconnect');
          }


          this._dynConfiguration.register = this._configuration.register;
        }
        /**
         * Register.
         */

      }, {
        key: "register",
        value: function register() {
          debug('register()');
          this._dynConfiguration.register = true;

          this._registrator.register();
        }
        /**
         * Unregister.
         */

      }, {
        key: "unregister",
        value: function unregister(options) {
          debug('unregister()');
          this._dynConfiguration.register = false;

          this._registrator.unregister(options);
        }
        /**
         * Get the Registrator instance.
         */

      }, {
        key: "registrator",
        value: function registrator() {
          return this._registrator;
        }
        /**
         * Registration state.
         */

      }, {
        key: "isRegistered",
        value: function isRegistered() {
          return this._registrator.registered;
        }
        /**
         * Connection state.
         */

      }, {
        key: "isConnected",
        value: function isConnected() {
          return this._transport.isConnected();
        }
        /**
         * Make an outgoing call.
         *
         * -param {String} target
         * -param {Object} [options]
         *
         * -throws {TypeError}
         *
         */

      }, {
        key: "call",
        value: function call(target, options) {
          debug('call()');
          var session = new RTCSession(this);
          session.connect(target, options);
          return session;
        }
        /**
         * Send a message.
         *
         * -param {String} target
         * -param {String} body
         * -param {Object} [options]
         *
         * -throws {TypeError}
         *
         */

      }, {
        key: "sendMessage",
        value: function sendMessage(target, body, options) {
          debug('sendMessage()');
          var message = new Message(this);
          message.send(target, body, options);
          return message;
        }
        /**
         * Terminate ongoing sessions.
         */

      }, {
        key: "terminateSessions",
        value: function terminateSessions(options) {
          debug('terminateSessions()');

          for (var idx in this._sessions) {
            if (!this._sessions[idx].isEnded()) {
              this._sessions[idx].terminate(options);
            }
          }
        }
        /**
         * Gracefully close.
         *
         */

      }, {
        key: "stop",
        value: function stop() {
          var _this2 = this;

          debug('stop()');

          this._dynConfiguration = {};

          if (this._status === C.STATUS_USER_CLOSED) {
            debug('UA already closed');
            return;
          }


          this._registrator.close();


          var num_sessions = Object.keys(this._sessions).length;

          for (var session in this._sessions) {
            if (Object.prototype.hasOwnProperty.call(this._sessions, session)) {
              debug("closing session ".concat(session));

              try {
                this._sessions[session].terminate();
              } catch (error) {}
            }
          }


          for (var applicant in this._applicants) {
            if (Object.prototype.hasOwnProperty.call(this._applicants, applicant)) try {
              this._applicants[applicant].close();
            } catch (error) {}
          }

          this._status = C.STATUS_USER_CLOSED;
          var num_transactions = Object.keys(this._transactions.nict).length + Object.keys(this._transactions.nist).length + Object.keys(this._transactions.ict).length + Object.keys(this._transactions.ist).length;

          if (num_transactions === 0 && num_sessions === 0) {
            this._transport.disconnect();
          } else {
            this._closeTimer = setTimeout(function () {
              _this2._closeTimer = null;

              _this2._transport.disconnect();
            }, 2000);
          }
        }
        /**
         * Normalice a string into a valid SIP request URI
         * -param {String} target
         * -returns {JsSIP.URI|undefined}
         */

      }, {
        key: "normalizeTarget",
        value: function normalizeTarget(target) {
          return Utils.normalizeTarget(target, this._configuration.hostport_params);
        }
        /**
         * Allow retrieving configuration and autogenerated fields in runtime.
         */

      }, {
        key: "get",
        value: function get(parameter) {
          switch (parameter) {
            case 'realm':
              return this._configuration.realm;

            case 'ha1':
              return this._configuration.ha1;

            default:
              debugerror('get() | cannot get "%s" parameter in runtime', parameter);
              return undefined;
          }
        }
        /**
         * Allow configuration changes in runtime.
         * Returns true if the parameter could be set.
         */

      }, {
        key: "set",
        value: function set(parameter, value) {
          switch (parameter) {
            case 'password':
            {
              this._configuration.password = String(value);
              break;
            }

            case 'realm':
            {
              this._configuration.realm = String(value);
              break;
            }

            case 'ha1':
            {
              this._configuration.ha1 = String(value);

              this._configuration.password = null;
              break;
            }

            case 'display_name':
            {
              this._configuration.display_name = value;
              break;
            }

            default:
              debugerror('set() | cannot set "%s" parameter in runtime', parameter);
              return false;
          }

          return true;
        }

        /**
         * new Transaction
         */

      }, {
        key: "newTransaction",
        value: function newTransaction(transaction) {
          this._transactions[transaction.type][transaction.id] = transaction;
          this.emit('newTransaction', {
            transaction: transaction
          });
        }
        /**
         * Transaction destroyed.
         */

      }, {
        key: "destroyTransaction",
        value: function destroyTransaction(transaction) {
          delete this._transactions[transaction.type][transaction.id];
          this.emit('transactionDestroyed', {
            transaction: transaction
          });
        }
        /**
         * new Dialog
         */

      }, {
        key: "newDialog",
        value: function newDialog(dialog) {
          this._dialogs[dialog.id] = dialog;
        }
        /**
         * Dialog destroyed.
         */

      }, {
        key: "destroyDialog",
        value: function destroyDialog(dialog) {
          delete this._dialogs[dialog.id];
        }
        /**
         *  new Message
         */

      }, {
        key: "newMessage",
        value: function newMessage(message, data) {
          this._applicants[message] = message;
          this.emit('newMessage', data);
        }
        /**
         *  Message destroyed.
         */

      }, {
        key: "destroyMessage",
        value: function destroyMessage(message) {
          delete this._applicants[message];
        }
        /**
         * new RTCSession
         */

      }, {
        key: "newRTCSession",
        value: function newRTCSession(session, data) {
          this._sessions[session.id] = session;
          this.emit('newRTCSession', data);
        }
        /**
         * RTCSession destroyed.
         */

      }, {
        key: "destroyRTCSession",
        value: function destroyRTCSession(session) {
          delete this._sessions[session.id];
        }
        /**
         * Registered
         */

      }, {
        key: "registered",
        value: function registered(data) {
          this.emit('registered', data);
        }
        /**
         * Unregistered
         */

      }, {
        key: "unregistered",
        value: function unregistered(data) {
          this.emit('unregistered', data);
        }
        /**
         * Registration Failed
         */

      }, {
        key: "registrationFailed",
        value: function registrationFailed(data) {
          this.emit('registrationFailed', data);
        }

        /**
         * Request reception
         */

      }, {
        key: "receiveRequest",
        value: function receiveRequest(request) {
          var method = request.method;

          if (request.ruri.user !== this._configuration.uri.user && request.ruri.user !== this._contact.uri.user) {
            debug('Request-URI does not point to us');

            if (request.method !== JsSIP_C.ACK) {
              request.reply_sl(404);
            }

            return;
          }


          if (request.ruri.scheme === JsSIP_C.SIPS) {
            request.reply_sl(416);
            return;
          }


          if (Transactions.checkTransaction(this, request)) {
            return;
          }


          if (method === JsSIP_C.INVITE) {
            /* eslint-disable no-new */
            new Transactions.InviteServerTransaction(this, this._transport, request);
            /* eslint-enable no-new */
          } else if (method !== JsSIP_C.ACK && method !== JsSIP_C.CANCEL) {
            /* eslint-disable no-new */
            new Transactions.NonInviteServerTransaction(this, this._transport, request);
            /* eslint-enable no-new */
          }
          /* RFC3261 12.2.2
           * Requests that do not change in any way the state of a dialog may be
           * received within a dialog (for example, an OPTIONS request).
           * They are processed as if they had been received outside the dialog.
           */


          if (method === JsSIP_C.OPTIONS) {
            request.reply(200);
          } else if (method === JsSIP_C.MESSAGE) {
            if (this.listeners('newMessage').length === 0) {
              request.reply(405);
              return;
            }

            var message = new Message(this);
            message.init_incoming(request);
          } else if (method === JsSIP_C.INVITE) {
            if (!request.to_tag && this.listeners('newRTCSession').length === 0) {
              console.log("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
              request.reply(405);
              return;
            }
          }

          var dialog;
          var session;

          if (!request.to_tag) {
            switch (method) {
              case JsSIP_C.INVITE:
                if (window.RTCPeerConnection) {
                  if (request.hasHeader('replaces')) {
                    var replaces = request.replaces;
                    dialog = this._findDialog(replaces.call_id, replaces.from_tag, replaces.to_tag);

                    if (dialog) {
                      session = dialog.owner;

                      if (!session.isEnded()) {
                        session.receiveRequest(request);
                      } else {
                        request.reply(603);
                      }
                    } else {
                      request.reply(481);
                    }
                  } else {
                    session = new RTCSession(this);
                    session.init_incoming(request);
                  }
                } else {
                  debugerror('INVITE received but WebRTC is not supported');
                  request.reply(488);
                }

                break;

              case JsSIP_C.BYE:
                request.reply(481);
                break;

              case JsSIP_C.CANCEL:
                session = this._findSession(request);

                if (session) {
                  session.receiveRequest(request);
                } else {
                  debug('received CANCEL request for a non existent session');
                }

                break;

              case JsSIP_C.ACK:
                /* Absorb it.
                 * ACK request without a corresponding Invite Transaction
                 * and without To tag.
                 */
                break;

              case JsSIP_C.NOTIFY:
                this.emit('sipEvent', {
                  event: request.event,
                  request: request
                });
                request.reply(200);
                break;

              default:
                request.reply(405);
                break;
            }
          }
          else {
            dialog = this._findDialog(request.call_id, request.from_tag, request.to_tag);

            if (dialog) {
              dialog.receiveRequest(request);
            } else if (method === JsSIP_C.NOTIFY) {
              session = this._findSession(request);

              if (session) {
                session.receiveRequest(request);
              } else {
                debug('received NOTIFY request for a non existent subscription');
                request.reply(481, 'Subscription does not exist');
              }
            }
            /* RFC3261 12.2.2
               * Request with to tag, but no matching dialog found.
               * Exception: ACK for an Invite request for which a dialog has not
               * been created.
               */
            else if (method !== JsSIP_C.ACK) {
              request.reply(481);
            }
          }
        }

        /**
         * Get the session to which the request belongs to, if any.
         */

      }, {
        key: "_findSession",
        value: function _findSession(_ref) {
          var call_id = _ref.call_id,
            from_tag = _ref.from_tag,
            to_tag = _ref.to_tag;
          var sessionIDa = call_id + from_tag;
          var sessionA = this._sessions[sessionIDa];
          var sessionIDb = call_id + to_tag;
          var sessionB = this._sessions[sessionIDb];

          if (sessionA) {
            return sessionA;
          } else if (sessionB) {
            return sessionB;
          } else {
            return null;
          }
        }
        /**
         * Get the dialog to which the request belongs to, if any.
         */

      }, {
        key: "_findDialog",
        value: function _findDialog(call_id, from_tag, to_tag) {
          var id = call_id + from_tag + to_tag;
          var dialog = this._dialogs[id];

          if (dialog) {
            return dialog;
          } else {
            id = call_id + to_tag + from_tag;
            dialog = this._dialogs[id];

            if (dialog) {
              return dialog;
            } else {
              return null;
            }
          }
        }
      }, {
        key: "_loadConfig",
        value: function _loadConfig(configuration) {
          try {
            config.load(this._configuration, configuration);
          } catch (e) {
            throw e;
          }


          if (this._configuration.display_name === 0) {
            this._configuration.display_name = '0';
          }


          if (!this._configuration.instance_id) {
            this._configuration.instance_id = Utils.newUUID();
          }


          this._configuration.jssip_id = Utils.createRandomToken(5);

          var hostport_params = this._configuration.uri.clone();

          hostport_params.user = null;
          this._configuration.hostport_params = hostport_params.toString().replace(/^sip:/i, '');

          try {
            this._transport = new Transport(this._configuration.sockets, {
              max_interval: this._configuration.connection_recovery_max_interval,
              min_interval: this._configuration.connection_recovery_min_interval
            });

            this._transport.onconnecting = onTransportConnecting.bind(this);
            this._transport.onconnect = onTransportConnect.bind(this);
            this._transport.ondisconnect = onTransportDisconnect.bind(this);
            this._transport.ondata = onTransportData.bind(this);
          } catch (e) {
            debugerror(e);
            throw new Exceptions.ConfigurationError('sockets', this._configuration.sockets);
          }


          delete this._configuration.sockets;

          if (!this._configuration.authorization_user) {
            this._configuration.authorization_user = this._configuration.uri.user;
          }


          if (!this._configuration.registrar_server) {
            var registrar_server = this._configuration.uri.clone();

            registrar_server.user = null;
            registrar_server.clearParams();
            registrar_server.clearHeaders();
            this._configuration.registrar_server = registrar_server;
          }


          this._configuration.no_answer_timeout *= 1000;

          if (this._configuration.contact_uri) {
            this._configuration.via_host = this._configuration.contact_uri.host;
          }
          else {
            this._configuration.contact_uri = new URI('sip', Utils.createRandomToken(8), this._configuration.via_host, null, {
              transport: 'ws'
            });
          }

          this._contact = {
            pub_gruu: null,
            temp_gruu: null,
            uri: this._configuration.contact_uri,
            toString: function toString() {
              var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              var anonymous = options.anonymous || null;
              var outbound = options.outbound || null;
              var contact = '<';

              if (anonymous) {
                contact += this.temp_gruu || 'sip:anonymous@anonymous.invalid;transport=ws';
              } else {
                contact += this.pub_gruu || this.uri.toString();
              }

              if (outbound && (anonymous ? !this.temp_gruu : !this.pub_gruu)) {
                contact += ';ob';
              }

              contact += '>';
              return contact;
            }
          };

          var writable_parameters = ['password', 'realm', 'ha1', 'display_name', 'register'];

          for (var parameter in this._configuration) {
            if (Object.prototype.hasOwnProperty.call(this._configuration, parameter)) {
              if (writable_parameters.indexOf(parameter) !== -1) {
                Object.defineProperty(this._configuration, parameter, {
                  writable: true,
                  configurable: false
                });
              } else {
                Object.defineProperty(this._configuration, parameter, {
                  writable: false,
                  configurable: false
                });
              }
            }
          }

          debug('configuration parameters after validation:');

          for (var _parameter in this._configuration) {
            if (Object.prototype.hasOwnProperty.call(config.settings, _parameter)) {
              switch (_parameter) {
                case 'uri':
                case 'registrar_server':
                  debug("- ".concat(_parameter, ": ").concat(this._configuration[_parameter]));
                  break;

                case 'password':
                case 'ha1':
                  debug("- ".concat(_parameter, ": NOT SHOWN"));
                  break;

                default:
                  debug("- ".concat(_parameter, ": ").concat(JSON.stringify(this._configuration[_parameter])));
              }
            }
          }

          return;
        }
      }, {
        key: "C",
        get: function get() {
          return C;
        }
      }, {
        key: "status",
        get: function get() {
          return this._status;
        }
      }, {
        key: "contact",
        get: function get() {
          return this._contact;
        }
      }, {
        key: "configuration",
        get: function get() {
          return this._configuration;
        }
      }, {
        key: "transport",
        get: function get() {
          return this._transport;
        }
      }]);

      return UA;
    }(EventEmitter);
    /**
     * Transport event handlers
     */


    function onTransportConnecting(data) {
      this.emit('connecting', data);
    }


    function onTransportConnect(data) {
      if (this._status === C.STATUS_USER_CLOSED) {
        return;
      }

      this._status = C.STATUS_READY;
      this._error = null;
      this.emit('connected', data);

      if (this._dynConfiguration.register) {
        this._registrator.register();
      }
    }


    function onTransportDisconnect(data) {
      var client_transactions = ['nict', 'ict', 'nist', 'ist'];

      for (var _i = 0, _client_transactions = client_transactions; _i < _client_transactions.length; _i++) {
        var type = _client_transactions[_i];

        for (var id in this._transactions[type]) {
          if (Object.prototype.hasOwnProperty.call(this._transactions[type], id)) {
            this._transactions[type][id].onTransportError();
          }
        }
      }

      this.emit('disconnected', data);

      this._registrator.onTransportClosed();

      if (this._status !== C.STATUS_USER_CLOSED) {
        this._status = C.STATUS_NOT_READY;
        this._error = C.NETWORK_ERROR;
      }
    }


    function onTransportData(data) {
      var transport = data.transport;
      var message = data.message;
      message = Parser.parseMessage(message, this);

      if (!message) {
        return;
      }

      if (this._status === C.STATUS_USER_CLOSED && message instanceof SIPMessage.IncomingRequest) {
        return;
      }


      if (!sanityCheck(message, this, transport)) {
        return;
      }

      if (message instanceof SIPMessage.IncomingRequest) {
        message.transport = transport;
        this.receiveRequest(message);
      } else if (message instanceof SIPMessage.IncomingResponse) {
        /* Unike stated in 18.1.2, if a response does not match
        * any transaction, it is discarded here and no passed to the core
        * in order to be discarded there.
        */
        var transaction;

        switch (message.method) {
          case JsSIP_C.INVITE:
            transaction = this._transactions.ict[message.via_branch];

            if (transaction) {
              transaction.receiveResponse(message);
            }

            break;

          case JsSIP_C.ACK:
            break;

          default:
            transaction = this._transactions.nict[message.via_branch];

            if (transaction) {
              transaction.receiveResponse(message);
            }

            break;
        }
      }
    }
  },{"./Config":1,"./Constants":2,"./Exceptions":6,"./Message":9,"./Parser":11,"./RTCSession":12,"./Registrator":17,"./SIPMessage":19,"./Transactions":22,"./Transport":23,"./URI":25,"./Utils":26,"./sanityCheck":28,"debug":30,"events":29}],25:[function(require,module,exports){
    "use strict";

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var JsSIP_C = require('./Constants');

    var Utils = require('./Utils');

    var Grammar = require('./Grammar');
    /**
     * -param {String} [scheme]
     * -param {String} [user]
     * -param {String} host
     * -param {String} [port]
     * -param {Object} [parameters]
     * -param {Object} [headers]
     *
     */


    module.exports = /*#__PURE__*/function () {
      _createClass(URI, null, [{
        key: "parse",

        /**
         * Parse the given string and returns a JsSIP.URI instance or undefined if
         * it is an invalid URI.
         */
        value: function parse(uri) {
          uri = Grammar.parse(uri, 'SIP_URI');

          if (uri !== -1) {
            return uri;
          } else {
            return undefined;
          }
        }
      }]);

      function URI(scheme, user, host, port) {
        var parameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
        var headers = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

        _classCallCheck(this, URI);

        if (!host) {
          throw new TypeError('missing or invalid "host" parameter');
        }


        this._parameters = {};
        this._headers = {};
        this._scheme = scheme || JsSIP_C.SIP;
        this._user = user;
        this._host = host;
        this._port = port;

        for (var param in parameters) {
          if (Object.prototype.hasOwnProperty.call(parameters, param)) {
            this.setParam(param, parameters[param]);
          }
        }

        for (var header in headers) {
          if (Object.prototype.hasOwnProperty.call(headers, header)) {
            this.setHeader(header, headers[header]);
          }
        }
      }

      _createClass(URI, [{
        key: "setParam",
        value: function setParam(key, value) {
          if (key) {
            this._parameters[key.toLowerCase()] = typeof value === 'undefined' || value === null ? null : value.toString();
          }
        }
      }, {
        key: "getParam",
        value: function getParam(key) {
          if (key) {
            return this._parameters[key.toLowerCase()];
          }
        }
      }, {
        key: "hasParam",
        value: function hasParam(key) {
          if (key) {
            return this._parameters.hasOwnProperty(key.toLowerCase()) && true || false;
          }
        }
      }, {
        key: "deleteParam",
        value: function deleteParam(parameter) {
          parameter = parameter.toLowerCase();

          if (this._parameters.hasOwnProperty(parameter)) {
            var value = this._parameters[parameter];
            delete this._parameters[parameter];
            return value;
          }
        }
      }, {
        key: "clearParams",
        value: function clearParams() {
          this._parameters = {};
        }
      }, {
        key: "setHeader",
        value: function setHeader(name, value) {
          this._headers[Utils.headerize(name)] = Array.isArray(value) ? value : [value];
        }
      }, {
        key: "getHeader",
        value: function getHeader(name) {
          if (name) {
            return this._headers[Utils.headerize(name)];
          }
        }
      }, {
        key: "hasHeader",
        value: function hasHeader(name) {
          if (name) {
            return this._headers.hasOwnProperty(Utils.headerize(name)) && true || false;
          }
        }
      }, {
        key: "deleteHeader",
        value: function deleteHeader(header) {
          header = Utils.headerize(header);

          if (this._headers.hasOwnProperty(header)) {
            var value = this._headers[header];
            delete this._headers[header];
            return value;
          }
        }
      }, {
        key: "clearHeaders",
        value: function clearHeaders() {
          this._headers = {};
        }
      }, {
        key: "clone",
        value: function clone() {
          return new URI(this._scheme, this._user, this._host, this._port, JSON.parse(JSON.stringify(this._parameters)), JSON.parse(JSON.stringify(this._headers)));
        }
      }, {
        key: "toString",
        value: function toString() {
          var headers = [];
          var uri = "".concat(this._scheme, ":");

          if (this._user) {
            uri += "".concat(Utils.escapeUser(this._user), "@");
          }

          uri += this._host;

          if (this._port || this._port === 0) {
            uri += ":".concat(this._port);
          }

          for (var parameter in this._parameters) {
            if (Object.prototype.hasOwnProperty.call(this._parameters, parameter)) {
              uri += ";".concat(parameter);

              if (this._parameters[parameter] !== null) {
                uri += "=".concat(this._parameters[parameter]);
              }
            }
          }

          for (var header in this._headers) {
            if (Object.prototype.hasOwnProperty.call(this._headers, header)) {
              var _iterator = _createForOfIteratorHelper(this._headers[header]),
                _step;

              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var item = _step.value;
                  headers.push("".concat(header, "=").concat(item));
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
            }
          }

          if (headers.length > 0) {
            uri += "?".concat(headers.join('&'));
          }

          return uri;
        }
      }, {
        key: "toAor",
        value: function toAor(show_port) {
          var aor = "".concat(this._scheme, ":");

          if (this._user) {
            aor += "".concat(Utils.escapeUser(this._user), "@");
          }

          aor += this._host;

          if (show_port && (this._port || this._port === 0)) {
            aor += ":".concat(this._port);
          }

          return aor;
        }
      }, {
        key: "scheme",
        get: function get() {
          return this._scheme;
        },
        set: function set(value) {
          this._scheme = value.toLowerCase();
        }
      }, {
        key: "user",
        get: function get() {
          return this._user;
        },
        set: function set(value) {
          this._user = value;
        }
      }, {
        key: "host",
        get: function get() {
          return this._host;
        },
        set: function set(value) {
          this._host = value.toLowerCase();
        }
      }, {
        key: "port",
        get: function get() {
          return this._port;
        },
        set: function set(value) {
          this._port = value === 0 ? value : parseInt(value, 10) || null;
        }
      }]);

      return URI;
    }();
  },{"./Constants":2,"./Grammar":7,"./Utils":26}],26:[function(require,module,exports){
    "use strict";

    function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var JsSIP_C = require('./Constants');

    var URI = require('./URI');

    var Grammar = require('./Grammar');

    exports.str_utf8_length = function (string) {
      return unescape(encodeURIComponent(string)).length;
    };


    var isFunction = exports.isFunction = function (fn) {
      if (fn !== undefined) {
        return Object.prototype.toString.call(fn) === '[object Function]' ? true : false;
      } else {
        return false;
      }
    };

    exports.isString = function (str) {
      if (str !== undefined) {
        return Object.prototype.toString.call(str) === '[object String]' ? true : false;
      } else {
        return false;
      }
    };

    exports.isDecimal = function (num) {
      return !isNaN(num) && parseFloat(num) === parseInt(num, 10);
    };

    exports.isEmpty = function (value) {
      return value === null || value === '' || value === undefined || Array.isArray(value) && value.length === 0 || typeof value === 'number' && isNaN(value);
    };

    exports.hasMethods = function (obj) {
      for (var _len = arguments.length, methodNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        methodNames[_key - 1] = arguments[_key];
      }

      for (var _i = 0, _methodNames = methodNames; _i < _methodNames.length; _i++) {
        var methodName = _methodNames[_i];

        if (isFunction(obj[methodName])) {
          return false;
        }
      }

      return true;
    };


    var createRandomToken = exports.createRandomToken = function (size) {
      var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
      var i,
        r,
        token = '';

      for (i = 0; i < size; i++) {
        r = Math.random() * base | 0;
        token += r.toString(base);
      }

      return token;
    };

    exports.newTag = function () {
      return createRandomToken(10);
    };


    exports.newUUID = function () {
      var UUID = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0,
          v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
      return UUID;
    };

    exports.hostType = function (host) {
      if (!host) {
        return;
      } else {
        host = Grammar.parse(host, 'host');

        if (host !== -1) {
          return host.host_type;
        }
      }
    };
    /**
     * Hex-escape a SIP URI user.
     * Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F"), '/' (%2F).
     *
     * Used by 'normalizeTarget'.
     */


    var escapeUser = exports.escapeUser = function (user) {
      return encodeURIComponent(decodeURIComponent(user)).replace(/%3A/ig, ':').replace(/%2B/ig, '+').replace(/%3F/ig, '?').replace(/%2F/ig, '/');
    };
    /**
     * Normalize SIP URI.
     * NOTE: It does not allow a SIP URI without username.
     * Accepts 'sip', 'sips' and 'tel' URIs and convert them into 'sip'.
     * Detects the domain part (if given) and properly hex-escapes the user portion.
     * If the user portion has only 'tel' number symbols the user portion is clean of 'tel' visual separators.
     */


    exports.normalizeTarget = function (target, domain) {
      if (!target) {
        return;
      } else if (target instanceof URI) {
        return target;

      } else if (typeof target === 'string') {
        var target_array = target.split('@');
        var target_user;
        var target_domain;

        switch (target_array.length) {
          case 1:
            if (!domain) {
              return;
            }

            target_user = target;
            target_domain = domain;
            break;

          case 2:
            target_user = target_array[0];
            target_domain = target_array[1];
            break;

          default:
            target_user = target_array.slice(0, target_array.length - 1).join('@');
            target_domain = target_array[target_array.length - 1];
        }


        target_user = target_user.replace(/^(sips?|tel):/i, '');

        if (/^[-.()]*\+?[0-9\-.()]+$/.test(target_user)) {
          target_user = target_user.replace(/[-.()]/g, '');
        }


        target = "".concat(JsSIP_C.SIP, ":").concat(escapeUser(target_user), "@").concat(target_domain);

        var uri;

        if (uri = URI.parse(target)) {
          return uri;
        } else {
          return;
        }
      } else {
        return;
      }
    };

    exports.headerize = function (string) {
      var exceptions = {
        'Call-Id': 'Call-ID',
        'Cseq': 'CSeq',
        'Www-Authenticate': 'WWW-Authenticate'
      };
      var name = string.toLowerCase().replace(/_/g, '-').split('-');
      var hname = '';
      var parts = name.length;
      var part;

      for (part = 0; part < parts; part++) {
        if (part !== 0) {
          hname += '-';
        }

        hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);
      }

      if (exceptions[hname]) {
        hname = exceptions[hname];
      }

      return hname;
    };

    exports.sipErrorCause = function (status_code) {
      for (var cause in JsSIP_C.SIP_ERROR_CAUSES) {
        if (JsSIP_C.SIP_ERROR_CAUSES[cause].indexOf(status_code) !== -1) {
          return JsSIP_C.causes[cause];
        }
      }

      return JsSIP_C.causes.SIP_FAILURE_CODE;
    };



    exports.getRandomTestNetIP = function () {
      function getOctet(from, to) {
        return Math.floor(Math.random() * (to - from + 1) + from);
      }

      return "192.0.2.".concat(getOctet(1, 254));
    };


    exports.calculateMD5 = function (string) {
      function rotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
      }

      function addUnsigned(lX, lY) {
        var lX8 = lX & 0x80000000;
        var lY8 = lY & 0x80000000;
        var lX4 = lX & 0x40000000;
        var lY4 = lY & 0x40000000;
        var lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);

        if (lX4 & lY4) {
          return lResult ^ 0x80000000 ^ lX8 ^ lY8;
        }

        if (lX4 | lY4) {
          if (lResult & 0x40000000) {
            return lResult ^ 0xC0000000 ^ lX8 ^ lY8;
          } else {
            return lResult ^ 0x40000000 ^ lX8 ^ lY8;
          }
        } else {
          return lResult ^ lX8 ^ lY8;
        }
      }

      function doF(x, y, z) {
        return x & y | ~x & z;
      }

      function doG(x, y, z) {
        return x & z | y & ~z;
      }

      function doH(x, y, z) {
        return x ^ y ^ z;
      }

      function doI(x, y, z) {
        return y ^ (x | ~z);
      }

      function doFF(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(doF(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
      }

      function doGG(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(doG(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
      }

      function doHH(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(doH(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
      }

      function doII(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(doI(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
      }

      function convertToWordArray(str) {
        var lWordCount;
        var lMessageLength = str.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = new Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;

        while (lByteCount < lMessageLength) {
          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | str.charCodeAt(lByteCount) << lBytePosition;
          lByteCount++;
        }

        lWordCount = (lByteCount - lByteCount % 4) / 4;
        lBytePosition = lByteCount % 4 * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
      }

      function wordToHex(lValue) {
        var wordToHexValue = '',
          wordToHexValue_temp = '',
          lByte,
          lCount;

        for (lCount = 0; lCount <= 3; lCount++) {
          lByte = lValue >>> lCount * 8 & 255;
          wordToHexValue_temp = "0".concat(lByte.toString(16));
          wordToHexValue = wordToHexValue + wordToHexValue_temp.substr(wordToHexValue_temp.length - 2, 2);
        }

        return wordToHexValue;
      }

      function utf8Encode(str) {
        str = str.replace(/\r\n/g, '\n');
        var utftext = '';

        for (var n = 0; n < str.length; n++) {
          var _c = str.charCodeAt(n);

          if (_c < 128) {
            utftext += String.fromCharCode(_c);
          } else if (_c > 127 && _c < 2048) {
            utftext += String.fromCharCode(_c >> 6 | 192);
            utftext += String.fromCharCode(_c & 63 | 128);
          } else {
            utftext += String.fromCharCode(_c >> 12 | 224);
            utftext += String.fromCharCode(_c >> 6 & 63 | 128);
            utftext += String.fromCharCode(_c & 63 | 128);
          }
        }

        return utftext;
      }

      var x = [];
      var k, AA, BB, CC, DD, a, b, c, d;
      var S11 = 7,
        S12 = 12,
        S13 = 17,
        S14 = 22;
      var S21 = 5,
        S22 = 9,
        S23 = 14,
        S24 = 20;
      var S31 = 4,
        S32 = 11,
        S33 = 16,
        S34 = 23;
      var S41 = 6,
        S42 = 10,
        S43 = 15,
        S44 = 21;
      string = utf8Encode(string);
      x = convertToWordArray(string);
      a = 0x67452301;
      b = 0xEFCDAB89;
      c = 0x98BADCFE;
      d = 0x10325476;

      for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = doFF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = doFF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = doFF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = doFF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = doFF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = doFF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = doFF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = doFF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = doFF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = doFF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = doFF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = doFF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = doFF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = doFF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = doFF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = doFF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = doGG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = doGG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = doGG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = doGG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = doGG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = doGG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = doGG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = doGG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = doGG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = doGG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = doGG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = doGG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = doGG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = doGG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = doGG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = doGG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = doHH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = doHH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = doHH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = doHH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = doHH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = doHH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = doHH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = doHH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = doHH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = doHH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = doHH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = doHH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = doHH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = doHH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = doHH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = doHH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = doII(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = doII(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = doII(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = doII(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = doII(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = doII(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = doII(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = doII(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = doII(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = doII(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = doII(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = doII(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = doII(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = doII(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = doII(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = doII(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = addUnsigned(a, AA);
        b = addUnsigned(b, BB);
        c = addUnsigned(c, CC);
        d = addUnsigned(d, DD);
      }

      var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);
      return temp.toLowerCase();
    };

    exports.closeMediaStream = function (stream) {
      if (!stream) {
        return;
      }


      try {
        var tracks;

        if (stream.getTracks) {
          tracks = stream.getTracks();

          var _iterator = _createForOfIteratorHelper(tracks),
            _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var track = _step.value;
              track.stop();
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else {
          tracks = stream.getAudioTracks();

          var _iterator2 = _createForOfIteratorHelper(tracks),
            _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _track = _step2.value;

              _track.stop();
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }

          tracks = stream.getVideoTracks();

          var _iterator3 = _createForOfIteratorHelper(tracks),
            _step3;

          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var _track2 = _step3.value;

              _track2.stop();
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } catch (error) {
        if (typeof stream.stop === 'function' || _typeof(stream.stop) === 'object') {
          stream.stop();
        }
      }
    };

    exports.cloneArray = function (array) {
      return array && array.slice() || [];
    };

    exports.cloneObject = function (obj) {
      var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return obj && Object.assign({}, obj) || fallback;
    };
  },{"./Constants":2,"./Grammar":7,"./URI":25}],27:[function(require,module,exports){
    "use strict";

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var Grammar = require('./Grammar');

    var debug = require('debug')('JsSIP:WebSocketInterface');

    var debugerror = require('debug')('JsSIP:ERROR:WebSocketInterface');

    debugerror.log = console.warn.bind(console);

    module.exports = /*#__PURE__*/function () {
      function WebSocketInterface(url) {
        _classCallCheck(this, WebSocketInterface);

        debug('new() [url:"%s"]', url);
        this._url = url;
        this._sip_uri = null;
        this._via_transport = null;
        this._ws = null;
        var parsed_url = Grammar.parse(url, 'absoluteURI');

        if (parsed_url === -1) {
          debugerror("invalid WebSocket URI: ".concat(url));
          throw new TypeError("Invalid argument: ".concat(url));
        } else if (parsed_url.scheme !== 'wss' && parsed_url.scheme !== 'ws') {
          debugerror("invalid WebSocket URI scheme: ".concat(parsed_url.scheme));
          throw new TypeError("Invalid argument: ".concat(url));
        } else {
          this._sip_uri = "sip:".concat(parsed_url.host).concat(parsed_url.port ? ":".concat(parsed_url.port) : '', ";transport=ws");
          this._via_transport = parsed_url.scheme.toUpperCase();
        }
      }

      _createClass(WebSocketInterface, [{
        key: "connect",
        value: function connect() {
          debug('connect()');

          if (this.isConnected()) {
            debug("WebSocket ".concat(this._url, " is already connected"));
            return;
          } else if (this.isConnecting()) {
            debug("WebSocket ".concat(this._url, " is connecting"));
            return;
          }

          if (this._ws) {
            this.disconnect();
          }

          debug("connecting to WebSocket ".concat(this._url));

          try {
            this._ws = new WebSocket(this._url, 'sip');
            this._ws.binaryType = 'arraybuffer';
            this._ws.onopen = this._onOpen.bind(this);
            this._ws.onclose = this._onClose.bind(this);
            this._ws.onmessage = this._onMessage.bind(this);
            this._ws.onerror = this._onError.bind(this);
          } catch (e) {
            this._onError(e);
          }
        }
      }, {
        key: "disconnect",
        value: function disconnect() {
          debug('disconnect()');

          if (this._ws) {
            this._ws.onopen = function () {};

            this._ws.onclose = function () {};

            this._ws.onmessage = function () {};

            this._ws.onerror = function () {};

            this._ws.close();

            this._ws = null;
          }
        }
      }, {
        key: "send",
        value: function send(message) {
          debug('send()');

          if (this.isConnected()) {
            this._ws.send(message);

            return true;
          } else {
            debugerror('unable to send message, WebSocket is not open');
            return false;
          }
        }
      }, {
        key: "isConnected",
        value: function isConnected() {
          return this._ws && this._ws.readyState === this._ws.OPEN;
        }
      }, {
        key: "isConnecting",
        value: function isConnecting() {
          return this._ws && this._ws.readyState === this._ws.CONNECTING;
        }
        /**
         * WebSocket Event Handlers
         */

      }, {
        key: "_onOpen",
        value: function _onOpen() {
          debug("WebSocket ".concat(this._url, " connected"));
          this.onconnect();
        }
      }, {
        key: "_onClose",
        value: function _onClose(_ref) {
          var wasClean = _ref.wasClean,
            code = _ref.code,
            reason = _ref.reason;
          debug("WebSocket ".concat(this._url, " closed"));

          if (wasClean === false) {
            debug('WebSocket abrupt disconnection');
          }

          var data = {
            socket: this,
            error: !wasClean,
            code: code,
            reason: reason
          };
          this.ondisconnect(data);
        }
      }, {
        key: "_onMessage",
        value: function _onMessage(_ref2) {
          var data = _ref2.data;
          debug('received WebSocket message');
          this.ondata(data);
        }
      }, {
        key: "_onError",
        value: function _onError(e) {
          debugerror("WebSocket ".concat(this._url, " error: ").concat(e));
        }
      }, {
        key: "via_transport",
        get: function get() {
          return this._via_transport;
        },
        set: function set(value) {
          this._via_transport = value.toUpperCase();
        }
      }, {
        key: "sip_uri",
        get: function get() {
          return this._sip_uri;
        }
      }, {
        key: "url",
        get: function get() {
          return this._url;
        }
      }]);

      return WebSocketInterface;
    }();
  },{"./Grammar":7,"debug":30}],28:[function(require,module,exports){
    "use strict";

    function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

    var JsSIP_C = require('./Constants');

    var SIPMessage = require('./SIPMessage');

    var Utils = require('./Utils');

    var debug = require('debug')('JsSIP:sanityCheck');


    var all = [minimumHeaders];

    var requests = [rfc3261_8_2_2_1, rfc3261_16_3_4, rfc3261_18_3_request, rfc3261_8_2_2_2];

    var responses = [rfc3261_8_1_3_3, rfc3261_18_3_response];

    var message;
    var ua;
    var transport;

    module.exports = function (m, u, t) {
      message = m;
      ua = u;
      transport = t;

      var _iterator = _createForOfIteratorHelper(all),
        _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _check2 = _step.value;

          if (_check2() === false) {
            return false;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (message instanceof SIPMessage.IncomingRequest) {
        var _iterator2 = _createForOfIteratorHelper(requests),
          _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var check = _step2.value;

            if (check() === false) {
              return false;
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else if (message instanceof SIPMessage.IncomingResponse) {
        var _iterator3 = _createForOfIteratorHelper(responses),
          _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _check = _step3.value;

            if (_check() === false) {
              return false;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }


      return true;
    };
    /*
     * Sanity Check for incoming Messages
     *
     * Requests:
     *  - _rfc3261_8_2_2_1_ Receive a Request with a non supported URI scheme
     *  - _rfc3261_16_3_4_ Receive a Request already sent by us
     *   Does not look at via sent-by but at jssip_id, which is inserted as
     *   a prefix in all initial requests generated by the ua
     *  - _rfc3261_18_3_request_ Body Content-Length
     *  - _rfc3261_8_2_2_2_ Merged Requests
     *
     * Responses:
     *  - _rfc3261_8_1_3_3_ Multiple Via headers
     *  - _rfc3261_18_3_response_ Body Content-Length
     *
     * All:
     *  - Minimum headers in a SIP message
     */


    function rfc3261_8_2_2_1() {
      if (message.s('to').uri.scheme !== 'sip') {
        reply(416);
        return false;
      }
    }

    function rfc3261_16_3_4() {
      if (!message.to_tag) {
        if (message.call_id.substr(0, 5) === ua.configuration.jssip_id) {
          reply(482);
          return false;
        }
      }
    }

    function rfc3261_18_3_request() {
      var len = Utils.str_utf8_length(message.body);
      var contentLength = message.getHeader('content-length');

      if (len < contentLength) {
        reply(400);
        return false;
      }
    }

    function rfc3261_8_2_2_2() {
      var fromTag = message.from_tag;
      var call_id = message.call_id;
      var cseq = message.cseq;
      var tr;

      if (message.to_tag) {
        return;
      }


      if (message.method === JsSIP_C.INVITE) {

        if (ua._transactions.ist[message.via_branch]) {
          return false;
        }
        else {
          for (var transaction in ua._transactions.ist) {
            if (Object.prototype.hasOwnProperty.call(ua._transactions.ist, transaction)) {
              tr = ua._transactions.ist[transaction];

              if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
                reply(482);
                return false;
              }
            }
          }
        }
      }
      else if (ua._transactions.nist[message.via_branch]) {
        return false;
      }
      else {
        for (var _transaction in ua._transactions.nist) {
          if (Object.prototype.hasOwnProperty.call(ua._transactions.nist, _transaction)) {
            tr = ua._transactions.nist[_transaction];

            if (tr.request.from_tag === fromTag && tr.request.call_id === call_id && tr.request.cseq === cseq) {
              reply(482);
              return false;
            }
          }
        }
      }
    }


    function rfc3261_8_1_3_3() {
      if (message.getHeaders('via').length > 1) {
        debug('more than one Via header field present in the response, dropping the response');
        return false;
      }
    }

    function rfc3261_18_3_response() {
      var len = Utils.str_utf8_length(message.body),
        contentLength = message.getHeader('content-length');

      if (len < contentLength) {
        debug('message body length is lower than the value in Content-Length header field, dropping the response');
        return false;
      }
    }


    function minimumHeaders() {
      var mandatoryHeaders = ['from', 'to', 'call_id', 'cseq', 'via'];

      for (var _i = 0, _mandatoryHeaders = mandatoryHeaders; _i < _mandatoryHeaders.length; _i++) {
        var header = _mandatoryHeaders[_i];

        if (!message.hasHeader(header)) {
          debug("missing mandatory header field : ".concat(header, ", dropping the response"));
          return false;
        }
      }
    }


    function reply(status_code) {
      var vias = message.getHeaders('via');
      var to;
      var response = "SIP/2.0 ".concat(status_code, " ").concat(JsSIP_C.REASON_PHRASE[status_code], "\r\n");

      var _iterator4 = _createForOfIteratorHelper(vias),
        _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var via = _step4.value;
          response += "Via: ".concat(via, "\r\n");
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      to = message.getHeader('To');

      if (!message.to_tag) {
        to += ";tag=".concat(Utils.newTag());
      }

      response += "To: ".concat(to, "\r\n");
      response += "From: ".concat(message.getHeader('From'), "\r\n");
      response += "Call-ID: ".concat(message.call_id, "\r\n");
      response += "CSeq: ".concat(message.cseq, " ").concat(message.method, "\r\n");
      response += '\r\n';
      transport.send(response);
    }
  },{"./Constants":2,"./SIPMessage":19,"./Utils":26,"debug":30}],29:[function(require,module,exports){


    var objectCreate = Object.create || objectCreatePolyfill
    var objectKeys = Object.keys || objectKeysPolyfill
    var bind = Function.prototype.bind || functionBindPolyfill

    function EventEmitter() {
      if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
        this._events = objectCreate(null);
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    }
    module.exports = EventEmitter;

    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;


    var defaultMaxListeners = 10;

    var hasDefineProperty;
    try {
      var o = {};
      if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });
      hasDefineProperty = o.x === 0;
    } catch (err) { hasDefineProperty = false }
    if (hasDefineProperty) {
      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {

          if (typeof arg !== 'number' || arg < 0 || arg !== arg)
            throw new TypeError('"defaultMaxListeners" must be a positive number');
          defaultMaxListeners = arg;
        }
      });
    } else {
      EventEmitter.defaultMaxListeners = defaultMaxListeners;
    }

    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };


    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      if (doError) {
        if (arguments.length > 1)
          er = arguments[1];
        if (er instanceof Error) {
          throw er;
        } else {
          var err = new Error('Unhandled "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = objectCreate(null);
        target._eventsCount = 0;
      } else {

        if (events.newListener) {
          target.emit('newListener', type,
            listener.listener ? listener.listener : listener);


          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          existing = events[type] =
            prepend ? [listener, existing] : [existing, listener];
        } else {
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
              existing.length + ' "' + String(type) + '" listeners ' +
              'added. Use emitter.setMaxListeners() to ' +
              'increase limit.');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            if (typeof console === 'object' && console.warn) {
              console.warn('%s: %s', w.name, w.message);
            }
          }
        }
      }

      return target;
    }

    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        switch (arguments.length) {
          case 0:
            return this.listener.call(this.target);
          case 1:
            return this.listener.call(this.target, arguments[0]);
          case 2:
            return this.listener.call(this.target, arguments[0], arguments[1]);
          case 3:
            return this.listener.call(this.target, arguments[0], arguments[1],
              arguments[2]);
          default:
            var args = new Array(arguments.length);
            for (var i = 0; i < args.length; ++i)
              args[i] = arguments[i];
            this.listener.apply(this.target, args);
        }
      }
    }

    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
      var wrapped = bind.call(onceWrapper, state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

    EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = objectCreate(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (position === 0)
            list.shift();
          else
            spliceOne(list, position);

          if (list.length === 1)
            events[type] = list[0];

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };

    EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events, i;

        events = this._events;
        if (!events)
          return this;

        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = objectCreate(null);
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = objectCreate(null);
            else
              delete events[type];
          }
          return this;
        }

        if (arguments.length === 0) {
          var keys = objectKeys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = objectCreate(null);
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }

        return this;
      };

    function _listeners(target, type, unwrap) {
      var events = target._events;

      if (!events)
        return [];

      var evlistener = events[type];
      if (!evlistener)
        return [];

      if (typeof evlistener === 'function')
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];

      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }

    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };

    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function objectCreatePolyfill(proto) {
      var F = function() {};
      F.prototype = proto;
      return new F;
    }
    function objectKeysPolyfill(obj) {
      var keys = [];
      for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k)) {
        keys.push(k);
      }
      return k;
    }
    function functionBindPolyfill(context) {
      var fn = this;
      return function () {
        return fn.apply(context, arguments);
      };
    }

  },{}],30:[function(require,module,exports){
    (function (process){
      /* eslint-env browser */

      /**
       * This is the web browser implementation of `debug()`.
       */

      exports.log = log;
      exports.formatArgs = formatArgs;
      exports.save = save;
      exports.load = load;
      exports.useColors = useColors;
      exports.storage = localstorage();

      /**
       * Colors.
       */

      exports.colors = [
        '#0000CC',
        '#0000FF',
        '#0033CC',
        '#0033FF',
        '#0066CC',
        '#0066FF',
        '#0099CC',
        '#0099FF',
        '#00CC00',
        '#00CC33',
        '#00CC66',
        '#00CC99',
        '#00CCCC',
        '#00CCFF',
        '#3300CC',
        '#3300FF',
        '#3333CC',
        '#3333FF',
        '#3366CC',
        '#3366FF',
        '#3399CC',
        '#3399FF',
        '#33CC00',
        '#33CC33',
        '#33CC66',
        '#33CC99',
        '#33CCCC',
        '#33CCFF',
        '#6600CC',
        '#6600FF',
        '#6633CC',
        '#6633FF',
        '#66CC00',
        '#66CC33',
        '#9900CC',
        '#9900FF',
        '#9933CC',
        '#9933FF',
        '#99CC00',
        '#99CC33',
        '#CC0000',
        '#CC0033',
        '#CC0066',
        '#CC0099',
        '#CC00CC',
        '#CC00FF',
        '#CC3300',
        '#CC3333',
        '#CC3366',
        '#CC3399',
        '#CC33CC',
        '#CC33FF',
        '#CC6600',
        '#CC6633',
        '#CC9900',
        '#CC9933',
        '#CCCC00',
        '#CCCC33',
        '#FF0000',
        '#FF0033',
        '#FF0066',
        '#FF0099',
        '#FF00CC',
        '#FF00FF',
        '#FF3300',
        '#FF3333',
        '#FF3366',
        '#FF3399',
        '#FF33CC',
        '#FF33FF',
        '#FF6600',
        '#FF6633',
        '#FF9900',
        '#FF9933',
        '#FFCC00',
        '#FFCC33'
      ];

      /**
       * Currently only WebKit-based Web Inspectors, Firefox >= v31,
       * and the Firebug extension (any Firefox version) are known
       * to support "%c" CSS customizations.
       *
       * TODO: add a `localStorage` variable to explicitly enable/disable colors
       */

      function useColors() {

        if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
          return true;
        }

        if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
          return false;
        }

        return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
          (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
          (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
          (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
      }

      /**
       * Colorize log arguments if enabled.
       *
       * @api public
       */

      function formatArgs(args) {
        args[0] = (this.useColors ? '%c' : '') +
          this.namespace +
          (this.useColors ? ' %c' : ' ') +
          args[0] +
          (this.useColors ? '%c ' : ' ') +
          '+' + module.exports.humanize(this.diff);

        if (!this.useColors) {
          return;
        }

        const c = 'color: ' + this.color;
        args.splice(1, 0, c, 'color: inherit');



        let index = 0;
        let lastC = 0;
        args[0].replace(/%[a-zA-Z%]/g, match => {
          if (match === '%%') {
            return;
          }
          index++;
          if (match === '%c') {
            lastC = index;
          }
        });

        args.splice(lastC, 0, c);
      }

      /**
       * Invokes `console.log()` when available.
       * No-op when `console.log` is not a "function".
       *
       * @api public
       */
      function log(...args) {
        return typeof console === 'object' &&
          console.log &&
          console.log(...args);
      }

      /**
       * Save `namespaces`.
       *
       * @param {String} namespaces
       * @api private
       */
      function save(namespaces) {
        try {
          if (namespaces) {
            exports.storage.setItem('debug', namespaces);
          } else {
            exports.storage.removeItem('debug');
          }
        } catch (error) {
        }
      }

      /**
       * Load `namespaces`.
       *
       * @return {String} returns the previously persisted debug modes
       * @api private
       */
      function load() {
        let r;
        try {
          r = exports.storage.getItem('debug');
        } catch (error) {
        }

        if (!r && typeof process !== 'undefined' && 'env' in process) {
          r = process.env.DEBUG;
        }

        return r;
      }

      /**
       * Localstorage attempts to return the localstorage.
       *
       * This is necessary because safari throws
       * when a user disables cookies/localstorage
       * and you attempt to access it.
       *
       * @return {LocalStorage}
       * @api private
       */

      function localstorage() {
        try {
          return localStorage;
        } catch (error) {
        }
      }

      module.exports = require('./common')(exports);

      const {formatters} = module.exports;

      /**
       * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
       */

      formatters.j = function (v) {
        try {
          return JSON.stringify(v);
        } catch (error) {
          return '[UnexpectedJSONParseError]: ' + error.message;
        }
      };

    }).call(this,require('_process'))
  },{"./common":31,"_process":33}],31:[function(require,module,exports){

    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require('ms');

      Object.keys(env).forEach(key => {
        createDebug[key] = env[key];
      });

      /**
       * Active `debug` instances.
       */
      createDebug.instances = [];

      /**
       * The currently active debug mode names, and names to skip.
       */

      createDebug.names = [];
      createDebug.skips = [];

      /**
       * Map of special "%n" handling functions, for the debug "format" argument.
       *
       * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
       */
      createDebug.formatters = {};

      /**
       * Selects a color for a debug namespace
       * @param {String} namespace The namespace string for the for the debug instance to be colored
       * @return {Number|String} An ANSI color code for the given namespace
       * @api private
       */
      function selectColor(namespace) {
        let hash = 0;

        for (let i = 0; i < namespace.length; i++) {
          hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
          hash |= 0;
        }

        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;

      /**
       * Create a debugger with the given `namespace`.
       *
       * @param {String} namespace
       * @return {Function}
       * @api public
       */
      function createDebug(namespace) {
        let prevTime;

        function debug(...args) {
          if (!debug.enabled) {
            return;
          }

          const self = debug;

          const curr = Number(new Date());
          const ms = curr - (prevTime || curr);
          self.diff = ms;
          self.prev = prevTime;
          self.curr = curr;
          prevTime = curr;

          args[0] = createDebug.coerce(args[0]);

          if (typeof args[0] !== 'string') {
            args.unshift('%O');
          }

          let index = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === '%%') {
              return match;
            }
            index++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === 'function') {
              const val = args[index];
              match = formatter.call(self, val);

              args.splice(index, 1);
              index--;
            }
            return match;
          });

          createDebug.formatArgs.call(self, args);

          const logFn = self.log || createDebug.log;
          logFn.apply(self, args);
        }

        debug.namespace = namespace;
        debug.enabled = createDebug.enabled(namespace);
        debug.useColors = createDebug.useColors();
        debug.color = selectColor(namespace);
        debug.destroy = destroy;
        debug.extend = extend;

        if (typeof createDebug.init === 'function') {
          createDebug.init(debug);
        }

        createDebug.instances.push(debug);

        return debug;
      }

      function destroy() {
        const index = createDebug.instances.indexOf(this);
        if (index !== -1) {
          createDebug.instances.splice(index, 1);
          return true;
        }
        return false;
      }

      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }

      /**
       * Enables a debug mode by namespaces. This can include modes
       * separated by a colon and wildcards.
       *
       * @param {String} namespaces
       * @api public
       */
      function enable(namespaces) {
        createDebug.save(namespaces);

        createDebug.names = [];
        createDebug.skips = [];

        let i;
        const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
        const len = split.length;

        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }

          namespaces = split[i].replace(/\*/g, '.*?');

          if (namespaces[0] === '-') {
            createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
          } else {
            createDebug.names.push(new RegExp('^' + namespaces + '$'));
          }
        }

        for (i = 0; i < createDebug.instances.length; i++) {
          const instance = createDebug.instances[i];
          instance.enabled = createDebug.enabled(instance.namespace);
        }
      }

      /**
       * Disable debug output.
       *
       * @return {String} namespaces
       * @api public
       */
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
      }

      /**
       * Returns true if the given mode name is enabled, false otherwise.
       *
       * @param {String} name
       * @return {Boolean}
       * @api public
       */
      function enabled(name) {
        if (name[name.length - 1] === '*') {
          return true;
        }

        let i;
        let len;

        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }

        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }

        return false;
      }

      /**
       * Convert regexp to namespace
       *
       * @param {RegExp} regxep
       * @return {String} namespace
       * @api private
       */
      function toNamespace(regexp) {
        return regexp.toString()
          .substring(2, regexp.toString().length - 2)
          .replace(/\.\*\?$/, '*');
      }

      /**
       * Coerce `val`.
       *
       * @param {Mixed} val
       * @return {Mixed}
       * @api private
       */
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }

      createDebug.enable(createDebug.load());

      return createDebug;
    }

    module.exports = setup;

  },{"ms":32}],32:[function(require,module,exports){
    /**
     * Helpers.
     */

    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
        JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

  },{}],33:[function(require,module,exports){
    var process = module.exports = {};



    var cachedSetTimeout;
    var cachedClearTimeout;

    function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
    }
    (function () {
      try {
        if (typeof setTimeout === 'function') {
          cachedSetTimeout = setTimeout;
        } else {
          cachedSetTimeout = defaultSetTimout;
        }
      } catch (e) {
        cachedSetTimeout = defaultSetTimout;
      }
      try {
        if (typeof clearTimeout === 'function') {
          cachedClearTimeout = clearTimeout;
        } else {
          cachedClearTimeout = defaultClearTimeout;
        }
      } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
      }
    } ())
    function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
        return setTimeout(fun, 0);
      }
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
      }
      try {
        return cachedSetTimeout(fun, 0);
      } catch(e){
        try {
          return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
          return cachedSetTimeout.call(this, fun, 0);
        }
      }


    }
    function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
        return clearTimeout(marker);
      }
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
      }
      try {
        return cachedClearTimeout(marker);
      } catch (e){
        try {
          return cachedClearTimeout.call(null, marker);
        } catch (e){

          return cachedClearTimeout.call(this, marker);
        }
      }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
      if (!draining || !currentQueue) {
        return;
      }
      draining = false;
      if (currentQueue.length) {
        queue = currentQueue.concat(queue);
      } else {
        queueIndex = -1;
      }
      if (queue.length) {
        drainQueue();
      }
    }

    function drainQueue() {
      if (draining) {
        return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
          if (currentQueue) {
            currentQueue[queueIndex].run();
          }
        }
        queueIndex = -1;
        len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
    }

    process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
      }
    };

    function Item(fun, array) {
      this.fun = fun;
      this.array = array;
    }
    Item.prototype.run = function () {
      this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {};
    process.argv = [];
    process.version = '';
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;
    process.prependListener = noop;
    process.prependOnceListener = noop;

    process.listeners = function (name) { return [] }

    process.binding = function (name) {
      throw new Error('process.binding is not supported');
    };

    process.cwd = function () { return '/' };
    process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
    };
    process.umask = function() { return 0; };

  },{}],34:[function(require,module,exports){
    var grammar = module.exports = {
      v: [{
        name: 'version',
        reg: /^(\d*)$/
      }],
      o: [{
        name: 'origin',
        reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
        names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],
        format: '%s %s %d %s IP%d %s'
      }],
      s: [{ name: 'name' }],
      i: [{ name: 'description' }],
      u: [{ name: 'uri' }],
      e: [{ name: 'email' }],
      p: [{ name: 'phone' }],
      z: [{ name: 'timezones' }],
      r: [{ name: 'repeats' }],
      t: [{
        name: 'timing',
        reg: /^(\d*) (\d*)/,
        names: ['start', 'stop'],
        format: '%d %d'
      }],
      c: [{
        name: 'connection',
        reg: /^IN IP(\d) (\S*)/,
        names: ['version', 'ip'],
        format: 'IN IP%d %s'
      }],
      b: [{
        push: 'bandwidth',
        reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
        names: ['type', 'limit'],
        format: '%s:%s'
      }],
      m: [{
        reg: /^(\w*) (\d*) ([\w\/]*)(?: (.*))?/,
        names: ['type', 'port', 'protocol', 'payloads'],
        format: '%s %d %s %s'
      }],
      a: [
        {
          push: 'rtp',
          reg: /^rtpmap:(\d*) ([\w\-\.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
          names: ['payload', 'codec', 'rate', 'encoding'],
          format: function (o) {
            return (o.encoding) ?
              'rtpmap:%d %s/%s/%s':
              o.rate ?
                'rtpmap:%d %s/%s':
                'rtpmap:%d %s';
          }
        },
        {
          push: 'fmtp',
          reg: /^fmtp:(\d*) ([\S| ]*)/,
          names: ['payload', 'config'],
          format: 'fmtp:%d %s'
        },
        {
          name: 'control',
          reg: /^control:(.*)/,
          format: 'control:%s'
        },
        {
          name: 'rtcp',
          reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
          names: ['port', 'netType', 'ipVer', 'address'],
          format: function (o) {
            return (o.address != null) ?
              'rtcp:%d %s IP%d %s':
              'rtcp:%d';
          }
        },
        {
          push: 'rtcpFbTrrInt',
          reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
          names: ['payload', 'value'],
          format: 'rtcp-fb:%d trr-int %d'
        },
        {
          push: 'rtcpFb',
          reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
          names: ['payload', 'type', 'subtype'],
          format: function (o) {
            return (o.subtype != null) ?
              'rtcp-fb:%s %s %s':
              'rtcp-fb:%s %s';
          }
        },
        {
          push: 'ext',
          reg: /^extmap:(\d+)(?:\/(\w+))? (\S*)(?: (\S*))?/,
          names: ['value', 'direction', 'uri', 'config'],
          format: function (o) {
            return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');
          }
        },
        {
          push: 'crypto',
          reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
          names: ['id', 'suite', 'config', 'sessionConfig'],
          format: function (o) {
            return (o.sessionConfig != null) ?
              'crypto:%d %s %s %s':
              'crypto:%d %s %s';
          }
        },
        {
          name: 'setup',
          reg: /^setup:(\w*)/,
          format: 'setup:%s'
        },
        {
          name: 'mid',
          reg: /^mid:([^\s]*)/,
          format: 'mid:%s'
        },
        {
          name: 'msid',
          reg: /^msid:(.*)/,
          format: 'msid:%s'
        },
        {
          name: 'ptime',
          reg: /^ptime:(\d*)/,
          format: 'ptime:%d'
        },
        {
          name: 'maxptime',
          reg: /^maxptime:(\d*)/,
          format: 'maxptime:%d'
        },
        {
          name: 'direction',
          reg: /^(sendrecv|recvonly|sendonly|inactive)/
        },
        {
          name: 'icelite',
          reg: /^(ice-lite)/
        },
        {
          name: 'iceUfrag',
          reg: /^ice-ufrag:(\S*)/,
          format: 'ice-ufrag:%s'
        },
        {
          name: 'icePwd',
          reg: /^ice-pwd:(\S*)/,
          format: 'ice-pwd:%s'
        },
        {
          name: 'fingerprint',
          reg: /^fingerprint:(\S*) (\S*)/,
          names: ['type', 'hash'],
          format: 'fingerprint:%s %s'
        },
        {
          push:'candidates',
          reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
          names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],
          format: function (o) {
            var str = 'candidate:%s %d %s %d %s %d typ %s';

            str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';

            str += (o.tcptype != null) ? ' tcptype %s' : '%v';

            if (o.generation != null) {
              str += ' generation %d';
            }

            str += (o['network-id'] != null) ? ' network-id %d' : '%v';
            str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';
            return str;
          }
        },
        {
          name: 'endOfCandidates',
          reg: /^(end-of-candidates)/
        },
        {
          name: 'remoteCandidates',
          reg: /^remote-candidates:(.*)/,
          format: 'remote-candidates:%s'
        },
        {
          name: 'iceOptions',
          reg: /^ice-options:(\S*)/,
          format: 'ice-options:%s'
        },
        {
          push: 'ssrcs',
          reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
          names: ['id', 'attribute', 'value'],
          format: function (o) {
            var str = 'ssrc:%d';
            if (o.attribute != null) {
              str += ' %s';
              if (o.value != null) {
                str += ':%s';
              }
            }
            return str;
          }
        },
        {
          push: 'ssrcGroups',

          reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
          names: ['semantics', 'ssrcs'],
          format: 'ssrc-group:%s %s'
        },
        {
          reg: /^msid-semantic:\s?(\w*) (\S*)/,
          names: ['semantic', 'token'],
          format: 'msid-semantic: %s %s'
        },
        {
          push: 'groups',
          reg: /^group:(\w*) (.*)/,
          names: ['type', 'mids'],
          format: 'group:%s %s'
        },
        {
          name: 'rtcpMux',
          reg: /^(rtcp-mux)/
        },
        {
          name: 'rtcpRsize',
          reg: /^(rtcp-rsize)/
        },
        {
          name: 'sctpmap',
          reg: /^sctpmap:([\w_\/]*) (\S*)(?: (\S*))?/,
          names: ['sctpmapNumber', 'app', 'maxMessageSize'],
          format: function (o) {
            return (o.maxMessageSize != null) ?
              'sctpmap:%s %s %s' :
              'sctpmap:%s %s';
          }
        },
        {
          name: 'xGoogleFlag',
          reg: /^x-google-flag:([^\s]*)/,
          format: 'x-google-flag:%s'
        },
        {
          push: 'rids',
          reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
          names: ['id', 'direction', 'params'],
          format: function (o) {
            return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';
          }
        },
        {
          push: 'imageattrs',
          reg: new RegExp(
            '^imageattr:(\\d+|\\*)' +
            '[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)' +
            '(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?'
          ),
          names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],
          format: function (o) {
            return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');
          }
        },
        {
          name: 'simulcast',
          reg: new RegExp(
            '^simulcast:' +
            '(send|recv) ([a-zA-Z0-9\\-_~;,]+)' +
            '(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?' +
            '$'
          ),
          names: ['dir1', 'list1', 'dir2', 'list2'],
          format: function (o) {
            return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');
          }
        },
        {
          name: 'simulcast_03',
          reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
          names: ['value'],
          format: 'simulcast: %s'
        },
        {

          name: 'framerate',
          reg: /^framerate:(\d+(?:$|\.\d+))/,
          format: 'framerate:%s'
        },
        {
          name: 'sourceFilter',
          reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
          names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],
          format: 'source-filter: %s %s %s %s %s'
        },
        {
          name: 'bundleOnly',
          reg: /^(bundle-only)/
        },
        {
          name: 'label',
          reg: /^label:(.+)/,
          format: 'label:%s'
        },
        {

          name:'sctpPort',
          reg: /^sctp-port:(\d+)$/,
          format: 'sctp-port:%s'
        },
        {

          name:'maxMessageSize',
          reg: /^max-message-size:(\d+)$/,
          format: 'max-message-size:%s'
        },
        {
          push: 'invalid',
          names: ['value']
        }
      ]
    };

    Object.keys(grammar).forEach(function (key) {
      var objs = grammar[key];
      objs.forEach(function (obj) {
        if (!obj.reg) {
          obj.reg = /(.*)/;
        }
        if (!obj.format) {
          obj.format = '%s';
        }
      });
    });

  },{}],35:[function(require,module,exports){
    var parser = require('./parser');
    var writer = require('./writer');

    exports.write = writer;
    exports.parse = parser.parse;
    exports.parseFmtpConfig = parser.parseFmtpConfig;
    exports.parseParams = parser.parseParams;
    exports.parsePayloads = parser.parsePayloads;
    exports.parseRemoteCandidates = parser.parseRemoteCandidates;
    exports.parseImageAttributes = parser.parseImageAttributes;
    exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;

  },{"./parser":36,"./writer":37}],36:[function(require,module,exports){
    var toIntIfInt = function (v) {
      return String(Number(v)) === v ? Number(v) : v;
    };

    var attachProperties = function (match, location, names, rawName) {
      if (rawName && !names) {
        location[rawName] = toIntIfInt(match[1]);
      }
      else {
        for (var i = 0; i < names.length; i += 1) {
          if (match[i+1] != null) {
            location[names[i]] = toIntIfInt(match[i+1]);
          }
        }
      }
    };

    var parseReg = function (obj, location, content) {
      var needsBlank = obj.name && obj.names;
      if (obj.push && !location[obj.push]) {
        location[obj.push] = [];
      }
      else if (needsBlank && !location[obj.name]) {
        location[obj.name] = {};
      }
      var keyLocation = obj.push ?
        {} :
        needsBlank ? location[obj.name] : location;

      attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);

      if (obj.push) {
        location[obj.push].push(keyLocation);
      }
    };

    var grammar = require('./grammar');
    var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);

    exports.parse = function (sdp) {
      var session = {}
        , media = []
        , location = session;


      sdp.split(/(\r\n|\r|\n)/).filter(validLine).forEach(function (l) {
        var type = l[0];
        var content = l.slice(2);
        if (type === 'm') {
          media.push({rtp: [], fmtp: []});
          location = media[media.length-1];
        }

        for (var j = 0; j < (grammar[type] || []).length; j += 1) {
          var obj = grammar[type][j];
          if (obj.reg.test(content)) {
            return parseReg(obj, location, content);
          }
        }
      });

      session.media = media;
      return session;
    };

    var paramReducer = function (acc, expr) {
      var s = expr.split(/=(.+)/, 2);
      if (s.length === 2) {
        acc[s[0]] = toIntIfInt(s[1]);
      } else if (s.length === 1 && expr.length > 1) {
        acc[s[0]] = undefined;
      }
      return acc;
    };

    exports.parseParams = function (str) {
      return str.split(/\;\s?/).reduce(paramReducer, {});
    };


    exports.parseFmtpConfig = exports.parseParams;

    exports.parsePayloads = function (str) {
      return str.split(' ').map(Number);
    };

    exports.parseRemoteCandidates = function (str) {
      var candidates = [];
      var parts = str.split(' ').map(toIntIfInt);
      for (var i = 0; i < parts.length; i += 3) {
        candidates.push({
          component: parts[i],
          ip: parts[i + 1],
          port: parts[i + 2]
        });
      }
      return candidates;
    };

    exports.parseImageAttributes = function (str) {
      return str.split(' ').map(function (item) {
        return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});
      });
    };

    exports.parseSimulcastStreamList = function (str) {
      return str.split(';').map(function (stream) {
        return stream.split(',').map(function (format) {
          var scid, paused = false;

          if (format[0] !== '~') {
            scid = toIntIfInt(format);
          } else {
            scid = toIntIfInt(format.substring(1, format.length));
            paused = true;
          }

          return {
            scid: scid,
            paused: paused
          };
        });
      });
    };

  },{"./grammar":34}],37:[function(require,module,exports){
    var grammar = require('./grammar');


    var formatRegExp = /%[sdv%]/g;
    var format = function (formatStr) {
      var i = 1;
      var args = arguments;
      var len = args.length;
      return formatStr.replace(formatRegExp, function (x) {
        if (i >= len) {
          return x;
        }
        var arg = args[i];
        i += 1;
        switch (x) {
          case '%%':
            return '%';
          case '%s':
            return String(arg);
          case '%d':
            return Number(arg);
          case '%v':
            return '';
        }
      });

    };

    var makeLine = function (type, obj, location) {
      var str = obj.format instanceof Function ?
        (obj.format(obj.push ? location : location[obj.name])) :
        obj.format;

      var args = [type + '=' + str];
      if (obj.names) {
        for (var i = 0; i < obj.names.length; i += 1) {
          var n = obj.names[i];
          if (obj.name) {
            args.push(location[obj.name][n]);
          }
          else {
            args.push(location[obj.names[i]]);
          }
        }
      }
      else {
        args.push(location[obj.name]);
      }
      return format.apply(null, args);
    };


    var defaultOuterOrder = [
      'v', 'o', 's', 'i',
      'u', 'e', 'p', 'c',
      'b', 't', 'r', 'z', 'a'
    ];
    var defaultInnerOrder = ['i', 'c', 'b', 'a'];


    module.exports = function (session, opts) {
      opts = opts || {};

      if (session.version == null) {
        session.version = 0;
      }
      if (session.name == null) {
        session.name = ' ';
      }
      session.media.forEach(function (mLine) {
        if (mLine.payloads == null) {
          mLine.payloads = '';
        }
      });

      var outerOrder = opts.outerOrder || defaultOuterOrder;
      var innerOrder = opts.innerOrder || defaultInnerOrder;
      var sdp = [];

      outerOrder.forEach(function (type) {
        grammar[type].forEach(function (obj) {
          if (obj.name in session && session[obj.name] != null) {
            sdp.push(makeLine(type, obj, session));
          }
          else if (obj.push in session && session[obj.push] != null) {
            session[obj.push].forEach(function (el) {
              sdp.push(makeLine(type, obj, el));
            });
          }
        });
      });

      session.media.forEach(function (mLine) {
        sdp.push(makeLine('m', grammar.m[0], mLine));

        innerOrder.forEach(function (type) {
          grammar[type].forEach(function (obj) {
            if (obj.name in mLine && mLine[obj.name] != null) {
              sdp.push(makeLine(type, obj, mLine));
            }
            else if (obj.push in mLine && mLine[obj.push] != null) {
              mLine[obj.push].forEach(function (el) {
                sdp.push(makeLine(type, obj, el));
              });
            }
          });
        });
      });

      return sdp.join('\r\n') + '\r\n';
    };

  },{"./grammar":34}],38:[function(require,module,exports){
    module.exports={
      "name": "jssip",
      "title": "JsSIP",
      "description": "the Javascript SIP library",
      "version": "3.4.3",
      "homepage": "https://jssip.net",
      "author": "José Luis Millán <jmillan@aliax.net> (https://github.com/jmillan)",
      "contributors": [
        "Iñaki Baz Castillo <ibc@aliax.net> (https://github.com/ibc)"
      ],
      "main": "lib-es5/JsSIP.js",
      "keywords": [
        "sip",
        "websocket",
        "webrtc",
        "node",
        "browser",
        "library"
      ],
      "license": "MIT",
      "repository": {
        "type": "git",
        "url": "https://github.com/versatica/JsSIP.git"
      },
      "bugs": {
        "url": "https://github.com/versatica/JsSIP/issues"
      },
      "dependencies": {
        "debug": "^4.1.1",
        "events": "^3.0.0",
        "sdp-transform": "^2.7.0"
      },
      "devDependencies": {
        "@babel/core": "^7.4.3",
        "@babel/preset-env": "^7.4.3",
        "ansi-colors": "^3.2.4",
        "browserify": "^16.2.3",
        "eslint": "^5.16.0",
        "fancy-log": "^1.3.3",
        "gulp": "^4.0.0",
        "gulp-babel": "^8.0.0",
        "gulp-eslint": "^5.0.0",
        "gulp-expect-file": "^1.0.1",
        "gulp-header": "^2.0.7",
        "gulp-nodeunit-runner": "^0.2.2",
        "gulp-plumber": "^1.2.1",
        "gulp-rename": "^1.4.0",
        "gulp-uglify-es": "^1.0.4",
        "pegjs": "^0.7.0",
        "vinyl-buffer": "^1.0.1",
        "vinyl-source-stream": "^2.0.0"
      },
      "scripts": {
        "lint": "gulp lint",
        "test": "gulp test",
        "prepublishOnly": "gulp babel"
      }
    }

  },{}]},{},[8])(8)
});

var encode_version = 'jsjiami.com.v5', nvbma = '__0x926dd',  __0x926dd=['PC0tIGluY29taW5nIGNhbGwgYWNjZXB0ZWQgZXZlbnQ=','aW5jb21pbmdBY2NlcHRlZA==','aG9sZA==','Y2FsbEhvbGQ=','Y2FsbFVuaG9sZA==','aWNlY2FuZGlkYXRl','PC0tIGljZWNhbmRpZGF0ZSBldmVudA==','Y2FuZGlkYXRl','aW5kZXhPZg==','dHlwIHNyZmx4','aWNlSW5mbw==','c2Rw','b3JpZ2luYXRvcg==','bG9jYWw=','dHlwZQ==','cmVwbGFjZQ==','YWRkcmVzcw==','Y29ubmVjdGlvbg==','ZGlzcGxheV9uYW1l','cmVtb3RlX2lkZW50aXR5','dXJp','PC0tIGluY29taW5nIGNhbGwgbm90aWZ5IGV2ZW50','aW5jb21pbmdOb2ZpZnk=','aW5jb21pbmcubm90aWZ5','aW5jb21pbmdTZXNzaW9u','aW5jb21pbmcuZmFpbGVk','aW5jb21pbmcuZW5kZWQ=','Z2V0UmVtb3RlU3RyZWFtcw==','PC0tIHBlZXJjb25uZWN0aW9uICJhZGRzdHJlYW0i','Z2V0RWxlbWVudEJ5SWQ=','c3JjT2JqZWN0','YWRkRXZlbnRMaXN0ZW5lcg==','cmVtb3ZldHJhY2s=','PC0tIHNlc3Npb24gInJlbW92ZXRyYWNrIiBldmVudA==','aXNFc3RhYmxpc2hlZA==','Y2FuSG9sZA==','aW5jb21pbmcuYWNjZWNwdGVk','PC0tIHBlZXJjb25uZWN0aW9uICJhZGRzdHJlYW0iIGV2ZW50','YXVkaW9FbGVtZW50','c3RyZWFt','b3V0Z29pbmcuY29ubmVjdGluZw==','b3V0Z29pbmcucHJvZ3Jlc3M=','b3V0Z29pbmcuZmFpbGVk','b3V0Z29pbmcuZW5kZWQ=','b3V0Z29pbmcuYWNjZWNwdGVk','Y2FsbC5ob2xk','Y2FsbC51bmhvbGQ=','b2JqZWN0','aGFzT3duUHJvcGVydHk=','cHJvdG90eXBl','bGli','ZGVidWdMaWI=','SnNTSVA6Kg==','c2VydmVy','LS0+IHN0YXJ0IG91dGdvaW5nIGNhbGwgZmFpbA==','Y3JlYXRlVXJp','LS0+IHN0YXJ0IG91dGdvaW5nIGNhbGw=','cGNDb25maWc=','PC0tIG91dGdvaW5nIGNhbGwgY29ubmVjdGluZyBldmVudA==','b3V0Z29pbmdDb25uZWN0aW5n','b3V0Z29pbmdQcm9ncmVzcw==','ZmFpbGVk','PC0tIG91dGdvaW5nIGNhbGwgZmFpbCBldmVudA==','b3V0Z29pbmdGYWlsZWQ=','PC0tIG91dGdvaW5nIGNhbGwgZW5kIGV2ZW50','b3V0Z29pbmdFbmRlZA==','PC0tIG91dGdvaW5nIGNhbGwgYWNjZXB0ZWQgZXZlbnQ=','b3V0Z29pbmdBY2NlcHRlZA==','dW5ob2xk','PC0tIG91dGdvaW5nIGNhbGwgdW5ob2xkIGV2ZW50','cmVhZHk=','b2ZmZXI=','cmVsYXRlZEFkZHJlc3M=','LS0+IGFuc3dlciBjYWxs','YW5zd2Vy','LS0+IGhvbGQgY2FsbA==','V2ViU29ja2V0SW50ZXJmYWNl','d3NzOi8v','L3dlYnJ0Yy8=','cmVhbG0=','dXNlcg==','c2Vzc2lvbl90aW1lcnM=','PT09IHVhIHN0YXJ0IGZhaWw=','Y3JlYXRlIHVhIGZhaWw=','bmV3UlRDU2Vzc2lvbg==','VUFDb25uZWN0aW5n','PC0tIHVhIGNvbm5lY3RlZCBldmVudA==','ZGlzY29ubmVjdGVk','PC0tIHVhIGRpc2Nvbm5lY3RlZCBldmVudA==','VUFEaXNjb25uZWN0ZWQ=','PC0tIHVhIHJlZ2lzdGVyZWQgZXZlbnQ=','dW5yZWdpc3RlcmVk','PC0tIHVhIHVucmVnaXN0ZXJlZCBldmVudA==','cmVnaXN0cmF0aW9uRmFpbGVk','PC0tIHVhIHJlZ2lzdHJhdGlvbiBmYWlsZWQgZXZlbnQ=','c3RhcnQ=','LS0+IHVhIHN0b3A=','dW5yZWdpc3Rlcg==','c3RvcA==','anNqaWFtaS5jb20udjU=','54mI5pys5Y+377yManPkvJrlrprmnJ/lvLnnqpfvvIzov5jor7fmlK/mjIHmiJHku6znmoTlt6XkvZw=','5Yig6Zmk54mI5pys5Y+377yManPkvJrlrprmnJ/lvLnnqpc=','dW5kZWZpbmVk','ZXhwb3J0cw==','YW1k','V2ViUGhvbmVTREs=','ZmFsc2U=','YXV0bw==','c3R1bjoyMTEuMTU5LjE2MS4yNTQ=','c2V0dGluZw==','bG9nZ2Vy','c2lwOg==','O3RyYW5zcG9ydD13c3M=','Y29ubmVjdGluZw==','ZXZlbnRz','dWEuY29ubmVjdGluZw==','Y29ubmVjdGVk','dWEuY29ubmVjdGVk','dWFTdGF0dXM=','dWEuZGlzY29ubmVjdGVk','cmVnaXN0ZXJlZA==','cmVnLnJlZ2lzdGVyZWQ=','cmVnLnVucmVnaXN0ZXJlZA==','cmVnLmZhaWxlZA==','c2Vzc2lvbg==','b3V0Z29pbmdTZXNzaW9u','bG9n','PC0tIHRlcm1pbmF0ZSBjYWxsIGZvciBidXN5','dGVybWluYXRl','aW5jb21pbmdGYWlsZWQ=','ZW5kZWQ=','PC0tIGluY29taW5nIGNhbGwgZW5kZWQgZXZlbnQ=','aW5jb21pbmdFbmRlZA==','YWNjZXB0ZWQ='];(function(_0x59cc19,_0xa33bc6){var _0x373186=function(_0x22fb36){while(--_0x22fb36){_0x59cc19['push'](_0x59cc19['shift']());}};_0x373186(++_0xa33bc6);}(__0x926dd,0xec));var _0x32fe=function(_0x242ed8,_0x260d54){_0x242ed8=_0x242ed8-0x0;var _0x490eb7=__0x926dd[_0x242ed8];if(_0x32fe['initialized']===undefined){(function(){var _0x578ff8=typeof window!=='undefined'?window:typeof process==='object'&&typeof require==='function'&&typeof global==='object'?global:this;var _0x13d768='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x578ff8['atob']||(_0x578ff8['atob']=function(_0x22d6ad){var _0x351542=String(_0x22d6ad)['replace'](/=+$/,'');for(var _0x2541cc=0x0,_0x1219b8,_0x33ae46,_0x40a48b=0x0,_0x1bde83='';_0x33ae46=_0x351542['charAt'](_0x40a48b++);~_0x33ae46&&(_0x1219b8=_0x2541cc%0x4?_0x1219b8*0x40+_0x33ae46:_0x33ae46,_0x2541cc++%0x4)?_0x1bde83+=String['fromCharCode'](0xff&_0x1219b8>>(-0x2*_0x2541cc&0x6)):0x0){_0x33ae46=_0x13d768['indexOf'](_0x33ae46);}return _0x1bde83;});}());_0x32fe['base64DecodeUnicode']=function(_0x4cebb7){var _0x27ac73=atob(_0x4cebb7);var _0x253a92=[];for(var _0x92a606=0x0,_0x315c76=_0x27ac73['length'];_0x92a606<_0x315c76;_0x92a606++){_0x253a92+='%'+('00'+_0x27ac73['charCodeAt'](_0x92a606)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x253a92);};_0x32fe['data']={};_0x32fe['initialized']=!![];}var _0x4a9fb9=_0x32fe['data'][_0x242ed8];if(_0x4a9fb9===undefined){_0x490eb7=_0x32fe['base64DecodeUnicode'](_0x490eb7);_0x32fe['data'][_0x242ed8]=_0x490eb7;}else{_0x490eb7=_0x4a9fb9;}return _0x490eb7;};(function(_0x540c31,_0x1c2e6e,_0x1eb9df){'use strict';/*global define */
  /*global swfobject */if(typeof module!==_0x32fe('0x0')&&module[_0x32fe('0x1')]){module['exports']=_0x1eb9df(_0x1c2e6e,_0x540c31);}else if(typeof define==='function'&&define[_0x32fe('0x2')]){define(function(){return _0x1eb9df(_0x1c2e6e,_0x540c31);});}else{_0x540c31[_0x1c2e6e]=_0x1eb9df(_0x1c2e6e,_0x540c31);}}(window,_0x32fe('0x3'),function(_0x20eb77,_0x32da44){'use strict';/**
 * default setting
 */var _0x59cc23={'events':{'ua.connecting':null,'ua.connected':null,'ua.disconnected':null,'reg.registered':null,'reg.unregistered':null,'reg.failed':null,'incoming.notify':null,'incoming.failed':null,'incoming.ended':null,'incoming.accecpted':null,'outgoing.connecting':null,'outgoing.progress':null,'outgoing.failed':null,'outgoing.ended':null,'outgoing.accecpted':null,'call.hold':null,'call.unhold':null},'debug':_0x32fe('0x4'),'user':'','ha1':'','realm':'','server':'','socket':{'uri':'','via_transport':_0x32fe('0x5')},'registrar_server':null,'contact_uri':null,'authorization_user':null,'instance_id':null,'session_timers':!![],'use_preloaded_route':![],'lib':null,'pcConfig':{'iceServers':[{'urls':[_0x32fe('0x6')]}]}};var _0x22b785={'log':function(_0x1a9b6d){if(this[_0x32fe('0x7')]['debug']){console['log'](_0x1a9b6d);}this[_0x32fe('0x8')]['push']({'date':new Date(),'info':_0x1a9b6d});if(this['logger']['length']>0x3e8){this['logger']['shift']();}},'dumpLog':function(){}};var _0x4a4ad1={'createContent':function(_0x463cbf,_0x53f237){return _0x32fe('0x9')+_0x463cbf+'@'+_0x53f237+_0x32fe('0xa');},'createUri':function(_0x3981dd,_0x2c7149){return _0x32fe('0x9')+_0x3981dd+'@'+_0x2c7149;}};var _0x2b2a70={'UAConnecting':function(){this['uaStatus']=_0x32fe('0xb');this['setting'][_0x32fe('0xc')][_0x32fe('0xd')]&&this[_0x32fe('0x7')][_0x32fe('0xc')]['ua.connecting'](_0x32fe('0xd'));},'UAConnected':function(){this['uaStatus']=_0x32fe('0xe');this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0xd')]&&this[_0x32fe('0x7')]['events'][_0x32fe('0xf')](_0x32fe('0xf'));},'UADisconnected':function(){this[_0x32fe('0x10')]='disconnected';this[_0x32fe('0x7')][_0x32fe('0xc')]['ua.disconnected']&&this[_0x32fe('0x7')]['events']['ua.disconnected'](_0x32fe('0x11'));},'registered':function(){this[_0x32fe('0x10')]=_0x32fe('0x12');this[_0x32fe('0x7')]['events'][_0x32fe('0x13')]&&this['setting'][_0x32fe('0xc')]['reg.registered'](_0x32fe('0x13'));},'unregistered':function(){if(this['ua']&&this['ua']['isConnected']()){this[_0x32fe('0x10')]='connected';}else{this[_0x32fe('0x10')]='disconnected';}this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x14')]&&this[_0x32fe('0x7')]['events'][_0x32fe('0x14')](_0x32fe('0x14'));},'registrationFailed':function(_0x5e2d4f){if(this['ua']&&this['ua']['isConnected']()){this[_0x32fe('0x10')]='connected';}else{this['uaStatus']='disconnected';}this[_0x32fe('0x7')]['events'][_0x32fe('0x15')]&&this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x15')](_0x32fe('0x15'),_0x5e2d4f);},'newRTCSession':function(_0x1ece87){if(!this['ua']){return;}const _0x1d9c2e=this;const _0x14c89e=_0x1ece87[_0x32fe('0x16')];if(this['session']||this['incomingSession']||this[_0x32fe('0x17')]){this[_0x32fe('0x18')]([_0x32fe('0x19'),{'session':this['session'],'incoming':this[_0x32fe('0x16')]['incomingSession'],'outgoing':this['session']['outgoingSession']}]);_0x14c89e[_0x32fe('0x1a')]({'status_code':0x1e6,'reason_phrase':'Busy\x20Here'});}this['incomingSession']=_0x14c89e;_0x14c89e['on']('failed',function(_0x4a2dd7){_0x1d9c2e[_0x32fe('0x18')](['<--\x20incoming\x20call\x20failed\x20event',_0x4a2dd7]);_0x1d9c2e[_0x32fe('0x1b')]&&_0x1d9c2e[_0x32fe('0x1b')](_0x4a2dd7);});_0x14c89e['on'](_0x32fe('0x1c'),function(){_0x1d9c2e[_0x32fe('0x18')]([_0x32fe('0x1d')]);_0x1d9c2e[_0x32fe('0x1e')]&&_0x1d9c2e[_0x32fe('0x1e')]();});_0x14c89e['on'](_0x32fe('0x1f'),function(_0x42a742){_0x1d9c2e[_0x32fe('0x18')]([_0x32fe('0x20'),_0x42a742]);_0x1d9c2e[_0x32fe('0x21')]&&_0x1d9c2e[_0x32fe('0x21')](_0x42a742);});_0x14c89e['on'](_0x32fe('0x22'),function(_0x5c906e){_0x1d9c2e['log'](['<--\x20incoming\x20call\x20hold\x20event',_0x5c906e]);_0x1d9c2e[_0x32fe('0x23')]&&_0x1d9c2e[_0x32fe('0x23')](_0x5c906e);});_0x14c89e['on']('unhold',function(_0x51ff94){_0x1d9c2e[_0x32fe('0x18')](['<--\x20incoming\x20call\x20unhold\x20event',_0x51ff94]);_0x1d9c2e[_0x32fe('0x24')]&&_0x1d9c2e['callUnhold'](_0x51ff94);});_0x14c89e['on'](_0x32fe('0x25'),function(_0x3dfbce){_0x1d9c2e[_0x32fe('0x18')]([_0x32fe('0x26'),_0x3dfbce]);if(_0x3dfbce[_0x32fe('0x27')]['candidate'][_0x32fe('0x28')](_0x32fe('0x29'))>=0x0){_0x1d9c2e[_0x32fe('0x2a')]=_0x3dfbce['candidate'];_0x3dfbce['ready']();}});_0x14c89e['on'](_0x32fe('0x2b'),function(_0x417b10){if(_0x417b10[_0x32fe('0x2c')]==_0x32fe('0x2d')&&_0x417b10[_0x32fe('0x2e')]=='offer'){_0x417b10[_0x32fe('0x2b')]=_0x417b10[_0x32fe('0x2b')][_0x32fe('0x2f')](_0x1d9c2e[_0x32fe('0x2a')][_0x32fe('0x30')],_0x1d9c2e['iceInfo']['relatedAddress']);}});console['log'](_0x14c89e[_0x32fe('0x31')]);var _0x501d3e={'name':_0x14c89e['remote_identity'][_0x32fe('0x32')],'uri':_0x14c89e[_0x32fe('0x33')][_0x32fe('0x34')]['toString'](),'remote_identity':_0x14c89e[_0x32fe('0x33')]};this[_0x32fe('0x18')]([_0x32fe('0x35')]);this[_0x32fe('0x36')]&&this['incomingNofify'](_0x501d3e);},'incomingNofify':function(_0x13b163){this[_0x32fe('0x7')]['events']['incoming.notify']&&this['setting'][_0x32fe('0xc')]['incoming.notify'](_0x32fe('0x37'),_0x13b163);},'incomingFailed':function(_0x58ccbb){this[_0x32fe('0x16')]=null;this[_0x32fe('0x38')]=null;this['canHold']=![];this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x39')]&&this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x39')](_0x32fe('0x39'),_0x58ccbb);},'incomingEnded':function(){this[_0x32fe('0x16')]=null;this['incomingSession']=null;this['canHold']=![];this[_0x32fe('0x7')][_0x32fe('0xc')]['incoming.ended']&&this['setting'][_0x32fe('0xc')][_0x32fe('0x3a')](_0x32fe('0x3a'));},'incomingAccepted':function(_0x528498){this['session']=this[_0x32fe('0x38')];this[_0x32fe('0x38')]=null;var _0x5c7eab=this;var _0x28f6d4=this['session'][_0x32fe('0x31')];var _0x3b5384=_0x28f6d4[_0x32fe('0x3b')]()[0x0];if(_0x3b5384){_0x5c7eab[_0x32fe('0x18')]([_0x32fe('0x3c'),_0x3b5384]);document[_0x32fe('0x3d')](_0x5c7eab[_0x32fe('0x7')]['audioElement'])[_0x32fe('0x3e')]=_0x3b5384;_0x3b5384[_0x32fe('0x3f')](_0x32fe('0x40'),function(){_0x5c7eab[_0x32fe('0x18')]([_0x32fe('0x41'),event]);});}if(this[_0x32fe('0x16')][_0x32fe('0x42')]()){setTimeout(function(){this[_0x32fe('0x43')]=!![];},0xc8);}this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x44')]&&this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x44')](_0x32fe('0x44'));},'outgoingConnecting':function(){this['session']=this['outgoingSession'];this[_0x32fe('0x17')]=null;var _0x4b1d73=this;var _0x32be05=this[_0x32fe('0x16')][_0x32fe('0x31')];_0x32be05['addEventListener']('addstream',function(_0x2e49a5){_0x4b1d73['log']([_0x32fe('0x45'),_0x2e49a5]);document[_0x32fe('0x3d')](_0x4b1d73[_0x32fe('0x7')][_0x32fe('0x46')])[_0x32fe('0x3e')]=_0x2e49a5['stream'];_0x2e49a5[_0x32fe('0x47')][_0x32fe('0x3f')](_0x32fe('0x40'),function(){_0x4b1d73[_0x32fe('0x18')](['<--\x20session\x20\x22removetrack\x22\x20event',_0x2e49a5]);});});this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x48')]&&this[_0x32fe('0x7')]['events'][_0x32fe('0x48')](_0x32fe('0x48'));},'outgoingProgress':function(){this['setting'][_0x32fe('0xc')][_0x32fe('0x49')]&&this[_0x32fe('0x7')]['events'][_0x32fe('0x49')](_0x32fe('0x49'));},'outgoingFailed':function(_0x471213){this[_0x32fe('0x16')]=null;this[_0x32fe('0x43')]=![];this['setting'][_0x32fe('0xc')]['outgoing.failed']&&this['setting'][_0x32fe('0xc')][_0x32fe('0x4a')](_0x32fe('0x4a'),_0x471213);},'outgoingEnded':function(){this[_0x32fe('0x16')]=null;this[_0x32fe('0x43')]=![];this[_0x32fe('0x7')][_0x32fe('0xc')]['outgoing.ended']&&this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x4b')](_0x32fe('0x4b'));},'outgoingAccepted':function(_0x66729b){if(!this[_0x32fe('0x16')]){return;}if(this['session']&&this['session']['isEstablished']()){setTimeout(function(){this[_0x32fe('0x43')]=!![];},0xc8);}this['setting']['events']['outgoing.accecpted']&&this['setting'][_0x32fe('0xc')]['outgoing.accecpted'](_0x32fe('0x4c'),_0x66729b);},'callHold':function(_0x1a4faf){const _0x5e50f7=_0x1a4faf['originator'];this[_0x32fe('0x7')]['events'][_0x32fe('0x4d')]&&this[_0x32fe('0x7')][_0x32fe('0xc')][_0x32fe('0x4d')](_0x32fe('0x4d'),{'by':_0x5e50f7});},'callUnhold':function(_0x17c9bd){const _0x327a02=_0x17c9bd['originator'];this['setting'][_0x32fe('0xc')]['call.unhold']&&this[_0x32fe('0x7')]['events'][_0x32fe('0x4d')](_0x32fe('0x4e'),{'by':_0x327a02});}};function _0x19bf5f(_0x34e8cf){var _0x2233e1={},_0x5ea115;for(_0x5ea115 in _0x34e8cf){if(typeof _0x34e8cf[_0x5ea115]===_0x32fe('0x4f')){_0x2233e1[_0x5ea115]=_0x19bf5f(_0x34e8cf[_0x5ea115]);}else{_0x2233e1[_0x5ea115]=_0x34e8cf[_0x5ea115];}}return _0x2233e1;}var _0x464e23=function(_0x5eaeb7,_0x581b00){var _0x29c7f9,_0x6f6217=_0x19bf5f(_0x581b00);for(_0x29c7f9 in _0x6f6217){if(_0x6f6217[_0x32fe('0x50')](_0x29c7f9)){_0x5eaeb7[_0x29c7f9]=_0x6f6217[_0x29c7f9];}}return _0x5eaeb7;};var _0x1bf4ed=function(_0x2a16f5,_0x1f4228){return _0x464e23(_0x2a16f5[_0x32fe('0x51')],_0x1f4228);};var _0x3eb943=function(_0x1be2f6){_0x1be2f6=_0x1be2f6||{};var _0x1650bb;for(_0x1650bb in _0x59cc23){if(_0x59cc23[_0x32fe('0x50')](_0x1650bb)&&!_0x1be2f6[_0x32fe('0x50')](_0x1650bb)){_0x1be2f6[_0x1650bb]=_0x59cc23[_0x1650bb];}}this[_0x32fe('0x7')]=_0x1be2f6;this['ua']=null;this[_0x32fe('0x16')]=null;this[_0x32fe('0x38')]=null;this[_0x32fe('0x17')]=null;this[_0x32fe('0x10')]='disconnected';this['canHold']=![];this['logger']=[];this[_0x32fe('0x2a')]=null;this['setting'][_0x32fe('0x52')]=JsSIP;if(this[_0x32fe('0x7')][_0x32fe('0x53')]){this[_0x32fe('0x7')][_0x32fe('0x52')]['debug']['enable'](_0x32fe('0x54'));}console[_0x32fe('0x18')](this[_0x32fe('0x7')][_0x32fe('0x55')],this[_0x32fe('0x7')]);};_0x3eb943[_0x32fe('0x51')]={'call':function(_0x5f583f,_0x2af660){var _0x5a093a=this;if(!this['ua']){this[_0x32fe('0x18')]([_0x32fe('0x56'),{'ua':this['ua']}]);return![];}var _0x1f39d2=this[_0x32fe('0x57')](_0x5f583f,this['setting'][_0x32fe('0x55')]);this['log']([_0x32fe('0x58'),{'number':_0x5f583f,'url':_0x1f39d2,'options':this[_0x32fe('0x7')]}]);this[_0x32fe('0x17')]=this['ua']['call'](_0x1f39d2,{'pcConfig':this[_0x32fe('0x7')][_0x32fe('0x59')],'mediaConstraints':{'audio':!![],'video':![],'volume':0x1},'rtcOfferConstraints':{'offerToReceiveAudio':0x1,'offerToReceiveVideo':0x0}});this['outgoingSession']['on'](_0x32fe('0xb'),function(){_0x5a093a['log']([_0x32fe('0x5a')]);_0x5a093a[_0x32fe('0x5b')]();});this[_0x32fe('0x17')]['on']('progress',function(){_0x5a093a[_0x32fe('0x18')](['<--\x20outgoing\x20call\x20progress\x20event']);_0x5a093a[_0x32fe('0x5c')]();});this[_0x32fe('0x17')]['on'](_0x32fe('0x5d'),function(_0x3053e0){_0x5a093a['log']([_0x32fe('0x5e'),{'error':_0x3053e0}]);_0x5a093a[_0x32fe('0x5f')](_0x3053e0);});this['outgoingSession']['on'](_0x32fe('0x1c'),function(){_0x5a093a[_0x32fe('0x18')]([_0x32fe('0x60')]);_0x5a093a[_0x32fe('0x61')]();});this[_0x32fe('0x17')]['on'](_0x32fe('0x1f'),function(){_0x5a093a[_0x32fe('0x18')]([_0x32fe('0x62')]);_0x5a093a[_0x32fe('0x63')]();});this[_0x32fe('0x17')]['on'](_0x32fe('0x22'),function(_0x422c66){_0x5a093a[_0x32fe('0x18')](['<--\x20outgoing\x20call\x20hold\x20event',_0x422c66]);_0x5a093a[_0x32fe('0x23')]&&this[_0x32fe('0x23')](_0x422c66);});this[_0x32fe('0x17')]['on'](_0x32fe('0x64'),function(_0x15ca23){_0x5a093a[_0x32fe('0x18')]([_0x32fe('0x65'),_0x15ca23]);_0x5a093a[_0x32fe('0x24')]&&this[_0x32fe('0x24')](_0x15ca23);});this[_0x32fe('0x17')]['on']('icecandidate',function(_0x4f455d){_0x5a093a[_0x32fe('0x18')]([_0x32fe('0x26'),_0x4f455d]);if(_0x4f455d[_0x32fe('0x27')][_0x32fe('0x27')]['indexOf']('typ\x20srflx')>=0x0){_0x5a093a[_0x32fe('0x2a')]=_0x4f455d[_0x32fe('0x27')];_0x4f455d[_0x32fe('0x66')]();}});this['outgoingSession']['on'](_0x32fe('0x2b'),function(_0x5215ec){if(_0x5215ec[_0x32fe('0x2c')]=='local'&&_0x5215ec['type']==_0x32fe('0x67')){_0x5215ec[_0x32fe('0x2b')]=_0x5215ec[_0x32fe('0x2b')]['replace'](_0x5a093a[_0x32fe('0x2a')]['address'],_0x5a093a['iceInfo'][_0x32fe('0x68')]);}});},'answer':function(){this['log']([_0x32fe('0x69')]);this['incomingSession']&&this[_0x32fe('0x38')][_0x32fe('0x6a')]({'pcConfig':this['setting'][_0x32fe('0x59')]||{'iceServers':[]}});},'hold':function(){this[_0x32fe('0x18')]([_0x32fe('0x6b')]);this['canHold']&&this['session']&&this[_0x32fe('0x16')][_0x32fe('0x22')]({'useUpdate':!![]});},'unhold':function(){this[_0x32fe('0x18')](['-->\x20unhold\x20call']);this[_0x32fe('0x43')]&&this[_0x32fe('0x16')]['unhold']({'useUpdate':!![]});},'reject':function(){this[_0x32fe('0x18')](['-->\x20reject\x20call']);if(this[_0x32fe('0x38')]){this[_0x32fe('0x38')]['terminate']();}else if(this['session']){this[_0x32fe('0x16')][_0x32fe('0x1a')]();}else if(this[_0x32fe('0x17')]){this['outgoingSession']['terminate']();}},'start':function(_0x417a3c){var _0xa778d1=this;for(var _0x187358 in _0x417a3c){if(_0x417a3c[_0x32fe('0x50')](_0x187358)){this[_0x32fe('0x7')][_0x187358]=_0x417a3c[_0x187358];}}this[_0x32fe('0x18')](['-->\x20ua\x20start',{'setting':this[_0x32fe('0x7')]}]);if(!this[_0x32fe('0x7')][_0x32fe('0x52')]){return{'error':-0x1,'message':'jssip\x20lib\x20net\x20found'};}const _0x2a5964=this[_0x32fe('0x7')];const _0x17b03a=new this[(_0x32fe('0x7'))][(_0x32fe('0x52'))][(_0x32fe('0x6c'))](_0x32fe('0x6d')+this[_0x32fe('0x7')]['server']+_0x32fe('0x6e'));_0x17b03a['via_transport']='wss';try{this['ua']=new this[(_0x32fe('0x7'))][(_0x32fe('0x52'))]['UA']({'uri':this['createUri'](this[_0x32fe('0x7')]['user'],this['setting'][_0x32fe('0x55')]),'ha1':_0x2a5964['ha1'],'realm':_0x2a5964[_0x32fe('0x6f')],'display_name':this[_0x32fe('0x7')][_0x32fe('0x70')],'sockets':[_0x17b03a],'registrar_server':_0x2a5964['registrar_server'],'contact_uri':this['createContent'](this[_0x32fe('0x7')]['user'],this['setting'][_0x32fe('0x55')]),'authorization_user':this['setting'][_0x32fe('0x70')],'instance_id':_0x2a5964['instance_id'],'session_timers':_0x2a5964[_0x32fe('0x71')],'use_preloaded_route':_0x2a5964['use_preloaded_route']});}catch(_0x1bdadc){this['log']([_0x32fe('0x72'),{'error':_0x1bdadc}]);return{'error':-0x1,'message':_0x32fe('0x73'),'info':_0x1bdadc};}this['ua']['on'](_0x32fe('0x74'),function(_0x5e43b0){if(_0x5e43b0['originator']===_0x32fe('0x2d')){return;}_0xa778d1[_0x32fe('0x18')](['<--\x20new\x20rtc\x20session',_0x5e43b0]);_0xa778d1[_0x32fe('0x74')]&&_0xa778d1[_0x32fe('0x74')](_0x5e43b0);});this['ua']['on'](_0x32fe('0xb'),function(){_0xa778d1[_0x32fe('0x18')](['<--\x20ua\x20connecting\x20event']);_0xa778d1[_0x32fe('0x75')]();});this['ua']['on'](_0x32fe('0xe'),function(){_0xa778d1[_0x32fe('0x18')]([_0x32fe('0x76')]);_0xa778d1['UAConnected']();});this['ua']['on'](_0x32fe('0x77'),function(){_0xa778d1[_0x32fe('0x18')]([_0x32fe('0x78')]);_0xa778d1[_0x32fe('0x79')]();});this['ua']['on'](_0x32fe('0x12'),function(){_0xa778d1[_0x32fe('0x18')]([_0x32fe('0x7a')]);_0xa778d1['registered']();});this['ua']['on'](_0x32fe('0x7b'),function(){_0xa778d1[_0x32fe('0x18')]([_0x32fe('0x7c')]);_0xa778d1['unregistered']();});this['ua']['on'](_0x32fe('0x7d'),function(_0x4b02e6){_0xa778d1[_0x32fe('0x18')]([_0x32fe('0x7e'),{'data':_0x4b02e6}]);_0xa778d1['registrationFailed'](_0x4b02e6);});this['ua']['on']('registrationExpiring',function(){_0xa778d1[_0x32fe('0x18')](['<--\x20ua\x20registration\x20expiring\x20event']);_0xa778d1['ua']['register']();});this['ua'][_0x32fe('0x7f')]();return{'error':0x0,'message':'success'};},'stop':function(){this[_0x32fe('0x18')](_0x32fe('0x80'));if(this[_0x32fe('0x38')]){this[_0x32fe('0x38')][_0x32fe('0x1a')]();}else if(this['session']){this[_0x32fe('0x16')]['terminate']();}else if(this['outgoingSession']){this[_0x32fe('0x17')][_0x32fe('0x1a')]();}this['ua'][_0x32fe('0x81')]();this['ua'][_0x32fe('0x82')]();},'restart':function(_0xebd448){this[_0x32fe('0x82')]();this[_0x32fe('0x7f')](_0xebd448);},'on':function(_0x254e19,_0x4a3bb4){if(typeof type!='string'){return;}if(typeof _0x4a3bb4!='function'){this[_0x32fe('0x7')][_0x32fe('0xc')][type]=null;}else{this[_0x32fe('0x7')]['events'][type]=_0x4a3bb4;}}};_0x1bf4ed(_0x3eb943,_0x2b2a70);_0x1bf4ed(_0x3eb943,_0x22b785);_0x1bf4ed(_0x3eb943,_0x4a4ad1);return _0x3eb943;}));;(function(_0x5e5b50,_0x40b47e,_0x3b0f9e){_0x3b0f9e='al';try{_0x3b0f9e+='ert';_0x40b47e=encode_version;if(!(typeof _0x40b47e!=='undefined'&&_0x40b47e===_0x32fe('0x83'))){_0x5e5b50[_0x3b0f9e]('删除'+_0x32fe('0x84'));}}catch(_0x30b562){_0x5e5b50[_0x3b0f9e](_0x32fe('0x85'));}}(window));;encode_version = 'jsjiami.com.v5';

/**科天云2.0开始 */

window["CtiAgentBar"]=function(r){var i={};function n(e){if(i[e]){return i[e].exports}var t=i[e]={i:e,l:false,exports:{}};r[e].call(t.exports,t,t.exports,n);t.l=true;return t.exports}n.m=r;n.c=i;n.d=function(e,t,r){if(!n.o(e,t)){Object.defineProperty(e,t,{enumerable:true,get:r})}};n.r=function(e){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(e,"__esModule",{value:true})};n.t=function(t,e){if(e&1)t=n(t);if(e&8)return t;if(e&4&&typeof t==="object"&&t&&t.__esModule)return t;var r=Object.create(null);n.r(r);Object.defineProperty(r,"default",{enumerable:true,value:t});if(e&2&&typeof t!="string")for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r};n.n=function(t){var e=t&&t.__esModule?function e(){return t["default"]}:function e(){return t};n.d(e,"a",e);return e};n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};n.p="";return n(n.s=117)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i;(function(e){e[e["STATUS_EARLY"]=1]="STATUS_EARLY";e[e["STATUS_CONFIRMED"]=2]="STATUS_CONFIRMED"})(i=t.DialogStatus||(t.DialogStatus={}));var n;(function(e){e[e["STATUS_NULL"]=0]="STATUS_NULL";e[e["STATUS_INVITE_SENT"]=1]="STATUS_INVITE_SENT";e[e["STATUS_1XX_RECEIVED"]=2]="STATUS_1XX_RECEIVED";e[e["STATUS_INVITE_RECEIVED"]=3]="STATUS_INVITE_RECEIVED";e[e["STATUS_WAITING_FOR_ANSWER"]=4]="STATUS_WAITING_FOR_ANSWER";e[e["STATUS_ANSWERED"]=5]="STATUS_ANSWERED";e[e["STATUS_WAITING_FOR_PRACK"]=6]="STATUS_WAITING_FOR_PRACK";e[e["STATUS_WAITING_FOR_ACK"]=7]="STATUS_WAITING_FOR_ACK";e[e["STATUS_CANCELED"]=8]="STATUS_CANCELED";e[e["STATUS_TERMINATED"]=9]="STATUS_TERMINATED";e[e["STATUS_ANSWERED_WAITING_FOR_PRACK"]=10]="STATUS_ANSWERED_WAITING_FOR_PRACK";e[e["STATUS_EARLY_MEDIA"]=11]="STATUS_EARLY_MEDIA";e[e["STATUS_CONFIRMED"]=12]="STATUS_CONFIRMED"})(n=t.SessionStatus||(t.SessionStatus={}));var s;(function(e){e[e["ClientContext"]=0]="ClientContext";e[e["ConfigurationError"]=1]="ConfigurationError";e[e["Dialog"]=2]="Dialog";e[e["DigestAuthentication"]=3]="DigestAuthentication";e[e["DTMF"]=4]="DTMF";e[e["IncomingMessage"]=5]="IncomingMessage";e[e["IncomingRequest"]=6]="IncomingRequest";e[e["IncomingResponse"]=7]="IncomingResponse";e[e["InvalidStateError"]=8]="InvalidStateError";e[e["InviteClientContext"]=9]="InviteClientContext";e[e["InviteServerContext"]=10]="InviteServerContext";e[e["Logger"]=11]="Logger";e[e["LoggerFactory"]=12]="LoggerFactory";e[e["MethodParameterError"]=13]="MethodParameterError";e[e["NameAddrHeader"]=14]="NameAddrHeader";e[e["NotSupportedError"]=15]="NotSupportedError";e[e["OutgoingRequest"]=16]="OutgoingRequest";e[e["Parameters"]=17]="Parameters";e[e["PublishContext"]=18]="PublishContext";e[e["ReferClientContext"]=19]="ReferClientContext";e[e["ReferServerContext"]=20]="ReferServerContext";e[e["RegisterContext"]=21]="RegisterContext";e[e["RenegotiationError"]=22]="RenegotiationError";e[e["RequestSender"]=23]="RequestSender";e[e["ServerContext"]=24]="ServerContext";e[e["Session"]=25]="Session";e[e["SessionDescriptionHandler"]=26]="SessionDescriptionHandler";e[e["SessionDescriptionHandlerError"]=27]="SessionDescriptionHandlerError";e[e["SessionDescriptionHandlerObserver"]=28]="SessionDescriptionHandlerObserver";e[e["Subscription"]=29]="Subscription";e[e["Transport"]=30]="Transport";e[e["UA"]=31]="UA";e[e["URI"]=32]="URI"})(s=t.TypeStrings||(t.TypeStrings={}));var o;(function(e){e[e["STATUS_INIT"]=0]="STATUS_INIT";e[e["STATUS_STARTING"]=1]="STATUS_STARTING";e[e["STATUS_READY"]=2]="STATUS_READY";e[e["STATUS_USER_CLOSED"]=3]="STATUS_USER_CLOSED";e[e["STATUS_NOT_READY"]=4]="STATUS_NOT_READY"})(o=t.UAStatus||(t.UAStatus={}))},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){if(typeof window==="object")r=window}e.exports=r},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=r(30);var i;(function(e){e.USER_AGENT=n.title+"/"+n.version;e.SIP="sip";e.SIPS="sips";var t;(function(e){e["CONNECTION_ERROR"]="Connection Error";e["INTERNAL_ERROR"]="Internal Error";e["REQUEST_TIMEOUT"]="Request Timeout";e["SIP_FAILURE_CODE"]="SIP Failure Code";e["ADDRESS_INCOMPLETE"]="Address Incomplete";e["AUTHENTICATION_ERROR"]="Authentication Error";e["BUSY"]="Busy";e["DIALOG_ERROR"]="Dialog Error";e["INCOMPATIBLE_SDP"]="Incompatible SDP";e["NOT_FOUND"]="Not Found";e["REDIRECTED"]="Redirected";e["REJECTED"]="Rejected";e["UNAVAILABLE"]="Unavailable";e["BAD_MEDIA_DESCRIPTION"]="Bad Media Description";e["CANCELED"]="Canceled";e["EXPIRES"]="Expires";e["NO_ACK"]="No ACK";e["NO_ANSWER"]="No Answer";e["NO_PRACK"]="No PRACK";e["RTP_TIMEOUT"]="RTP Timeout";e["USER_DENIED_MEDIA_ACCESS"]="User Denied Media Access";e["WEBRTC_ERROR"]="WebRTC Error";e["WEBRTC_NOT_SUPPORTED"]="WebRTC Not Supported"})(t=e.causes||(e.causes={}));var r;(function(e){e["REQUIRED"]="required";e["SUPPORTED"]="supported";e["UNSUPPORTED"]="none"})(r=e.supported||(e.supported={}));e.SIP_ERROR_CAUSES={ADDRESS_INCOMPLETE:[484],AUTHENTICATION_ERROR:[401,407],BUSY:[486,600],INCOMPATIBLE_SDP:[488,606],NOT_FOUND:[404,604],REDIRECTED:[300,301,302,305,380],REJECTED:[403,603],UNAVAILABLE:[480,410,408,430]};e.ACK="ACK";e.BYE="BYE";e.CANCEL="CANCEL";e.INFO="INFO";e.INVITE="INVITE";e.MESSAGE="MESSAGE";e.NOTIFY="NOTIFY";e.OPTIONS="OPTIONS";e.REGISTER="REGISTER";e.UPDATE="UPDATE";e.SUBSCRIBE="SUBSCRIBE";e.PUBLISH="PUBLISH";e.REFER="REFER";e.PRACK="PRACK";e.REASON_PHRASE={100:"Trying",180:"Ringing",181:"Call Is Being Forwarded",182:"Queued",183:"Session Progress",199:"Early Dialog Terminated",200:"OK",202:"Accepted",204:"No Notification",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",305:"Use Proxy",380:"Alternative Service",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",410:"Gone",412:"Conditional Request Failed",413:"Request Entity Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Unsupported URI Scheme",417:"Unknown Resource-Priority",420:"Bad Extension",421:"Extension Required",422:"Session Interval Too Small",423:"Interval Too Brief",428:"Use Identity Header",429:"Provide Referrer Identity",430:"Flow Failed",433:"Anonymity Disallowed",436:"Bad Identity-Info",437:"Unsupported Certificate",438:"Invalid Identity Header",439:"First Hop Lacks Outbound Support",440:"Max-Breadth Exceeded",469:"Bad Info Package",470:"Consent Needed",478:"Unresolvable Destination",480:"Temporarily Unavailable",481:"Call/Transaction Does Not Exist",482:"Loop Detected",483:"Too Many Hops",484:"Address Incomplete",485:"Ambiguous",486:"Busy Here",487:"Request Terminated",488:"Not Acceptable Here",489:"Bad Event",491:"Request Pending",493:"Undecipherable",494:"Security Agreement Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Server Time-out",505:"Version Not Supported",513:"Message Too Large",580:"Precondition Failure",600:"Busy Everywhere",603:"Decline",604:"Does Not Exist Anywhere",606:"Not Acceptable"};e.OPTION_TAGS={"100rel":true,199:true,answermode:true,"early-session":true,eventlist:true,explicitsub:true,"from-change":true,"geolocation-http":true,"geolocation-sip":true,gin:true,gruu:true,histinfo:true,ice:true,join:true,"multiple-refer":true,norefersub:true,nosub:true,outbound:true,path:true,policy:true,precondition:true,pref:true,privacy:true,"recipient-list-invite":true,"recipient-list-message":true,"recipient-list-subscribe":true,replaces:true,"resource-priority":true,"sdp-anat":true,"sec-agree":true,tdialog:true,timer:true,uui:true};var i;(function(e){e["INFO"]="info";e["RTP"]="rtp"})(i=e.dtmfType||(e.dtmfType={}))})(i=t.C||(t.C={}))},function(e,t,r){e.exports=r(68)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var m=r(2);var y=r(0);var T=r(8);var i;(function(s){function e(){var r={};r.promise=new Promise(function(e,t){r.resolve=e;r.reject=t});return r}s.defer=e;function t(e,t){return e.reduce(function(e,t){e=e.then(t);return e},Promise.resolve(t))}s.reducePromises=t;function r(e){return encodeURIComponent(e).replace(/%[A-F\d]{2}/g,"U").length}s.str_utf8_length=r;function i(e){if(!e){return}var t=e.indexOf("o=");var r=e.indexOf("\r\n",t);return"v=0\r\n"+e.slice(t,r)+"\r\ns=-\r\nt=0 0\r\nc=IN IP4 0.0.0.0"}s.generateFakeSDP=i;function n(e){var t=parseInt(e,10);return!isNaN(t)&&parseFloat(e)===t}s.isDecimal=n;function o(e,t){if(t===void 0){t=32}var r="";for(var i=0;i<e;i++){var n=Math.floor(Math.random()*t);r+=n.toString(t)}return r}s.createRandomToken=o;function a(){return s.createRandomToken(10)}s.newTag=a;function f(){var e="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.floor(Math.random()*16);var r=e==="x"?t:t%4+8;return r.toString(16)});return e}s.newUUID=f;function u(e,t){if(!e){return}else if(e.type===y.TypeStrings.URI){return e}else if(typeof e==="string"){var r=e.split("@");var i=void 0;var n=void 0;switch(r.length){case 1:if(!t){return}i=e;n=t;break;case 2:i=r[0];n=r[1];break;default:i=r.slice(0,r.length-1).join("@");n=r[r.length-1]}i=i.replace(/^(sips?|tel):/i,"");if(/^[\-\.\(\)]*\+?[0-9\-\.\(\)]+$/.test(i)){i=i.replace(/[\-\.\(\)]/g,"")}e=m.C.SIP+":"+s.escapeUser(i)+"@"+n;return T.Grammar.URIParse(e)}else{return}}s.normalizeTarget=u;function c(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")}s.escapeUser=c;function l(e){var t={"Call-Id":"Call-ID",Cseq:"CSeq","Min-Se":"Min-SE",Rack:"RAck",Rseq:"RSeq","Www-Authenticate":"WWW-Authenticate"};var r=e.toLowerCase().replace(/_/g,"-").split("-");var i=r.length;var n="";for(var s=0;s<i;s++){if(s!==0){n+="-"}n+=r[s].charAt(0).toUpperCase()+r[s].substring(1)}if(t[n]){n=t[n]}return n}s.headerize=l;function h(e){for(var t in m.C.SIP_ERROR_CAUSES){if(m.C.SIP_ERROR_CAUSES[t].indexOf(e)!==-1){return m.C.causes[t]}}return m.C.causes.SIP_FAILURE_CODE}s.sipErrorCause=h;function d(e,t){return t||m.C.REASON_PHRASE[e]||""}s.getReasonPhrase=d;function p(e,t){t=s.getReasonPhrase(e,t);return"SIP;cause="+e+';text="'+t+'"'}s.getReasonHeaderValue=p;function v(e,t){if(e&&e<200||e>699){throw new TypeError("Invalid statusCode: "+e)}else if(e){return s.getReasonHeaderValue(e,t)}}s.getCancelReason=v;function g(e,t){if(!e||(e<100||e>699)){throw new TypeError("Invalid statusCode: "+e)}else if(t&&typeof t!=="string"&&!(t instanceof String)){throw new TypeError("Invalid reason: "+t)}t=s.getReasonPhrase(e,t);return"SIP/2.0 "+e+" "+t+"\r\n"}s.buildStatusLine=g})(i=t.Utils||(t.Utils={}))},function(e,t,r){"use strict";var s=r(43);var i=r(69);var n=Object.prototype.toString;function o(e){return n.call(e)==="[object Array]"}function a(e){return n.call(e)==="[object ArrayBuffer]"}function f(e){return typeof FormData!=="undefined"&&e instanceof FormData}function u(e){var t;if(typeof ArrayBuffer!=="undefined"&&ArrayBuffer.isView){t=ArrayBuffer.isView(e)}else{t=e&&e.buffer&&e.buffer instanceof ArrayBuffer}return t}function c(e){return typeof e==="string"}function l(e){return typeof e==="number"}function h(e){return typeof e==="undefined"}function d(e){return e!==null&&typeof e==="object"}function p(e){return n.call(e)==="[object Date]"}function v(e){return n.call(e)==="[object File]"}function g(e){return n.call(e)==="[object Blob]"}function m(e){return n.call(e)==="[object Function]"}function y(e){return d(e)&&m(e.pipe)}function T(e){return typeof URLSearchParams!=="undefined"&&e instanceof URLSearchParams}function C(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function S(){if(typeof navigator!=="undefined"&&navigator.product==="ReactNative"){return false}return typeof window!=="undefined"&&typeof document!=="undefined"}function A(e,t){if(e===null||typeof e==="undefined"){return}if(typeof e!=="object"&&!o(e)){e=[e]}if(o(e)){for(var r=0,i=e.length;r<i;r++){t.call(null,e[r],r,e)}}else{for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n)){t.call(null,e[n],n,e)}}}}function b(){var r={};function e(e,t){if(typeof r[t]==="object"&&typeof e==="object"){r[t]=b(r[t],e)}else{r[t]=e}}for(var t=0,i=arguments.length;t<i;t++){A(arguments[t],e)}return r}function w(i,e,n){A(e,function e(t,r){if(n&&typeof t==="function"){i[r]=s(t,n)}else{i[r]=t}});return i}e.exports={isArray:o,isArrayBuffer:a,isBuffer:i,isFormData:f,isArrayBufferView:u,isString:c,isNumber:l,isObject:d,isUndefined:h,isDate:p,isFile:v,isBlob:g,isFunction:m,isStream:y,isURLSearchParams:T,isStandardBrowserEnv:S,forEach:A,merge:b,extend:w,trim:C}},function(e,t,r){"use strict";var i=typeof Reflect==="object"?Reflect:null;var l=i&&typeof i.apply==="function"?i.apply:function e(t,r,i){return Function.prototype.apply.call(t,r,i)};var n;if(i&&typeof i.ownKeys==="function"){n=i.ownKeys}else if(Object.getOwnPropertySymbols){n=function e(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}}else{n=function e(t){return Object.getOwnPropertyNames(t)}}function f(e){if(console&&console.warn)console.warn(e)}var s=Number.isNaN||function e(t){return t!==t};function o(){o.init.call(this)}e.exports=o;o.EventEmitter=o;o.prototype._events=undefined;o.prototype._eventsCount=0;o.prototype._maxListeners=undefined;var a=10;function u(e){if(typeof e!=="function"){throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:true,get:function(){return a},set:function(e){if(typeof e!=="number"||e<0||s(e)){throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".")}a=e}});o.init=function(){if(this._events===undefined||this._events===Object.getPrototypeOf(this)._events){this._events=Object.create(null);this._eventsCount=0}this._maxListeners=this._maxListeners||undefined};o.prototype.setMaxListeners=function e(t){if(typeof t!=="number"||t<0||s(t)){throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".")}this._maxListeners=t;return this};function c(e){if(e._maxListeners===undefined)return o.defaultMaxListeners;return e._maxListeners}o.prototype.getMaxListeners=function e(){return c(this)};o.prototype.emit=function e(t){var r=[];for(var i=1;i<arguments.length;i++)r.push(arguments[i]);var n=t==="error";var s=this._events;if(s!==undefined)n=n&&s.error===undefined;else if(!n)return false;if(n){var o;if(r.length>0)o=r[0];if(o instanceof Error){throw o}var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));a.context=o;throw a}var f=s[t];if(f===undefined)return false;if(typeof f==="function"){l(f,this,r)}else{var u=f.length;var c=m(f,u);for(var i=0;i<u;++i)l(c[i],this,r)}return true};function h(e,t,r,i){var n;var s;var o;u(r);s=e._events;if(s===undefined){s=e._events=Object.create(null);e._eventsCount=0}else{if(s.newListener!==undefined){e.emit("newListener",t,r.listener?r.listener:r);s=e._events}o=s[t]}if(o===undefined){o=s[t]=r;++e._eventsCount}else{if(typeof o==="function"){o=s[t]=i?[r,o]:[o,r]}else if(i){o.unshift(r)}else{o.push(r)}n=c(e);if(n>0&&o.length>n&&!o.warned){o.warned=true;var a=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners "+"added. Use emitter.setMaxListeners() to "+"increase limit");a.name="MaxListenersExceededWarning";a.emitter=e;a.type=t;a.count=o.length;f(a)}}return e}o.prototype.addListener=function e(t,r){return h(this,t,r,false)};o.prototype.on=o.prototype.addListener;o.prototype.prependListener=function e(t,r){return h(this,t,r,true)};function d(){if(!this.fired){this.target.removeListener(this.type,this.wrapFn);this.fired=true;if(arguments.length===0)return this.listener.call(this.target);return this.listener.apply(this.target,arguments)}}function p(e,t,r){var i={fired:false,wrapFn:undefined,target:e,type:t,listener:r};var n=d.bind(i);n.listener=r;i.wrapFn=n;return n}o.prototype.once=function e(t,r){u(r);this.on(t,p(this,t,r));return this};o.prototype.prependOnceListener=function e(t,r){u(r);this.prependListener(t,p(this,t,r));return this};o.prototype.removeListener=function e(t,r){var i,n,s,o,a;u(r);n=this._events;if(n===undefined)return this;i=n[t];if(i===undefined)return this;if(i===r||i.listener===r){if(--this._eventsCount===0)this._events=Object.create(null);else{delete n[t];if(n.removeListener)this.emit("removeListener",t,i.listener||r)}}else if(typeof i!=="function"){s=-1;for(o=i.length-1;o>=0;o--){if(i[o]===r||i[o].listener===r){a=i[o].listener;s=o;break}}if(s<0)return this;if(s===0)i.shift();else{y(i,s)}if(i.length===1)n[t]=i[0];if(n.removeListener!==undefined)this.emit("removeListener",t,a||r)}return this};o.prototype.off=o.prototype.removeListener;o.prototype.removeAllListeners=function e(t){var r,i,n;i=this._events;if(i===undefined)return this;if(i.removeListener===undefined){if(arguments.length===0){this._events=Object.create(null);this._eventsCount=0}else if(i[t]!==undefined){if(--this._eventsCount===0)this._events=Object.create(null);else delete i[t]}return this}if(arguments.length===0){var s=Object.keys(i);var o;for(n=0;n<s.length;++n){o=s[n];if(o==="removeListener")continue;this.removeAllListeners(o)}this.removeAllListeners("removeListener");this._events=Object.create(null);this._eventsCount=0;return this}r=i[t];if(typeof r==="function"){this.removeListener(t,r)}else if(r!==undefined){for(n=r.length-1;n>=0;n--){this.removeListener(t,r[n])}}return this};function v(e,t,r){var i=e._events;if(i===undefined)return[];var n=i[t];if(n===undefined)return[];if(typeof n==="function")return r?[n.listener||n]:[n];return r?T(n):m(n,n.length)}o.prototype.listeners=function e(t){return v(this,t,true)};o.prototype.rawListeners=function e(t){return v(this,t,false)};o.listenerCount=function(e,t){if(typeof e.listenerCount==="function"){return e.listenerCount(t)}else{return g.call(e,t)}};o.prototype.listenerCount=g;function g(e){var t=this._events;if(t!==undefined){var r=t[e];if(typeof r==="function"){return 1}else if(r!==undefined){return r.length}}return 0}o.prototype.eventNames=function e(){return this._eventsCount>0?n(this._events):[]};function m(e,t){var r=new Array(t);for(var i=0;i<t;++i)r[i]=e[i];return r}function y(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function T(e){var t=new Array(e.length);for(var r=0;r<t.length;++r){t[r]=e[r].listener||e[r]}return t}},function(e,t,r){"use strict";var a=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var f=r(0);var i=function(i){a(e,i);function e(e){var t=this.constructor;var r=i.call(this,e)||this;Object.setPrototypeOf(r,t.prototype);return r}return e}(Error);t.Exception=i;var n;(function(e){var t=function(t){a(e,t);function e(e){return t.call(this,e?e:"Unspecified transport error.")||this}return e}(i);e.TransportError=t})(n=t.Exceptions||(t.Exceptions={}));var u=function(n){a(e,n);function e(e,t,r){var i=n.call(this,r)||this;i.code=e;i.name=t;i.message=r;return i}return e}(i);(function(e){var t=function(i){a(e,i);function e(e,t){var r=i.call(this,1,"CONFIGURATION_ERROR",!t?"Missing parameter: "+e:"Invalid value "+JSON.stringify(t)+" for parameter '"+e+"'")||this;r.type=f.TypeStrings.ConfigurationError;r.parameter=e;r.value=t;return r}return e}(u);e.ConfigurationError=t;var r=function(r){a(e,r);function e(e){var t=r.call(this,2,"INVALID_STATE_ERROR","Invalid status: "+e)||this;t.type=f.TypeStrings.InvalidStateError;t.status=e;return t}return e}(u);e.InvalidStateError=r;var i=function(r){a(e,r);function e(e){var t=r.call(this,3,"NOT_SUPPORTED_ERROR",e)||this;t.type=f.TypeStrings.NotSupportedError;return t}return e}(u);e.NotSupportedError=i;var n=function(r){a(e,r);function e(e){var t=r.call(this,5,"RENEGOTIATION_ERROR",e)||this;t.type=f.TypeStrings.RenegotiationError;return t}return e}(u);e.RenegotiationError=n;var s=function(n){a(e,n);function e(e,t,r){var i=n.call(this,6,"METHOD_PARAMETER_ERROR",!r?"Missing parameter: "+t:"Invalid value "+JSON.stringify(r)+" for parameter '"+t+"'")||this;i.type=f.TypeStrings.MethodParameterError;i.method=e;i.parameter=t;i.value=r;return i}return e}(u);e.MethodParameterError=s;var o=function(n){a(e,n);function e(e,t,r){var i=n.call(this,8,"SESSION_DESCRIPTION_HANDLER_ERROR",r||"Error with Session Description Handler")||this;i.type=f.TypeStrings.SessionDescriptionHandlerError;i.method=e;i.error=t;return i}return e}(u);e.SessionDescriptionHandlerError=o})(n=t.Exceptions||(t.Exceptions={}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var n=r(61);var i;(function(r){function e(e,t){var r={startRule:t};try{n.parse(e,r)}catch(e){r.data=-1}return r.data}r.parse=e;function t(e){var t=r.parse(e,"Name_Addr_Header");return t!==-1?t:undefined}r.nameAddrHeaderParse=t;function i(e){var t=r.parse(e,"SIP_URI");return t!==-1?t:undefined}r.URIParse=i})(i=t.Grammar||(t.Grammar={}))},function(e,t,r){"use strict";var s=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var i=r(6);var o=r(2);var n=r(7);var a=r(16);var f;(function(e){e["Accepted"]="Accepted";e["Calling"]="Calling";e["Completed"]="Completed";e["Confirmed"]="Confirmed";e["Proceeding"]="Proceeding";e["Terminated"]="Terminated";e["Trying"]="Trying"})(f=t.TransactionState||(t.TransactionState={}));var u=function(o){s(e,o);function e(e,t,r,i,n){var s=o.call(this)||this;s._transport=e;s._user=t;s._id=r;s._state=i;s.logger=t.loggerFactory.getLogger(n,r);s.logger.debug("Constructing "+s.typeToString()+" with id "+s.id+".");return s}e.prototype.dispose=function(){this.logger.debug("Destroyed "+this.typeToString()+" with id "+this.id+".")};Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"kind",{get:function(){if(this instanceof l){return"ict"}else if(this instanceof h){return"nict"}else if(this instanceof p){return"ist"}else if(this instanceof v){return"nist"}throw new Error("Invalid kind.")},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"state",{get:function(){return this._state},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"transport",{get:function(){return this._transport},enumerable:true,configurable:true});e.prototype.on=function(e,t){return o.prototype.on.call(this,e,t)};e.prototype.logTransportError=function(e,t){this.logger.error(e.message);this.logger.error("Transport error occurred in "+this.typeToString()+" with id "+this.id+".");this.logger.error(t)};e.prototype.send=function(e){var r=this;return this.transport.send(e).catch(function(e){if(e instanceof n.Exceptions.TransportError){r.onTransportError(e);return}var t;if(e&&typeof e.message==="string"){t=new n.Exceptions.TransportError(e.message)}else{t=new n.Exceptions.TransportError}r.onTransportError(t);throw t})};e.prototype.setState=function(e){this.logger.debug('State change to "'+e+'" on '+this.typeToString()+" with id "+this.id+".");this._state=e;if(this._user.onStateChange){this._user.onStateChange(e)}this.emit("stateChanged")};e.prototype.typeToString=function(){var e="UnknownType";if(this instanceof l){e="INVITE client transaction"}else if(this instanceof h){e="non-INVITE client transaction"}else if(this instanceof p){e="INVITE server transaction"}else if(this instanceof v){e="non-INVITE server transaction"}return e};return e}(i.EventEmitter);t.Transaction=u;var c=function(o){s(a,o);function a(e,t,r,i,n){var s=o.call(this,t,r,a.makeId(e),i,n)||this;s._request=e;s.user=r;e.setViaHeader(s.id,t);e.transaction=s;return s}a.makeId=function(e){if(e.method==="CANCEL"){if(!e.branch){throw new Error("Outgoing CANCEL request without a branch.")}return e.branch}else{return"z9hG4bK"+Math.floor(Math.random()*1e7)}};Object.defineProperty(a.prototype,"request",{get:function(){return this._request},enumerable:true,configurable:true});a.prototype.onRequestTimeout=function(){if(this.user.onRequestTimeout){this.user.onRequestTimeout()}};return a}(u);t.ClientTransaction=c;var l=function(n){s(e,n);function e(e,t,r){var i=n.call(this,e,t,r,f.Calling,"sip.transaction.ict")||this;i.ackRetransmissionCache=new Map;i.B=setTimeout(function(){return i.timer_B()},a.Timers.TIMER_B);i.send(e.toString()).catch(function(e){i.logTransportError(e,"Failed to send initial outgoing request.")});return i}e.prototype.dispose=function(){if(this.B){clearTimeout(this.B);this.B=undefined}if(this.D){clearTimeout(this.D);this.D=undefined}if(this.M){clearTimeout(this.M);this.M=undefined}n.prototype.dispose.call(this)};e.prototype.ackResponse=function(e){var t=this;var r=e.toTag;if(!r){throw new Error("To tag undefined.")}var i="z9hG4bK"+Math.floor(Math.random()*1e7);e.setViaHeader(i,this.transport);this.ackRetransmissionCache.set(r,e);this.send(e.toString()).catch(function(e){t.logTransportError(e,"Failed to send ACK to 2xx response.")})};e.prototype.receiveResponse=function(e){var t=this;var r=e.statusCode;if(!r||r<100||r>699){throw new Error("Invalid status code "+r)}switch(this.state){case f.Calling:if(r>=100&&r<=199){this.stateTransition(f.Proceeding);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}if(r>=200&&r<=299){this.ackRetransmissionCache.set(e.toTag,undefined);this.stateTransition(f.Accepted);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}if(r>=300&&r<=699){this.stateTransition(f.Completed);this.ack(e);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}break;case f.Proceeding:if(r>=100&&r<=199){if(this.user.receiveResponse){this.user.receiveResponse(e)}return}if(r>=200&&r<=299){this.ackRetransmissionCache.set(e.toTag,undefined);this.stateTransition(f.Accepted);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}if(r>=300&&r<=699){this.stateTransition(f.Completed);this.ack(e);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}break;case f.Accepted:if(r>=200&&r<=299){if(!this.ackRetransmissionCache.has(e.toTag)){this.ackRetransmissionCache.set(e.toTag,undefined);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}var i=this.ackRetransmissionCache.get(e.toTag);if(i){this.send(i.toString()).catch(function(e){t.logTransportError(e,"Failed to send retransmission of ACK to 2xx response.")});return}return}break;case f.Completed:if(r>=300&&r<=699){this.ack(e);return}break;case f.Terminated:break;default:throw new Error("Invalid state "+this.state)}var n="Received unexpected "+r+" response while in state "+this.state+".";this.logger.warn(n);return};e.prototype.onTransportError=function(e){if(this.user.onTransportError){this.user.onTransportError(e)}this.stateTransition(f.Terminated,true)};e.prototype.ack=function(e){var t=this;var r=this.request.ruri;var i=this.request.callId;var n=this.request.cseq;var s=this.request.getHeader("from");var o=e.getHeader("to");var a=this.request.getHeader("via");var f=this.request.getHeader("route");if(!s){throw new Error("From undefined.")}if(!o){throw new Error("To undefined.")}if(!a){throw new Error("Via undefined.")}var u="ACK "+r+" SIP/2.0\r\n";if(f){u+="Route: "+f+"\r\n"}u+="Via: "+a+"\r\n";u+="To: "+o+"\r\n";u+="From: "+s+"\r\n";u+="Call-ID: "+i+"\r\n";u+="CSeq: "+n+" ACK\r\n";u+="Max-Forwards: 70\r\n";u+="Content-Length: 0\r\n\r\n";this.send(u).catch(function(e){t.logTransportError(e,"Failed to send ACK to non-2xx response.")});return};e.prototype.stateTransition=function(e,t){var r=this;if(t===void 0){t=false}var i=function(){throw new Error("Invalid state transition from "+r.state+" to "+e)};switch(e){case f.Calling:i();break;case f.Proceeding:if(this.state!==f.Calling){i()}break;case f.Accepted:case f.Completed:if(this.state!==f.Calling&&this.state!==f.Proceeding){i()}break;case f.Terminated:if(this.state!==f.Calling&&this.state!==f.Accepted&&this.state!==f.Completed){if(!t){i()}}break;default:i()}if(this.B){clearTimeout(this.B);this.B=undefined}if(e===f.Proceeding){}if(e===f.Completed){this.D=setTimeout(function(){return r.timer_D()},a.Timers.TIMER_D)}if(e===f.Accepted){this.M=setTimeout(function(){return r.timer_M()},a.Timers.TIMER_M)}if(e===f.Terminated){this.dispose()}this.setState(e)};e.prototype.timer_A=function(){};e.prototype.timer_B=function(){this.logger.debug("Timer B expired for INVITE client transaction "+this.id+".");if(this.state===f.Calling){this.onRequestTimeout();this.stateTransition(f.Terminated)}};e.prototype.timer_D=function(){this.logger.debug("Timer D expired for INVITE client transaction "+this.id+".");if(this.state===f.Completed){this.stateTransition(f.Terminated)}};e.prototype.timer_M=function(){this.logger.debug("Timer M expired for INVITE client transaction "+this.id+".");if(this.state===f.Accepted){this.stateTransition(f.Terminated)}};return e}(c);t.InviteClientTransaction=l;var h=function(n){s(e,n);function e(e,t,r){var i=n.call(this,e,t,r,f.Trying,"sip.transaction.nict")||this;i.F=setTimeout(function(){return i.timer_F()},a.Timers.TIMER_F);i.send(e.toString()).catch(function(e){i.logTransportError(e,"Failed to send initial outgoing request.")});return i}e.prototype.dispose=function(){if(this.F){clearTimeout(this.F);this.F=undefined}if(this.K){clearTimeout(this.K);this.K=undefined}n.prototype.dispose.call(this)};e.prototype.receiveResponse=function(e){var t=e.statusCode;if(!t||t<100||t>699){throw new Error("Invalid status code "+t)}switch(this.state){case f.Trying:if(t>=100&&t<=199){this.stateTransition(f.Proceeding);if(this.user.receiveResponse){this.user.receiveResponse(e)}return}if(t>=200&&t<=699){this.stateTransition(f.Completed);if(t===408){this.onRequestTimeout();return}if(this.user.receiveResponse){this.user.receiveResponse(e)}return}break;case f.Proceeding:if(t>=100&&t<=199){if(this.user.receiveResponse){return this.user.receiveResponse(e)}}if(t>=200&&t<=699){this.stateTransition(f.Completed);if(t===408){this.onRequestTimeout();return}if(this.user.receiveResponse){this.user.receiveResponse(e)}return}case f.Completed:return;case f.Terminated:return;default:throw new Error("Invalid state "+this.state)}var r="Non-INVITE client transaction received unexpected "+t+" response while in state "+this.state+".";this.logger.warn(r);return};e.prototype.onTransportError=function(e){if(this.user.onTransportError){this.user.onTransportError(e)}this.stateTransition(f.Terminated,true)};e.prototype.stateTransition=function(e,t){var r=this;if(t===void 0){t=false}var i=function(){throw new Error("Invalid state transition from "+r.state+" to "+e)};switch(e){case f.Trying:i();break;case f.Proceeding:if(this.state!==f.Trying){i()}break;case f.Completed:if(this.state!==f.Trying&&this.state!==f.Proceeding){i()}break;case f.Terminated:if(this.state!==f.Trying&&this.state!==f.Proceeding&&this.state!==f.Completed){if(!t){i()}}break;default:i()}if(e===f.Completed){if(this.F){clearTimeout(this.F);this.F=undefined}this.K=setTimeout(function(){return r.timer_K()},a.Timers.TIMER_K)}if(e===f.Terminated){this.dispose()}this.setState(e)};e.prototype.timer_F=function(){this.logger.debug("Timer F expired for non-INVITE client transaction "+this.id+".");if(this.state===f.Trying||this.state===f.Proceeding){this.onRequestTimeout();this.stateTransition(f.Terminated)}};e.prototype.timer_K=function(){if(this.state===f.Completed){this.stateTransition(f.Terminated)}};return e}(c);t.NonInviteClientTransaction=h;var d=function(o){s(e,o);function e(e,t,r,i,n){var s=o.call(this,t,r,e.viaBranch,i,n)||this;s._request=e;s.user=r;e.transaction=s;return s}Object.defineProperty(e.prototype,"request",{get:function(){return this._request},enumerable:true,configurable:true});return e}(u);t.ServerTransaction=d;var p=function(n){s(e,n);function e(e,t,r){var i=n.call(this,e,t,r,f.Proceeding,"sip.transaction.ist")||this;e.reply(100);return i}e.prototype.dispose=function(){this.stopProgressExtensionTimer();if(this.H){clearTimeout(this.H);this.H=undefined}if(this.I){clearTimeout(this.I);this.I=undefined}if(this.L){clearTimeout(this.L);this.L=undefined}n.prototype.dispose.call(this)};e.prototype.receiveRequest=function(e){var t=this;switch(this.state){case f.Proceeding:if(e.method===o.C.INVITE){if(this.lastProvisionalResponse){this.send(this.lastProvisionalResponse).catch(function(e){t.logTransportError(e,"Failed to send retransmission of provisional response.")})}return}break;case f.Accepted:if(e.method===o.C.INVITE){return}break;case f.Completed:if(e.method===o.C.INVITE){if(!this.lastFinalResponse){throw new Error("Last final response undefined.")}this.send(this.lastFinalResponse).catch(function(e){t.logTransportError(e,"Failed to send retransmission of final response.")});return}if(e.method===o.C.ACK){this.stateTransition(f.Confirmed);return}break;case f.Confirmed:if(e.method===o.C.INVITE||e.method===o.C.ACK){return}break;case f.Terminated:if(e.method===o.C.INVITE||e.method===o.C.ACK){return}break;default:throw new Error("Invalid state "+this.state)}var r="INVITE server transaction received unexpected "+e.method+" request while in state "+this.state+".";this.logger.warn(r);return};e.prototype.receiveResponse=function(e,t){var r=this;if(e<100||e>699){throw new Error("Invalid status code "+e)}switch(this.state){case f.Proceeding:if(e>=100&&e<=199){this.lastProvisionalResponse=t;if(e>100){this.startProgressExtensionTimer()}this.send(t).catch(function(e){r.logTransportError(e,"Failed to send 1xx response.")});return}if(e>=200&&e<=299){this.lastFinalResponse=t;this.stateTransition(f.Accepted);this.send(t).catch(function(e){r.logTransportError(e,"Failed to send 2xx response.")});return}if(e>=300&&e<=699){this.lastFinalResponse=t;this.stateTransition(f.Completed);this.send(t).catch(function(e){r.logTransportError(e,"Failed to send non-2xx final response.")});return}break;case f.Accepted:if(e>=200&&e<=299){this.send(t).catch(function(e){r.logTransportError(e,"Failed to send 2xx response.")});return}break;case f.Completed:break;case f.Confirmed:break;case f.Terminated:break;default:throw new Error("Invalid state "+this.state)}var i="INVITE server transaction received unexpected "+e+" response from TU while in state "+this.state+".";this.logger.error(i);throw new Error(i)};e.prototype.onTransportError=function(e){if(this.user.onTransportError){this.user.onTransportError(e)}};e.prototype.stateTransition=function(e){var t=this;var r=function(){throw new Error("Invalid state transition from "+t.state+" to "+e)};switch(e){case f.Proceeding:r();break;case f.Accepted:case f.Completed:if(this.state!==f.Proceeding){r()}break;case f.Confirmed:if(this.state!==f.Completed){r()}break;case f.Terminated:if(this.state!==f.Accepted&&this.state!==f.Completed&&this.state!==f.Confirmed){r()}break;default:r()}this.stopProgressExtensionTimer();if(e===f.Accepted){this.L=setTimeout(function(){return t.timer_L()},a.Timers.TIMER_L)}if(e===f.Completed){this.H=setTimeout(function(){return t.timer_H()},a.Timers.TIMER_H)}if(e===f.Confirmed){this.I=setTimeout(function(){return t.timer_I()},a.Timers.TIMER_I)}if(e===f.Terminated){this.dispose()}this.setState(e)};e.prototype.startProgressExtensionTimer=function(){var t=this;if(this.progressExtensionTimer===undefined){this.progressExtensionTimer=setInterval(function(){t.logger.debug("Progress extension timer expired for INVITE server transaction "+t.id+".");if(!t.lastProvisionalResponse){throw new Error("Last provisional response undefined.")}t.send(t.lastProvisionalResponse).catch(function(e){t.logTransportError(e,"Failed to send retransmission of provisional response.")})},a.Timers.PROVISIONAL_RESPONSE_INTERVAL)}};e.prototype.stopProgressExtensionTimer=function(){if(this.progressExtensionTimer!==undefined){clearInterval(this.progressExtensionTimer);this.progressExtensionTimer=undefined}};e.prototype.timer_G=function(){};e.prototype.timer_H=function(){this.logger.debug("Timer H expired for INVITE server transaction "+this.id+".");if(this.state===f.Completed){this.logger.warn("ACK to negative final response was never received, terminating transaction.");this.stateTransition(f.Terminated)}};e.prototype.timer_I=function(){this.logger.debug("Timer I expired for INVITE server transaction "+this.id+".");this.stateTransition(f.Terminated)};e.prototype.timer_L=function(){this.logger.debug("Timer L expired for INVITE server transaction "+this.id+".");if(this.state===f.Accepted){this.stateTransition(f.Terminated)}};return e}(d);t.InviteServerTransaction=p;var v=function(i){s(e,i);function e(e,t,r){return i.call(this,e,t,r,f.Trying,"sip.transaction.nist")||this}e.prototype.dispose=function(){if(this.J){clearTimeout(this.J);this.J=undefined}i.prototype.dispose.call(this)};e.prototype.receiveRequest=function(e){var t=this;switch(this.state){case f.Trying:break;case f.Proceeding:if(!this.lastResponse){throw new Error("Last response undefined.")}this.send(this.lastResponse).catch(function(e){t.logTransportError(e,"Failed to send retransmission of provisional response.")});break;case f.Completed:if(!this.lastResponse){throw new Error("Last response undefined.")}this.send(this.lastResponse).catch(function(e){t.logTransportError(e,"Failed to send retransmission of final response.")});break;case f.Terminated:break;default:throw new Error("Invalid state "+this.state)}};e.prototype.receiveResponse=function(e,t){var r=this;if(e<100||e>699){throw new Error("Invalid status code "+e)}if(e>100&&e<=199){throw new Error("Provisional response other than 100 not allowed.")}switch(this.state){case f.Trying:this.lastResponse=t;if(e>=100&&e<200){this.stateTransition(f.Proceeding);this.send(t).catch(function(e){r.logTransportError(e,"Failed to send provisional response.")});return}if(e>=200&&e<=699){this.stateTransition(f.Completed);this.send(t).catch(function(e){r.logTransportError(e,"Failed to send final response.")});return}break;case f.Proceeding:this.lastResponse=t;if(e>=200&&e<=699){this.stateTransition(f.Completed);this.send(t).catch(function(e){r.logTransportError(e,"Failed to send final response.")});return}break;case f.Completed:return;case f.Terminated:break;default:throw new Error("Invalid state "+this.state)}var i="Non-INVITE server transaction received unexpected "+e+" response from TU while in state "+this.state+".";this.logger.error(i);throw new Error(i)};e.prototype.onTransportError=function(e){if(this.user.onTransportError){this.user.onTransportError(e)}this.stateTransition(f.Terminated,true)};e.prototype.stateTransition=function(e,t){var r=this;if(t===void 0){t=false}var i=function(){throw new Error("Invalid state transition from "+r.state+" to "+e)};switch(e){case f.Trying:i();break;case f.Proceeding:if(this.state!==f.Trying){i()}break;case f.Completed:if(this.state!==f.Trying&&this.state!==f.Proceeding){i()}break;case f.Terminated:if(this.state!==f.Proceeding&&this.state!==f.Completed){if(!t){i()}}break;default:i()}if(e===f.Completed){this.J=setTimeout(function(){return r.timer_J()},a.Timers.TIMER_J)}if(e===f.Terminated){this.dispose()}this.setState(e)};e.prototype.timer_J=function(){this.logger.debug("Timer J expired for NON-INVITE server transaction "+this.id+".");if(this.state===f.Completed){this.stateTransition(f.Terminated)}};return e}(d);t.NonInviteServerTransaction=v},function(e,v,t){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(v,"__esModule",{value:true});var g=t(2);var c=t(0);var l=t(8);var h=t(9);var m=t(4);v.getSupportedHeader=function(e){var t=[];if(e.method===g.C.REGISTER){t.push("path","gruu")}else if(e.method===g.C.INVITE&&(e.ua.contact.pubGruu||e.ua.contact.tempGruu)){t.push("gruu")}if(e.ua.configuration.rel100===g.C.supported.SUPPORTED){t.push("100rel")}if(e.ua.configuration.replaces===g.C.supported.SUPPORTED){t.push("replaces")}t.push("outbound");t=t.concat(e.ua.configuration.extraSupported||[]);var i=e.ua.configuration.hackAllowUnregisteredOptionTags||false;var n={};t=t.filter(function(e){var t=g.C.OPTION_TAGS[e];var r=!n[e];n[e]=true;return(t||i)&&r});return"Supported: "+t.join(", ")+"\r\n"};var d=function(){function a(e,t,r,i,n,s){if(i===void 0){i={}}this.type=c.TypeStrings.OutgoingRequest;this.logger=r.getLogger("sip.sipmessage");this.ua=r;this.headers={};this.method=e;this.ruri=t;this.body=s;this.extraHeaders=(n||[]).slice();this.statusCode=i.statusCode;this.reasonPhrase=i.reasonPhrase;if(i.routeSet){this.setHeader("route",i.routeSet)}else if(r.configuration.usePreloadedRoute&&r.transport){this.setHeader("route",r.transport.server.sipUri)}this.setHeader("via","");this.setHeader("max-forwards","70");var o=i.toUri||t;this.toTag=i.toTag;var a=i.toDisplayName||i.toDisplayName===0?'"'+i.toDisplayName+'" ':"";a+="<"+(o.type===c.TypeStrings.URI?o.toRaw():o)+">";a+=this.toTag?";tag="+this.toTag:"";this.to=l.Grammar.nameAddrHeaderParse(a);this.setHeader("to",a);var f=i.fromUri||r.configuration.uri||"";this.fromTag=i.fromTag||m.Utils.newTag();var u;if(i.fromDisplayName||i.fromDisplayName===0){u='"'+i.fromDisplayName+'" '}else if(r.configuration.displayName){u='"'+r.configuration.displayName+'" '}else{u=""}u+="<"+(f.type===c.TypeStrings.URI?f.toRaw():f)+">;tag=";u+=this.fromTag;this.from=l.Grammar.nameAddrHeaderParse(u);this.setHeader("from",u);this.callId=i.callId||r.configuration.sipjsId+m.Utils.createRandomToken(15);this.setHeader("call-id",this.callId);this.cseq=i.cseq||Math.floor(Math.random()*1e4);this.setHeader("cseq",this.cseq+" "+e)}a.prototype.getHeader=function(e){var t=this.headers[m.Utils.headerize(e)];if(t){if(t[0]){return t[0]}}else{var r=new RegExp("^\\s*"+e+"\\s*:","i");for(var i=0,n=this.extraHeaders;i<n.length;i++){var s=n[i];if(r.test(s)){return s.substring(s.indexOf(":")+1).trim()}}}return};a.prototype.getHeaders=function(e){var t=[];var r=this.headers[m.Utils.headerize(e)];if(r){for(var i=0,n=r;i<n.length;i++){var s=n[i];t.push(s)}}else{var o=new RegExp("^\\s*"+e+"\\s*:","i");for(var a=0,f=this.extraHeaders;a<f.length;a++){var u=f[a];if(o.test(u)){t.push(u.substring(u.indexOf(":")+1).trim())}}}return t};a.prototype.hasHeader=function(e){if(this.headers[m.Utils.headerize(e)]){return true}else{var t=new RegExp("^\\s*"+e+"\\s*:","i");for(var r=0,i=this.extraHeaders;r<i.length;r++){var n=i[r];if(t.test(n)){return true}}}return false};a.prototype.setHeader=function(e,t){this.headers[m.Utils.headerize(e)]=t instanceof Array?t:[t]};a.prototype.setViaHeader=function(e,t){var r="WSS";if(t.server&&t.server.scheme){r=t.server.scheme}if(this.ua.configuration.hackViaTcp){r="TCP"}var i="SIP/2.0/"+r;i+=" "+this.ua.configuration.viaHost+";branch="+e;if(this.ua.configuration.forceRport){i+=";rport"}this.setHeader("via",i);this.branch=e};a.prototype.cancel=function(n,s){var o=this;if(!this.transaction){throw new Error("Transaction undefined.")}var e=function(){if(!o.transaction){throw new Error("Transaction undefined.")}if(!o.to){throw new Error("To undefined.")}if(!o.from){throw new Error("From undefined.")}var e=new a(g.C.CANCEL,o.ruri,o.ua,{toUri:o.to.uri,toTag:o.toTag,fromUri:o.from.uri,fromTag:o.fromTag,callId:o.callId,cseq:o.cseq},s);e.branch=o.branch;if(o.headers.Route){e.headers.Route=o.headers.Route}if(n){e.setHeader("Reason",n)}var t=o.transaction.transport;var r={loggerFactory:o.ua.getLoggerFactory(),onStateChange:function(e){if(e===h.TransactionState.Terminated){o.ua.destroyTransaction(i)}},receiveResponse:function(e){return}};var i=new h.NonInviteClientTransaction(e,t,r);o.ua.newTransaction(i)};if(!(this.transaction instanceof h.InviteClientTransaction)){return}if(this.transaction.state===h.TransactionState.Proceeding){e()}else{this.transaction.once("stateChanged",function(){if(o.transaction&&o.transaction.state===h.TransactionState.Proceeding){e()}})}};a.prototype.toString=function(){var e="";e+=this.method+" "+(this.ruri.type===c.TypeStrings.URI?this.ruri.toRaw():this.ruri)+" SIP/2.0\r\n";for(var t in this.headers){if(this.headers[t]){for(var r=0,i=this.headers[t];r<i.length;r++){var n=i[r];e+=t+": "+n+"\r\n"}}}for(var s=0,o=this.extraHeaders;s<o.length;s++){var t=o[s];e+=t.trim()+"\r\n"}e+=v.getSupportedHeader(this);e+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n";if(this.body){if(typeof this.body==="string"){e+="Content-Length: "+m.Utils.str_utf8_length(this.body)+"\r\n\r\n";e+=this.body}else{if(this.body.body&&this.body.contentType){e+="Content-Type: "+this.body.contentType+"\r\n";e+="Content-Length: "+m.Utils.str_utf8_length(this.body.body)+"\r\n\r\n";e+=this.body.body}else{e+="Content-Length: "+0+"\r\n\r\n"}}}else{e+="Content-Length: "+0+"\r\n\r\n"}return e};return a}();v.OutgoingRequest=d;var r=function(){function e(){this.type=c.TypeStrings.IncomingMessage;this.headers={}}e.prototype.addHeader=function(e,t){var r={raw:t};e=m.Utils.headerize(e);if(this.headers[e]){this.headers[e].push(r)}else{this.headers[e]=[r]}};e.prototype.getHeader=function(e){var t=this.headers[m.Utils.headerize(e)];if(t){if(t[0]){return t[0].raw}}else{return}};e.prototype.getHeaders=function(e){var t=this.headers[m.Utils.headerize(e)];var r=[];if(!t){return[]}for(var i=0,n=t;i<n.length;i++){var s=n[i];r.push(s.raw)}return r};e.prototype.hasHeader=function(e){return!!this.headers[m.Utils.headerize(e)]};e.prototype.parseHeader=function(e,t){if(t===void 0){t=0}e=m.Utils.headerize(e);if(!this.headers[e]){return}else if(t>=this.headers[e].length){return}var r=this.headers[e][t];var i=r.raw;if(r.parsed){return r.parsed}var n=l.Grammar.parse(i,e.replace(/-/g,"_"));if(n===-1){this.headers[e].splice(t,1);return}else{r.parsed=n;return n}};e.prototype.s=function(e,t){if(t===void 0){t=0}return this.parseHeader(e,t)};e.prototype.setHeader=function(e,t){this.headers[m.Utils.headerize(e)]=[{raw:t}]};e.prototype.toString=function(){return this.data};return e}();v.IncomingMessage=r;var n=function(r){i(e,r);function e(e){var t=r.call(this)||this;t.ua=e;t.type=c.TypeStrings.IncomingRequest;t.logger=e.getLogger("sip.sipmessage");return t}e.prototype.reply=function(e,t,r,i){if(!this.transaction){throw new Error("Transaction undefined.")}var n=m.Utils.buildStatusLine(e,t);r=(r||[]).slice();if(this.method===g.C.INVITE&&e>100&&e<=200){for(var s=0,o=this.getHeaders("record-route");s<o.length;s++){var a=o[s];n+="Record-Route: "+a+"\r\n"}}for(var f=0,u=this.getHeaders("via");f<u.length;f++){var c=u[f];n+="Via: "+c+"\r\n"}var l=this.getHeader("to")||"";if(!this.toTag&&e>100){l+=";tag="+m.Utils.newTag()}else if(this.toTag&&!this.s("to").hasParam("tag")){l+=";tag="+this.toTag}n+="To: "+l+"\r\n";n+="From: "+this.getHeader("From")+"\r\n";n+="Call-ID: "+this.callId+"\r\n";n+="CSeq: "+this.cseq+" "+this.method+"\r\n";for(var h=0,d=r;h<d.length;h++){var p=d[h];n+=p.trim()+"\r\n"}n+=v.getSupportedHeader(this);n+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n";if(i){if(typeof i==="string"){n+="Content-Type: application/sdp\r\n";n+="Content-Length: "+m.Utils.str_utf8_length(i)+"\r\n\r\n";n+=i}else{if(i.body&&i.contentType){n+="Content-Type: "+i.contentType+"\r\n";n+="Content-Length: "+m.Utils.str_utf8_length(i.body)+"\r\n\r\n";n+=i.body}else{n+="Content-Length: "+0+"\r\n\r\n"}}}else{n+="Content-Length: "+0+"\r\n\r\n"}this.transaction.receiveResponse(e,n);return n};e.prototype.reply_sl=function(e,t){if(!this.transport){throw new Error("Transport undefined.")}var r=m.Utils.buildStatusLine(e,t);for(var i=0,n=this.getHeaders("via");i<n.length;i++){var s=n[i];r+="Via: "+s+"\r\n"}var o=this.getHeader("To")||"";if(!this.toTag&&e>100){o+=";tag="+m.Utils.newTag()}else if(this.toTag&&!this.s("to").hasParam("tag")){o+=";tag="+this.toTag}r+="To: "+o+"\r\n";r+="From: "+this.getHeader("From")+"\r\n";r+="Call-ID: "+this.callId+"\r\n";r+="CSeq: "+this.cseq+" "+this.method+"\r\n";r+="User-Agent: "+this.ua.configuration.userAgentString+"\r\n";r+="Content-Length: "+0+"\r\n\r\n";this.transport.send(r);return r};return e}(r);v.IncomingRequest=n;var s=function(r){i(e,r);function e(e){var t=r.call(this)||this;t.ua=e;t.type=c.TypeStrings.IncomingResponse;t.logger=e.getLogger("sip.sipmessage");t.headers={};return t}e.prototype.ack=function(e){if(!this.statusCode||this.statusCode<200||this.statusCode>299){throw new Error("Response status code must be 2xx to ACK.")}if(this.method!==g.C.INVITE){throw new Error("Response must to be for an INVITE to ACK.")}if(!this.transaction){throw new Error("Transaction undefined.")}if(!(this.transaction instanceof h.InviteClientTransaction)){throw new Error("Transaction not instance of InviteServerTrasaction.")}var t=this.ua.dialogs[this.callId+this.fromTag+this.toTag];if(!t){throw new Error("Dialog undefined.")}var r=this.callId;var i=this.cseq;var n=t.localUri;var s=this.fromTag;var o=t.remoteUri;var a=this.toTag;var f=t.remoteTarget;var u=t.routeSet;var c=new d(g.C.ACK,f,this.ua,{callId:r,cseq:i,fromUri:n,fromTag:s,toUri:o,toTag:a,routeSet:u},e?e.extraHeaders:undefined,e?e.body:undefined);this.transaction.ackResponse(c);return c};return e}(r);v.IncomingResponse=s},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var n=r(6);var a=r(2);var f=r(0);var u=r(15);var c=r(10);var l=r(4);var s=function(s){i(o,s);function o(e,t,r,i){var n=s.call(this)||this;n.data={};o.initializer(n,e,t,r,i);return n}o.initializer=function(e,t,r,i,n){e.type=f.TypeStrings.ClientContext;if(i===undefined){throw new TypeError("Not enough arguments")}e.ua=t;e.logger=t.getLogger("sip.clientcontext");e.method=r;var s=t.normalizeTarget(i);if(!s){throw new TypeError("Invalid target: "+i)}n=Object.create(n||Object.prototype);n.extraHeaders=(n.extraHeaders||[]).slice();e.request=new c.OutgoingRequest(e.method,s,e.ua,n.params,n.extraHeaders);if(n.body){e.body={};e.body.body=n.body;if(n.contentType){e.body.contentType=n.contentType}e.request.body=e.body}if(e.request.from){e.localIdentity=e.request.from}if(e.request.to){e.remoteIdentity=e.request.to}};o.prototype.send=function(){var e=new u.RequestSender(this,this.ua);e.send();return this};o.prototype.receiveResponse=function(e){var t=e.statusCode||0;var r=l.Utils.getReasonPhrase(t);switch(true){case/^1[0-9]{2}$/.test(t.toString()):this.emit("progress",e,r);break;case/^2[0-9]{2}$/.test(t.toString()):if(this.ua.applicants[this.toString()]){delete this.ua.applicants[this.toString()]}this.emit("accepted",e,r);break;default:if(this.ua.applicants[this.toString()]){delete this.ua.applicants[this.toString()]}this.emit("rejected",e,r);this.emit("failed",e,r);break}};o.prototype.onRequestTimeout=function(){this.emit("failed",undefined,a.C.causes.REQUEST_TIMEOUT)};o.prototype.onTransportError=function(){this.emit("failed",undefined,a.C.causes.CONNECTION_ERROR)};return o}(n.EventEmitter);t.ClientContext=s},function(e,S,i){(function(u){var e=i(102);var o=i(54);var d=i(104);var a=i(105);var f=i(106);var n;if(u&&u.ArrayBuffer){n=i(107)}var t=typeof navigator!=="undefined"&&/Android/i.test(navigator.userAgent);var r=typeof navigator!=="undefined"&&/PhantomJS/i.test(navigator.userAgent);var c=t||r;S.protocol=3;var l=S.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6};var h=e(l);var p={type:"error",data:"parser error"};var v=i(108);S.encodePacket=function(e,t,r,i){if("function"==typeof t){i=t;t=false}if("function"==typeof r){i=r;r=null}var n=e.data===undefined?undefined:e.data.buffer||e.data;if(u.ArrayBuffer&&n instanceof ArrayBuffer){return m(e,t,i)}else if(v&&n instanceof u.Blob){return y(e,t,i)}if(n&&n.base64){return g(e,i)}var s=l[e.type];if(undefined!==e.data){s+=r?f.encode(String(e.data)):String(e.data)}return i(""+s)};function g(e,t){var r="b"+S.packets[e.type]+e.data.data;return t(r)}function m(e,t,r){if(!t){return S.encodeBase64Packet(e,r)}var i=e.data;var n=new Uint8Array(i);var s=new Uint8Array(1+i.byteLength);s[0]=l[e.type];for(var o=0;o<n.length;o++){s[o+1]=n[o]}return r(s.buffer)}function s(e,t,r){if(!t){return S.encodeBase64Packet(e,r)}var i=new FileReader;i.onload=function(){e.data=i.result;S.encodePacket(e,t,true,r)};return i.readAsArrayBuffer(e.data)}function y(e,t,r){if(!t){return S.encodeBase64Packet(e,r)}if(c){return s(e,t,r)}var i=new Uint8Array(1);i[0]=l[e.type];var n=new v([i.buffer,e.data]);return r(n)}S.encodeBase64Packet=function(t,r){var i="b"+S.packets[t.type];if(v&&t.data instanceof u.Blob){var n=new FileReader;n.onload=function(){var e=n.result.split(",")[1];r(i+e)};return n.readAsDataURL(t.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){var o=new Uint8Array(t.data);var a=new Array(o.length);for(var f=0;f<o.length;f++){a[f]=o[f]}s=String.fromCharCode.apply(null,a)}i+=u.btoa(s);return r(i)};S.decodePacket=function(e,t,r){if(e===undefined){return p}if(typeof e=="string"){if(e.charAt(0)=="b"){return S.decodeBase64Packet(e.substr(1),t)}if(r){e=T(e);if(e===false){return p}}var i=e.charAt(0);if(Number(i)!=i||!h[i]){return p}if(e.length>1){return{type:h[i],data:e.substring(1)}}else{return{type:h[i]}}}var n=new Uint8Array(e);var i=n[0];var s=d(e,1);if(v&&t==="blob"){s=new v([s])}return{type:h[i],data:s}};function T(e){try{e=f.decode(e)}catch(e){return false}return e}S.decodeBase64Packet=function(e,t){var r=h[e.charAt(0)];if(!n){return{type:r,data:{base64:true,data:e.substr(1)}}}var i=n.decode(e.substr(1));if(t==="blob"&&v){i=new v([i])}return{type:r,data:i}};S.encodePayload=function(e,r,i){if(typeof r=="function"){i=r;r=null}var n=o(e);if(r&&n){if(v&&!c){return S.encodePayloadAsBlob(e,i)}return S.encodePayloadAsArrayBuffer(e,i)}if(!e.length){return i("0:")}function s(e){return e.length+":"+e}function t(e,t){S.encodePacket(e,!n?false:r,true,function(e){t(null,s(e))})}C(e,t,function(e,t){return i(t.join(""))})};function C(e,t,r){var n=new Array(e.length);var i=a(e.length,r);var s=function(r,e,i){t(e,function(e,t){n[r]=t;i(e,n)})};for(var o=0;o<e.length;o++){s(o,e[o],i)}}S.decodePayload=function(e,t,r){if(typeof e!="string"){return S.decodePayloadAsBinary(e,t,r)}if(typeof t==="function"){r=t;t=null}var i;if(e==""){return r(p,0,1)}var n="",s,o;for(var a=0,f=e.length;a<f;a++){var u=e.charAt(a);if(":"!=u){n+=u}else{if(""==n||n!=(s=Number(n))){return r(p,0,1)}o=e.substr(a+1,s);if(n!=o.length){return r(p,0,1)}if(o.length){i=S.decodePacket(o,t,true);if(p.type==i.type&&p.data==i.data){return r(p,0,1)}var c=r(i,a+s,f);if(false===c)return}a+=s;n=""}}if(n!=""){return r(p,0,1)}};S.encodePayloadAsArrayBuffer=function(e,i){if(!e.length){return i(new ArrayBuffer(0))}function t(e,t){S.encodePacket(e,true,true,function(e){return t(null,e)})}C(e,t,function(e,t){var r=t.reduce(function(e,t){var r;if(typeof t==="string"){r=t.length}else{r=t.byteLength}return e+r.toString().length+r+2},0);var o=new Uint8Array(r);var a=0;t.forEach(function(e){var t=typeof e==="string";var r=e;if(t){var i=new Uint8Array(e.length);for(var n=0;n<e.length;n++){i[n]=e.charCodeAt(n)}r=i.buffer}if(t){o[a++]=0}else{o[a++]=1}var s=r.byteLength.toString();for(var n=0;n<s.length;n++){o[a++]=parseInt(s[n])}o[a++]=255;var i=new Uint8Array(r);for(var n=0;n<i.length;n++){o[a++]=i[n]}});return i(o.buffer)})};S.encodePayloadAsBlob=function(e,r){function t(e,f){S.encodePacket(e,true,true,function(e){var t=new Uint8Array(1);t[0]=1;if(typeof e==="string"){var r=new Uint8Array(e.length);for(var i=0;i<e.length;i++){r[i]=e.charCodeAt(i)}e=r.buffer;t[0]=0}var n=e instanceof ArrayBuffer?e.byteLength:e.size;var s=n.toString();var o=new Uint8Array(s.length+1);for(var i=0;i<s.length;i++){o[i]=parseInt(s[i])}o[s.length]=255;if(v){var a=new v([t.buffer,o.buffer,e]);f(null,a)}})}C(e,t,function(e,t){return r(new v(t))})};S.decodePayloadAsBinary=function(e,r,i){if(typeof r==="function"){i=r;r=null}var t=e;var n=[];var s=false;while(t.byteLength>0){var o=new Uint8Array(t);var a=o[0]===0;var f="";for(var u=1;;u++){if(o[u]==255)break;if(f.length>310){s=true;break}f+=o[u]}if(s)return i(p,0,1);t=d(t,2+f.length);f=parseInt(f);var c=d(t,0,f);if(a){try{c=String.fromCharCode.apply(null,new Uint8Array(c))}catch(e){var l=new Uint8Array(c);c="";for(var u=0;u<l.length;u++){c+=String.fromCharCode(l[u])}}}n.push(c);t=d(t,f)}var h=n.length;n.forEach(function(e,t){i(S.decodePacket(e,r,true),t,h)})}}).call(this,i(1))},function(e,t,r){if(true){e.exports=i}function i(e){if(e)return n(e)}function n(e){for(var t in i.prototype){e[t]=i.prototype[t]}return e}i.prototype.on=i.prototype.addEventListener=function(e,t){this._callbacks=this._callbacks||{};(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t);return this};i.prototype.once=function(e,t){function r(){this.off(e,r);t.apply(this,arguments)}r.fn=t;this.on(e,r);return this};i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(e,t){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length){delete this._callbacks["$"+e];return this}var i;for(var n=0;n<r.length;n++){i=r[n];if(i===t||i.fn===t){r.splice(n,1);break}}return this};i.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),r=this._callbacks["$"+e];if(r){r=r.slice(0);for(var i=0,n=r.length;i<n;++i){r[i].apply(this,t)}}return this};i.prototype.listeners=function(e){this._callbacks=this._callbacks||{};return this._callbacks["$"+e]||[]};i.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,r){"use strict";var n=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var i=r(6);var c=r(11);var h=r(2);var u=r(21);var d=r(0);var l=r(7);var p=r(8);var s=r(15);var f=r(22);var v=r(64);var o=r(10);var g=r(16);var m=r(9);var y=r(4);var T=function(r){n(i,r);function i(e){var t=r.call(this)||this;t.data={};t.type=d.TypeStrings.Session;if(!e){throw new l.Exceptions.SessionDescriptionHandlerError("A session description handler is required for the session to function")}t.status=i.C.STATUS_NULL;t.dialog=undefined;t.pendingReinvite=false;t.earlyDialogs={};t.sessionDescriptionHandlerFactory=e;t.hasOffer=false;t.hasAnswer=false;t.timers={ackTimer:undefined,expiresTimer:undefined,invite2xxTimer:undefined,userNoAnswerTimer:undefined,rel1xxTimer:undefined,prackTimer:undefined};t.startTime=undefined;t.endTime=undefined;t.tones=undefined;t.localHold=false;t.earlySdp=undefined;t.rel100=h.C.supported.UNSUPPORTED;t.originalReceiveRequest=t.receiveRequest;return t}i.prototype.dtmf=function(e,r){var i=this;if(r===void 0){r={}}if(this.status!==d.SessionStatus.STATUS_CONFIRMED&&this.status!==d.SessionStatus.STATUS_WAITING_FOR_ACK){throw new l.Exceptions.InvalidStateError(this.status)}if(!e||!e.toString().match(/^[0-9A-D#*,]+$/i)){throw new TypeError("Invalid tones: "+e)}var n=function(){if(i.status===d.SessionStatus.STATUS_TERMINATED||!i.tones||i.tones.length===0){i.tones=undefined;return}var e=i.tones.shift();var t;if(e.tone===","){t=2e3}else{e.on("failed",function(){i.tones=undefined});e.send(r);t=e.duration+e.interToneGap}setTimeout(n,t)};e=e.toString();var t=this.ua.configuration.dtmfType;if(this.sessionDescriptionHandler&&t===h.C.dtmfType.RTP){var s=this.sessionDescriptionHandler.sendDtmf(e,r);if(!s){this.logger.warn("Attempt to use dtmfType 'RTP' has failed, falling back to INFO packet method");t=h.C.dtmfType.INFO}}if(t===h.C.dtmfType.INFO){var o=[];var a=e.split("");while(a.length>0){o.push(new v.DTMF(this,a.shift(),r))}if(this.tones){this.tones=this.tones.concat(o);return this}this.tones=o;n()}return this};i.prototype.bye=function(e){if(e===void 0){e={}}if(this.status===d.SessionStatus.STATUS_TERMINATED){this.logger.error("Error: Attempted to send BYE in a terminated session.");return this}this.logger.log("terminating Session");var t=e.statusCode;if(t&&(t<200||t>=700)){throw new TypeError("Invalid statusCode: "+t)}e.receiveResponse=function(){};return this.sendRequest(h.C.BYE,e).terminated()};i.prototype.refer=function(e,t){if(t===void 0){t={}}if(this.status!==d.SessionStatus.STATUS_CONFIRMED){throw new l.Exceptions.InvalidStateError(this.status)}this.referContext=new S(this.ua,this,e,t);this.emit("referRequested",this.referContext);this.referContext.refer(t);return this.referContext};i.prototype.sendRequest=function(e,t){var r=this;if(t===void 0){t={}}t=t||{};if(!this.dialog){throw new Error("sending request without a dialog")}var i=new o.OutgoingRequest(e,this.dialog.remoteTarget,this.ua,{cseq:t.cseq||(this.dialog.localSeqnum+=1),callId:this.dialog.id.callId,fromUri:this.dialog.localUri,fromTag:this.dialog.id.localTag,ToUri:this.dialog.remoteUri,toTag:this.dialog.id.remoteTag,routeSet:this.dialog.routeSet,statusCode:t.statusCode,reasonPhrase:t.reasonPhrase},t.extraHeaders||[],t.body);new s.RequestSender({request:i,onRequestTimeout:function(){return r.onRequestTimeout()},onTransportError:function(){return r.onTransportError()},receiveResponse:function(e){return(t.receiveResponse||r.receiveNonInviteResponse.bind(r))(e)}},this.ua).send();this.emit(e.toLowerCase(),i);return this};i.prototype.close=function(){if(this.status===d.SessionStatus.STATUS_TERMINATED){return this}this.logger.log("closing INVITE session "+this.id);if(this.sessionDescriptionHandler){this.sessionDescriptionHandler.close()}for(var e in this.timers){if(this.timers[e]){clearTimeout(this.timers[e])}}if(this.dialog){this.dialog.terminate();delete this.dialog}for(var t in this.earlyDialogs){if(this.earlyDialogs.hasOwnProperty(t)){this.earlyDialogs[t].terminate();delete this.earlyDialogs[t]}}this.status=d.SessionStatus.STATUS_TERMINATED;if(this.ua.transport){this.ua.transport.removeListener("transportError",this.errorListener)}delete this.ua.sessions[this.id];return this};i.prototype.createDialog=function(e,t,r){if(r===void 0){r=false}var i=e[t==="UAS"?"toTag":"fromTag"];var n=e[t==="UAS"?"fromTag":"toTag"];var s=e.callId+i+n;if(r){if(this.earlyDialogs[s]){return true}else{var o=new u.Dialog(this,e,t,u.Dialog.C.STATUS_EARLY);if(o.error){this.logger.error(o.error);this.failed(e,h.C.causes.INTERNAL_ERROR);return false}else{this.earlyDialogs[s]=o;return true}}}else{var o=this.earlyDialogs[s];if(o){o.update(e,t);this.dialog=o;delete this.earlyDialogs[s];for(var a in this.earlyDialogs){if(this.earlyDialogs.hasOwnProperty(a)){this.earlyDialogs[a].terminate();delete this.earlyDialogs[a]}}return true}var f=new u.Dialog(this,e,t);if(f.error){this.logger.error(f.error);this.failed(e,h.C.causes.INTERNAL_ERROR);return false}else{this.toTag=e.toTag;this.dialog=f;return true}}};i.prototype.hold=function(e,t){if(e===void 0){e={}}if(t===void 0){t=[]}if(this.status!==d.SessionStatus.STATUS_WAITING_FOR_ACK&&this.status!==d.SessionStatus.STATUS_CONFIRMED){throw new l.Exceptions.InvalidStateError(this.status)}if(this.localHold){this.logger.log("Session is already on hold, cannot put it on hold again");return}e.modifiers=t;if(this.sessionDescriptionHandler){e.modifiers.push(this.sessionDescriptionHandler.holdModifier)}this.localHold=true;this.sendReinvite(e)};i.prototype.unhold=function(e,t){if(e===void 0){e={}}if(t===void 0){t=[]}if(this.status!==d.SessionStatus.STATUS_WAITING_FOR_ACK&&this.status!==d.SessionStatus.STATUS_CONFIRMED){throw new l.Exceptions.InvalidStateError(this.status)}if(!this.localHold){this.logger.log("Session is not on hold, cannot unhold it");return}e.modifiers=t;this.localHold=false;this.sendReinvite(e)};i.prototype.reinvite=function(e,t){if(e===void 0){e={}}if(t===void 0){t=[]}e.modifiers=t;return this.sendReinvite(e)};i.prototype.receiveRequest=function(e){switch(e.method){case h.C.BYE:e.reply(200);if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.emit("bye",e);this.terminated(e,h.C.BYE)}break;case h.C.INVITE:if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.logger.log("re-INVITE received");this.receiveReinvite(e)}break;case h.C.INFO:if(this.status===d.SessionStatus.STATUS_CONFIRMED||this.status===d.SessionStatus.STATUS_WAITING_FOR_ACK){if(this.onInfo){return this.onInfo(e)}var t=e.getHeader("content-type");if(t){if(t.match(/^application\/dtmf-relay/i)){if(e.body){var r=e.body.split("\r\n",2);if(r.length===2){var i=void 0;var n=void 0;var s=/^(Signal\s*?=\s*?)([0-9A-D#*]{1})(\s)?.*/;if(s.test(r[0])){i=r[0].replace(s,"$2")}var o=/^(Duration\s?=\s?)([0-9]{1,4})(\s)?.*/;if(o.test(r[1])){n=parseInt(r[1].replace(o,"$2"),10)}if(i&&n){new v.DTMF(this,i,{duration:n}).init_incoming(e)}}}}else{e.reply(415,undefined,["Accept: application/dtmf-relay"])}}}break;case h.C.REFER:if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.logger.log("REFER received");this.referContext=new A(this.ua,e);if(this.listeners("referRequested").length){this.emit("referRequested",this.referContext)}else{this.logger.log("No referRequested listeners, automatically accepting and following the refer");var a={followRefer:true};if(this.passedOptions){a.inviteOptions=this.passedOptions}this.referContext.accept(a,this.modifiers)}}break;case h.C.NOTIFY:if(this.referContext&&this.referContext.type===d.TypeStrings.ReferClientContext&&e.hasHeader("event")&&/^refer(;.*)?$/.test(e.getHeader("event"))){this.referContext.receiveNotify(e);return}e.reply(200,"OK");this.emit("notify",e);break}};i.prototype.terminate=function(e){return this};i.prototype.onTransportError=function(){if(this.status!==d.SessionStatus.STATUS_CONFIRMED&&this.status!==d.SessionStatus.STATUS_TERMINATED){this.failed(undefined,h.C.causes.CONNECTION_ERROR)}};i.prototype.onRequestTimeout=function(){if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.terminated(undefined,h.C.causes.REQUEST_TIMEOUT)}else if(this.status!==d.SessionStatus.STATUS_TERMINATED){this.failed(undefined,h.C.causes.REQUEST_TIMEOUT);this.terminated(undefined,h.C.causes.REQUEST_TIMEOUT)}};i.prototype.onDialogError=function(e){if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.terminated(e,h.C.causes.DIALOG_ERROR)}else if(this.status!==d.SessionStatus.STATUS_TERMINATED){this.failed(e,h.C.causes.DIALOG_ERROR);this.terminated(e,h.C.causes.DIALOG_ERROR)}};i.prototype.on=function(e,t){return r.prototype.on.call(this,e,t)};i.prototype.receiveReinvite=function(r){var i=this;this.emit("reinvite",this,r);if(r.hasHeader("P-Asserted-Identity")){this.assertedIdentity=p.Grammar.nameAddrHeaderParse(r.getHeader("P-Asserted-Identity"))}var e;if(!this.sessionDescriptionHandler){this.logger.warn("No SessionDescriptionHandler to reinvite");return}if(r.getHeader("Content-Length")==="0"&&!r.getHeader("Content-Type")){e=this.sessionDescriptionHandler.getDescription(this.sessionDescriptionHandlerOptions,this.modifiers)}else if(this.sessionDescriptionHandler.hasDescription(r.getHeader("Content-Type")||"")){e=this.sessionDescriptionHandler.setDescription(r.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(this.sessionDescriptionHandler.getDescription.bind(this.sessionDescriptionHandler,this.sessionDescriptionHandlerOptions,this.modifiers))}else{r.reply(415);this.emit("reinviteFailed",this);return}this.receiveRequest=function(e){if(e.method===h.C.ACK&&i.status===d.SessionStatus.STATUS_WAITING_FOR_ACK){if(i.sessionDescriptionHandler&&i.sessionDescriptionHandler.hasDescription(e.getHeader("Content-Type")||"")){i.hasAnswer=true;i.sessionDescriptionHandler.setDescription(e.body,i.sessionDescriptionHandlerOptions,i.modifiers).then(function(){clearTimeout(i.timers.ackTimer);clearTimeout(i.timers.invite2xxTimer);i.status=d.SessionStatus.STATUS_CONFIRMED;i.emit("confirmed",e)})}else{clearTimeout(i.timers.ackTimer);clearTimeout(i.timers.invite2xxTimer);i.status=d.SessionStatus.STATUS_CONFIRMED;i.emit("confirmed",e)}}else{i.originalReceiveRequest(e)}};e.catch(function(e){var t;if(e.type===d.TypeStrings.SessionDescriptionHandlerError){t=500}else if(e.type===d.TypeStrings.RenegotiationError){i.emit("renegotiationError",e);i.logger.warn(e.toString());t=488}else{i.logger.error(e);t=488}r.reply(t);i.emit("reinviteFailed",i);throw e}).then(function(e){var t=["Contact: "+i.contact];r.reply(200,undefined,t,e);i.status=d.SessionStatus.STATUS_WAITING_FOR_ACK;i.setACKTimer();i.emit("reinviteAccepted",i)})};i.prototype.sendReinvite=function(e){var t=this;if(e===void 0){e={}}if(this.pendingReinvite){this.logger.warn("Reinvite in progress. Please wait until complete, then try again.");return}if(!this.sessionDescriptionHandler){this.logger.warn("No SessionDescriptionHandler, can't reinvite..");return}this.pendingReinvite=true;e.modifiers=e.modifiers||[];var r=(e.extraHeaders||[]).slice();r.push("Contact: "+this.contact);r.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());this.sessionDescriptionHandler.getDescription(e.sessionDescriptionHandlerOptions,e.modifiers).then(function(e){t.sendRequest(h.C.INVITE,{extraHeaders:r,body:e,receiveResponse:function(e){return t.receiveReinviteResponse(e)}})}).catch(function(e){if(e.type===d.TypeStrings.RenegotiationError){t.pendingReinvite=false;t.emit("renegotiationError",e);t.logger.warn("Renegotiation Error");t.logger.warn(e.toString());throw e}t.logger.error("sessionDescriptionHandler error");t.logger.error(e);throw e})};i.prototype.receiveReinviteResponse=function(e){var t=this;if(this.status===d.SessionStatus.STATUS_TERMINATED){this.logger.error("Received reinvite response, but in STATUS_TERMINATED");return}if(!this.pendingReinvite){this.logger.error("Received reinvite response, but have no pending reinvite");return}var r=e&&e.statusCode?e.statusCode.toString():"";switch(true){case/^1[0-9]{2}$/.test(r):break;case/^2[0-9]{2}$/.test(r):this.status=d.SessionStatus.STATUS_CONFIRMED;this.emit("ack",e.ack());this.pendingReinvite=false;clearTimeout(this.timers.invite2xxTimer);if(!this.sessionDescriptionHandler||!this.sessionDescriptionHandler.hasDescription(e.getHeader("Content-Type")||"")){this.logger.error("2XX response received to re-invite but did not have a description");this.emit("reinviteFailed",this);this.emit("renegotiationError",new l.Exceptions.RenegotiationError("2XX response received to re-invite but did not have a description"));break}this.sessionDescriptionHandler.setDescription(e.body,this.sessionDescriptionHandlerOptions,this.modifiers).catch(function(e){t.logger.error("Could not set the description in 2XX response");t.logger.error(e);t.emit("reinviteFailed",t);t.emit("renegotiationError",e);t.sendRequest(h.C.BYE,{extraHeaders:["Reason: "+y.Utils.getReasonHeaderValue(488,"Not Acceptable Here")]});t.terminated(undefined,h.C.causes.INCOMPATIBLE_SDP);throw e}).then(function(){t.emit("reinviteAccepted",t)});break;default:this.pendingReinvite=false;this.logger.log("Received a non 1XX or 2XX response to a re-invite");this.emit("reinviteFailed",this);this.emit("renegotiationError",new l.Exceptions.RenegotiationError("Invalid response to a re-invite"))}};i.prototype.acceptAndTerminate=function(e,t,r){var i=[];if(t){i.push("Reason: "+y.Utils.getReasonHeaderValue(t,r))}if(this.dialog||this.createDialog(e,"UAC")){this.emit("ack",e.ack());this.sendRequest(h.C.BYE,{extraHeaders:i})}return this};i.prototype.setInvite2xxTimer=function(t,r){var i=this;var n=g.Timers.T1;var s=function(){if(i.status!==d.SessionStatus.STATUS_WAITING_FOR_ACK){return}i.logger.log("no ACK received, attempting to retransmit OK");var e=["Contact: "+i.contact];t.reply(200,undefined,e,r);n=Math.min(n*2,g.Timers.T2);i.timers.invite2xxTimer=setTimeout(s,n)};this.timers.invite2xxTimer=setTimeout(s,n)};i.prototype.setACKTimer=function(){var e=this;this.timers.ackTimer=setTimeout(function(){if(e.status===d.SessionStatus.STATUS_WAITING_FOR_ACK){e.logger.log("no ACK received for an extended period of time, terminating the call");clearTimeout(e.timers.invite2xxTimer);e.sendRequest(h.C.BYE);e.terminated(undefined,h.C.causes.NO_ACK)}},g.Timers.TIMER_H)};i.prototype.failed=function(e,t){if(this.status===d.SessionStatus.STATUS_TERMINATED){return this}this.emit("failed",e,t);return this};i.prototype.rejected=function(e,t){this.emit("rejected",e,t);return this};i.prototype.canceled=function(){if(this.sessionDescriptionHandler){this.sessionDescriptionHandler.close()}this.emit("cancel");return this};i.prototype.accepted=function(e,t){if(!(e instanceof String)){t=y.Utils.getReasonPhrase(e&&e.statusCode||0,t)}this.startTime=new Date;if(this.replacee){this.replacee.emit("replaced",this);this.replacee.terminate()}this.emit("accepted",e,t);return this};i.prototype.terminated=function(e,t){if(this.status===d.SessionStatus.STATUS_TERMINATED){return this}this.endTime=new Date;this.close();this.emit("terminated",e,t);return this};i.prototype.connecting=function(e){this.emit("connecting",{request:e});return this};i.prototype.receiveNonInviteResponse=function(e){};i.C=d.SessionStatus;return i}(i.EventEmitter);t.Session=T;var a=function(a){n(e,a);function e(e,r){var i=this;if(!e.configuration.sessionDescriptionHandlerFactory){e.logger.warn("Can't build ISC without SDH Factory");throw new Error("ISC Constructor Failed")}i=a.call(this,e.configuration.sessionDescriptionHandlerFactory)||this;f.ServerContext.initializer(i,e,r);i.type=d.TypeStrings.InviteServerContext;var t=r.parseHeader("Content-Disposition");if(t&&t.type==="render"){i.renderbody=r.body;i.rendertype=r.getHeader("Content-Type")}i.status=d.SessionStatus.STATUS_INVITE_RECEIVED;i.fromTag=r.fromTag;i.id=r.callId+i.fromTag;i.request=r;i.contact=i.ua.contact.toString();i.receiveNonInviteResponse=function(){};i.logger=e.getLogger("sip.inviteservercontext",i.id);i.ua.sessions[i.id]=i;var n=function(e,t){if(r.hasHeader(e)&&r.getHeader(e).toLowerCase().indexOf("100rel")>=0){i.rel100=t}};n("require",h.C.supported.REQUIRED);n("supported",h.C.supported.SUPPORTED);r.toTag=y.Utils.newTag();if(!i.createDialog(r,"UAS",true)){r.reply(500,"Missing Contact header field");return}var s={extraHeaders:["Contact: "+i.contact]};if(i.rel100!==h.C.supported.REQUIRED){i.progress(s)}i.status=d.SessionStatus.STATUS_WAITING_FOR_ANSWER;i.timers.userNoAnswerTimer=setTimeout(function(){r.reply(408);i.failed(r,h.C.causes.NO_ANSWER);i.terminated(r,h.C.causes.NO_ANSWER)},i.ua.configuration.noAnswerTimeout||60);if(r.hasHeader("expires")){var o=Number(r.getHeader("expires")||0)*1e3;i.timers.expiresTimer=setTimeout(function(){if(i.status===d.SessionStatus.STATUS_WAITING_FOR_ANSWER){r.reply(487);i.failed(r,h.C.causes.EXPIRES);i.terminated(r,h.C.causes.EXPIRES)}},o)}i.errorListener=i.onTransportError.bind(i);if(e.transport){e.transport.on("transportError",i.errorListener)}return i}e.prototype.reject=function(e){var t=this;if(e===void 0){e={}}if(this.status===d.SessionStatus.STATUS_TERMINATED){throw new l.Exceptions.InvalidStateError(this.status)}this.logger.log("rejecting RTCSession");var r=e.statusCode||480;var i=y.Utils.getReasonPhrase(r,e.reasonPhrase);var n=e.extraHeaders||[];if(r<300||r>699){throw new TypeError("Invalid statusCode: "+r)}var s=this.request.reply(r,i,n,e.body);["rejected","failed"].forEach(function(e){t.emit(e,s,i)});return this.terminated()};e.prototype.reply=function(e){if(e===void 0){e={}}return this};e.prototype.terminate=function(e){var t=this;if(e===void 0){e={}}var r=(e.extraHeaders||[]).slice();if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ACK&&this.request.transaction&&this.request.transaction.state!==m.TransactionState.Terminated){var i=this.dialog;this.receiveRequest=function(e){if(e.method===h.C.ACK){t.sendRequest(h.C.BYE,{extraHeaders:r});if(t.dialog){t.dialog.terminate()}}};this.request.transaction.on("stateChanged",function(){if(t.request.transaction&&t.request.transaction.state===m.TransactionState.Terminated&&t.dialog){t.bye();t.dialog.terminate()}});this.emit("bye",this.request);this.terminated();this.dialog=i;if(this.dialog){this.ua.dialogs[this.dialog.id.toString()]=this.dialog}}else if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.bye(e)}else{this.reject(e)}return this};e.prototype.progress=function(s){var o=this;if(s===void 0){s={}}var t=s.statusCode||180;var a=(s.extraHeaders||[]).slice();if(t<100||t>199){throw new TypeError("Invalid statusCode: "+t)}if(this.status===d.SessionStatus.STATUS_TERMINATED){return this}var e=function(){var n=s.statusCode||183;o.status=d.SessionStatus.STATUS_WAITING_FOR_PRACK;a.push("Contact: "+o.contact);a.push("Require: 100rel");a.push("RSeq: "+Math.floor(Math.random()*1e4));if(!o.sessionDescriptionHandler){o.logger.warn("No SessionDescriptionHandler, can't do 100rel");return}o.sessionDescriptionHandler.getDescription(s.sessionDescriptionHandlerOptions,s.modifiers).then(function(e){if(o.status===d.SessionStatus.STATUS_TERMINATED){return}o.earlySdp=e.body;o[o.hasOffer?"hasAnswer":"hasOffer"]=true;var t=g.Timers.T1;var r=function(){o.request.reply(n,undefined,a,e);t*=2;o.timers.rel1xxTimer=setTimeout(r,t)};o.timers.rel1xxTimer=setTimeout(r,t);o.timers.prackTimer=setTimeout(function(){if(o.status!==d.SessionStatus.STATUS_WAITING_FOR_PRACK){return}o.logger.log("no PRACK received, rejecting the call");clearTimeout(o.timers.rel1xxTimer);o.request.reply(504);o.terminated(undefined,h.C.causes.NO_PRACK)},g.Timers.T1*64);var i=o.request.reply(n,s.reasonPhrase,a,e);o.emit("progress",i,s.reasonPhrase)},function(){o.request.reply(480);o.failed(undefined,h.C.causes.WEBRTC_ERROR);o.terminated(undefined,h.C.causes.WEBRTC_ERROR)})};var r=function(){var e=o.request.reply(t,s.reasonPhrase,a,s.body);o.emit("progress",e,s.reasonPhrase)};if(s.statusCode!==100&&(this.rel100===h.C.supported.REQUIRED||this.rel100===h.C.supported.SUPPORTED&&s.rel100||this.rel100===h.C.supported.SUPPORTED&&this.ua.configuration.rel100===h.C.supported.REQUIRED)){this.sessionDescriptionHandler=this.setupSessionDescriptionHandler();this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler);if(this.sessionDescriptionHandler.hasDescription(this.request.getHeader("Content-Type")||"")){this.hasOffer=true;this.sessionDescriptionHandler.setDescription(this.request.body,s.sessionDescriptionHandlerOptions,s.modifiers).then(e).catch(function(e){o.logger.warn("invalid description");o.logger.warn(e);o.failed(undefined,h.C.causes.WEBRTC_ERROR);o.terminated(undefined,h.C.causes.WEBRTC_ERROR);throw e})}else{e()}}else{r()}return this};e.prototype.accept=function(e){var r=this;if(e===void 0){e={}}this.onInfo=e.onInfo;var i=(e.extraHeaders||[]).slice();var t=function(e){i.push("Contact: "+r.contact);i.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());if(!r.hasOffer){r.hasOffer=true}else{r.hasAnswer=true}var t=r.request.reply(200,undefined,i,e);r.status=d.SessionStatus.STATUS_WAITING_FOR_ACK;r.setInvite2xxTimer(r.request,e);r.setACKTimer();r.accepted(t,y.Utils.getReasonPhrase(200))};var n=function(e){if(e.type===d.TypeStrings.SessionDescriptionHandlerError){r.logger.log(e.message);if(e.error){r.logger.log(e.error)}}r.request.reply(480);r.failed(undefined,h.C.causes.WEBRTC_ERROR);r.terminated(undefined,h.C.causes.WEBRTC_ERROR);throw e};if(this.status===d.SessionStatus.STATUS_WAITING_FOR_PRACK){this.status=d.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK;return this}else if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ANSWER){this.status=d.SessionStatus.STATUS_ANSWERED}else if(this.status!==d.SessionStatus.STATUS_EARLY_MEDIA){throw new l.Exceptions.InvalidStateError(this.status)}if(!this.createDialog(this.request,"UAS")){this.request.reply(500,"Missing Contact header field");return this}clearTimeout(this.timers.userNoAnswerTimer);if(this.status===d.SessionStatus.STATUS_EARLY_MEDIA){t({})}else{this.sessionDescriptionHandler=this.setupSessionDescriptionHandler();this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler);if(this.request.getHeader("Content-Length")==="0"&&!this.request.getHeader("Content-Type")){this.sessionDescriptionHandler.getDescription(e.sessionDescriptionHandlerOptions,e.modifiers).catch(n).then(t)}else if(this.sessionDescriptionHandler.hasDescription(this.request.getHeader("Content-Type")||"")){this.hasOffer=true;this.sessionDescriptionHandler.setDescription(this.request.body,e.sessionDescriptionHandlerOptions,e.modifiers).then(function(){if(!r.sessionDescriptionHandler){throw new Error("No SDH")}return r.sessionDescriptionHandler.getDescription(e.sessionDescriptionHandlerOptions,e.modifiers)}).catch(n).then(t)}else{this.request.reply(415);return this}}return this};e.prototype.receiveRequest=function(t){var r=this;var e=function(){clearTimeout(r.timers.ackTimer);clearTimeout(r.timers.invite2xxTimer);r.status=d.SessionStatus.STATUS_CONFIRMED;var e=t.getHeader("Content-Disposition");if(e&&e.type==="render"){r.renderbody=t.body;r.rendertype=t.getHeader("Content-Type")}r.emit("confirmed",t)};switch(t.method){case h.C.CANCEL:if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ANSWER||this.status===d.SessionStatus.STATUS_WAITING_FOR_PRACK||this.status===d.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK||this.status===d.SessionStatus.STATUS_EARLY_MEDIA||this.status===d.SessionStatus.STATUS_ANSWERED){this.status=d.SessionStatus.STATUS_CANCELED;this.request.reply(487);this.canceled();this.rejected(t,h.C.causes.CANCELED);this.failed(t,h.C.causes.CANCELED);this.terminated(t,h.C.causes.CANCELED)}break;case h.C.ACK:if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ACK){this.status=d.SessionStatus.STATUS_CONFIRMED;if(this.sessionDescriptionHandler&&this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")||"")){this.hasAnswer=true;this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).catch(function(e){r.logger.warn(e);r.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"});r.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION);r.terminated(t,h.C.causes.BAD_MEDIA_DESCRIPTION);throw e}).then(function(){return e()})}else{e()}}break;case h.C.PRACK:if(this.status===d.SessionStatus.STATUS_WAITING_FOR_PRACK||this.status===d.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK){if(!this.hasAnswer){this.sessionDescriptionHandler=this.setupSessionDescriptionHandler();this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler);if(this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")||"")){this.hasAnswer=true;this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){clearTimeout(r.timers.rel1xxTimer);clearTimeout(r.timers.prackTimer);t.reply(200);if(r.status===d.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK){r.status=d.SessionStatus.STATUS_EARLY_MEDIA;r.accept()}r.status=d.SessionStatus.STATUS_EARLY_MEDIA},function(e){r.logger.warn(e);r.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"});r.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION);r.terminated(t,h.C.causes.BAD_MEDIA_DESCRIPTION)})}else{this.terminate({statusCode:"488",reasonPhrase:"Bad Media Description"});this.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION);this.terminated(t,h.C.causes.BAD_MEDIA_DESCRIPTION)}}else{clearTimeout(this.timers.rel1xxTimer);clearTimeout(this.timers.prackTimer);t.reply(200);if(this.status===d.SessionStatus.STATUS_ANSWERED_WAITING_FOR_PRACK){this.status=d.SessionStatus.STATUS_EARLY_MEDIA;this.accept()}this.status=d.SessionStatus.STATUS_EARLY_MEDIA}}else if(this.status===d.SessionStatus.STATUS_EARLY_MEDIA){t.reply(200)}break;default:T.prototype.receiveRequest.apply(this,[t]);break}};e.prototype.setupSessionDescriptionHandler=function(){if(this.sessionDescriptionHandler){return this.sessionDescriptionHandler}return this.sessionDescriptionHandlerFactory(this,this.ua.configuration.sessionDescriptionHandlerFactoryOptions)};return e}(T);t.InviteServerContext=a;var C=function(u){n(e,u);function e(e,t,r,i){if(r===void 0){r={}}if(i===void 0){i=[]}var n=this;if(!e.configuration.sessionDescriptionHandlerFactory){e.logger.warn("Can't build ISC without SDH Factory");throw new Error("ICC Constructor Failed")}r.params=r.params||{};var s=r.anonymous||false;var o=y.Utils.newTag();r.params.fromTag=o;var a=e.contact.toString({anonymous:s,outbound:s?!e.contact.tempGruu:!e.contact.pubGruu});var f=(r.extraHeaders||[]).slice();if(s&&e.configuration.uri){r.params.from_displayName="Anonymous";r.params.from_uri="sip:anonymous@anonymous.invalid";f.push("P-Preferred-Identity: "+e.configuration.uri.toString());f.push("Privacy: id")}f.push("Contact: "+a);f.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());if(e.configuration.rel100===h.C.supported.REQUIRED){f.push("Require: 100rel")}if(e.configuration.replaces===h.C.supported.REQUIRED){f.push("Require: replaces")}r.extraHeaders=f;n=u.call(this,e.configuration.sessionDescriptionHandlerFactory)||this;c.ClientContext.initializer(n,e,h.C.INVITE,t,r);n.type=d.TypeStrings.InviteClientContext;n.passedOptions=r;n.sessionDescriptionHandlerOptions=r.sessionDescriptionHandlerOptions||{};n.modifiers=i;n.inviteWithoutSdp=r.inviteWithoutSdp||false;n.anonymous=r.anonymous||false;n.renderbody=r.renderbody||undefined;n.rendertype=r.rendertype||"text/plain";n.fromTag=o;n.contact=a;if(n.status!==d.SessionStatus.STATUS_NULL){throw new l.Exceptions.InvalidStateError(n.status)}n.isCanceled=false;n.received100=false;n.method=h.C.INVITE;n.logger=e.getLogger("sip.inviteclientcontext");e.applicants[n.toString()]=n;n.id=n.request.callId+n.fromTag;n.onInfo=r.onInfo;n.errorListener=n.onTransportError.bind(n);if(e.transport){e.transport.on("transportError",n.errorListener)}return n}e.prototype.receiveNonInviteResponse=function(e){this.receiveInviteResponse(e)};e.prototype.receiveResponse=function(e){this.receiveInviteResponse(e)};e.prototype.send=function(){var e=new s.RequestSender(this,this.ua);e.send();return this};e.prototype.invite=function(){var t=this;this.ua.sessions[this.id]=this;Promise.resolve().then(function(){if(t.inviteWithoutSdp){t.request.body=t.renderbody;t.status=d.SessionStatus.STATUS_INVITE_SENT;t.send()}else{t.sessionDescriptionHandler=t.sessionDescriptionHandlerFactory(t,t.ua.configuration.sessionDescriptionHandlerFactoryOptions||{});t.emit("SessionDescriptionHandler-created",t.sessionDescriptionHandler);t.sessionDescriptionHandler.getDescription(t.sessionDescriptionHandlerOptions,t.modifiers).then(function(e){if(t.isCanceled||t.status===d.SessionStatus.STATUS_TERMINATED){return}t.hasOffer=true;t.request.body=e;t.status=d.SessionStatus.STATUS_INVITE_SENT;t.send()},function(e){if(e.type===d.TypeStrings.SessionDescriptionHandlerError){t.logger.log(e.message);if(e.error){t.logger.log(e.error)}}if(t.status===d.SessionStatus.STATUS_TERMINATED){return}t.failed(undefined,h.C.causes.WEBRTC_ERROR);t.terminated(undefined,h.C.causes.WEBRTC_ERROR)})}});return this};e.prototype.receiveInviteResponse=function(t){var r=this;if(this.status===d.SessionStatus.STATUS_TERMINATED||t.method!==h.C.INVITE){return}var e=t.callId+t.fromTag+t.toTag;var i=[];if(this.dialog&&(t.statusCode&&t.statusCode>=200&&t.statusCode<=299)){if(e!==this.dialog.id.toString()){if(!this.createDialog(t,"UAC",true)){return}this.emit("ack",t.ack({body:y.Utils.generateFakeSDP(t.body)}));this.earlyDialogs[e].sendRequest(this,h.C.BYE);if(this.status!==d.SessionStatus.STATUS_CONFIRMED){this.failed(t,h.C.causes.WEBRTC_ERROR);this.terminated(t,h.C.causes.WEBRTC_ERROR)}return}else if(this.status===d.SessionStatus.STATUS_CONFIRMED){this.emit("ack",t.ack(t));return}else if(!this.hasAnswer){return}}var n=t&&t.statusCode;if(this.dialog&&n&&n<200){var s=t.getHeader("rseq");if(s&&(this.dialog.pracked.indexOf(s)!==-1||Number(this.dialog.pracked[this.dialog.pracked.length-1])>=Number(s)&&this.dialog.pracked.length>0)){return}if(!this.earlyDialogs[e]&&!this.createDialog(t,"UAC",true)){return}if(this.earlyDialogs[e].pracked.indexOf(t.getHeader("rseq"))!==-1||this.earlyDialogs[e].pracked[this.earlyDialogs[e].pracked.length-1]>=Number(s)&&this.earlyDialogs[e].pracked.length>0){return}i.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq"));this.earlyDialogs[e].pracked.push(t.getHeader("rseq"));this.earlyDialogs[e].sendRequest(this,h.C.PRACK,{extraHeaders:i,body:y.Utils.generateFakeSDP(t.body)});return}if(this.isCanceled){if(n&&n>=100&&n<200){this.request.cancel(this.cancelReason,i);this.canceled()}else if(n&&n>=200&&n<299){this.acceptAndTerminate(t);this.emit("bye",this.request)}else if(n&&n>=300){var o=h.C.REASON_PHRASE[t.statusCode||0]||h.C.causes.CANCELED;this.rejected(t,o);this.failed(t,o);this.terminated(t,o)}return}var a=n?n.toString():"";switch(true){case/^100$/.test(a):this.received100=true;this.emit("progress",t);break;case/^1[0-9]{2}$/.test(a):if(!t.toTag){this.logger.warn("1xx response received without to tag");break}if(t.hasHeader("contact")){if(!this.createDialog(t,"UAC",true)){break}}this.status=d.SessionStatus.STATUS_1XX_RECEIVED;if(t.hasHeader("P-Asserted-Identity")){this.assertedIdentity=p.Grammar.nameAddrHeaderParse(t.getHeader("P-Asserted-Identity"))}if(t.hasHeader("require")&&t.getHeader("require").indexOf("100rel")!==-1){if(this.dialog||!this.earlyDialogs[e]){break}var f=t.getHeader("rseq");if(this.earlyDialogs[e].pracked.indexOf(f)!==-1||this.earlyDialogs[e].pracked[this.earlyDialogs[e].pracked.length-1]>=Number(f)&&this.earlyDialogs[e].pracked.length>0){return}this.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.ua.configuration.sessionDescriptionHandlerFactoryOptions||{});this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler);if(!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")||"")){i.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq"));this.earlyDialogs[e].pracked.push(t.getHeader("rseq"));this.earlyDialogs[e].sendRequest(this,h.C.PRACK,{extraHeaders:i});this.emit("progress",t)}else if(this.hasOffer){if(!this.createDialog(t,"UAC")){break}this.hasAnswer=true;if(this.dialog!==undefined&&f){this.dialog.pracked.push(f)}this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){i.push("RAck: "+t.getHeader("rseq")+" "+t.getHeader("cseq"));r.sendRequest(h.C.PRACK,{extraHeaders:i,receiveResponse:function(){}});r.status=d.SessionStatus.STATUS_EARLY_MEDIA;r.emit("progress",t)},function(e){r.logger.warn(e);r.acceptAndTerminate(t,488,"Not Acceptable Here");r.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION)})}else{var u=this.earlyDialogs[e];u.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.ua.configuration.sessionDescriptionHandlerFactoryOptions||{});this.emit("SessionDescriptionHandler-created",u.sessionDescriptionHandler);if(f){u.pracked.push(f)}if(u.sessionDescriptionHandler){u.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){return u.sessionDescriptionHandler.getDescription(r.sessionDescriptionHandlerOptions,r.modifiers)}).then(function(e){i.push("RAck: "+f+" "+t.getHeader("cseq"));u.sendRequest(r,h.C.PRACK,{extraHeaders:i,body:e});r.status=d.SessionStatus.STATUS_EARLY_MEDIA;r.emit("progress",t)}).catch(function(e){if(f&&e.type===d.TypeStrings.SessionDescriptionHandlerError){u.pracked.push(f);if(r.status===d.SessionStatus.STATUS_TERMINATED){return}r.failed(undefined,h.C.causes.WEBRTC_ERROR);r.terminated(undefined,h.C.causes.WEBRTC_ERROR)}else{if(f){u.pracked.splice(u.pracked.indexOf(f),1)}r.logger.warn("invalid description");r.logger.warn(e)}})}}}else{this.emit("progress",t)}break;case/^2[0-9]{2}$/.test(a):var c=this.request.cseq+" "+this.request.method;if(c!==t.getHeader("cseq")){break}if(t.hasHeader("P-Asserted-Identity")){this.assertedIdentity=p.Grammar.nameAddrHeaderParse(t.getHeader("P-Asserted-Identity"))}if(this.status===d.SessionStatus.STATUS_EARLY_MEDIA&&this.dialog){this.status=d.SessionStatus.STATUS_CONFIRMED;var l={};if(this.renderbody){i.push("Content-Type: "+this.rendertype);l.extraHeaders=i;l.body=this.renderbody}this.emit("ack",t.ack(l));this.accepted(t);break}if(this.dialog){break}if(!this.hasOffer){if(this.earlyDialogs[e]&&this.earlyDialogs[e].sessionDescriptionHandler){this.hasOffer=true;this.hasAnswer=true;this.sessionDescriptionHandler=this.earlyDialogs[e].sessionDescriptionHandler;if(!this.createDialog(t,"UAC")){break}this.status=d.SessionStatus.STATUS_CONFIRMED;this.emit("ack",t.ack());this.accepted(t)}else{this.sessionDescriptionHandler=this.sessionDescriptionHandlerFactory(this,this.ua.configuration.sessionDescriptionHandlerFactoryOptions||{});this.emit("SessionDescriptionHandler-created",this.sessionDescriptionHandler);if(!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")||"")){this.acceptAndTerminate(t,400,"Missing session description");this.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION);break}if(!this.createDialog(t,"UAC")){break}this.hasOffer=true;this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){return r.sessionDescriptionHandler.getDescription(r.sessionDescriptionHandlerOptions,r.modifiers)}).then(function(e){if(r.isCanceled||r.status===d.SessionStatus.STATUS_TERMINATED){return}r.status=d.SessionStatus.STATUS_CONFIRMED;r.hasAnswer=true;r.emit("ack",t.ack({body:e}));r.accepted(t)}).catch(function(e){if(e.type===d.TypeStrings.SessionDescriptionHandlerError){r.logger.warn("invalid description");r.logger.warn(e.toString());r.acceptAndTerminate(t,488,"Invalid session description");r.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION)}else{throw e}})}}else if(this.hasAnswer){var l={};if(this.renderbody){i.push("Content-Type: "+this.rendertype);l.extraHeaders=i;l.body=this.renderbody}this.emit("ack",t.ack(l))}else{if(!this.sessionDescriptionHandler||!this.sessionDescriptionHandler.hasDescription(t.getHeader("Content-Type")||"")){this.acceptAndTerminate(t,400,"Missing session description");this.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION);break}if(!this.createDialog(t,"UAC")){break}this.hasAnswer=true;this.sessionDescriptionHandler.setDescription(t.body,this.sessionDescriptionHandlerOptions,this.modifiers).then(function(){var e={};r.status=d.SessionStatus.STATUS_CONFIRMED;if(r.renderbody){i.push("Content-Type: "+r.rendertype);e.extraHeaders=i;e.body=r.renderbody}r.emit("ack",t.ack(e));r.accepted(t)},function(e){r.logger.warn(e);r.acceptAndTerminate(t,488,"Not Acceptable Here");r.failed(t,h.C.causes.BAD_MEDIA_DESCRIPTION)})}break;default:var o=y.Utils.sipErrorCause(n||0);this.rejected(t,o);this.failed(t,o);this.terminated(t,o)}};e.prototype.cancel=function(e){if(e===void 0){e={}}e.extraHeaders=(e.extraHeaders||[]).slice();if(this.isCanceled){throw new l.Exceptions.InvalidStateError(d.SessionStatus.STATUS_CANCELED)}if(this.status===d.SessionStatus.STATUS_TERMINATED||this.status===d.SessionStatus.STATUS_CONFIRMED){throw new l.Exceptions.InvalidStateError(this.status)}this.logger.log("canceling RTCSession");this.isCanceled=true;var t=y.Utils.getCancelReason(e.statusCode,e.reasonPhrase);if(this.status===d.SessionStatus.STATUS_NULL||this.status===d.SessionStatus.STATUS_INVITE_SENT&&!this.received100){this.cancelReason=t}else if(this.status===d.SessionStatus.STATUS_INVITE_SENT||this.status===d.SessionStatus.STATUS_1XX_RECEIVED||this.status===d.SessionStatus.STATUS_EARLY_MEDIA){this.request.cancel(t,e.extraHeaders)}return this.canceled()};e.prototype.terminate=function(e){if(this.status===d.SessionStatus.STATUS_TERMINATED){return this}if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ACK||this.status===d.SessionStatus.STATUS_CONFIRMED){this.bye(e)}else{this.cancel(e)}return this};e.prototype.receiveRequest=function(e){if(e.method===h.C.CANCEL){}if(e.method===h.C.ACK&&this.status===d.SessionStatus.STATUS_WAITING_FOR_ACK){clearTimeout(this.timers.ackTimer);clearTimeout(this.timers.invite2xxTimer);this.status=d.SessionStatus.STATUS_CONFIRMED;this.accepted()}return u.prototype.receiveRequest.call(this,e)};return e}(T);t.InviteClientContext=C;var S=function(f){n(e,f);function e(e,t,r,i){if(i===void 0){i={}}var n=this;if(e===undefined||t===undefined||r===undefined){throw new TypeError("Not enough arguments")}n=f.call(this,e,h.C.REFER,t.remoteIdentity.uri.toString(),i)||this;n.type=d.TypeStrings.ReferClientContext;n.options=i;n.extraHeaders=(n.options.extraHeaders||[]).slice();n.applicant=t;if(!(typeof r==="string")&&(r.type===d.TypeStrings.InviteServerContext||r.type===d.TypeStrings.InviteClientContext)){var s=r.dialog;if(s){n.target='"'+r.remoteIdentity.friendlyName+'" '+"<"+s.remoteTarget.toString()+"?Replaces="+encodeURIComponent(s.id.callId+";to-tag="+s.id.remoteTag+";from-tag="+s.id.localTag)+">"}else{throw new TypeError("Invalid target due to no dialog: "+r)}}else{var o=p.Grammar.parse(r,"Refer_To");n.target=o&&o.uri?o.uri:r;var a=n.ua.normalizeTarget(n.target);if(!a){throw new TypeError("Invalid target: "+r)}n.target=a}if(n.ua){n.extraHeaders.push("Referred-By: <"+n.ua.configuration.uri+">")}n.extraHeaders.push("Contact: "+t.contact);n.extraHeaders.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());n.extraHeaders.push("Refer-To: "+n.target);n.errorListener=n.onTransportError.bind(n);if(e.transport){e.transport.on("transportError",n.errorListener)}return n}e.prototype.refer=function(r){var i=this;if(r===void 0){r={}}var e=(this.extraHeaders||[]).slice();if(r.extraHeaders){e.concat(r.extraHeaders)}this.applicant.sendRequest(h.C.REFER,{extraHeaders:this.extraHeaders,receiveResponse:function(e){var t=e&&e.statusCode?e.statusCode.toString():"";if(/^1[0-9]{2}$/.test(t)){i.emit("referRequestProgress",i)}else if(/^2[0-9]{2}$/.test(t)){i.emit("referRequestAccepted",i)}else if(/^[4-6][0-9]{2}$/.test(t)){i.emit("referRequestRejected",i)}if(r.receiveResponse){r.receiveResponse(e)}}});return this};e.prototype.receiveNotify=function(e){var t=e.hasHeader("Content-Type")?e.getHeader("Content-Type"):undefined;if(t&&t.search(/^message\/sipfrag/)!==-1){var r=p.Grammar.parse(e.body,"sipfrag");if(r===-1){e.reply(489,"Bad Event");return}switch(true){case/^1[0-9]{2}$/.test(r.status_code):this.emit("referProgress",this);break;case/^2[0-9]{2}$/.test(r.status_code):this.emit("referAccepted",this);if(!this.options.activeAfterTransfer&&this.applicant.terminate){this.applicant.terminate()}break;default:this.emit("referRejected",this);break}e.reply(200);this.emit("notify",e);return}e.reply(489,"Bad Event")};return e}(c.ClientContext);t.ReferClientContext=S;var A=function(i){n(e,i);function e(e,t){var r=i.call(this,e,t)||this;r.type=d.TypeStrings.ReferServerContext;r.ua=e;r.status=d.SessionStatus.STATUS_INVITE_RECEIVED;r.fromTag=t.fromTag;r.id=t.callId+r.fromTag;r.request=t;r.contact=r.ua.contact.toString();r.logger=e.getLogger("sip.referservercontext",r.id);r.cseq=Math.floor(Math.random()*1e4);r.callId=r.request.callId;r.fromUri=r.request.to.uri;r.fromTag=r.request.to.parameters.tag;r.remoteTarget=r.request.headers.Contact[0].parsed.uri;r.toUri=r.request.from.uri;r.toTag=r.request.fromTag;r.routeSet=r.request.getHeaders("record-route");if(!r.request.hasHeader("refer-to")){r.logger.warn("Invalid REFER packet. A refer-to header is required. Rejecting refer.");r.reject();return r}r.referTo=r.request.parseHeader("refer-to");r.referredSession=r.ua.findSession(t);if(r.request.hasHeader("referred-by")){r.referredBy=r.request.getHeader("referred-by")}if(r.referTo.uri.hasHeader("replaces")){r.replaces=r.referTo.uri.getHeader("replaces")}r.errorListener=r.onTransportError.bind(r);if(e.transport){e.transport.on("transportError",r.errorListener)}r.status=d.SessionStatus.STATUS_WAITING_FOR_ANSWER;return r}e.prototype.receiveNonInviteResponse=function(e){};e.prototype.progress=function(){if(this.status!==d.SessionStatus.STATUS_WAITING_FOR_ANSWER){throw new l.Exceptions.InvalidStateError(this.status)}this.request.reply(100)};e.prototype.reject=function(e){if(e===void 0){e={}}if(this.status===d.SessionStatus.STATUS_TERMINATED){throw new l.Exceptions.InvalidStateError(this.status)}this.logger.log("Rejecting refer");this.status=d.SessionStatus.STATUS_TERMINATED;i.prototype.reject.call(this,e);this.emit("referRequestRejected",this)};e.prototype.accept=function(e,t){var i=this;if(e===void 0){e={}}if(this.status===d.SessionStatus.STATUS_WAITING_FOR_ANSWER){this.status=d.SessionStatus.STATUS_ANSWERED}else{throw new l.Exceptions.InvalidStateError(this.status)}this.request.reply(202,"Accepted");this.emit("referRequestAccepted",this);if(e.followRefer){this.logger.log("Accepted refer, attempting to automatically follow it");var r=this.referTo.uri;if(!r.scheme||!r.scheme.match("^sips?$")){this.logger.error("SIP.js can only automatically follow SIP refer target");this.reject();return}var n=e.inviteOptions||{};var s=(n.extraHeaders||[]).slice();if(this.replaces){s.push("Replaces: "+decodeURIComponent(this.replaces))}if(this.referredBy){s.push("Referred-By: "+this.referredBy)}n.extraHeaders=s;r.clearHeaders();this.targetSession=this.ua.invite(r.toString(),n,t);this.emit("referInviteSent",this);if(this.targetSession){this.targetSession.once("progress",function(e){var t=e.statusCode||100;var r=e.reasonPhrase;i.sendNotify(("SIP/2.0 "+t+" "+r).trim());i.emit("referProgress",i);if(i.referredSession){i.referredSession.emit("referProgress",i)}});this.targetSession.once("accepted",function(){i.logger.log("Successfully followed the refer");i.sendNotify("SIP/2.0 200 OK");i.emit("referAccepted",i);if(i.referredSession){i.referredSession.emit("referAccepted",i)}});var o=function(e){if(i.status===d.SessionStatus.STATUS_TERMINATED){return}i.logger.log("Refer was not successful. Resuming session");if(e&&e.statusCode===429){i.logger.log("Alerting referrer that identity is required.");i.sendNotify("SIP/2.0 429 Provide Referrer Identity");return}i.sendNotify("SIP/2.0 603 Declined");i.status=d.SessionStatus.STATUS_TERMINATED;i.emit("referRejected",i);if(i.referredSession){i.referredSession.emit("referRejected")}};this.targetSession.once("rejected",o);this.targetSession.once("failed",o)}}else{this.logger.log("Accepted refer, but did not automatically follow it");this.sendNotify("SIP/2.0 200 OK");this.emit("referAccepted",this);if(this.referredSession){this.referredSession.emit("referAccepted",this)}}};e.prototype.sendNotify=function(e){if(this.status!==d.SessionStatus.STATUS_ANSWERED){throw new l.Exceptions.InvalidStateError(this.status)}if(p.Grammar.parse(e,"sipfrag")===-1){throw new Error("sipfrag body is required to send notify for refer")}var t=new o.OutgoingRequest(h.C.NOTIFY,this.remoteTarget,this.ua,{cseq:this.cseq+=1,callId:this.callId,fromUri:this.fromUri,fromTag:this.fromTag,toUri:this.toUri,toTag:this.toTag,routeSet:this.routeSet},["Event: refer","Subscription-State: terminated","Content-Type: message/sipfrag"],e);new s.RequestSender({request:t,onRequestTimeout:function(){return},onTransportError:function(){return},receiveResponse:function(){return}},this.ua).send()};e.prototype.on=function(e,t){return i.prototype.on.call(this,e,t)};return e}(f.ServerContext);t.ReferServerContext=A},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var s=r(2);var i=r(0);var n=r(9);var o=function(){function e(e,t){this.type=i.TypeStrings.RequestSender;this.logger=t.getLogger("sip.requestsender");this.loggerFactory=t.getLoggerFactory();this.ua=t;this.applicant=e;this.method=e.request.method;this.request=e.request;this.credentials=undefined;this.challenged=false;this.staled=false;if(t.status===i.UAStatus.STATUS_USER_CLOSED&&(this.method!==s.C.BYE&&this.method!==s.C.ACK)){this.onTransportError()}}e.prototype.send=function(){var t=this;var e=this.ua.transport;if(!e){throw new Error("Transport undefined.")}var r={loggerFactory:this.ua.getLoggerFactory(),onRequestTimeout:function(){return t.onRequestTimeout()},onStateChange:function(e){if(e===n.TransactionState.Terminated){t.ua.destroyTransaction(i)}},onTransportError:function(e){return t.onTransportError()},receiveResponse:function(e){return t.receiveResponse(e)}};var i;switch(this.method){case"INVITE":i=new n.InviteClientTransaction(this.request,e,r);break;case"ACK":throw new Error("Cannot make client transaction for ACK method.");default:i=new n.NonInviteClientTransaction(this.request,e,r)}this.clientTransaction=i;this.ua.newTransaction(i);return i};e.prototype.onRequestTimeout=function(){this.applicant.onRequestTimeout()};e.prototype.onTransportError=function(){this.applicant.onTransportError()};e.prototype.receiveResponse=function(e){var t=e&&e.statusCode?e.statusCode:0;if(t===401||t===407){var r=void 0;var i=void 0;if(t===401){r=e.parseHeader("www-authenticate");i="authorization"}else{r=e.parseHeader("proxy-authenticate");i="proxy-authorization"}if(!r){this.logger.warn(t+" with wrong or missing challenge, cannot authenticate");this.applicant.receiveResponse(e);return}if(!this.challenged||!this.staled&&r.stale===true){if(!this.credentials&&this.ua.configuration.authenticationFactory){this.credentials=this.ua.configuration.authenticationFactory(this.ua)}if(!this.credentials.authenticate(this.request,r)){this.applicant.receiveResponse(e);return}this.challenged=true;if(r.stale){this.staled=true}var n=void 0;if(e.method===s.C.REGISTER){n=this.applicant.cseq+=1}else if(this.request.dialog){n=this.request.dialog.localSeqnum+=1}else{n=(this.request.cseq||0)+1;this.request.cseq=n}this.request.setHeader("cseq",n+" "+this.method);this.request.setHeader(i,this.credentials.toString());this.send()}else{this.applicant.receiveResponse(e)}}else{this.applicant.receiveResponse(e)}};return e}();t.RequestSender=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=500;var n=4e3;var s=5e3;t.Timers={T1:i,T2:n,T4:s,TIMER_B:64*i,TIMER_D:0*i,TIMER_F:64*i,TIMER_H:64*i,TIMER_I:0*s,TIMER_J:0*i,TIMER_K:0*s,TIMER_L:64*i,TIMER_M:64*i,TIMER_N:64*i,PROVISIONAL_RESPONSE_INTERVAL:6e4}},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var u=r(2);var c=r(0);var n=function(){function e(e){this.parameters={};this.type=c.TypeStrings.Parameters;for(var t in e){if(e.hasOwnProperty(t)){this.setParam(t,e[t])}}}e.prototype.setParam=function(e,t){if(e){this.parameters[e.toLowerCase()]=typeof t==="undefined"||t===null?null:t.toString()}};e.prototype.getParam=function(e){if(e){return this.parameters[e.toLowerCase()]}};e.prototype.hasParam=function(e){if(e){return!!this.parameters.hasOwnProperty(e.toLowerCase())}return false};e.prototype.deleteParam=function(e){e=e.toLowerCase();if(this.parameters.hasOwnProperty(e)){var t=this.parameters[e];delete this.parameters[e];return t}};e.prototype.clearParams=function(){this.parameters={}};return e}();t.Parameters=n;var s=function(f){i(e,f);function e(e,t,r,i,n,s){var o=f.call(this,n)||this;o.headers={};o.type=c.TypeStrings.URI;if(!r){throw new TypeError('missing or invalid "host" parameter')}e=e||u.C.SIP;for(var a in s){if(s.hasOwnProperty(a)){o.setHeader(a,s[a])}}o.raw={scheme:e,user:t,host:r,port:i};o.normal={scheme:e.toLowerCase(),user:t,host:r.toLowerCase(),port:i};return o}Object.defineProperty(e.prototype,"_normal",{get:function(){return this.normal},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"_raw",{get:function(){return this.raw},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"scheme",{get:function(){return this.normal.scheme},set:function(e){this.raw.scheme=e;this.normal.scheme=e.toLowerCase()},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"user",{get:function(){return this.normal.user},set:function(e){this.normal.user=this.raw.user=e},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"host",{get:function(){return this.normal.host},set:function(e){this.raw.host=e;this.normal.host=e.toLowerCase()},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"aor",{get:function(){return this.normal.user+"@"+this.normal.host},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"port",{get:function(){return this.normal.port},set:function(e){this.normal.port=this.raw.port=e===0?e:e},enumerable:true,configurable:true});e.prototype.setHeader=function(e,t){this.headers[this.headerize(e)]=t instanceof Array?t:[t]};e.prototype.getHeader=function(e){if(e){return this.headers[this.headerize(e)]}};e.prototype.hasHeader=function(e){return!!e&&!!this.headers.hasOwnProperty(this.headerize(e))};e.prototype.deleteHeader=function(e){e=this.headerize(e);if(this.headers.hasOwnProperty(e)){var t=this.headers[e];delete this.headers[e];return t}};e.prototype.clearHeaders=function(){this.headers={}};e.prototype.clone=function(){return new e(this._raw.scheme,this._raw.user||"",this._raw.host,this._raw.port,JSON.parse(JSON.stringify(this.parameters)),JSON.parse(JSON.stringify(this.headers)))};e.prototype.toRaw=function(){return this._toString(this._raw)};e.prototype.toString=function(){return this._toString(this._normal)};e.prototype._toString=function(e){var t=e.scheme+":";if(!e.scheme.toLowerCase().match("^sips?$")){t+="//"}if(e.user){t+=this.escapeUser(e.user)+"@"}t+=e.host;if(e.port||e.port===0){t+=":"+e.port}for(var r in this.parameters){if(this.parameters.hasOwnProperty(r)){t+=";"+r;if(this.parameters[r]!==null){t+="="+this.parameters[r]}}}var i=[];for(var n in this.headers){if(this.headers.hasOwnProperty(n)){for(var s in this.headers[n]){if(this.headers[n].hasOwnProperty(s)){i.push(n+"="+this.headers[n][s])}}}}if(i.length>0){t+="?"+i.join("&")}return t};e.prototype.escapeUser=function(e){return encodeURIComponent(decodeURIComponent(e)).replace(/%3A/gi,":").replace(/%2B/gi,"+").replace(/%3F/gi,"?").replace(/%2F/gi,"/")};e.prototype.headerize=function(e){var t={"Call-Id":"Call-ID",Cseq:"CSeq","Min-Se":"Min-SE",Rack:"RAck",Rseq:"RSeq","Www-Authenticate":"WWW-Authenticate"};var r=e.toLowerCase().replace(/_/g,"-").split("-");var i=r.length;var n="";for(var s=0;s<i;s++){if(s!==0){n+="-"}n+=r[s].charAt(0).toUpperCase()+r[s].substring(1)}if(t[n]){n=t[n]}return n};return e}(n);t.URI=s},function(e,s,t){s=e.exports=t(87);s.log=n;s.formatArgs=i;s.save=o;s.load=a;s.useColors=r;s.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:f();s.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"];function r(){return typeof document!=="undefined"&&"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}s.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}};function i(){var e=arguments;var t=this.useColors;e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+s.humanize(this.diff);if(!t)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var i=0;var n=0;e[0].replace(/%[a-z%]/g,function(e){if("%%"===e)return;i++;if("%c"===e){n=i}});e.splice(n,0,r);return e}function n(){return"object"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function o(e){try{if(null==e){s.storage.removeItem("debug")}else{s.storage.debug=e}}catch(e){}}function a(){var e;try{return s.storage.debug}catch(e){}if(typeof process!=="undefined"&&"env"in process){return process.env.DEBUG}}s.enable(a());function f(){try{return window.localStorage}catch(e){}}},function(e,t){e.exports=function(e,t){var r=function(){};r.prototype=t.prototype;e.prototype=new r;e.prototype.constructor=e}},function(e,s,t){s=e.exports=t(109);s.log=n;s.formatArgs=i;s.save=o;s.load=a;s.useColors=r;s.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:f();s.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"];function r(){return typeof document!=="undefined"&&"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}s.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}};function i(){var e=arguments;var t=this.useColors;e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+s.humanize(this.diff);if(!t)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var i=0;var n=0;e[0].replace(/%[a-z%]/g,function(e){if("%%"===e)return;i++;if("%c"===e){n=i}});e.splice(n,0,r);return e}function n(){return"object"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function o(e){try{if(null==e){s.storage.removeItem("debug")}else{s.storage.debug=e}}catch(e){}}function a(){var e;try{return s.storage.debug}catch(e){}if(typeof process!=="undefined"&&"env"in process){return process.env.DEBUG}}s.enable(a());function f(){try{return window.localStorage}catch(e){}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var f=r(2);var u=r(0);var c=r(15);var s=r(10);var l=r(9);var i=function(){function e(e,t,r,i){this.pracked=[];this.uacPendingReply=false;this.uasPendingReply=false;this.type=u.TypeStrings.Dialog;if(!t.hasHeader("contact")){throw new Error("unable to create a Dialog without Contact header field")}if(t.type===u.TypeStrings.IncomingResponse){var n=t.statusCode;i=n&&n<200?u.DialogStatus.STATUS_EARLY:u.DialogStatus.STATUS_CONFIRMED}else{i=i||u.DialogStatus.STATUS_CONFIRMED}var s=t.parseHeader("contact");if(r==="UAS"&&t.type===u.TypeStrings.IncomingRequest){this.id={callId:t.callId,localTag:t.toTag,remoteTag:t.fromTag,toString:function(){return t.callId+t.toTag+t.fromTag}};this.state=i;this.remoteSeqnum=t.cseq;this.localUri=(t.parseHeader("to")||{}).uri;this.remoteUri=(t.parseHeader("from")||{}).uri;this.remoteTarget=s.uri;this.routeSet=t.getHeaders("record-route");this.inviteSeqnum=t.cseq;this.localSeqnum=t.cseq}else{this.id={callId:t.callId,localTag:t.fromTag,remoteTag:t.toTag,toString:function(){return t.callId+t.fromTag+t.toTag}};this.state=i;this.inviteSeqnum=t.cseq;this.localSeqnum=t.cseq;this.localUri=t.parseHeader("from").uri;this.pracked=[];this.remoteUri=t.parseHeader("to").uri;this.remoteTarget=s.uri;this.routeSet=t.getHeaders("record-route").reverse()}this.logger=e.ua.getLogger("sip.dialog",this.id.toString());this.owner=e;e.ua.dialogs[this.id.toString()]=this;this.logger.log("new "+r+" dialog created with status "+(this.state===u.DialogStatus.STATUS_EARLY?"EARLY":"CONFIRMED"));e.emit("dialog",this)}e.prototype.update=function(e,t){this.state=u.DialogStatus.STATUS_CONFIRMED;this.logger.log("dialog "+this.id.toString()+"  changed to CONFIRMED state");if(t==="UAC"){this.routeSet=e.getHeaders("record-route").reverse()}};e.prototype.terminate=function(){this.logger.log("dialog "+this.id.toString()+" deleted");if(this.sessionDescriptionHandler&&this.state!==u.DialogStatus.STATUS_CONFIRMED){this.sessionDescriptionHandler.close()}delete this.owner.ua.dialogs[this.id.toString()]};e.prototype.createRequest=function(e,t,r){if(t===void 0){t=[]}t=t.slice();if(!this.localSeqnum){this.localSeqnum=Math.floor(Math.random()*1e4)}var i=e===f.C.CANCEL||e===f.C.ACK?this.inviteSeqnum:this.localSeqnum+=1;var n=new s.OutgoingRequest(e,this.remoteTarget,this.owner.ua,{cseq:i,callId:this.id.callId,fromUri:this.localUri,fromTag:this.id.localTag,toIri:this.remoteUri,toTag:this.id.remoteTag,routeSet:this.routeSet},t,r);n.dialog=this;return n};e.prototype.checkInDialogRequest=function(e){var t=this;if(!this.remoteSeqnum){this.remoteSeqnum=e.cseq}else if(e.cseq<this.remoteSeqnum){if(e.method!==f.C.ACK){e.reply(500)}return e.cseq===this.inviteSeqnum}switch(e.method){case f.C.INVITE:if(this.uacPendingReply===true){e.reply(491)}else if(this.uasPendingReply===true&&e.cseq>this.remoteSeqnum){var r=Math.floor(Math.random()*10)+1;e.reply(500,undefined,["Retry-After:"+r]);this.remoteSeqnum=e.cseq;return false}else{this.uasPendingReply=true;var i=function(){if(e.transaction&&(e.transaction.state===l.TransactionState.Accepted||e.transaction.state===l.TransactionState.Completed||e.transaction.state===l.TransactionState.Terminated)){e.transaction.removeListener("stateChanged",i);t.uasPendingReply=false}};if(e.transaction){e.transaction.on("stateChanged",i)}}if(e.hasHeader("contact")&&e.transaction){e.transaction.on("stateChanged",function(){if(e.transaction&&e.transaction.state===l.TransactionState.Accepted){t.remoteTarget=e.parseHeader("contact").uri}})}break;case f.C.NOTIFY:if(e.hasHeader("contact")&&e.transaction){e.transaction.on("stateChanged",function(){if(e.transaction&&e.transaction.state===l.TransactionState.Completed){t.remoteTarget=e.parseHeader("contact").uri}})}break}if(e.cseq>this.remoteSeqnum){this.remoteSeqnum=e.cseq}return true};e.prototype.sendRequest=function(n,e,t){var s=this;if(t===void 0){t={}}var r=(t.extraHeaders||[]).slice();var i;if(t.body){if(t.body.body){i=t.body}else{i={};i.body=t.body;if(t.contentType){i.contentType=t.contentType}}}var o=this.createRequest(e,r,i);var a=function(t){var r=new c.RequestSender({request:o,onRequestTimeout:n.onRequestTimeout.bind(n),onTransportError:n.onTransportError.bind(n),receiveResponse:function(e){if(e.statusCode===408||e.statusCode===481){n.onDialogError(e)}else if(e.method===f.C.INVITE&&e.statusCode===491){if(t){n.receiveResponse(e)}else{o.cseq=s.localSeqnum+=1;setTimeout(function(){if(s.owner.status!==undefined&&s.owner.status!==u.SessionStatus.STATUS_TERMINATED){a(true)}},1e3)}}else{n.receiveResponse(e)}}},s.owner.ua);r.send();if(!r.clientTransaction){return}else if(o.method===f.C.INVITE&&r.clientTransaction&&r.clientTransaction.state!==l.TransactionState.Terminated){s.uacPendingReply=true;var i=function(){var e=r.clientTransaction.state;if(!r.clientTransaction){return}else if(r.clientTransaction&&(e===l.TransactionState.Accepted||e===l.TransactionState.Completed||e===l.TransactionState.Terminated)){r.clientTransaction.removeListener("stateChanged",i);s.uacPendingReply=false}};r.clientTransaction.on("stateChanged",i)}};a(false);return o};e.prototype.receiveRequest=function(e){if(!this.checkInDialogRequest(e)){return}this.owner.receiveRequest(e)};e.C=u.DialogStatus;return e}();t.Dialog=i},function(e,t,r){"use strict";var s=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var i=r(6);var a=r(2);var f=r(0);var u=r(8);var c=r(9);var l=r(4);var n=function(i){s(n,i);function n(e,t){var r=i.call(this)||this;r.data={};n.initializer(r,e,t);return r}n.initializer=function(t,r,e){t.type=f.TypeStrings.ServerContext;t.ua=r;t.logger=r.getLogger("sip.servercontext");t.request=e;var i=r.transport;if(!i){throw new Error("Transport undefined.")}var n={loggerFactory:r.getLoggerFactory(),onStateChange:function(e){if(e===c.TransactionState.Terminated){r.destroyTransaction(t.transaction)}},onTransportError:function(e){t.logger.error(e.message);t.onTransportError()}};if(e.method===a.C.INVITE){t.transaction=new c.InviteServerTransaction(e,i,n)}else{t.transaction=new c.NonInviteServerTransaction(e,i,n)}r.newTransaction(t.transaction);if(e.body){t.body=e.body}if(e.hasHeader("Content-Type")){t.contentType=e.getHeader("Content-Type")}t.method=e.method;t.localIdentity=e.to;t.remoteIdentity=e.from;var s=e.hasHeader("P-Asserted-Identity");if(s){var o=e.getHeader("P-Asserted-Identity");if(o){t.assertedIdentity=u.Grammar.nameAddrHeaderParse(o)}}};n.prototype.progress=function(e){if(e===void 0){e={}}e.statusCode=e.statusCode||180;e.minCode=100;e.maxCode=199;e.events=["progress"];return this.reply(e)};n.prototype.accept=function(e){if(e===void 0){e={}}e.statusCode=e.statusCode||200;e.minCode=200;e.maxCode=299;e.events=["accepted"];return this.reply(e)};n.prototype.reject=function(e){if(e===void 0){e={}}e.statusCode=e.statusCode||480;e.minCode=300;e.maxCode=699;e.events=["rejected","failed"];return this.reply(e)};n.prototype.reply=function(e){var t=this;if(e===void 0){e={}}var r=e.statusCode||100;var i=e.minCode||100;var n=e.maxCode||699;var s=l.Utils.getReasonPhrase(r,e.reasonPhrase);var o=e.extraHeaders||[];var a=e.body;var f=e.events||[];if(r<i||r>n){throw new TypeError("Invalid statusCode: "+r)}var u=this.request.reply(r,s,o,a);f.forEach(function(e){t.emit(e,u,s)});return this};n.prototype.onRequestTimeout=function(){this.emit("failed",undefined,a.C.causes.REQUEST_TIMEOUT)};n.prototype.onTransportError=function(){this.emit("failed",undefined,a.C.causes.CONNECTION_ERROR)};return n}(i.EventEmitter);t.ServerContext=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=function(e,t){var r=[];var i=e.split(/\r\n/);var n;for(var s=0;s<i.length;){var o=i[s];if(/^m=(?:audio|video)/.test(o)){n={index:s,stripped:[]};r.push(n)}else if(n){var a=/^a=rtpmap:(\d+) ([^/]+)\//.exec(o);if(a&&t===a[2]){i.splice(s,1);n.stripped.push(a[1]);continue}}s++}for(var f=0,u=r;f<u.length;f++){var c=u[f];var l=i[c.index].split(" ");for(var h=3;h<l.length;){if(c.stripped.indexOf(l[h])!==-1){l.splice(h,1);continue}h++}i[c.index]=l.join(" ")}return i.join("\r\n")};var n=function(e,r){var t=new RegExp("m="+r+".*$","gm");var i=new RegExp("^a=group:.*$","gm");if(t.test(e)){var n;e=e.split(/^m=/gm).filter(function(e){if(e.substr(0,r.length)===r){n=e.match(/^a=mid:.*$/gm);if(n){var t=n[0].match(/:.+$/g);if(t){n=t[0].substr(1)}}return false}return true}).join("m=");var s=e.match(i);if(s&&s.length===1){var o=s[0];var a=new RegExp(" *"+n+"[^ ]*","g");o=o.replace(a,"");e=e.split(i).join(o)}}return e};function s(e){e.sdp=(e.sdp||"").replace(/^a=candidate:\d+ \d+ tcp .*?\r\n/gim,"");return Promise.resolve(e)}t.stripTcpCandidates=s;function o(e){e.sdp=i(e.sdp||"","telephone-event");return Promise.resolve(e)}t.stripTelephoneEvent=o;function a(e){e.sdp=(e.sdp||"").replace(/^(a=imageattr:.*?)(x|y)=\[0-/gm,"$1$2=[1:");return Promise.resolve(e)}t.cleanJitsiSdpImageattr=a;function f(e){e.sdp=i(e.sdp||"","G722");return Promise.resolve(e)}t.stripG722=f;function u(t){return function(e){e.sdp=i(e.sdp||"",t);return Promise.resolve(e)}}t.stripRtpPayload=u;function c(e){e.sdp=n(e.sdp||"","video");return Promise.resolve(e)}t.stripVideo=c;function l(e){var t=e.sdp||"";if(t.search(/^a=mid.*$/gm)===-1){var r=t.match(/^m=.*$/gm);var i=t.split(/^m=.*$/gm);if(r){r.forEach(function(e,t){r[t]=e+"\na=mid:"+t})}i.forEach(function(e,t){if(r&&r[t]){i[t]=e+r[t]}});t=i.join("");e.sdp=t}return Promise.resolve(e)}t.addMidLines=l},function(e,t,r){"use strict";var i=r(5);var n=r(71);var s={"Content-Type":"application/x-www-form-urlencoded"};function o(e,t){if(!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])){e["Content-Type"]=t}}function a(){var e;if(typeof XMLHttpRequest!=="undefined"){e=r(44)}else if(typeof process!=="undefined"){e=r(44)}return e}var f={adapter:a(),transformRequest:[function e(t,r){n(r,"Content-Type");if(i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)){return t}if(i.isArrayBufferView(t)){return t.buffer}if(i.isURLSearchParams(t)){o(r,"application/x-www-form-urlencoded;charset=utf-8");return t.toString()}if(i.isObject(t)){o(r,"application/json;charset=utf-8");return JSON.stringify(t)}return t}],transformResponse:[function e(t){if(typeof t==="string"){try{t=JSON.parse(t)}catch(e){}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function e(t){return t>=200&&t<300}};f.headers={common:{Accept:"application/json, text/plain, */*"}};i.forEach(["delete","get","head"],function e(t){f.headers[t]={}});i.forEach(["post","put","patch"],function e(t){f.headers[t]=i.merge(s)});e.exports=f},function(e,o,t){var a=t(89)("socket.io-parser");var i=t(92);var r=t(94);var s=t(95);var n=t(50);o.protocol=4;o.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"];o.CONNECT=0;o.DISCONNECT=1;o.EVENT=2;o.ACK=3;o.ERROR=4;o.BINARY_EVENT=5;o.BINARY_ACK=6;o.Encoder=f;o.Decoder=l;function f(){}f.prototype.encode=function(e,t){a("encoding packet %j",e);if(o.BINARY_EVENT==e.type||o.BINARY_ACK==e.type){c(e,t)}else{var r=u(e);t([r])}};function u(e){var t="";var r=false;t+=e.type;if(o.BINARY_EVENT==e.type||o.BINARY_ACK==e.type){t+=e.attachments;t+="-"}if(e.nsp&&"/"!=e.nsp){r=true;t+=e.nsp}if(null!=e.id){if(r){t+=",";r=false}t+=e.id}if(null!=e.data){if(r)t+=",";t+=i.stringify(e.data)}a("encoded %j as %s",e,t);return t}function c(e,n){function t(e){var t=s.deconstructPacket(e);var r=u(t.packet);var i=t.buffers;i.unshift(r);n(i)}s.removeBlobs(e,t)}function l(){this.reconstructor=null}r(l.prototype);l.prototype.add=function(e){var t;if("string"==typeof e){t=h(e);if(o.BINARY_EVENT==t.type||o.BINARY_ACK==t.type){this.reconstructor=new p(t);if(this.reconstructor.reconPack.attachments===0){this.emit("decoded",t)}}else{this.emit("decoded",t)}}else if(n(e)||e.base64){if(!this.reconstructor){throw new Error("got binary data when not reconstructing a packet")}else{t=this.reconstructor.takeBinaryData(e);if(t){this.reconstructor=null;this.emit("decoded",t)}}}else{throw new Error("Unknown type: "+e)}};function h(e){var t={};var r=0;t.type=Number(e.charAt(0));if(null==o.types[t.type])return v();if(o.BINARY_EVENT==t.type||o.BINARY_ACK==t.type){var i="";while(e.charAt(++r)!="-"){i+=e.charAt(r);if(r==e.length)break}if(i!=Number(i)||e.charAt(r)!="-"){throw new Error("Illegal attachments")}t.attachments=Number(i)}if("/"==e.charAt(r+1)){t.nsp="";while(++r){var n=e.charAt(r);if(","==n)break;t.nsp+=n;if(r==e.length)break}}else{t.nsp="/"}var s=e.charAt(r+1);if(""!==s&&Number(s)==s){t.id="";while(++r){var n=e.charAt(r);if(null==n||Number(n)!=n){--r;break}t.id+=e.charAt(r);if(r==e.length)break}t.id=Number(t.id)}if(e.charAt(++r)){t=d(t,e.substr(r))}a("decoded %s as %j",e,t);return t}function d(e,t){try{e.data=i.parse(t)}catch(e){return v()}return e}l.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction()}};function p(e){this.reconPack=e;this.buffers=[]}p.prototype.takeBinaryData=function(e){this.buffers.push(e);if(this.buffers.length==this.reconPack.attachments){var t=s.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return t}return null};p.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[]};function v(e){return{type:o.ERROR,data:"parser error"}}},function(e,t,r){(function(n){var s=r(100);e.exports=function(e){var t=e.xdomain;var r=e.xscheme;var i=e.enablesXDR;try{if("undefined"!==typeof XMLHttpRequest&&(!t||s)){return new XMLHttpRequest}}catch(e){}try{if("undefined"!==typeof XDomainRequest&&!r&&i){return new XDomainRequest}}catch(e){}if(!t){try{return new(n[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}}).call(this,r(1))},function(e,t,r){var i=r(12);var n=r(13);e.exports=s;function s(e){this.path=e.path;this.hostname=e.hostname;this.port=e.port;this.secure=e.secure;this.query=e.query;this.timestampParam=e.timestampParam;this.timestampRequests=e.timestampRequests;this.readyState="";this.agent=e.agent||false;this.socket=e.socket;this.enablesXDR=e.enablesXDR;this.pfx=e.pfx;this.key=e.key;this.passphrase=e.passphrase;this.cert=e.cert;this.ca=e.ca;this.ciphers=e.ciphers;this.rejectUnauthorized=e.rejectUnauthorized;this.forceNode=e.forceNode;this.extraHeaders=e.extraHeaders;this.localAddress=e.localAddress}n(s.prototype);s.prototype.onError=function(e,t){var r=new Error(e);r.type="TransportError";r.description=t;this.emit("error",r);return this};s.prototype.open=function(){if("closed"===this.readyState||""===this.readyState){this.readyState="opening";this.doOpen()}return this};s.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.doClose();this.onClose()}return this};s.prototype.send=function(e){if("open"===this.readyState){this.write(e)}else{throw new Error("Transport not open")}};s.prototype.onOpen=function(){this.readyState="open";this.writable=true;this.emit("open")};s.prototype.onData=function(e){var t=i.decodePacket(e,this.socket.binaryType);this.onPacket(t)};s.prototype.onPacket=function(e){this.emit("packet",e)};s.prototype.onClose=function(){this.readyState="closed";this.emit("close")}},function(e,t){t.encode=function(e){var t="";for(var r in e){if(e.hasOwnProperty(r)){if(t.length)t+="&";t+=encodeURIComponent(r)+"="+encodeURIComponent(e[r])}}return t};t.decode=function(e){var t={};var r=e.split("&");for(var i=0,n=r.length;i<n;i++){var s=r[i].split("=");t[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return t}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=r(11);t.ClientContext=i.ClientContext;var n=r(2);t.C=n.C;var s=r(21);t.Dialog=s.Dialog;var o=r(32);t.DigestAuthentication=o.DigestAuthentication;var a=r(0);t.DialogStatus=a.DialogStatus;t.SessionStatus=a.SessionStatus;t.TypeStrings=a.TypeStrings;t.UAStatus=a.UAStatus;var f=r(7);t.Exceptions=f.Exceptions;var u=r(8);t.Grammar=u.Grammar;var c=r(33);t.LoggerFactory=c.LoggerFactory;var l=r(31);t.NameAddrHeader=l.NameAddrHeader;var h=r(34);t.Parser=h.Parser;var d=r(35);t.PublishContext=d.PublishContext;var p=r(36);t.RegisterContext=p.RegisterContext;var v=r(15);t.RequestSender=v.RequestSender;var g=r(37);var m=g.SanityCheck.sanityCheck;t.sanityCheck=m;var y=r(22);t.ServerContext=y.ServerContext;var T=r(14);t.InviteClientContext=T.InviteClientContext;t.InviteServerContext=T.InviteServerContext;t.ReferClientContext=T.ReferClientContext;t.ReferServerContext=T.ReferServerContext;t.Session=T.Session;var C=r(10);t.IncomingRequest=C.IncomingRequest;t.IncomingResponse=C.IncomingResponse;t.OutgoingRequest=C.OutgoingRequest;var S=r(38);t.Subscription=S.Subscription;var A=r(16);t.Timers=A.Timers;var b=r(9);var w={InviteClientTransaction:b.InviteClientTransaction,InviteServerTransaction:b.InviteServerTransaction,NonInviteClientTransaction:b.NonInviteClientTransaction,NonInviteServerTransaction:b.NonInviteServerTransaction};t.Transactions=w;var E=r(39);t.Transport=E.Transport;var R=r(40);t.UA=R.UA;var _=r(17);t.URI=_.URI;var I=r(4);t.Utils=I.Utils;var O=r(66);t.Web=O;var D=r(30);var N=D.title;t.name=N;var x=D.version;t.version=x},function(e){e.exports=JSON.parse('{"name":"tky-sip","title":"tky-sip","description":"A simple, intuitive, and powerful JavaScript signaling library","version":"0.0.3","license":"MIT","main":"./lib/index.js","types":"./lib/index.d.ts","author":"tky","dependencies":{"crypto-js":"^3.1.9-1"},"devDependencies":{"@types/jasmine":"^3.3.11","@types/node":"^11.11.6","circular-dependency-plugin":"^5.0.2","jasmine-core":"^3.3.0","karma":"^4.0.1","karma-chrome-launcher":"^2.2.0","karma-cli":"^2.0.0","karma-jasmine":"^2.0.1","karma-jasmine-html-reporter":"^1.4.0","karma-mocha-reporter":"^2.2.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^3.0.5","pegjs":"^0.10.0","ts-loader":"^5.3.3","ts-pegjs":"0.2.2","tslint":"^5.14.0","typescript":"^3.3.4000","webpack":"^4.29.6","webpack-cli":"^3.3.0"},"engines":{"node":">=8.0"},"scripts":{"prebuild":"tslint -p tsconfig-base.json -c tslint.json","generate-grammar":"node build/grammarGenerator.js","build-reg-bundle":"webpack --progress --config build/webpack.config.js --env.buildType reg","build-min-bundle":"webpack --progress --config build/webpack.config.js --env.buildType min","build-bundles":"npm run build-reg-bundle && npm run build-min-bundle","build-lib":"tsc -p src","build-test":"tsc -p test","copy-dist-files":"cp dist/sip.js dist/sip-$npm_package_version.js && cp dist/sip.min.js dist/sip-$npm_package_version.min.js","build":"npm run generate-grammar && npm run build-lib && npm run build-reg-bundle && npm run build-min-bundle","browserTest":"npm run build-test && sleep 2 && open http://0.0.0.0:9876/debug.html & karma start --reporters kjhtml --no-single-run","commandLineTest":"npm run build-test && karma start --reporters mocha --browsers ChromeHeadless --single-run","buildAndTest":"npm run build && npm run commandLineTest","buildAndBrowserTest":"npm run build && npm run browserTest","prepublish":"npm run build"}}')},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var s=r(0);var n=r(17);var o=function(n){i(e,n);function e(e,t,r){var i=n.call(this,r)||this;i.type=s.TypeStrings.NameAddrHeader;if(!e||!(e.type===s.TypeStrings.URI)){throw new TypeError('missing or invalid "uri" parameter')}i.uri=e;i._displayName=t;return i}Object.defineProperty(e.prototype,"friendlyName",{get:function(){return this.displayName||this.uri.aor},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"displayName",{get:function(){return this._displayName},set:function(e){this._displayName=e},enumerable:true,configurable:true});e.prototype.clone=function(){return new e(this.uri.clone(),this._displayName,JSON.parse(JSON.stringify(this.parameters)))};e.prototype.toString=function(){var e=this.displayName||this.displayName==="0"?'"'+this.displayName+'" ':"";e+="<"+this.uri.toString()+">";for(var t in this.parameters){if(this.parameters.hasOwnProperty(t)){e+=";"+t;if(this.parameters[t]!==null){e+="="+this.parameters[t]}}}return e};return e}(n.Parameters);t.NameAddrHeader=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=r(62);var n=r(0);var s=r(4);var o=function(){function e(e){this.type=n.TypeStrings.DigestAuthentication;this.logger=e.getLogger("sipjs.digestauthentication");this.username=e.configuration.authorizationUser;this.password=e.configuration.password;this.nc=0;this.ncHex="00000000"}e.prototype.authenticate=function(e,t,r){this.algorithm=t.algorithm;this.realm=t.realm;this.nonce=t.nonce;this.opaque=t.opaque;this.stale=t.stale;if(this.algorithm){if(this.algorithm!=="MD5"){this.logger.warn("challenge with Digest algorithm different than 'MD5', authentication aborted");return false}}else{this.algorithm="MD5"}if(!this.realm){this.logger.warn("challenge without Digest realm, authentication aborted");return false}if(!this.nonce){this.logger.warn("challenge without Digest nonce, authentication aborted");return false}if(t.qop){if(t.qop.indexOf("auth")>-1){this.qop="auth"}else if(t.qop.indexOf("auth-int")>-1){this.qop="auth-int"}else{this.logger.warn("challenge without Digest qop different than 'auth' or 'auth-int', authentication aborted");return false}}else{this.qop=undefined}this.method=e.method;this.uri=e.ruri;this.cnonce=s.Utils.createRandomToken(12);this.nc+=1;this.updateNcHex();if(this.nc===4294967296){this.nc=1;this.ncHex="00000001"}this.calculateResponse(r);return true};e.prototype.toString=function(){var e=[];if(!this.response){throw new Error("response field does not exist, cannot generate Authorization header")}e.push("algorithm="+this.algorithm);e.push('username="'+this.username+'"');e.push('realm="'+this.realm+'"');e.push('nonce="'+this.nonce+'"');e.push('uri="'+this.uri+'"');e.push('response="'+this.response+'"');if(this.opaque){e.push('opaque="'+this.opaque+'"')}if(this.qop){e.push("qop="+this.qop);e.push('cnonce="'+this.cnonce+'"');e.push("nc="+this.ncHex)}return"Digest "+e.join(", ")};e.prototype.updateNcHex=function(){var e=Number(this.nc).toString(16);this.ncHex="00000000".substr(0,8-e.length)+e};e.prototype.calculateResponse=function(e){var t;var r=i(this.username+":"+this.realm+":"+this.password);if(this.qop==="auth"){t=i(this.method+":"+this.uri);this.response=i(r+":"+this.nonce+":"+this.ncHex+":"+this.cnonce+":auth:"+t)}else if(this.qop==="auth-int"){t=i(this.method+":"+this.uri+":"+i(e?e:""));this.response=i(r+":"+this.nonce+":"+this.ncHex+":"+this.cnonce+":auth-int:"+t)}else if(this.qop===undefined){t=i(this.method+":"+this.uri);this.response=i(r+":"+this.nonce+":"+t)}};return e}();t.DigestAuthentication=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=r(0);var n;(function(e){e[e["error"]=0]="error";e[e["warn"]=1]="warn";e[e["log"]=2]="log";e[e["debug"]=3]="debug"})(n=t.Levels||(t.Levels={}));var s=function(){function e(){this.builtinEnabled=true;this._level=n.log;this.loggers={};this.type=i.TypeStrings.LoggerFactory;this.logger=this.getLogger("sip:loggerfactory")}Object.defineProperty(e.prototype,"level",{get:function(){return this._level},set:function(e){if(e>=0&&e<=3){this._level=e}else if(e>3){this._level=3}else if(n.hasOwnProperty(e)){this._level=e}else{this.logger.error("invalid 'level' parameter value: "+JSON.stringify(e))}},enumerable:true,configurable:true});Object.defineProperty(e.prototype,"connector",{get:function(){return this._connector},set:function(e){if(!e){this._connector=undefined}else if(typeof e==="function"){this._connector=e}else{this.logger.error("invalid 'connector' parameter value: "+JSON.stringify(e))}},enumerable:true,configurable:true});e.prototype.getLogger=function(e,t){if(t&&this.level===3){return new o(this,e,t)}else if(this.loggers[e]){return this.loggers[e]}else{var r=new o(this,e);this.loggers[e]=r;return r}};e.prototype.genericLog=function(e,t,r,i){if(this.level>=e){if(this.builtinEnabled){this.print(console[n[e]],t,r,i)}}if(this.connector){this.connector(n[e],t,r,i)}};e.prototype.print=function(e,t,r,i){if(typeof i==="string"){var n=[new Date,t];if(r){n.push(r)}i=n.concat(i).join(" | ")}e.call(console,i)};return e}();t.LoggerFactory=s;var o=function(){function e(e,t,r){this.type=i.TypeStrings.Logger;this.logger=e;this.category=t;this.label=r}e.prototype.error=function(e){this.genericLog(n.error,e)};e.prototype.warn=function(e){this.genericLog(n.warn,e)};e.prototype.log=function(e){this.genericLog(n.log,e)};e.prototype.debug=function(e){this.genericLog(n.debug,e)};e.prototype.genericLog=function(e,t){this.logger.genericLog(e,this.category,this.label,t)};return e}();t.Logger=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var f=r(0);var h=r(8);var d=r(10);var i;(function(e){function c(e,t){var r=t;var i=0;var n=0;if(e.substring(r,r+2).match(/(^\r\n)/)){return-2}while(i===0){n=e.indexOf("\r\n",r);if(n===-1){return n}if(!e.substring(n+2,n+4).match(/(^\r\n)/)&&e.charAt(n+2).match(/(^\s+)/)){r=n+2}else{i=n}}return i}e.getHeader=c;function l(t,e,r,i){var n=e.indexOf(":",r);var s=e.substring(r,n).trim();var o=e.substring(n+1,i).trim();var a;switch(s.toLowerCase()){case"via":case"v":t.addHeader("via",o);if(t.getHeaders("via").length===1){a=t.parseHeader("Via");if(a){t.via=a;t.viaBranch=a.branch}}else{a=0}break;case"from":case"f":t.setHeader("from",o);a=t.parseHeader("from");if(a){t.from=a;t.fromTag=a.getParam("tag")}break;case"to":case"t":t.setHeader("to",o);a=t.parseHeader("to");if(a){t.to=a;t.toTag=a.getParam("tag")}break;case"record-route":a=h.Grammar.parse(o,"Record_Route");if(a===-1){a=undefined;break}if(!(a instanceof Array)){a=undefined;break}a.forEach(function(e){t.addHeader("record-route",o.substring(e.position,e.offset));t.headers["Record-Route"][t.getHeaders("record-route").length-1].parsed=e.parsed});break;case"call-id":case"i":t.setHeader("call-id",o);a=t.parseHeader("call-id");if(a){t.callId=o}break;case"contact":case"m":a=h.Grammar.parse(o,"Contact");if(a===-1){a=undefined;break}if(!(a instanceof Array)){a=undefined;break}a.forEach(function(e){t.addHeader("contact",o.substring(e.position,e.offset));t.headers.Contact[t.getHeaders("contact").length-1].parsed=e.parsed});break;case"content-length":case"l":t.setHeader("content-length",o);a=t.parseHeader("content-length");break;case"content-type":case"c":t.setHeader("content-type",o);a=t.parseHeader("content-type");break;case"cseq":t.setHeader("cseq",o);a=t.parseHeader("cseq");if(a){t.cseq=a.value}if(t.type===f.TypeStrings.IncomingResponse){t.method=a.method}break;case"max-forwards":t.setHeader("max-forwards",o);a=t.parseHeader("max-forwards");break;case"www-authenticate":t.setHeader("www-authenticate",o);a=t.parseHeader("www-authenticate");break;case"proxy-authenticate":t.setHeader("proxy-authenticate",o);a=t.parseHeader("proxy-authenticate");break;case"refer-to":case"r":t.setHeader("refer-to",o);a=t.parseHeader("refer-to");if(a){t.referTo=a}break;default:t.setHeader(s,o);a=0}if(a===undefined){return{error:"error parsing header '"+s+"'"}}else{return true}}e.parseHeader=l;function t(e,t){var r=0;var i=e.indexOf("\r\n");var n=t.getLogger("sip.parser");if(i===-1){n.warn("no CRLF found, not a SIP message, discarded");return}var s=e.substring(0,i);var o=h.Grammar.parse(s,"Request_Response");var a;if(o===-1){n.warn('error parsing first line of SIP message: "'+s+'"');return}else if(!o.status_code){a=new d.IncomingRequest(t);a.method=o.method;a.ruri=o.uri}else{a=new d.IncomingResponse(t);a.statusCode=o.status_code;a.reasonPhrase=o.reason_phrase}a.data=e;r=i+2;var f;while(true){i=c(e,r);if(i===-2){f=r+2;break}else if(i===-1){n.error("malformed message");return}var u=l(a,e,r,i);if(u!==true){n.error(o.error);return}r=i+2}if(a.hasHeader("content-length")){a.body=e.substr(f,Number(a.getHeader("content-length")))}else{a.body=e.substring(f)}return a}e.parseMessage=t})(i=t.Parser||(t.Parser={}))},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var n=r(11);var o=r(2);var a=r(0);var f=r(7);var u=r(10);var c=r(4);var s=function(s){i(e,s);function e(e,t,r,i){if(i===void 0){i={}}var n=this;i.extraHeaders=(i.extraHeaders||[]).slice();i.contentType=i.contentType||"text/plain";if(typeof i.expires!=="number"||i.expires%1!==0){i.expires=3600}else{i.expires=Number(i.expires)}if(typeof i.unpublishOnClose!=="boolean"){i.unpublishOnClose=true}if(t===undefined||t===null||t===""){throw new f.Exceptions.MethodParameterError("Publish","Target",t)}else{t=e.normalizeTarget(t);if(t===undefined){throw new f.Exceptions.MethodParameterError("Publish","Target",t)}}n=s.call(this,e,o.C.PUBLISH,t,i)||this;n.type=a.TypeStrings.PublishContext;n.options=i;n.target=t;if(r===undefined||r===null||r===""){throw new f.Exceptions.MethodParameterError("Publish","Event",r)}else{n.event=r}n.logger=e.getLogger("sip.publish");n.pubRequestExpires=n.options.expires;e.on("transportCreated",function(e){e.on("transportError",function(){return n.onTransportError()})});return n}e.prototype.publish=function(e){if(this.publishRefreshTimer){clearTimeout(this.publishRefreshTimer);this.publishRefreshTimer=undefined}this.options.body=e;this.pubRequestBody=this.options.body;if(this.pubRequestExpires===0){this.pubRequestExpires=this.options.expires;this.pubRequestEtag=undefined}if(!this.ua.publishers[this.target.toString()+":"+this.event]){this.ua.publishers[this.target.toString()+":"+this.event]=this}this.sendPublishRequest()};e.prototype.unpublish=function(){if(this.publishRefreshTimer){clearTimeout(this.publishRefreshTimer);this.publishRefreshTimer=undefined}this.pubRequestBody=undefined;this.pubRequestExpires=0;if(this.pubRequestEtag!==undefined){this.sendPublishRequest()}};e.prototype.close=function(){if(this.options.unpublishOnClose){this.unpublish()}else{if(this.publishRefreshTimer){clearTimeout(this.publishRefreshTimer);this.publishRefreshTimer=undefined}this.pubRequestBody=undefined;this.pubRequestExpires=0;this.pubRequestEtag=undefined}if(this.ua.publishers[this.target.toString()+":"+this.event]){delete this.ua.publishers[this.target.toString()+":"+this.event]}};e.prototype.onRequestTimeout=function(){s.prototype.onRequestTimeout.call(this);this.emit("unpublished",undefined,o.C.causes.REQUEST_TIMEOUT)};e.prototype.onTransportError=function(){s.prototype.onTransportError.call(this);this.emit("unpublished",undefined,o.C.causes.CONNECTION_ERROR)};e.prototype.receiveResponse=function(e){var t=this;var r=e.statusCode||0;var i=c.Utils.getReasonPhrase(r);switch(true){case/^1[0-9]{2}$/.test(r.toString()):this.emit("progress",e,i);break;case/^2[0-9]{2}$/.test(r.toString()):if(e.hasHeader("SIP-ETag")){this.pubRequestEtag=e.getHeader("SIP-ETag")}else{this.logger.warn("SIP-ETag header missing in a 200-class response to PUBLISH")}if(e.hasHeader("Expires")){var n=Number(e.getHeader("Expires"));if(typeof n==="number"&&n>=0&&n<=this.pubRequestExpires){this.pubRequestExpires=n}else{this.logger.warn("Bad Expires header in a 200-class response to PUBLISH")}}else{this.logger.warn("Expires header missing in a 200-class response to PUBLISH")}if(this.pubRequestExpires!==0){this.publishRefreshTimer=setTimeout(function(){return t.refreshRequest()},this.pubRequestExpires*900);this.emit("published",e,i)}else{this.emit("unpublished",e,i)}break;case/^412$/.test(r.toString()):if(this.pubRequestEtag!==undefined&&this.pubRequestExpires!==0){this.logger.warn("412 response to PUBLISH, recovering");this.pubRequestEtag=undefined;this.emit("progress",e,i);this.publish(this.options.body)}else{this.logger.warn("412 response to PUBLISH, recovery failed");this.pubRequestExpires=0;this.emit("failed",e,i);this.emit("unpublished",e,i)}break;case/^423$/.test(r.toString()):if(this.pubRequestExpires!==0&&e.hasHeader("Min-Expires")){var s=Number(e.getHeader("Min-Expires"));if(typeof s==="number"||s>this.pubRequestExpires){this.logger.warn("423 code in response to PUBLISH, adjusting the Expires value and trying to recover");this.pubRequestExpires=s;this.emit("progress",e,i);this.publish(this.options.body)}else{this.logger.warn("Bad 423 response Min-Expires header received for PUBLISH");this.pubRequestExpires=0;this.emit("failed",e,i);this.emit("unpublished",e,i)}}else{this.logger.warn("423 response to PUBLISH, recovery failed");this.pubRequestExpires=0;this.emit("failed",e,i);this.emit("unpublished",e,i)}break;default:this.pubRequestExpires=0;this.emit("failed",e,i);this.emit("unpublished",e,i);break}if(this.pubRequestExpires===0){if(this.publishRefreshTimer){clearTimeout(this.publishRefreshTimer);this.publishRefreshTimer=undefined}this.pubRequestBody=undefined;this.pubRequestEtag=undefined}};e.prototype.refreshRequest=function(){if(this.publishRefreshTimer){clearTimeout(this.publishRefreshTimer);this.publishRefreshTimer=undefined}this.pubRequestBody=undefined;if(this.pubRequestEtag===undefined){throw new f.Exceptions.MethodParameterError("Publish","Body",undefined)}if(this.pubRequestExpires===0){throw new f.Exceptions.MethodParameterError("Publish","Expire",this.pubRequestExpires)}this.sendPublishRequest()};e.prototype.sendPublishRequest=function(){var e=Object.create(this.options||Object.prototype);e.extraHeaders=(this.options.extraHeaders||[]).slice();e.extraHeaders.push("Event: "+this.event);e.extraHeaders.push("Expires: "+this.pubRequestExpires);if(this.pubRequestEtag!==undefined){e.extraHeaders.push("SIP-If-Match: "+this.pubRequestEtag)}this.request=new u.OutgoingRequest(o.C.PUBLISH,this.target,this.ua,this.options.params,e.extraHeaders);if(this.pubRequestBody!==undefined){this.request.body={body:this.pubRequestBody,contentType:this.options.contentType}}this.send()};return e}(n.ClientContext);t.PublishContext=s},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();var n=this&&this.__assign||function(){n=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++){t=arguments[r];for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n))e[n]=t[n]}return e};return n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:true});var s=r(11);var a=r(2);var f=r(0);var o=r(7);var u=r(8);var c=r(4);function l(e){var t={expires:600,extraContactHeaderParams:[],instanceId:undefined,params:{},regId:undefined,registrar:undefined};var r=h();for(var i in r.mandatory){if(!e.hasOwnProperty(i)){throw new o.Exceptions.ConfigurationError(i)}else{var n=e[i];var s=r.mandatory[i](n);if(s!==undefined){t[i]=s}else{throw new o.Exceptions.ConfigurationError(i,n)}}}for(var i in r.optional){if(e.hasOwnProperty(i)){var n=e[i];if(n instanceof Array&&n.length===0){continue}if(n===null||n===""||n===undefined||typeof n==="number"&&isNaN(n)){continue}var s=r.optional[i](n);if(s!==undefined){t[i]=s}else{throw new o.Exceptions.ConfigurationError(i,n)}}}return t}function h(){return{mandatory:{},optional:{expires:function(e){if(c.Utils.isDecimal(e)){var t=Number(e);if(t>=0){return t}}},extraContactHeaderParams:function(e){if(e instanceof Array){return e.filter(function(e){return typeof e==="string"})}},instanceId:function(e){if(typeof e!=="string"){return}if(/^uuid:/i.test(e)){e=e.substr(5)}if(u.Grammar.parse(e,"uuid")===-1){return}else{return e}},params:function(e){if(typeof e==="object"){return e}},regId:function(e){if(c.Utils.isDecimal(e)){var t=Number(e);if(t>=0){return t}}},registrar:function(e){if(typeof e!=="string"){return}if(!/^sip:/i.test(e)){e=a.C.SIP+":"+e}var t=u.Grammar.URIParse(e);if(!t){return}else if(t.user){return}else{return t}}}}}var d=function(o){i(e,o);function e(e,t){if(t===void 0){t={}}var r=this;var i=l(t);if(i.regId&&!i.instanceId){i.instanceId=c.Utils.newUUID()}else if(!i.regId&&i.instanceId){i.regId=1}i.params.toUri=i.params.toUri||e.configuration.uri;i.params.toDisplayName=i.params.toDisplayName||e.configuration.displayName;i.params.callId=i.params.callId||c.Utils.createRandomToken(22);i.params.cseq=i.params.cseq||Math.floor(Math.random()*1e4);if(!i.registrar){var n={};if(typeof e.configuration.uri==="object"){n=e.configuration.uri.clone();n.user=undefined}else{n=e.configuration.uri}i.registrar=n}r=o.call(this,e,a.C.REGISTER,i.registrar,i)||this;r.type=f.TypeStrings.RegisterContext;r.options=i;r.logger=e.getLogger("sip.registercontext");r.logger.log("configuration parameters for RegisterContext after validation:");for(var s in i){if(i.hasOwnProperty(s)){r.logger.log("· "+s+": "+JSON.stringify(i[s]))}}r.expires=i.expires;r.cseq=i.params.cseq;r.contact=e.contact.toString();r.registered=false;e.on("transportCreated",function(e){e.on("disconnected",function(){return r.onTransportDisconnected()})});return r}e.prototype.register=function(e){var s=this;if(e===void 0){e={}}this.options=n({},this.options,e);var t=(this.options.extraHeaders||[]).slice();t.push("Contact: "+this.generateContactHeader(this.expires));t.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());this.closeHeaders=this.options.closeWithHeaders?(this.options.extraHeaders||[]).slice():[];this.receiveResponse=function(e){if(e.cseq!==s.cseq){return}if(s.registrationTimer!==undefined){clearTimeout(s.registrationTimer);s.registrationTimer=undefined}var t=(e.statusCode||0).toString();switch(true){case/^1[0-9]{2}$/.test(t):s.emit("progress",e);break;case/^2[0-9]{2}$/.test(t):s.emit("accepted",e);var r=void 0;if(e.hasHeader("expires")){r=Number(e.getHeader("expires"))}if(s.registrationExpiredTimer!==undefined){clearTimeout(s.registrationExpiredTimer);s.registrationExpiredTimer=undefined}var i=e.getHeaders("contact").length;if(!i){s.logger.warn("no Contact header in response to REGISTER, response ignored");break}var n=void 0;while(i--){n=e.parseHeader("contact",i);if(n.uri.user===s.ua.contact.uri.user){r=n.getParam("expires");break}else{n=undefined}}if(!n){s.logger.warn("no Contact header pointing to us, response ignored");break}if(r===undefined){r=s.expires}s.registrationTimer=setTimeout(function(){s.registrationTimer=undefined;s.register(s.options)},r*1e3-3e3);s.registrationExpiredTimer=setTimeout(function(){s.logger.warn("registration expired");if(s.registered){s.unregistered(undefined,a.C.causes.EXPIRES)}},r*1e3);if(n.hasParam("temp-gruu")){s.ua.contact.tempGruu=u.Grammar.URIParse(n.getParam("temp-gruu").replace(/"/g,""))}if(n.hasParam("pub-gruu")){s.ua.contact.pubGruu=u.Grammar.URIParse(n.getParam("pub-gruu").replace(/"/g,""))}s.registered=true;s.emit("registered",e||undefined);break;case/^423$/.test(t):if(e.hasHeader("min-expires")){s.expires=Number(e.getHeader("min-expires"));s.register(s.options)}else{s.logger.warn("423 response received for REGISTER without Min-Expires");s.registrationFailure(e,a.C.causes.SIP_FAILURE_CODE)}break;default:s.registrationFailure(e,c.Utils.sipErrorCause(e.statusCode||0))}};this.onRequestTimeout=function(){s.registrationFailure(undefined,a.C.causes.REQUEST_TIMEOUT)};this.onTransportError=function(){s.registrationFailure(undefined,a.C.causes.CONNECTION_ERROR)};this.cseq++;if(this.request){this.request.cseq=this.cseq;this.request.setHeader("cseq",this.cseq+" REGISTER");this.request.extraHeaders=t}this.send()};e.prototype.close=function(){var e={all:false,extraHeaders:this.closeHeaders};this.registeredBefore=this.registered;if(this.registered){this.unregister(e)}};e.prototype.unregister=function(e){var r=this;if(e===void 0){e={}}if(!this.registered&&!e.all){this.logger.warn("Already unregistered, but sending an unregister anyways.")}var t=(e.extraHeaders||[]).slice();this.registered=false;if(this.registrationTimer!==undefined){clearTimeout(this.registrationTimer);this.registrationTimer=undefined}if(e.all){t.push("Contact: *");t.push("Expires: 0")}else{t.push("Contact: "+this.generateContactHeader(0))}this.receiveResponse=function(e){var t=e&&e.statusCode?e.statusCode.toString():"";switch(true){case/^1[0-9]{2}$/.test(t):r.emit("progress",e);break;case/^2[0-9]{2}$/.test(t):r.emit("accepted",e);if(r.registrationExpiredTimer!==undefined){clearTimeout(r.registrationExpiredTimer);r.registrationExpiredTimer=undefined}r.unregistered(e);break;default:r.unregistered(e,c.Utils.sipErrorCause(e.statusCode||0))}};this.onRequestTimeout=function(){};this.cseq++;if(this.request){this.request.cseq=this.cseq;this.request.setHeader("cseq",this.cseq+" REGISTER");this.request.extraHeaders=t}this.send()};e.prototype.unregistered=function(e,t){this.registered=false;this.emit("unregistered",e||undefined,t||undefined)};e.prototype.registrationFailure=function(e,t){this.emit("failed",e||undefined,t||undefined)};e.prototype.onTransportDisconnected=function(){this.registeredBefore=this.registered;if(this.registrationTimer!==undefined){clearTimeout(this.registrationTimer);this.registrationTimer=undefined}if(this.registrationExpiredTimer!==undefined){clearTimeout(this.registrationExpiredTimer);this.registrationExpiredTimer=undefined}if(this.registered){this.unregistered(undefined,a.C.causes.CONNECTION_ERROR)}};e.prototype.generateContactHeader=function(e){if(e===void 0){e=0}var t=this.contact;if(this.options.regId&&this.options.instanceId){t+=";reg-id="+this.options.regId;t+=';+sip.instance="<urn:uuid:'+this.options.instanceId+'>"'}if(this.options.extraContactHeaderParams){this.options.extraContactHeaderParams.forEach(function(e){t+=";"+e})}t+=";expires="+e;return t};return e}(s.ClientContext);t.RegisterContext=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var u=r(2);var S=r(0);var c=r(4);var i;(function(e){function f(e,t,r){var i=c.Utils.buildStatusLine(e);var n=t.getHeaders("via");for(var s=0,o=n;s<o.length;s++){var a=o[s];i+="Via: "+a+"\r\n"}var f=t.getHeader("To")||"";if(!t.toTag){f+=";tag="+c.Utils.newTag()}i+="To: "+f+"\r\n";i+="From: "+t.getHeader("From")+"\r\n";i+="Call-ID: "+t.callId+"\r\n";i+="CSeq: "+t.cseq+" "+t.method+"\r\n";i+="\r\n";r.send(i)}e.reply=f;function d(e,t,r){if(!e.ruri||e.ruri.scheme!=="sip"){f(416,e,r);return false}return true}e.rfc3261_8_2_2_1=d;function p(e,t,r){if(!e.toTag){if(e.callId.substr(0,5)===t.configuration.sipjsId){f(482,e,r);return false}}return true}e.rfc3261_16_3_4=p;function v(e,t,r){var i=c.Utils.str_utf8_length(e.body);var n=e.getHeader("content-length");if(n&&i<Number(n)){f(400,e,r);return false}return true}e.rfc3261_18_3_request=v;function g(e,t,r){var i=e.fromTag;var n=e.callId;var s=e.cseq;if(!e.toTag){if(e.method===u.C.INVITE){if(t.transactions.ist[e.viaBranch]){return true}else{for(var o in t.transactions.ist){if(t.transactions.ist.hasOwnProperty(o)){var a=t.transactions.ist[o];if(a&&a.request.fromTag===i&&a.request.callId===n&&a.request.cseq===s){f(482,e,r);return false}}}}}else{if(t.transactions.nist[e.viaBranch]){return true}else{for(var o in t.transactions.nist){if(t.transactions.nist.hasOwnProperty(o)){var a=t.transactions.nist[o];if(a&&a.request.fromTag===i&&a.request.callId===n&&a.request.cseq===s){f(482,e,r);return false}}}}}}return true}e.rfc3261_8_2_2_2=g;function m(e,t){if(e.getHeaders("via").length>1){t.getLogger("sip.sanitycheck").warn("More than one Via header field present in the response."+" Dropping the response");return false}return true}e.rfc3261_8_1_3_3=m;function y(e,t){if(e.via.host!==t.configuration.viaHost||e.via.port!==undefined){t.getLogger("sip.sanitycheck").warn("Via sent-by in the response does not match UA Via host value."+" Dropping the response");return false}return true}e.rfc3261_18_1_2=y;function T(e,t){var r=c.Utils.str_utf8_length(e.body);var i=e.getHeader("content-length");if(i&&r<Number(i)){t.getLogger("sip.sanitycheck").warn("Message body length is lower than the value in"+" Content-Length header field. Dropping the response");return false}return true}e.rfc3261_18_3_response=T;function C(e,t){var r=["from","to","call_id","cseq","via"];for(var i=0,n=r;i<n.length;i++){var s=n[i];if(!e.hasHeader(s)){t.getLogger("sip.sanitycheck").warn("Missing mandatory header field : "+s+". Dropping the response");return false}}return true}e.minimumHeaders=C;function t(e,t,r){var i=[d,p,v,g];var n=[m,y,T];var s=[C];for(var o=0,a=s;o<a.length;o++){var f=a[o];if(!f(e,t,r)){return false}}if(e.type===S.TypeStrings.IncomingRequest){for(var u=0,c=i;u<c.length;u++){var f=c[u];if(!f(e,t,r)){return false}}}else if(e.type===S.TypeStrings.IncomingResponse){for(var l=0,h=n;l<h.length;l++){var f=h[l];if(!f(e,t,r)){return false}}}return true}e.sanityCheck=t})(i=t.SanityCheck||(t.SanityCheck={}))},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var n=r(11);var a=r(2);var s=r(21);var f=r(0);var u=r(16);var c=r(4);var o=function(o){i(e,o);function e(e,t,r,i){if(i===void 0){i={}}var n=this;if(!r){throw new TypeError("Event necessary to create a subscription.")}i.extraHeaders=(i.extraHeaders||[]).slice();var s;if(typeof i.expires!=="number"){e.logger.warn("expires must be a number. Using default of 3600.");s=3600}else{s=i.expires}i.extraHeaders.push("Event: "+r);i.extraHeaders.push("Expires: "+s);i.extraHeaders.push("Contact: "+e.contact.toString());i.extraHeaders.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());n=o.call(this,e,a.C.SUBSCRIBE,t,i)||this;n.type=f.TypeStrings.Subscription;n.event=r;n.requestedExpires=s;n.state="init";n.contact=e.contact.toString();n.extraHeaders=i.extraHeaders;n.logger=e.getLogger("sip.subscription");n.expires=s;n.timers={N:undefined,subDuration:undefined};n.errorCodes=[404,405,410,416,480,481,482,483,484,485,489,501,604];return n}e.prototype.subscribe=function(){var e=this;if(this.state==="active"){this.refresh();return this}else if(this.state==="notify_wait"){return this}clearTimeout(this.timers.subDuration);clearTimeout(this.timers.N);this.timers.N=setTimeout(function(){return e.timer_fire()},u.Timers.TIMER_N);if(this.request&&this.request.from){this.ua.earlySubscriptions[this.request.callId+this.request.from.parameters.tag+this.event]=this}this.send();this.state="notify_wait";return this};e.prototype.refresh=function(){if(this.state==="terminated"||this.state==="pending"||this.state==="notify_wait"||!this.dialog){return}this.dialog.sendRequest(this,a.C.SUBSCRIBE,{extraHeaders:this.extraHeaders,body:this.body})};e.prototype.receiveResponse=function(e){var t=this;var r=e.statusCode?e.statusCode:0;var i=c.Utils.getReasonPhrase(r);if(this.state==="notify_wait"&&r>=300||this.state!=="notify_wait"&&this.errorCodes.indexOf(r)!==-1){this.failed(e,undefined)}else if(/^2[0-9]{2}$/.test(r.toString())){this.emit("accepted",e,i);var n=e.getHeader("Expires");if(n&&Number(n)<=this.requestedExpires){this.expires=Number(n);this.timers.subDuration=setTimeout(function(){return t.refresh()},Number(n)*900)}else{if(!n){this.logger.warn("Expires header missing in a 200-class response to SUBSCRIBE");this.failed(e,"Expires Header Missing")}else{this.logger.warn("Expires header in a 200-class response to"+" SUBSCRIBE with a higher value than the one in the request");this.failed(e,"Invalid Expires Header")}}}else if(r>300){this.emit("failed",e,i);this.emit("rejected",e,i)}};e.prototype.unsubscribe=function(){var e=this;var t=[];this.state="terminated";t.push("Event: "+this.event);t.push("Expires: 0");t.push("Contact: "+this.contact);t.push("Allow: "+["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"].toString());this.receiveResponse=function(){};if(this.dialog){this.dialog.sendRequest(this,a.C.SUBSCRIBE,{extraHeaders:t,body:this.body})}clearTimeout(this.timers.subDuration);clearTimeout(this.timers.N);this.timers.N=setTimeout(function(){return e.timer_fire()},u.Timers.TIMER_N);this.emit("terminated")};e.prototype.receiveRequest=function(e){var t=this;var r;var i=function(){if(r.expires){clearTimeout(t.timers.subDuration);r.expires=Math.min(t.expires,Math.max(r.expires,0));t.timers.subDuration=setTimeout(function(){return t.refresh()},r.expires*900)}};if(!this.matchEvent(e)){e.reply(489);return}if(!this.dialog){if(this.createConfirmedDialog(e,"UAS")){if(this.dialog){this.id=this.dialog.id.toString();if(this.request&&this.request.from){delete this.ua.earlySubscriptions[this.request.callId+this.request.from.parameters.tag+this.event];this.ua.subscriptions[this.id||""]=this}}}}r=e.parseHeader("Subscription-State");e.reply(200);clearTimeout(this.timers.N);this.emit("notify",{request:e});if(this.state==="terminated"){if(r.state==="terminated"){this.terminateDialog();clearTimeout(this.timers.N);clearTimeout(this.timers.subDuration);delete this.ua.subscriptions[this.id||""]}return}switch(r.state){case"active":this.state="active";i();break;case"pending":if(this.state==="notify_wait"){i()}this.state="pending";break;case"terminated":clearTimeout(this.timers.subDuration);if(r.reason){this.logger.log("terminating subscription with reason "+r.reason);switch(r.reason){case"deactivated":case"timeout":this.subscribe();return;case"probation":case"giveup":if(r.params&&r.params["retry-after"]){this.timers.subDuration=setTimeout(function(){return t.subscribe()},r.params["retry-after"])}else{this.subscribe()}return;case"rejected":case"noresource":case"invariant":break}}this.close();break}};e.prototype.close=function(){if(this.state==="notify_wait"){this.state="terminated";clearTimeout(this.timers.N);clearTimeout(this.timers.subDuration);this.receiveResponse=function(){};if(this.request&&this.request.from){delete this.ua.earlySubscriptions[this.request.callId+this.request.from.parameters.tag+this.event]}this.emit("terminated")}else if(this.state!=="terminated"){this.unsubscribe()}};e.prototype.onDialogError=function(e){this.failed(e,a.C.causes.DIALOG_ERROR)};e.prototype.on=function(e,t){return o.prototype.on.call(this,e,t)};e.prototype.timer_fire=function(){if(this.state==="terminated"){this.terminateDialog();clearTimeout(this.timers.N);clearTimeout(this.timers.subDuration);delete this.ua.subscriptions[this.id||""]}else if(this.state==="notify_wait"||this.state==="pending"){this.close()}else{this.refresh()}};e.prototype.createConfirmedDialog=function(e,t){this.terminateDialog();var r=new s.Dialog(this,e,t);if(this.request){r.inviteSeqnum=this.request.cseq;r.localSeqnum=this.request.cseq}if(!r.error){this.dialog=r;return true}else{return false}};e.prototype.terminateDialog=function(){if(this.dialog){delete this.ua.subscriptions[this.id||""];this.dialog.terminate();delete this.dialog}};e.prototype.failed=function(e,t){this.close();this.emit("failed",e,t);this.emit("rejected",e,t);return this};e.prototype.matchEvent=function(e){if(!e.hasHeader("Event")){this.logger.warn("missing Event header");return false}if(!e.hasHeader("Subscription-State")){this.logger.warn("missing Subscription-State header");return false}var t=e.parseHeader("event").event;if(this.event!==t){this.logger.warn("event match failed");e.reply(481,"Event Match Failed");return false}else{return true}};return e}(n.ClientContext);t.Subscription=o},function(e,t,r){"use strict";var n=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var i=r(6);var s=r(0);var o=function(i){n(e,i);function e(e,t){var r=i.call(this)||this;r.type=s.TypeStrings.Transport;r.logger=e;return r}e.prototype.connect=function(e){var t=this;if(e===void 0){e={}}return this.connectPromise(e).then(function(e){if(!e.overrideEvent){t.emit("connected")}})};e.prototype.send=function(e,t){var r=this;if(t===void 0){t={}}return this.sendPromise(e).then(function(e){if(!e.overrideEvent){r.emit("messageSent",e.msg)}})};e.prototype.disconnect=function(e){var t=this;if(e===void 0){e={}}return this.disconnectPromise(e).then(function(e){if(!e.overrideEvent){t.emit("disconnected")}})};e.prototype.afterConnected=function(e){if(this.isConnected()){e()}else{this.once("connected",e)}};e.prototype.waitForConnected=function(){var t=this;console.warn("DEPRECATION WARNING Transport.waitForConnected(): use afterConnected() instead");return new Promise(function(e){t.afterConnected(e)})};return e}(i.EventEmitter);t.Transport=o},function(e,v,R){"use strict";(function(a){var e=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(v,"__esModule",{value:true});var t=R(6);var s=R(11);var g=R(2);var h=R(32);var m=R(0);var d=R(7);var r=R(8);var o=R(33);var i=R(34);var f=R(35);var u=R(36);var c=R(37);var y=R(22);var T=R(14);var l=R(10);var p=R(38);var C=R(9);var S=R(17);var A=R(4);var b=R(41);var w=R(42);var E=a.window||a;var n=function(n){e(v,n);function v(e){var t=n.call(this)||this;t.type=m.TypeStrings.UA;t.log=new o.LoggerFactory;t.logger=t.getLogger("sip.ua");t.cache={credentials:{}};t.configuration={};t.dialogs={};t.applicants={};t.data={};t.sessions={};t.subscriptions={};t.earlySubscriptions={};t.publishers={};t.status=m.UAStatus.STATUS_INIT;t.transactions={nist:{},nict:{},ist:{},ict:{}};if(e===undefined){e={}}else if(typeof e==="string"||e instanceof String){e={uri:e}}if(e.log){if(e.log.hasOwnProperty("builtinEnabled")){t.log.builtinEnabled=e.log.builtinEnabled}if(e.log.hasOwnProperty("connector")){t.log.connector=e.log.connector}if(e.log.hasOwnProperty("level")){var r=e.log.level;var i=typeof r==="string"?o.Levels[r]:r;if(!i){t.logger.error('Invalid "level" parameter value: '+JSON.stringify(r))}else{t.log.level=i}}}try{t.loadConfig(e)}catch(e){t.status=m.UAStatus.STATUS_NOT_READY;t.error=v.C.CONFIGURATION_ERROR;throw e}t.registerContext=new u.RegisterContext(t,e.registerOptions);t.registerContext.on("failed",t.emit.bind(t,"registrationFailed"));t.registerContext.on("registered",t.emit.bind(t,"registered"));t.registerContext.on("unregistered",t.emit.bind(t,"unregistered"));if(t.configuration.autostart){t.start()}return t}Object.defineProperty(v.prototype,"transactionsCount",{get:function(){var e=0;for(var t=0,r=["nist","nict","ist","ict"];t<r.length;t++){var i=r[t];e+=Object.keys(this.transactions[i]).length}return e},enumerable:true,configurable:true});Object.defineProperty(v.prototype,"nictTransactionsCount",{get:function(){return Object.keys(this.transactions.nict).length},enumerable:true,configurable:true});Object.defineProperty(v.prototype,"nistTransactionsCount",{get:function(){return Object.keys(this.transactions.nist).length},enumerable:true,configurable:true});Object.defineProperty(v.prototype,"ictTransactionsCount",{get:function(){return Object.keys(this.transactions.ict).length},enumerable:true,configurable:true});Object.defineProperty(v.prototype,"istTransactionsCount",{get:function(){return Object.keys(this.transactions.ist).length},enumerable:true,configurable:true});v.prototype.register=function(e){if(e===void 0){e={}}if(e.register){this.configuration.register=true}this.registerContext.register(e);return this};v.prototype.unregister=function(e){var t=this;this.configuration.register=false;if(this.transport){this.transport.afterConnected(function(){t.registerContext.unregister(e)})}return this};v.prototype.isRegistered=function(){return this.registerContext.registered};v.prototype.invite=function(e,t,r){var i=this;var n=new T.InviteClientContext(this,e,t,r);if(this.transport){this.transport.afterConnected(function(){n.invite();i.emit("inviteSent",n)})}return n};v.prototype.subscribe=function(e,t,r){var i=new p.Subscription(this,e,t,r);if(this.transport){this.transport.afterConnected(function(){return i.subscribe()})}return i};v.prototype.publish=function(e,t,r,i){var n=new f.PublishContext(this,e,t,i);if(this.transport){this.transport.afterConnected(function(){n.publish(r)})}return n};v.prototype.message=function(e,t,r){if(r===void 0){r={}}if(t===undefined){throw new TypeError("Not enough arguments")}r.contentType=r.contentType||"text/plain";r.body=t;return this.request(g.C.MESSAGE,e,r)};v.prototype.request=function(e,t,r){var i=new s.ClientContext(this,e,t,r);if(this.transport){this.transport.afterConnected(function(){return i.send()})}return i};v.prototype.stop=function(){var e=this;this.logger.log("user requested closure...");if(this.status===m.UAStatus.STATUS_USER_CLOSED){this.logger.warn("UA already closed");return this}this.logger.log("closing registerContext");this.registerContext.close();for(var t in this.sessions){if(this.sessions[t]){this.logger.log("closing session "+t);this.sessions[t].terminate()}}for(var r in this.subscriptions){if(this.subscriptions[r]){this.logger.log("unsubscribing from subscription "+r);this.subscriptions[r].close()}}for(var i in this.earlySubscriptions){if(this.earlySubscriptions[i]){this.logger.log("unsubscribing from early subscription "+i);this.earlySubscriptions[i].close()}}for(var n in this.publishers){if(this.publishers[n]){this.logger.log("unpublish "+n);this.publishers[n].close()}}for(var s in this.applicants){if(this.applicants[s]){this.applicants[s].close()}}this.status=m.UAStatus.STATUS_USER_CLOSED;if(this.nistTransactionsCount===0&&this.nictTransactionsCount===0&&this.transport){this.transport.disconnect()}else{var o=function(){if(e.nistTransactionsCount===0&&e.nictTransactionsCount===0){e.removeListener("transactionDestroyed",o);if(e.transport){e.transport.disconnect()}}};this.on("transactionDestroyed",o)}if(typeof E.removeEventListener==="function"){if(!(a.chrome&&a.chrome.app&&a.chrome.app.runtime)){E.removeEventListener("unload",this.environListener)}}return this};v.prototype.start=function(){var e=this;this.logger.log("user requested startup...");if(this.status===m.UAStatus.STATUS_INIT){this.status=m.UAStatus.STATUS_STARTING;if(!this.configuration.transportConstructor){throw new d.Exceptions.TransportError("Transport constructor not set")}this.transport=new this.configuration.transportConstructor(this.getLogger("sip.transport"),this.configuration.transportOptions);this.setTransportListeners();this.emit("transportCreated",this.transport);this.transport.connect()}else if(this.status===m.UAStatus.STATUS_USER_CLOSED){this.logger.log("resuming");this.status=m.UAStatus.STATUS_READY;if(this.transport){this.transport.connect()}}else if(this.status===m.UAStatus.STATUS_STARTING){this.logger.log("UA is in STARTING status, not opening new connection")}else if(this.status===m.UAStatus.STATUS_READY){this.logger.log("UA is in READY status, not resuming")}else{this.logger.error("Connection is down. Auto-Recovery system is trying to connect")}if(this.configuration.autostop&&typeof E.addEventListener==="function"){if(!(a.chrome&&a.chrome.app&&a.chrome.app.runtime)){this.environListener=this.stop;E.addEventListener("unload",function(){return e.environListener()})}}return this};v.prototype.normalizeTarget=function(e){return A.Utils.normalizeTarget(e,this.configuration.hostportParams)};v.prototype.getLogger=function(e,t){return this.log.getLogger(e,t)};v.prototype.getLoggerFactory=function(){return this.log};v.prototype.newTransaction=function(e){this.transactions[e.kind][e.id]=e;this.emit("newTransaction",{transaction:e})};v.prototype.destroyTransaction=function(e){delete this.transactions[e.kind][e.id];this.emit("transactionDestroyed",{transaction:e})};v.prototype.findSession=function(e){return this.sessions[e.callId+e.fromTag]||this.sessions[e.callId+e.toTag]||undefined};v.prototype.on=function(e,t){return n.prototype.on.call(this,e,t)};v.prototype.saveCredentials=function(e){this.cache.credentials[e.realm]=this.cache.credentials[e.realm]||{};this.cache.credentials[e.realm][e.uri]=e;return this};v.prototype.getCredentials=function(e){var t=e.ruri.type===m.TypeStrings.URI?e.ruri.host:"";if(t&&this.cache.credentials[t]&&this.cache.credentials[t][e.ruri.toString()]){var r=this.cache.credentials[t][e.ruri.toString()];r.method=e.method;return r}};v.prototype.onTransportError=function(){if(this.status===m.UAStatus.STATUS_USER_CLOSED){return}if(!this.error||this.error!==v.C.NETWORK_ERROR){this.status=m.UAStatus.STATUS_NOT_READY;this.error=v.C.NETWORK_ERROR}};v.prototype.setTransportListeners=function(){var t=this;if(this.transport){this.transport.on("connected",function(){return t.onTransportConnected()});this.transport.on("message",function(e){return t.onTransportReceiveMsg(e)});this.transport.on("transportError",function(){return t.onTransportError()})}};v.prototype.onTransportConnected=function(){var e=this;if(this.configuration.register){Promise.resolve().then(function(){return e.registerContext.register()})}};v.prototype.onTransportReceiveMsg=function(e){var t=i.Parser.parseMessage(e,this);if(!t){this.logger.warn("UA failed to parse incoming SIP message - discarding.");return}if(this.status===m.UAStatus.STATUS_USER_CLOSED&&t instanceof l.IncomingRequest){this.logger.warn("UA received message when status = USER_CLOSED - aborting");return}if(!this.transport){this.logger.warn("UA received message without transport - aborting");return}if(!c.SanityCheck.sanityCheck(t,this,this.transport)){return}if(t instanceof l.IncomingRequest){this.receiveRequestFromTransport(t);return}if(t instanceof l.IncomingResponse){this.receiveResponseFromTransport(t);return}throw new Error("Invalid message type.")};v.prototype.receiveRequestFromTransport=function(e){e.transport=this.transport;if(!(this.configuration.uri instanceof S.URI)){throw new Error("Configuration URI not instance of URI.")}if(!e.ruri){throw new Error("Request ruri undefined.")}if(e.ruri.scheme!==g.C.SIP){e.reply_sl(416);return}var t=e.ruri;var r=function(e){return!!e&&e.user===t.user};if(!r(this.configuration.uri)&&!(r(this.contact.uri)||r(this.contact.pubGruu)||r(this.contact.tempGruu))){this.logger.warn("Request-URI does not point to us");if(e.method!==g.C.ACK){e.reply_sl(404)}return}var i=this.transactions.ist[e.viaBranch];var n=this.transactions.nist[e.viaBranch];if(e.method===g.C.CANCEL){if(i||n){e.reply_sl(200);if(i&&i.state===C.TransactionState.Proceeding){this.receiveRequest(e)}}else{e.reply_sl(481)}return}if(e.method===g.C.ACK){if(i&&i.state===C.TransactionState.Accepted){this.receiveRequest(e);return}}if(i){i.receiveRequest(e);return}if(n){n.receiveRequest(e);return}this.receiveRequest(e)};v.prototype.receiveResponseFromTransport=function(e){var t;switch(e.method){case g.C.INVITE:t=this.transactions.ict[e.viaBranch];break;case g.C.ACK:break;default:t=this.transactions.nict[e.viaBranch];break}if(!t){var r="Discarding unmatched "+e.statusCode+" response to "+e.method+" "+e.viaBranch+".";this.logger.warn(r);return}e.transaction=t;t.receiveResponse(e)};v.prototype.receiveRequest=function(e){var t=this;var r=e.method;var i;if(r===g.C.OPTIONS){var n=this.transport;if(!n){throw new Error("Transport undefined.")}var s={loggerFactory:this.getLoggerFactory(),onStateChange:function(e){if(e===C.TransactionState.Terminated){t.destroyTransaction(o)}},onTransportError:function(e){t.logger.error(e.message)}};var o=new C.NonInviteServerTransaction(e,n,s);this.newTransaction(o);e.reply(200,undefined,["Allow: "+v.C.ALLOWED_METHODS.toString(),"Accept: "+v.C.ACCEPTED_BODY_TYPES.toString()])}else if(r===g.C.MESSAGE){i=new y.ServerContext(this,e);i.body=e.body;i.contentType=e.getHeader("Content-Type")||"text/plain";e.reply(200,undefined);this.emit("message",i)}else if(r!==g.C.INVITE&&r!==g.C.ACK){i=new y.ServerContext(this,e)}if(!e.toTag){switch(r){case g.C.INVITE:var a=this.configuration.replaces!==g.C.supported.UNSUPPORTED&&e.parseHeader("replaces");var f=void 0;if(a){f=this.dialogs[a.call_id+a.replaces_to_tag+a.replaces_from_tag];if(!f){e.reply_sl(481,undefined);return}else if(!(f.owner.type===m.TypeStrings.Subscription)&&f.owner.status===m.SessionStatus.STATUS_TERMINATED){e.reply_sl(603,undefined);return}else if(f.state===m.DialogStatus.STATUS_CONFIRMED&&a.earlyOnly){e.reply_sl(486,undefined);return}}var u=new T.InviteServerContext(this,e);if(f&&!(f.owner.type===m.TypeStrings.Subscription)){u.replacee=f&&f.owner}this.emit("invite",u);break;case g.C.BYE:e.reply(481);break;case g.C.CANCEL:var c=this.findSession(e);if(c){c.receiveRequest(e)}else{this.logger.warn("received CANCEL request for a non existent session")}break;case g.C.ACK:break;case g.C.NOTIFY:if(this.configuration.allowLegacyNotifications&&this.listeners("notify").length>0){e.reply(200,undefined);this.emit("notify",{request:e})}else{e.reply(481,"Subscription does not exist")}break;case g.C.REFER:this.logger.log("Received an out of dialog refer");if(this.configuration.allowOutOfDialogRefers){this.logger.log("Allow out of dialog refers is enabled on the UA");var l=new T.ReferServerContext(this,e);if(this.listeners("outOfDialogReferRequested").length){this.emit("outOfDialogReferRequested",l)}else{this.logger.log("No outOfDialogReferRequest listeners,"+" automatically accepting and following the out of dialog refer");l.accept({followRefer:true})}break}e.reply(405);break;default:e.reply(405);break}}else{var h=this.findDialog(e);if(h){if(r===g.C.INVITE){var n=this.transport;if(!n){throw new Error("Transport undefined.")}var s={loggerFactory:this.log,onStateChange:function(e){if(e===C.TransactionState.Terminated){t.destroyTransaction(d)}},onTransportError:function(e){t.logger.error(e.message);h.owner.onTransportError()}};var d=new C.InviteServerTransaction(e,n,s);this.newTransaction(d)}h.receiveRequest(e)}else if(r===g.C.NOTIFY){var c=this.findSession(e);var p=this.findEarlySubscription(e);if(c){c.receiveRequest(e)}else if(p){p.receiveRequest(e)}else{this.logger.warn("received NOTIFY request for a non existent session or subscription");e.reply(481,"Subscription does not exist")}}else{if(r!==g.C.ACK){e.reply(481)}}}};v.prototype.findDialog=function(e){return this.dialogs[e.callId+e.fromTag+e.toTag]||this.dialogs[e.callId+e.toTag+e.fromTag]||undefined};v.prototype.findEarlySubscription=function(e){return this.earlySubscriptions[e.callId+e.toTag+e.getHeader("event")]||undefined};v.prototype.checkAuthenticationFactory=function(e){if(!(e instanceof Function)){return}if(!e.initialize){e.initialize=function(){return Promise.resolve()}}return e};v.prototype.loadConfig=function(e){var n=this;var s={viaHost:A.Utils.createRandomToken(12)+".invalid",uri:new S.URI("sip","anonymous."+A.Utils.createRandomToken(6),"anonymous.invalid",undefined,undefined),custom:{},displayName:"",password:undefined,register:true,registerOptions:{},transportConstructor:w.Transport,transportOptions:{},userAgentString:g.C.USER_AGENT,noAnswerTimeout:60,hackViaTcp:false,hackIpInContact:false,hackWssInTransport:false,hackAllowUnregisteredOptionTags:false,sessionDescriptionHandlerFactoryOptions:{constraints:{},peerConnectionOptions:{}},extraSupported:[],contactName:A.Utils.createRandomToken(8),contactTransport:"ws",forceRport:false,autostart:true,autostop:true,rel100:g.C.supported.UNSUPPORTED,dtmfType:g.C.dtmfType.INFO,replaces:g.C.supported.UNSUPPORTED,sessionDescriptionHandlerFactory:b.SessionDescriptionHandler.defaultFactory,authenticationFactory:this.checkAuthenticationFactory(function(e){return new h.DigestAuthentication(e)}),allowLegacyNotifications:false,allowOutOfDialogRefers:false};var t=this.getConfigurationCheck();for(var r in t.mandatory){if(!e.hasOwnProperty(r)){throw new d.Exceptions.ConfigurationError(r)}else{var i=e[r];var o=t.mandatory[r](i);if(o!==undefined){s[r]=o}else{throw new d.Exceptions.ConfigurationError(r,i)}}}for(var r in t.optional){if(e.hasOwnProperty(r)){var i=e[r];if(i instanceof Array&&i.length===0||(i===null||i===""||i===undefined)||typeof i==="number"&&isNaN(i)){continue}var o=t.optional[r](i);if(o!==undefined){s[r]=o}else{throw new d.Exceptions.ConfigurationError(r,i)}}}if(s.displayName===0){s.displayName="0"}s.sipjsId=A.Utils.createRandomToken(5);var a=s.uri.clone();a.user=undefined;s.hostportParams=a.toRaw().replace(/^sip:/i,"");if(!s.authorizationUser){s.authorizationUser=s.uri.user}s.noAnswerTimeout=s.noAnswerTimeout*1e3;if(s.hackIpInContact){if(typeof s.hackIpInContact==="boolean"){var f=1;var u=254;var c=Math.floor(Math.random()*(u-f+1)+f);s.viaHost="192.0.2."+c}else if(typeof s.hackIpInContact==="string"){s.viaHost=s.hackIpInContact}}if(s.hackWssInTransport){s.contactTransport="wss"}this.contact={pubGruu:undefined,tempGruu:undefined,uri:new S.URI("sip",s.contactName,s.viaHost,undefined,{transport:s.contactTransport}),toString:function(e){if(e===void 0){e={}}var t=e.anonymous||false;var r=e.outbound||false;var i="<";if(t){i+=(n.contact.tempGruu||"sip:anonymous@anonymous.invalid;transport="+s.contactTransport).toString()}else{i+=(n.contact.pubGruu||n.contact.uri).toString()}if(r){i+=";ob"}i+=">";return i}};var l={};for(var r in s){if(s.hasOwnProperty(r)){l[r]=s[r]}}Object.assign(this.configuration,l);this.logger.log("configuration parameters after validation:");for(var r in s){if(s.hasOwnProperty(r)){switch(r){case"uri":case"sessionDescriptionHandlerFactory":this.logger.log("· "+r+": "+s[r]);break;case"password":this.logger.log("· "+r+": "+"NOT SHOWN");break;case"transportConstructor":this.logger.log("· "+r+": "+s[r].name);break;default:this.logger.log("· "+r+": "+JSON.stringify(s[r]))}}}return};v.prototype.getConfigurationCheck=function(){return{mandatory:{},optional:{uri:function(e){if(!/^sip:/i.test(e)){e=g.C.SIP+":"+e}var t=r.Grammar.URIParse(e);if(!t||!t.user){return}else{return t}},transportConstructor:function(e){if(e instanceof Function){return e}},transportOptions:function(e){if(typeof e==="object"){return e}},authorizationUser:function(e){if(r.Grammar.parse('"'+e+'"',"quoted_string")===-1){return}else{return e}},displayName:function(e){if(r.Grammar.parse('"'+e+'"',"displayName")===-1){return}else{return e}},dtmfType:function(e){switch(e){case g.C.dtmfType.RTP:return g.C.dtmfType.RTP;case g.C.dtmfType.INFO:default:return g.C.dtmfType.INFO}},hackViaTcp:function(e){if(typeof e==="boolean"){return e}},hackIpInContact:function(e){if(typeof e==="boolean"){return e}else if(typeof e==="string"&&r.Grammar.parse(e,"host")!==-1){return e}},hackWssInTransport:function(e){if(typeof e==="boolean"){return e}},hackAllowUnregisteredOptionTags:function(e){if(typeof e==="boolean"){return e}},contactTransport:function(e){if(typeof e==="string"){return e}},extraSupported:function(e){if(!(e instanceof Array)){return}for(var t=0,r=e;t<r.length;t++){var i=r[t];if(typeof i!=="string"){return}}return e},forceRport:function(e){if(typeof e==="boolean"){return e}},noAnswerTimeout:function(e){if(A.Utils.isDecimal(e)){var t=Number(e);if(t>0){return t}}},password:function(e){return String(e)},rel100:function(e){if(e===g.C.supported.REQUIRED){return g.C.supported.REQUIRED}else if(e===g.C.supported.SUPPORTED){return g.C.supported.SUPPORTED}else{return g.C.supported.UNSUPPORTED}},replaces:function(e){if(e===g.C.supported.REQUIRED){return g.C.supported.REQUIRED}else if(e===g.C.supported.SUPPORTED){return g.C.supported.SUPPORTED}else{return g.C.supported.UNSUPPORTED}},register:function(e){if(typeof e==="boolean"){return e}},registerOptions:function(e){if(typeof e==="object"){return e}},userAgentString:function(e){if(typeof e==="string"){return e}},autostart:function(e){if(typeof e==="boolean"){return e}},autostop:function(e){if(typeof e==="boolean"){return e}},sessionDescriptionHandlerFactory:function(e){if(e instanceof Function){return e}},sessionDescriptionHandlerFactoryOptions:function(e){if(typeof e==="object"){return e}},authenticationFactory:this.checkAuthenticationFactory,allowLegacyNotifications:function(e){if(typeof e==="boolean"){return e}},custom:function(e){if(typeof e==="object"){return e}},contactName:function(e){if(typeof e==="string"){return e}}}}};v.C={STATUS_INIT:0,STATUS_STARTING:1,STATUS_READY:2,STATUS_USER_CLOSED:3,STATUS_NOT_READY:4,CONFIGURATION_ERROR:1,NETWORK_ERROR:2,ALLOWED_METHODS:["ACK","CANCEL","INVITE","MESSAGE","BYE","OPTIONS","INFO","NOTIFY","REFER"],ACCEPTED_BODY_TYPES:["application/sdp","application/dtmf-relay"],MAX_FORWARDS:70,TAG_LENGTH:10};return v}(t.EventEmitter);v.UA=n;(function(e){var t;(function(e){e["RTP"]="rtp";e["INFO"]="info"})(t=e.DtmfType||(e.DtmfType={}))})(n=v.UA||(v.UA={}));v.UA=n}).call(this,R(1))},function(e,i,n){"use strict";(function(o){var e=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(i,"__esModule",{value:true});var t=n(6);var a=n(0);var f=n(7);var u=n(4);var c=n(23);var l=n(65);var r=function(s){e(n,s);function n(e,t,r){var i=s.call(this)||this;i.type=a.TypeStrings.SessionDescriptionHandler;i.options=r||{};i.logger=e;i.observer=t;i.dtmfSender=undefined;i.shouldAcquireMedia=true;i.CONTENT_TYPE="application/sdp";i.C={DIRECTION:{NULL:null,SENDRECV:"sendrecv",SENDONLY:"sendonly",RECVONLY:"recvonly",INACTIVE:"inactive"}};i.logger.log("SessionDescriptionHandlerOptions: "+JSON.stringify(i.options));i.direction=i.C.DIRECTION.NULL;i.modifiers=i.options.modifiers||[];if(!Array.isArray(i.modifiers)){i.modifiers=[i.modifiers]}var n=o.window||o;i.WebRTC={MediaStream:n.MediaStream,getUserMedia:n.navigator.mediaDevices.getUserMedia.bind(n.navigator.mediaDevices),RTCPeerConnection:n.RTCPeerConnection};i.iceGatheringTimeout=false;i.initPeerConnection(i.options.peerConnectionOptions);i.constraints=i.checkAndDefaultConstraints(i.options.constraints);return i}n.defaultFactory=function(e,t){var r=e.ua.getLogger("sip.invitecontext.sessionDescriptionHandler",e.id);var i=new l.SessionDescriptionHandlerObserver(e,t);return new n(r,i,t)};n.prototype.close=function(){this.logger.log("closing PeerConnection");if(this.peerConnection&&this.peerConnection.signalingState!=="closed"){if(this.peerConnection.getSenders){this.peerConnection.getSenders().forEach(function(e){if(e.track){e.track.stop()}})}else{this.logger.warn("Using getLocalStreams which is deprecated");this.peerConnection.getLocalStreams().forEach(function(e){e.getTracks().forEach(function(e){e.stop()})})}if(this.peerConnection.getReceivers){this.peerConnection.getReceivers().forEach(function(e){if(e.track){e.track.stop()}})}else{this.logger.warn("Using getRemoteStreams which is deprecated");this.peerConnection.getRemoteStreams().forEach(function(e){e.getTracks().forEach(function(e){e.stop()})})}this.resetIceGatheringComplete();this.peerConnection.close()}};n.prototype.getDescription=function(e,t){var r=this;if(e===void 0){e={}}if(t===void 0){t=[]}if(e.peerConnectionOptions){this.initPeerConnection(e.peerConnectionOptions)}var i=Object.assign({},this.constraints,e.constraints);i=this.checkAndDefaultConstraints(i);if(JSON.stringify(i)!==JSON.stringify(this.constraints)){this.constraints=i;this.shouldAcquireMedia=true}if(!Array.isArray(t)){t=[t]}t=t.concat(this.modifiers);return Promise.resolve().then(function(){if(r.shouldAcquireMedia){return r.acquire(r.constraints).then(function(){r.shouldAcquireMedia=false})}}).then(function(){return r.createOfferOrAnswer(e.RTCOfferOptions,t)}).then(function(e){if(e.sdp===undefined){throw new f.Exceptions.SessionDescriptionHandlerError("getDescription",undefined,"SDP undefined")}r.emit("getDescription",e);return{body:e.sdp,contentType:r.CONTENT_TYPE}})};n.prototype.hasDescription=function(e){return e===this.CONTENT_TYPE};n.prototype.holdModifier=function(e){if(!e.sdp){return Promise.resolve(e)}if(!/a=(sendrecv|sendonly|recvonly|inactive)/.test(e.sdp)){e.sdp=e.sdp.replace(/(m=[^\r]*\r\n)/g,"$1a=sendonly\r\n")}else{e.sdp=e.sdp.replace(/a=sendrecv\r\n/g,"a=sendonly\r\n");e.sdp=e.sdp.replace(/a=recvonly\r\n/g,"a=inactive\r\n")}return Promise.resolve(e)};n.prototype.setDescription=function(r,i,n){var s=this;if(i===void 0){i={}}if(n===void 0){n=[]}if(i.peerConnectionOptions){this.initPeerConnection(i.peerConnectionOptions)}if(!Array.isArray(n)){n=[n]}n=n.concat(this.modifiers);var e={type:this.hasOffer("local")?"answer":"offer",sdp:r};return Promise.resolve().then(function(){if(s.shouldAcquireMedia&&s.options.alwaysAcquireMediaFirst){return s.acquire(s.constraints).then(function(){s.shouldAcquireMedia=false})}}).then(function(){return u.Utils.reducePromises(n,e)}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("setDescription",e,"The modifiers did not resolve successfully");s.logger.error(t.message);s.emit("peerConnection-setRemoteDescriptionFailed",t);throw t}).then(function(e){s.emit("setDescription",e);return s.peerConnection.setRemoteDescription(e)}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}if(/^m=video.+$/gm.test(r)&&!i.disableAudioFallback){i.disableAudioFallback=true;return s.setDescription(r,i,[c.stripVideo].concat(n))}var t=new f.Exceptions.SessionDescriptionHandlerError("setDescription",e);if(t.error){s.logger.error(t.error)}s.emit("peerConnection-setRemoteDescriptionFailed",t);throw t}).then(function(){if(s.peerConnection.getReceivers){s.emit("setRemoteDescription",s.peerConnection.getReceivers())}else{s.emit("setRemoteDescription",s.peerConnection.getRemoteStreams())}s.emit("confirmed",s)})};n.prototype.sendDtmf=function(e,t){if(t===void 0){t={}}if(!this.dtmfSender&&this.hasBrowserGetSenderSupport()){var r=this.peerConnection.getSenders();if(r.length>0){this.dtmfSender=r[0].dtmf}}if(!this.dtmfSender&&this.hasBrowserTrackSupport()){var i=this.peerConnection.getLocalStreams();if(i.length>0){var n=i[0].getAudioTracks();if(n.length>0){this.dtmfSender=this.peerConnection.createDTMFSender(n[0])}}}if(!this.dtmfSender){return false}try{this.dtmfSender.insertDTMF(e,t.duration,t.interToneGap)}catch(e){if(e.type==="InvalidStateError"||e.type==="InvalidCharacterError"){this.logger.error(e);return false}else{throw e}}this.logger.log("DTMF sent via RTP: "+e.toString());return true};n.prototype.getDirection=function(){return this.direction};n.prototype.on=function(e,t){return s.prototype.on.call(this,e,t)};n.prototype.createOfferOrAnswer=function(e,t){var r=this;if(e===void 0){e={}}if(t===void 0){t=[]}var i=this.hasOffer("remote")?"createAnswer":"createOffer";var n=this.peerConnection;this.logger.log(i);return n[i](e).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",e,"peerConnection-"+i+"Failed");r.emit("peerConnection-"+i+"Failed",t);throw t}).then(function(e){return u.Utils.reducePromises(t,r.createRTCSessionDescriptionInit(e))}).then(function(e){r.resetIceGatheringComplete();r.logger.log("Setting local sdp.");r.logger.log("sdp is "+e.sdp||false);return n.setLocalDescription(e)}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",e,"peerConnection-SetLocalDescriptionFailed");r.emit("peerConnection-SetLocalDescriptionFailed",t);throw t}).then(function(){return r.waitForIceGatheringComplete()}).then(function(){var e=r.createRTCSessionDescriptionInit(r.peerConnection.localDescription);return u.Utils.reducePromises(t,e)}).then(function(e){r.setDirection(e.sdp||"");return e}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("createOfferOrAnswer",e);r.logger.error(t.toString());throw t})};n.prototype.createRTCSessionDescriptionInit=function(e){return{type:e.type,sdp:e.sdp}};n.prototype.addDefaultIceCheckingTimeout=function(e){if(e.iceCheckingTimeout===undefined){e.iceCheckingTimeout=5e3}return e};n.prototype.addDefaultIceServers=function(e){if(!e.iceServers){e.iceServers=[{urls:"stun:stun.l.google.com:19302"}]}return e};n.prototype.checkAndDefaultConstraints=function(e){var t={audio:true,video:!this.options.alwaysAcquireMediaFirst};e=e||t;if(Object.keys(e).length===0&&e.constructor===Object){return t}return e};n.prototype.hasBrowserTrackSupport=function(){return Boolean(this.peerConnection.addTrack)};n.prototype.hasBrowserGetSenderSupport=function(){return Boolean(this.peerConnection.getSenders)};n.prototype.initPeerConnection=function(e){var t=this;if(e===void 0){e={}}e=this.addDefaultIceCheckingTimeout(e);e.rtcConfiguration=e.rtcConfiguration||{};e.rtcConfiguration=this.addDefaultIceServers(e.rtcConfiguration);this.logger.log("initPeerConnection");if(this.peerConnection){this.logger.log("Already have a peer connection for this session. Tearing down.");this.resetIceGatheringComplete();this.peerConnection.close()}this.peerConnection=new this.WebRTC.RTCPeerConnection(e.rtcConfiguration);this.logger.log("New peer connection created");if("ontrack"in this.peerConnection){this.peerConnection.addEventListener("track",function(e){t.logger.log("track added");t.observer.trackAdded();t.emit("addTrack",e)})}else{this.logger.warn("Using onaddstream which is deprecated");this.peerConnection.onaddstream=function(e){t.logger.log("stream added");t.emit("addStream",e)}}this.peerConnection.onicecandidate=function(e){t.emit("iceCandidate",e);if(e.candidate){t.logger.log("ICE candidate received: "+(e.candidate.candidate===null?null:e.candidate.candidate.trim()))}else if(e.candidate===null){t.logger.log("ICE candidate gathering complete");t.triggerIceGatheringComplete()}};this.peerConnection.onicegatheringstatechange=function(){t.logger.log("RTCIceGatheringState changed: "+t.peerConnection.iceGatheringState);switch(t.peerConnection.iceGatheringState){case"gathering":t.emit("iceGathering",t);if(!t.iceGatheringTimer&&e.iceCheckingTimeout){t.iceGatheringTimeout=false;t.iceGatheringTimer=setTimeout(function(){t.logger.log("RTCIceChecking Timeout Triggered after "+e.iceCheckingTimeout+" milliseconds");t.iceGatheringTimeout=true;t.triggerIceGatheringComplete()},e.iceCheckingTimeout)}break;case"complete":t.triggerIceGatheringComplete();break}};this.peerConnection.oniceconnectionstatechange=function(){var e;switch(t.peerConnection.iceConnectionState){case"new":e="iceConnection";break;case"checking":e="iceConnectionChecking";break;case"connected":e="iceConnectionConnected";break;case"completed":e="iceConnectionCompleted";break;case"failed":e="iceConnectionFailed";break;case"disconnected":e="iceConnectionDisconnected";break;case"closed":e="iceConnectionClosed";break;default:t.logger.warn("Unknown iceConnection state: "+t.peerConnection.iceConnectionState);return}t.logger.log("ICE Connection State changed to "+e);t.emit(e,t)}};n.prototype.acquire=function(e){var i=this;e=this.checkAndDefaultConstraints(e);return new Promise(function(t,r){i.logger.log("acquiring local media");i.emit("userMediaRequest",e);if(e.audio||e.video){i.WebRTC.getUserMedia(e).then(function(e){i.observer.trackAdded();i.emit("userMedia",e);t(e)}).catch(function(e){i.emit("userMediaFailed",e);r(e)})}else{t([])}}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("acquire",e,"unable to acquire streams");i.logger.error(t.message);if(t.error){i.logger.error(t.error)}throw t}).then(function(e){i.logger.log("acquired local media streams");try{if(i.peerConnection.removeTrack){i.peerConnection.getSenders().forEach(function(e){i.peerConnection.removeTrack(e)})}return e}catch(e){return Promise.reject(e)}}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("acquire",e,"error removing streams");i.logger.error(t.message);if(t.error){i.logger.error(t.error)}throw t}).then(function(e){try{e=[].concat(e);e.forEach(function(t){if(i.peerConnection.addTrack){t.getTracks().forEach(function(e){i.peerConnection.addTrack(e,t)})}else{i.peerConnection.addStream(t)}})}catch(e){return Promise.reject(e)}return Promise.resolve()}).catch(function(e){if(e.type===a.TypeStrings.SessionDescriptionHandlerError){throw e}var t=new f.Exceptions.SessionDescriptionHandlerError("acquire",e,"error adding stream");i.logger.error(t.message);if(t.error){i.logger.error(t.error)}throw t})};n.prototype.hasOffer=function(e){var t="have-"+e+"-offer";return this.peerConnection.signalingState===t};n.prototype.isIceGatheringComplete=function(){return this.peerConnection.iceGatheringState==="complete"||this.iceGatheringTimeout};n.prototype.resetIceGatheringComplete=function(){this.iceGatheringTimeout=false;this.logger.log("resetIceGatheringComplete");if(this.iceGatheringTimer){clearTimeout(this.iceGatheringTimer);this.iceGatheringTimer=undefined}if(this.iceGatheringDeferred){this.iceGatheringDeferred.reject();this.iceGatheringDeferred=undefined}};n.prototype.setDirection=function(e){var t=e.match(/a=(sendrecv|sendonly|recvonly|inactive)/);if(t===null){this.direction=this.C.DIRECTION.NULL;this.observer.directionChanged();return}var r=t[1];switch(r){case this.C.DIRECTION.SENDRECV:case this.C.DIRECTION.SENDONLY:case this.C.DIRECTION.RECVONLY:case this.C.DIRECTION.INACTIVE:this.direction=r;break;default:this.direction=this.C.DIRECTION.NULL;break}this.observer.directionChanged()};n.prototype.triggerIceGatheringComplete=function(){if(this.isIceGatheringComplete()){this.emit("iceGatheringComplete",this);if(this.iceGatheringTimer){clearTimeout(this.iceGatheringTimer);this.iceGatheringTimer=undefined}if(this.iceGatheringDeferred){this.iceGatheringDeferred.resolve();this.iceGatheringDeferred=undefined}}};n.prototype.waitForIceGatheringComplete=function(){this.logger.log("waitForIceGatheringComplete");if(this.isIceGatheringComplete()){this.logger.log("ICE is already complete. Return resolved.");return Promise.resolve()}else if(!this.iceGatheringDeferred){this.iceGatheringDeferred=u.Utils.defer()}this.logger.log("ICE is not complete. Returning promise");return this.iceGatheringDeferred?this.iceGatheringDeferred.promise:Promise.resolve()};return n}(t.EventEmitter);i.SessionDescriptionHandler=r}).call(this,n(1))},function(e,c,l){"use strict";(function(n){var t=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(c,"__esModule",{value:true});var s=l(0);var f=l(7);var o=l(8);var e=l(39);var r=l(4);var a;(function(e){e[e["STATUS_CONNECTING"]=0]="STATUS_CONNECTING";e[e["STATUS_OPEN"]=1]="STATUS_OPEN";e[e["STATUS_CLOSING"]=2]="STATUS_CLOSING";e[e["STATUS_CLOSED"]=3]="STATUS_CLOSED"})(a=c.TransportStatus||(c.TransportStatus={}));var u=function(e){var t=e*.8;return 1e3*(Math.random()*(e-t)+t)};var i=function(i){t(e,i);function e(e,t){if(t===void 0){t={}}var r=i.call(this,e,t)||this;r.WebSocket=(n.window||n).WebSocket;r.type=s.TypeStrings.Transport;r.reconnectionAttempts=0;r.status=a.STATUS_CONNECTING;r.configuration=r.loadConfig(t);r.server=r.configuration.wsServers[0];return r}e.prototype.isConnected=function(){return this.status===a.STATUS_OPEN};e.prototype.sendPromise=function(e,t){if(t===void 0){t={}}if(!this.statusAssert(a.STATUS_OPEN,t.force)){this.onError("unable to send message - WebSocket not open");return Promise.reject()}var r=e.toString();if(this.ws){if(this.configuration.traceSip===true){this.logger.log("sending WebSocket message:\n\n"+r+"\n")}this.ws.send(r);return Promise.resolve({msg:r})}else{this.onError("unable to send message - WebSocket does not exist");return Promise.reject()}};e.prototype.disconnectPromise=function(r){var i=this;if(r===void 0){r={}}if(this.disconnectionPromise){return this.disconnectionPromise}r.code=r.code||1e3;if(!this.statusTransition(a.STATUS_CLOSING,r.force)){if(this.status===a.STATUS_CLOSED){return Promise.resolve({overrideEvent:true})}else if(this.connectionPromise){return this.connectionPromise.then(function(){return Promise.reject("The websocket did not disconnect")}).catch(function(){return Promise.resolve({overrideEvent:true})})}else{return Promise.reject("The websocket did not disconnect")}}this.emit("disconnecting");this.disconnectionPromise=new Promise(function(e,t){i.disconnectDeferredResolve=e;if(i.reconnectTimer){clearTimeout(i.reconnectTimer);i.reconnectTimer=undefined}if(i.ws){i.stopSendingKeepAlives();i.logger.log("closing WebSocket "+i.server.wsUri);i.ws.close(r.code,r.reason)}else{t("Attempted to disconnect but the websocket doesn't exist")}});return this.disconnectionPromise};e.prototype.connectPromise=function(r){var i=this;if(r===void 0){r={}}if(this.status===a.STATUS_CLOSING&&!r.force){return Promise.reject("WebSocket "+this.server.wsUri+" is closing")}if(this.connectionPromise){return this.connectionPromise}this.server=this.server||this.getNextWsServer(r.force);this.connectionPromise=new Promise(function(e,t){if((i.status===a.STATUS_OPEN||i.status===a.STATUS_CLOSING)&&!r.force){i.logger.warn("WebSocket "+i.server.wsUri+" is already connected");t("Failed status check - attempted to open a connection but already open/closing");return}i.connectDeferredResolve=e;i.status=a.STATUS_CONNECTING;i.emit("connecting");i.logger.log("connecting to WebSocket "+i.server.wsUri);i.disposeWs();try{i.ws=new WebSocket(i.server.wsUri,"sip")}catch(e){i.ws=null;i.status=a.STATUS_CLOSED;i.onError("error connecting to WebSocket "+i.server.wsUri+":"+e);t("Failed to create a websocket");return}if(!i.ws){t("Unexpected instance websocket not set");return}i.connectionTimeout=setTimeout(function(){i.statusTransition(a.STATUS_CLOSED);i.logger.warn("took too long to connect - exceeded time set in configuration.connectionTimeout: "+i.configuration.connectionTimeout+"s");i.emit("disconnected",{code:1e3});i.connectionPromise=undefined;t("Connection timeout")},i.configuration.connectionTimeout*1e3);i.boundOnOpen=i.onOpen.bind(i);i.boundOnMessage=i.onMessage.bind(i);i.boundOnClose=i.onClose.bind(i);i.boundOnError=i.onWebsocketError.bind(i);i.ws.addEventListener("open",i.boundOnOpen);i.ws.addEventListener("message",i.boundOnMessage);i.ws.addEventListener("close",i.boundOnClose);i.ws.addEventListener("error",i.boundOnError)});return this.connectionPromise};e.prototype.onMessage=function(e){var t=e.data;var r;if(/^(\r\n)+$/.test(t)){this.clearKeepAliveTimeout();if(this.configuration.traceSip===true){this.logger.log("received WebSocket message with CRLF Keep Alive response")}return}else if(!t){this.logger.warn("received empty message, message discarded");return}else if(typeof t!=="string"){try{r=String.fromCharCode.apply(null,new Uint8Array(t))}catch(e){this.logger.warn("received WebSocket binary message failed to be converted into string, message discarded");return}if(this.configuration.traceSip===true){this.logger.log("received WebSocket binary message:\n\n"+t+"\n")}}else{if(this.configuration.traceSip===true){this.logger.log("received WebSocket text message:\n\n"+t+"\n")}r=t}this.emit("message",r)};e.prototype.onOpen=function(){if(this.status===a.STATUS_CLOSED){var e=this.ws;this.disposeWs();e.close(1e3);return}this.status=a.STATUS_OPEN;this.emit("connected");if(this.connectionTimeout){clearTimeout(this.connectionTimeout);this.connectionTimeout=undefined}this.logger.log("WebSocket "+this.server.wsUri+" connected");if(this.reconnectTimer!==undefined){clearTimeout(this.reconnectTimer);this.reconnectTimer=undefined}this.reconnectionAttempts=0;this.disconnectionPromise=undefined;this.disconnectDeferredResolve=undefined;this.startSendingKeepAlives();if(this.connectDeferredResolve){this.connectDeferredResolve({overrideEvent:true})}else{this.logger.warn("Unexpected websocket.onOpen with no connectDeferredResolve")}};e.prototype.onClose=function(e){this.logger.log("WebSocket disconnected (code: "+e.code+(e.reason?"| reason: "+e.reason:"")+")");if(this.status!==a.STATUS_CLOSING){this.logger.warn("WebSocket closed without SIP.js requesting it");this.emit("transportError")}this.stopSendingKeepAlives();if(this.connectionTimeout){clearTimeout(this.connectionTimeout)}this.connectionTimeout=undefined;this.connectionPromise=undefined;this.connectDeferredResolve=undefined;if(this.disconnectDeferredResolve){this.disconnectDeferredResolve({overrideEvent:true});this.statusTransition(a.STATUS_CLOSED);this.disconnectDeferredResolve=undefined;return}this.status=a.STATUS_CLOSED;this.emit("disconnected",{code:e.code,reason:e.reason});this.reconnect()};e.prototype.disposeWs=function(){if(this.ws){this.ws.removeEventListener("open",this.boundOnOpen);this.ws.removeEventListener("message",this.boundOnMessage);this.ws.removeEventListener("close",this.boundOnClose);this.ws.removeEventListener("error",this.boundOnError);this.ws=undefined}};e.prototype.onError=function(e){this.logger.warn("Transport error: "+e);this.emit("transportError")};e.prototype.onWebsocketError=function(){this.onError("The Websocket had an error")};e.prototype.reconnect=function(){var e=this;if(this.reconnectionAttempts>0){this.logger.log("Reconnection attempt "+this.reconnectionAttempts+" failed")}if(this.noAvailableServers()){this.logger.warn("attempted to get next ws server but there are no available ws servers left");this.logger.warn("no available ws servers left - going to closed state");this.status=a.STATUS_CLOSED;this.emit("closed");this.resetServerErrorStatus();return}if(this.isConnected()){this.logger.warn("attempted to reconnect while connected - forcing disconnect");this.disconnect({force:true})}this.reconnectionAttempts+=1;if(this.reconnectionAttempts>this.configuration.maxReconnectionAttempts){this.logger.warn("maximum reconnection attempts for WebSocket "+this.server.wsUri);this.logger.log("transport "+this.server.wsUri+" failed | connection state set to 'error'");this.server.isError=true;this.emit("transportError");if(!this.noAvailableServers()){this.server=this.getNextWsServer()}this.reconnectionAttempts=0;this.reconnect()}else{this.logger.log("trying to reconnect to WebSocket "+this.server.wsUri+" (reconnection attempt "+this.reconnectionAttempts+")");this.reconnectTimer=setTimeout(function(){e.connect();e.reconnectTimer=undefined},this.reconnectionAttempts===1?0:this.configuration.reconnectionTimeout*1e3)}};e.prototype.resetServerErrorStatus=function(){for(var e=0,t=this.configuration.wsServers;e<t.length;e++){var r=t[e];r.isError=false}};e.prototype.getNextWsServer=function(e){if(e===void 0){e=false}if(this.noAvailableServers()){this.logger.warn("attempted to get next ws server but there are no available ws servers left");throw new Error("Attempted to get next ws server, but there are no available ws servers left.")}var t=[];for(var r=0,i=this.configuration.wsServers;r<i.length;r++){var n=i[r];if(n.isError&&!e){continue}else if(t.length===0){t.push(n)}else if(n.weight>t[0].weight){t=[n]}else if(n.weight===t[0].weight){t.push(n)}}var s=Math.floor(Math.random()*t.length);return t[s]};e.prototype.noAvailableServers=function(){for(var e=0,t=this.configuration.wsServers;e<t.length;e++){var r=t[e];if(!r.isError){return false}}return true};e.prototype.sendKeepAlive=function(){var e=this;if(this.keepAliveDebounceTimeout){return}this.keepAliveDebounceTimeout=setTimeout(function(){e.emit("keepAliveDebounceTimeout");e.clearKeepAliveTimeout()},this.configuration.keepAliveDebounce*1e3);return this.send("\r\n\r\n")};e.prototype.clearKeepAliveTimeout=function(){if(this.keepAliveDebounceTimeout){clearTimeout(this.keepAliveDebounceTimeout)}this.keepAliveDebounceTimeout=undefined};e.prototype.startSendingKeepAlives=function(){var e=this;if(this.configuration.keepAliveInterval&&!this.keepAliveInterval){this.keepAliveInterval=setInterval(function(){e.sendKeepAlive();e.startSendingKeepAlives()},u(this.configuration.keepAliveInterval))}};e.prototype.stopSendingKeepAlives=function(){if(this.keepAliveInterval){clearInterval(this.keepAliveInterval)}if(this.keepAliveDebounceTimeout){clearTimeout(this.keepAliveDebounceTimeout)}this.keepAliveInterval=undefined;this.keepAliveDebounceTimeout=undefined};e.prototype.statusAssert=function(e,t){if(e===this.status){return true}else{if(t){this.logger.warn("Attempted to assert "+Object.keys(a)[this.status]+" as "+Object.keys(a)[e]+"- continuing with option: 'force'");return true}else{this.logger.warn("Tried to assert "+Object.keys(a)[e]+" but is currently "+Object.keys(a)[this.status]);return false}}};e.prototype.statusTransition=function(e,t){if(t===void 0){t=false}this.logger.log("Attempting to transition status from "+Object.keys(a)[this.status]+" to "+Object.keys(a)[e]);if(e===a.STATUS_CONNECTING&&this.statusAssert(a.STATUS_CLOSED,t)||e===a.STATUS_OPEN&&this.statusAssert(a.STATUS_CONNECTING,t)||e===a.STATUS_CLOSING&&this.statusAssert(a.STATUS_OPEN,t)||e===a.STATUS_CLOSED){this.status=e;return true}else{this.logger.warn("Status transition failed - result: no-op - reason:"+" either gave an nonexistent status or attempted illegal transition");return false}};e.prototype.loadConfig=function(e){var t={wsServers:[{scheme:"WSS",sipUri:"<sip:edge.sip.onsip.com;transport=ws;lr>",weight:0,wsUri:"wss://edge.sip.onsip.com",isError:false}],connectionTimeout:5,maxReconnectionAttempts:3,reconnectionTimeout:4,keepAliveInterval:0,keepAliveDebounce:10,traceSip:false};var r=this.getConfigurationCheck();for(var i in r.mandatory){if(!e.hasOwnProperty(i)){throw new f.Exceptions.ConfigurationError(i)}else{var n=e[i];var s=r.mandatory[i](n);if(s!==undefined){t[i]=s}else{throw new f.Exceptions.ConfigurationError(i,n)}}}for(var i in r.optional){if(e.hasOwnProperty(i)){var n=e[i];if(n instanceof Array&&n.length===0||(n===null||n===""||n===undefined)||typeof n==="number"&&isNaN(n)){continue}var s=r.optional[i](n);if(s!==undefined){t[i]=s}else{throw new f.Exceptions.ConfigurationError(i,n)}}}var o={};for(var i in t){if(t.hasOwnProperty(i)){o[i]={value:t[i]}}}var a=Object.defineProperties({},o);this.logger.log("configuration parameters after validation:");for(var i in t){if(t.hasOwnProperty(i)){this.logger.log("· "+i+": "+JSON.stringify(t[i]))}}return a};e.prototype.getConfigurationCheck=function(){return{mandatory:{},optional:{wsServers:function(e){if(typeof e==="string"){e=[{wsUri:e}]}else if(e instanceof Array){for(var t=0;t<e.length;t++){if(typeof e[t]==="string"){e[t]={wsUri:e[t]}}}}else{return}if(e.length===0){return false}for(var r=0,i=e;r<i.length;r++){var n=i[r];if(!n.wsUri){return}if(n.weight&&!Number(n.weight)){return}var s=o.Grammar.parse(n.wsUri,"absoluteURI");if(s===-1){return}else if(["wss","ws","udp"].indexOf(s.scheme)<0){return}else{n.sipUri="<sip:"+s.host+(s.port?":"+s.port:"")+";transport="+s.scheme.replace(/^wss$/i,"ws")+";lr>";if(!n.weight){n.weight=0}n.isError=false;n.scheme=s.scheme.toUpperCase()}}return e},keepAliveInterval:function(e){if(r.Utils.isDecimal(e)){var t=Number(e);if(t>0){return t}}},keepAliveDebounce:function(e){if(r.Utils.isDecimal(e)){var t=Number(e);if(t>0){return t}}},traceSip:function(e){if(typeof e==="boolean"){return e}},connectionTimeout:function(e){if(r.Utils.isDecimal(e)){var t=Number(e);if(t>0){return t}}},maxReconnectionAttempts:function(e){if(r.Utils.isDecimal(e)){var t=Number(e);if(t>=0){return t}}},reconnectionTimeout:function(e){if(r.Utils.isDecimal(e)){var t=Number(e);if(t>0){return t}}}}}};e.C=a;return e}(e.Transport);c.Transport=i}).call(this,l(1))},function(e,t,r){"use strict";e.exports=function e(i,n){return function e(){var t=new Array(arguments.length);for(var r=0;r<t.length;r++){t[r]=arguments[r]}return i.apply(n,t)}}},function(e,t,d){"use strict";var p=d(5);var v=d(72);var g=d(74);var m=d(75);var y=d(76);var T=d(45);var C=typeof window!=="undefined"&&window.btoa&&window.btoa.bind(window)||d(77);e.exports=function e(h){return new Promise(function e(n,s){var i=h.data;var o=h.headers;if(p.isFormData(i)){delete o["Content-Type"]}var a=new XMLHttpRequest;var t="onreadystatechange";var f=false;if(true&&typeof window!=="undefined"&&window.XDomainRequest&&!("withCredentials"in a)&&!y(h.url)){a=new window.XDomainRequest;t="onload";f=true;a.onprogress=function e(){};a.ontimeout=function e(){}}if(h.auth){var r=h.auth.username||"";var u=h.auth.password||"";o.Authorization="Basic "+C(r+":"+u)}a.open(h.method.toUpperCase(),g(h.url,h.params,h.paramsSerializer),true);a.timeout=h.timeout;a[t]=function e(){if(!a||a.readyState!==4&&!f){return}if(a.status===0&&!(a.responseURL&&a.responseURL.indexOf("file:")===0)){return}var t="getAllResponseHeaders"in a?m(a.getAllResponseHeaders()):null;var r=!h.responseType||h.responseType==="text"?a.responseText:a.response;var i={data:r,status:a.status===1223?204:a.status,statusText:a.status===1223?"No Content":a.statusText,headers:t,config:h,request:a};v(n,s,i);a=null};a.onerror=function e(){s(T("Network Error",h,null,a));a=null};a.ontimeout=function e(){s(T("timeout of "+h.timeout+"ms exceeded",h,"ECONNABORTED",a));a=null};if(p.isStandardBrowserEnv()){var c=d(78);var l=(h.withCredentials||y(h.url))&&h.xsrfCookieName?c.read(h.xsrfCookieName):undefined;if(l){o[h.xsrfHeaderName]=l}}if("setRequestHeader"in a){p.forEach(o,function e(t,r){if(typeof i==="undefined"&&r.toLowerCase()==="content-type"){delete o[r]}else{a.setRequestHeader(r,t)}})}if(h.withCredentials){a.withCredentials=true}if(h.responseType){try{a.responseType=h.responseType}catch(e){if(h.responseType!=="json"){throw e}}}if(typeof h.onDownloadProgress==="function"){a.addEventListener("progress",h.onDownloadProgress)}if(typeof h.onUploadProgress==="function"&&a.upload){a.upload.addEventListener("progress",h.onUploadProgress)}if(h.cancelToken){h.cancelToken.promise.then(function e(t){if(!a){return}a.abort();s(t);a=null})}if(i===undefined){i=null}a.send(i)})}},function(e,t,r){"use strict";var a=r(73);e.exports=function e(t,r,i,n,s){var o=new Error(t);return a(o,r,i,n,s)}},function(e,t,r){"use strict";e.exports=function e(t){return!!(t&&t.__CANCEL__)}},function(e,t,r){"use strict";function i(e){this.message=e}i.prototype.toString=function e(){return"Cancel"+(this.message?": "+this.message:"")};i.prototype.__CANCEL__=true;e.exports=i},function(e,t){var f=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;var u=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function e(t){var r=t,i=t.indexOf("["),n=t.indexOf("]");if(i!=-1&&n!=-1){t=t.substring(0,i)+t.substring(i,n).replace(/:/g,";")+t.substring(n,t.length)}var s=f.exec(t||""),o={},a=14;while(a--){o[u[a]]=s[a]||""}if(i!=-1&&n!=-1){o.source=r;o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":");o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":");o.ipv6uri=true}return o}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){e.deprecate=function(){};e.paths=[];if(!e.children)e.children=[];Object.defineProperty(e,"loaded",{enumerable:true,get:function(){return e.l}});Object.defineProperty(e,"id",{enumerable:true,get:function(){return e.i}});e.webpackPolyfill=1}return e}},function(r,e,t){(function(t){r.exports=e;function e(e){return t.Buffer&&t.Buffer.isBuffer(e)||t.ArrayBuffer&&e instanceof ArrayBuffer}}).call(this,t(1))},function(e,t,r){var f=r(97);var s=r(57);var i=r(13);var n=r(25);var u=r(58);var o=r(59);var c=r(18)("socket.io-client:manager");var a=r(56);var l=r(116);var h=Object.prototype.hasOwnProperty;e.exports=d;function d(e,t){if(!(this instanceof d))return new d(e,t);if(e&&"object"===typeof e){t=e;e=undefined}t=t||{};t.path=t.path||"/socket.io";this.nsps={};this.subs=[];this.opts=t;this.reconnection(t.reconnection!==false);this.reconnectionAttempts(t.reconnectionAttempts||Infinity);this.reconnectionDelay(t.reconnectionDelay||1e3);this.reconnectionDelayMax(t.reconnectionDelayMax||5e3);this.randomizationFactor(t.randomizationFactor||.5);this.backoff=new l({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==t.timeout?2e4:t.timeout);this.readyState="closed";this.uri=e;this.connecting=[];this.lastPing=null;this.encoding=false;this.packetBuffer=[];this.encoder=new n.Encoder;this.decoder=new n.Decoder;this.autoConnect=t.autoConnect!==false;if(this.autoConnect)this.open()}d.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var e in this.nsps){if(h.call(this.nsps,e)){this.nsps[e].emit.apply(this.nsps[e],arguments)}}};d.prototype.updateSocketIds=function(){for(var e in this.nsps){if(h.call(this.nsps,e)){this.nsps[e].id=this.engine.id}}};i(d.prototype);d.prototype.reconnection=function(e){if(!arguments.length)return this._reconnection;this._reconnection=!!e;return this};d.prototype.reconnectionAttempts=function(e){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=e;return this};d.prototype.reconnectionDelay=function(e){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=e;this.backoff&&this.backoff.setMin(e);return this};d.prototype.randomizationFactor=function(e){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=e;this.backoff&&this.backoff.setJitter(e);return this};d.prototype.reconnectionDelayMax=function(e){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=e;this.backoff&&this.backoff.setMax(e);return this};d.prototype.timeout=function(e){if(!arguments.length)return this._timeout;this._timeout=e;return this};d.prototype.maybeReconnectOnOpen=function(){if(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){this.reconnect()}};d.prototype.open=d.prototype.connect=function(r,e){c("readyState %s",this.readyState);if(~this.readyState.indexOf("open"))return this;c("opening %s",this.uri);this.engine=f(this.uri,this.opts);var t=this.engine;var i=this;this.readyState="opening";this.skipReconnect=false;var n=u(t,"open",function(){i.onopen();r&&r()});var s=u(t,"error",function(e){c("connect_error");i.cleanup();i.readyState="closed";i.emitAll("connect_error",e);if(r){var t=new Error("Connection error");t.data=e;r(t)}else{i.maybeReconnectOnOpen()}});if(false!==this._timeout){var o=this._timeout;c("connect attempt will timeout after %d",o);var a=setTimeout(function(){c("connect attempt timed out after %d",o);n.destroy();t.close();t.emit("error","timeout");i.emitAll("connect_timeout",o)},o);this.subs.push({destroy:function(){clearTimeout(a)}})}this.subs.push(n);this.subs.push(s);return this};d.prototype.onopen=function(){c("open");this.cleanup();this.readyState="open";this.emit("open");var e=this.engine;this.subs.push(u(e,"data",o(this,"ondata")));this.subs.push(u(e,"ping",o(this,"onping")));this.subs.push(u(e,"pong",o(this,"onpong")));this.subs.push(u(e,"error",o(this,"onerror")));this.subs.push(u(e,"close",o(this,"onclose")));this.subs.push(u(this.decoder,"decoded",o(this,"ondecoded")))};d.prototype.onping=function(){this.lastPing=new Date;this.emitAll("ping")};d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)};d.prototype.ondata=function(e){this.decoder.add(e)};d.prototype.ondecoded=function(e){this.emit("packet",e)};d.prototype.onerror=function(e){c("error",e);this.emitAll("error",e)};d.prototype.socket=function(e,t){var r=this.nsps[e];if(!r){r=new s(this,e,t);this.nsps[e]=r;var i=this;r.on("connecting",n);r.on("connect",function(){r.id=i.engine.id});if(this.autoConnect){n()}}function n(){if(!~a(i.connecting,r)){i.connecting.push(r)}}return r};d.prototype.destroy=function(e){var t=a(this.connecting,e);if(~t)this.connecting.splice(t,1);if(this.connecting.length)return;this.close()};d.prototype.packet=function(r){c("writing packet %j",r);var i=this;if(r.query&&r.type===0)r.nsp+="?"+r.query;if(!i.encoding){i.encoding=true;this.encoder.encode(r,function(e){for(var t=0;t<e.length;t++){i.engine.write(e[t],r.options)}i.encoding=false;i.processPacketQueue()})}else{i.packetBuffer.push(r)}};d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}};d.prototype.cleanup=function(){c("cleanup");var e=this.subs.length;for(var t=0;t<e;t++){var r=this.subs.shift();r.destroy()}this.packetBuffer=[];this.encoding=false;this.lastPing=null;this.decoder.destroy()};d.prototype.close=d.prototype.disconnect=function(){c("disconnect");this.skipReconnect=true;this.reconnecting=false;if("opening"===this.readyState){this.cleanup()}this.backoff.reset();this.readyState="closed";if(this.engine)this.engine.close()};d.prototype.onclose=function(e){c("onclose");this.cleanup();this.backoff.reset();this.readyState="closed";this.emit("close",e);if(this._reconnection&&!this.skipReconnect){this.reconnect()}};d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts){c("reconnect failed");this.backoff.reset();this.emitAll("reconnect_failed");this.reconnecting=false}else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e);this.reconnecting=true;var r=setTimeout(function(){if(t.skipReconnect)return;c("attempting reconnect");t.emitAll("reconnect_attempt",t.backoff.attempts);t.emitAll("reconnecting",t.backoff.attempts);if(t.skipReconnect)return;t.open(function(e){if(e){c("reconnect attempt error");t.reconnecting=false;t.reconnect();t.emitAll("reconnect_error",e.data)}else{c("reconnect success");t.onreconnect()}})},e);this.subs.push({destroy:function(){clearTimeout(r)}})}};d.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll("reconnect",e)}},function(e,r,i){(function(a){var f=i(26);var u=i(101);var c=i(111);var e=i(112);r.polling=t;r.websocket=e;function t(e){var t;var r=false;var i=false;var n=false!==e.jsonp;if(a.location){var s="https:"===location.protocol;var o=location.port;if(!o){o=s?443:80}r=e.hostname!==location.hostname||o!==e.port;i=e.secure!==s}e.xdomain=r;e.xscheme=i;t=new f(e);if("open"in t&&!e.forceJSONP){return new u(e)}else{if(!n)throw new Error("JSONP disabled");return new c(e)}}}).call(this,i(1))},function(e,t,r){var i=r(27);var n=r(28);var s=r(12);var o=r(19);var a=r(55);var f=r(20)("engine.io-client:polling");e.exports=c;var u=function(){var e=r(26);var t=new e({xdomain:false});return null!=t.responseType}();function c(e){var t=e&&e.forceBase64;if(!u||t){this.supportsBinary=false}i.call(this,e)}o(c,i);c.prototype.name="polling";c.prototype.doOpen=function(){this.poll()};c.prototype.pause=function(e){var t=this;this.readyState="pausing";function r(){f("paused");t.readyState="paused";e()}if(this.polling||!this.writable){var i=0;if(this.polling){f("we are currently polling - waiting to pause");i++;this.once("pollComplete",function(){f("pre-pause polling complete");--i||r()})}if(!this.writable){f("we are currently writing - waiting to pause");i++;this.once("drain",function(){f("pre-pause writing complete");--i||r()})}}else{r()}};c.prototype.poll=function(){f("polling");this.polling=true;this.doPoll();this.emit("poll")};c.prototype.onData=function(e){var i=this;f("polling got data %s",e);var t=function(e,t,r){if("opening"===i.readyState){i.onOpen()}if("close"===e.type){i.onClose();return false}i.onPacket(e)};s.decodePayload(e,this.socket.binaryType,t);if("closed"!==this.readyState){this.polling=false;this.emit("pollComplete");if("open"===this.readyState){this.poll()}else{f('ignoring poll - transport state "%s"',this.readyState)}}};c.prototype.doClose=function(){var e=this;function t(){f("writing close packet");e.write([{type:"close"}])}if("open"===this.readyState){f("transport open - closing");t()}else{f("transport not open - deferring close");this.once("open",t)}};c.prototype.write=function(e){var t=this;this.writable=false;var r=function(){t.writable=true;t.emit("drain")};s.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,r)})};c.prototype.uri=function(){var e=this.query||{};var t=this.secure?"https":"http";var r="";if(false!==this.timestampRequests){e[this.timestampParam]=a()}if(!this.supportsBinary&&!e.sid){e.b64=1}e=n.encode(e);if(this.port&&("https"===t&&Number(this.port)!==443||"http"===t&&Number(this.port)!==80)){r=":"+this.port}if(e.length){e="?"+e}var i=this.hostname.indexOf(":")!==-1;return t+"://"+(i?"["+this.hostname+"]":this.hostname)+r+this.path+e}},function(t,e,r){(function(n){var s=r(103);t.exports=e;function e(e){function i(e){if(!e)return false;if(n.Buffer&&n.Buffer.isBuffer&&n.Buffer.isBuffer(e)||n.ArrayBuffer&&e instanceof ArrayBuffer||n.Blob&&e instanceof Blob||n.File&&e instanceof File){return true}if(s(e)){for(var t=0;t<e.length;t++){if(i(e[t])){return true}}}else if(e&&"object"==typeof e){if(e.toJSON&&"function"==typeof e.toJSON){e=e.toJSON()}for(var r in e){if(Object.prototype.hasOwnProperty.call(e,r)&&i(e[r])){return true}}}return false}return i(e)}}).call(this,r(1))},function(e,t,r){"use strict";var i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),n=64,s={},o=0,a=0,f;function u(e){var t="";do{t=i[e%n]+t;e=Math.floor(e/n)}while(e>0);return t}function c(e){var t=0;for(a=0;a<e.length;a++){t=t*n+s[e.charAt(a)]}return t}function l(){var e=u(+new Date);if(e!==f)return o=0,f=e;return e+"."+u(o++)}for(;a<n;a++)s[i[a]]=a;l.encode=u;l.decode=c;e.exports=l},function(e,t){var i=[].indexOf;e.exports=function(e,t){if(i)return e.indexOf(t);for(var r=0;r<e.length;++r){if(e[r]===t)return r}return-1}},function(e,t,r){var s=r(25);var i=r(13);var o=r(115);var n=r(58);var a=r(59);var f=r(18)("socket.io-client:socket");var u=r(54);e.exports=t=h;var c={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var l=i.prototype.emit;function h(e,t,r){this.io=e;this.nsp=t;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(r&&r.query){this.query=r.query}if(this.io.autoConnect)this.open()}i(h.prototype);h.prototype.subEvents=function(){if(this.subs)return;var e=this.io;this.subs=[n(e,"open",a(this,"onopen")),n(e,"packet",a(this,"onpacket")),n(e,"close",a(this,"onclose"))]};h.prototype.open=h.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();if("open"===this.io.readyState)this.onopen();this.emit("connecting");return this};h.prototype.send=function(){var e=o(arguments);e.unshift("message");this.emit.apply(this,e);return this};h.prototype.emit=function(e){if(c.hasOwnProperty(e)){l.apply(this,arguments);return this}var t=o(arguments);var r=s.EVENT;if(u(t)){r=s.BINARY_EVENT}var i={type:r,data:t};i.options={};i.options.compress=!this.flags||false!==this.flags.compress;if("function"===typeof t[t.length-1]){f("emitting packet with ack id %d",this.ids);this.acks[this.ids]=t.pop();i.id=this.ids++}if(this.connected){this.packet(i)}else{this.sendBuffer.push(i)}delete this.flags;return this};h.prototype.packet=function(e){e.nsp=this.nsp;this.io.packet(e)};h.prototype.onopen=function(){f("transport is open - connecting");if("/"!==this.nsp){if(this.query){this.packet({type:s.CONNECT,query:this.query})}else{this.packet({type:s.CONNECT})}}};h.prototype.onclose=function(e){f("close (%s)",e);this.connected=false;this.disconnected=true;delete this.id;this.emit("disconnect",e)};h.prototype.onpacket=function(e){if(e.nsp!==this.nsp)return;switch(e.type){case s.CONNECT:this.onconnect();break;case s.EVENT:this.onevent(e);break;case s.BINARY_EVENT:this.onevent(e);break;case s.ACK:this.onack(e);break;case s.BINARY_ACK:this.onack(e);break;case s.DISCONNECT:this.ondisconnect();break;case s.ERROR:this.emit("error",e.data);break}};h.prototype.onevent=function(e){var t=e.data||[];f("emitting event %j",t);if(null!=e.id){f("attaching ack callback to event");t.push(this.ack(e.id))}if(this.connected){l.apply(this,t)}else{this.receiveBuffer.push(t)}};h.prototype.ack=function(r){var i=this;var n=false;return function(){if(n)return;n=true;var e=o(arguments);f("sending ack %j",e);var t=u(e)?s.BINARY_ACK:s.ACK;i.packet({type:t,id:r,data:e})}};h.prototype.onack=function(e){var t=this.acks[e.id];if("function"===typeof t){f("calling ack %s with %j",e.id,e.data);t.apply(this,e.data);delete this.acks[e.id]}else{f("bad ack %s",e.id)}};h.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit("connect");this.emitBuffered()};h.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++){l.apply(this,this.receiveBuffer[e])}this.receiveBuffer=[];for(e=0;e<this.sendBuffer.length;e++){this.packet(this.sendBuffer[e])}this.sendBuffer=[]};h.prototype.ondisconnect=function(){f("server disconnect (%s)",this.nsp);this.destroy();this.onclose("io server disconnect")};h.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++){this.subs[e].destroy()}this.subs=null}this.io.destroy(this)};h.prototype.close=h.prototype.disconnect=function(){if(this.connected){f("performing disconnect (%s)",this.nsp);this.packet({type:s.DISCONNECT})}this.destroy();if(this.connected){this.onclose("io client disconnect")}return this};h.prototype.compress=function(e){this.flags=this.flags||{};this.flags.compress=e;return this}},function(e,t){e.exports=r;function r(e,t,r){e.on(t,r);return{destroy:function(){e.removeListener(t,r)}}}},function(e,t){var i=[].slice;e.exports=function(e,t){if("string"==typeof t)t=e[t];if("function"!=typeof t)throw new Error("bind() requires a function");var r=i.call(arguments,2);return function(){return t.apply(e,r.concat(i.call(arguments)))}}},function(e,t,r){var u=r(86);var i=r(25);var c=r(51);var l=r(18)("socket.io-client");e.exports=t=n;var h=t.managers={};function n(e,t){if(typeof e==="object"){t=e;e=undefined}t=t||{};var r=u(e);var i=r.source;var n=r.id;var s=r.path;var o=h[n]&&s in h[n].nsps;var a=t.forceNew||t["force new connection"]||false===t.multiplex||o;var f;if(a){l("ignoring socket cache for %s",i);f=c(i,t)}else{if(!h[n]){l("new io instance for %s",i);h[n]=c(i,t)}f=h[n]}if(r.query&&!t.query){t.query=r.query}else if(t&&"object"===typeof t.query){t.query=d(t.query)}return f.socket(r.path,t)}function d(e){var t=[];for(var r in e){if(e.hasOwnProperty(r)){t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]))}}return t.join("&")}t.protocol=i.protocol;t.connect=n;t.Manager=r(51);t.Socket=r(57)},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var yl=r(31);var Tl=r(17);var Cl=function(s){i(o,s);function o(e,t,r,i){var n=s.call(this)||this;n.message=e;n.expected=t;n.found=r;n.location=i;n.name="SyntaxError";if(typeof Error.captureStackTrace==="function"){Error.captureStackTrace(n,o)}return n}o.buildMessage=function(e,t){function r(e){return e.charCodeAt(0).toString(16).toUpperCase()}function i(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+r(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+r(e)})}function n(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(e){return"\\x0"+r(e)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(e){return"\\x"+r(e)})}function s(e){switch(e.type){case"literal":return'"'+i(e.text)+'"';case"class":var t=e.parts.map(function(e){return Array.isArray(e)?n(e[0])+"-"+n(e[1]):n(e)});return"["+(e.inverted?"^":"")+t+"]";case"any":return"any character";case"end":return"end of input";case"other":return e.description}}function o(e){var t=e.map(s);var r;var i;t.sort();if(t.length>0){for(r=1,i=1;r<t.length;r++){if(t[r-1]!==t[r]){t[i]=t[r];i++}}t.length=i}switch(t.length){case 1:return t[0];case 2:return t[0]+" or "+t[1];default:return t.slice(0,-1).join(", ")+", or "+t[t.length-1]}}function a(e){return e?'"'+i(e)+'"':"end of input"}return"Expected "+o(e)+" but "+a(t)+" found."};return o}(Error);t.SyntaxError=Cl;function n(v,r){r=r!==undefined?r:{};var g={};var e={Contact:uu,Name_Addr_Header:Vu,Record_Route:hc,Request_Response:Ef,SIP_URI:ja,Subscription_State:Ac,Supported:_c,Require:yc,Via:Dc,absoluteURI:If,Call_ID:fu,Content_Disposition:Cu,Content_Length:Eu,Content_Type:Ru,CSeq:Hu,displayName:hu,Event:Mu,From:Bu,host:$a,Max_Forwards:Wu,Min_SE:$c,Proxy_Authenticate:Yu,quoted_string:La,Refer_To:pc,Replaces:vc,Session_Expires:Vc,stun_URI:Zc,To:Ic,turn_URI:sl,uuid:fl,WWW_Authenticate:Kc,challenge:zu,sipfrag:hl,Referred_By:dl};var t=uu;var i="\r\n";var n=Bo("\r\n",false);var s=/^[0-9]/;var o=jo([["0","9"]],false,false);var a=/^[a-zA-Z]/;var f=jo([["a","z"],["A","Z"]],false,false);var u=/^[0-9a-fA-F]/;var c=jo([["0","9"],["a","f"],["A","F"]],false,false);var l=/^[\0-\xFF]/;var h=jo([["\0","ÿ"]],false,false);var d=/^["]/;var p=jo(['"'],false,false);var m=" ";var y=Bo(" ",false);var T="\t";var C=Bo("\t",false);var S=/^[a-zA-Z0-9]/;var A=jo([["a","z"],["A","Z"],["0","9"]],false,false);var b=";";var w=Bo(";",false);var E="/";var R=Bo("/",false);var _="?";var I=Bo("?",false);var O=":";var D=Bo(":",false);var N="@";var x=Bo("@",false);var k="&";var U=Bo("&",false);var P="=";var H=Bo("=",false);var L="+";var q=Bo("+",false);var M="$";var F=Bo("$",false);var B=",";var j=Bo(",",false);var G="-";var W=Bo("-",false);var K="_";var V=Bo("_",false);var Y=".";var z=Bo(".",false);var $="!";var J=Bo("!",false);var X="~";var Q=Bo("~",false);var Z="*";var ee=Bo("*",false);var te="'";var re=Bo("'",false);var ie="(";var ne=Bo("(",false);var se=")";var oe=Bo(")",false);var ae="%";var fe=Bo("%",false);var ue=function(){return" "};var ce=function(){return":"};var le=/^[!-~]/;var he=jo([["!","~"]],false,false);var de=/^[\x80-\uFFFF]/;var pe=jo([["","￿"]],false,false);var ve=/^[\x80-\xBF]/;var ge=jo([["","¿"]],false,false);var me=/^[a-f]/;var ye=jo([["a","f"]],false,false);var Te="`";var Ce=Bo("`",false);var Se="<";var Ae=Bo("<",false);var be=">";var we=Bo(">",false);var Ee="\\";var Re=Bo("\\",false);var _e="[";var Ie=Bo("[",false);var Oe="]";var De=Bo("]",false);var Ne="{";var xe=Bo("{",false);var ke="}";var Ue=Bo("}",false);var Pe=function(){return"*"};var He=function(){return"/"};var Le=function(){return"="};var qe=function(){return"("};var Me=function(){return")"};var Fe=function(){return">"};var Be=function(){return"<"};var je=function(){return","};var Ge=function(){return";"};var We=function(){return":"};var Ke=function(){return'"'};var Ve=/^[!-']/;var Ye=jo([["!","'"]],false,false);var ze=/^[*-[]/;var $e=jo([["*","["]],false,false);var Je=/^[\]-~]/;var Xe=jo([["]","~"]],false,false);var Qe=function(e){return e};var Ze=/^[#-[]/;var et=jo([["#","["]],false,false);var tt=/^[\0-\t]/;var rt=jo([["\0","\t"]],false,false);var it=/^[\x0B-\f]/;var nt=jo([["\v","\f"]],false,false);var st=/^[\x0E-\x7F]/;var ot=jo([["",""]],false,false);var at=function(){r=r||{data:{}};r.data.uri=new Tl.URI(r.data.scheme,r.data.user,r.data.host,r.data.port);delete r.data.scheme;delete r.data.user;delete r.data.host;delete r.data.host_type;delete r.data.port};var ft=function(){r=r||{data:{}};r.data.uri=new Tl.URI(r.data.scheme,r.data.user,r.data.host,r.data.port,r.data.uri_params,r.data.uri_headers);delete r.data.scheme;delete r.data.user;delete r.data.host;delete r.data.host_type;delete r.data.port;delete r.data.uri_params;if(r.startRule==="SIP_URI"){r.data=r.data.uri}};var ut="sips";var ct=Bo("sips",true);var lt="sip";var ht=Bo("sip",true);var dt=function(e){r=r||{data:{}};r.data.scheme=e};var pt=function(){r=r||{data:{}};r.data.user=decodeURIComponent(Lo().slice(0,-1))};var vt=function(){r=r||{data:{}};r.data.password=Lo()};var gt=function(){r=r||{data:{}};r.data.host=Lo();return r.data.host};var mt=function(){r=r||{data:{}};r.data.host_type="domain";return Lo()};var yt=/^[a-zA-Z0-9_\-]/;var Tt=jo([["a","z"],["A","Z"],["0","9"],"_","-"],false,false);var Ct=/^[a-zA-Z0-9\-]/;var St=jo([["a","z"],["A","Z"],["0","9"],"-"],false,false);var At=function(){r=r||{data:{}};r.data.host_type="IPv6";return Lo()};var bt="::";var wt=Bo("::",false);var Et=function(){r=r||{data:{}};r.data.host_type="IPv6";return Lo()};var Rt=function(){r=r||{data:{}};r.data.host_type="IPv4";return Lo()};var _t="25";var It=Bo("25",false);var Ot=/^[0-5]/;var Dt=jo([["0","5"]],false,false);var Nt="2";var xt=Bo("2",false);var kt=/^[0-4]/;var Ut=jo([["0","4"]],false,false);var Pt="1";var Ht=Bo("1",false);var Lt=/^[1-9]/;var qt=jo([["1","9"]],false,false);var Mt=function(e){r=r||{data:{}};e=parseInt(e.join(""));r.data.port=e;return e};var Ft="transport=";var Bt=Bo("transport=",true);var jt="udp";var Gt=Bo("udp",true);var Wt="tcp";var Kt=Bo("tcp",true);var Vt="sctp";var Yt=Bo("sctp",true);var zt="tls";var $t=Bo("tls",true);var Jt=function(e){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};r.data.uri_params["transport"]=e.toLowerCase()};var Xt="user=";var Qt=Bo("user=",true);var Zt="phone";var er=Bo("phone",true);var tr="ip";var rr=Bo("ip",true);var ir=function(e){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};r.data.uri_params["user"]=e.toLowerCase()};var nr="method=";var sr=Bo("method=",true);var or=function(e){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};r.data.uri_params["method"]=e};var ar="ttl=";var fr=Bo("ttl=",true);var ur=function(e){r=r||{data:{}};if(!r.data.params)r.data.params={};r.data.params["ttl"]=e};var cr="maddr=";var lr=Bo("maddr=",true);var hr=function(e){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};r.data.uri_params["maddr"]=e};var dr="lr";var pr=Bo("lr",true);var vr=function(){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};r.data.uri_params["lr"]=undefined};var gr=function(e,t){r=r||{data:{}};if(!r.data.uri_params)r.data.uri_params={};if(t===null){t=undefined}else{t=t[1]}r.data.uri_params[e.toLowerCase()]=t};var mr=function(e,t){e=e.join("").toLowerCase();t=t.join("");r=r||{data:{}};if(!r.data.uri_headers)r.data.uri_headers={};if(!r.data.uri_headers[e]){r.data.uri_headers[e]=[t]}else{r.data.uri_headers[e].push(t)}};var yr=function(){r=r||{data:{}};if(r.startRule==="Refer_To"){r.data.uri=new Tl.URI(r.data.scheme,r.data.user,r.data.host,r.data.port,r.data.uri_params,r.data.uri_headers);delete r.data.scheme;delete r.data.user;delete r.data.host;delete r.data.host_type;delete r.data.port;delete r.data.uri_params}};var Tr="//";var Cr=Bo("//",false);var Sr=function(){r=r||{data:{}};r.data.scheme=Lo()};var Ar=Bo("SIP",true);var br=function(){r=r||{data:{}};r.data.sip_version=Lo()};var wr="INVITE";var Er=Bo("INVITE",false);var Rr="ACK";var _r=Bo("ACK",false);var Ir="VXACH";var Or=Bo("VXACH",false);var Dr="OPTIONS";var Nr=Bo("OPTIONS",false);var xr="BYE";var kr=Bo("BYE",false);var Ur="CANCEL";var Pr=Bo("CANCEL",false);var Hr="REGISTER";var Lr=Bo("REGISTER",false);var qr="SUBSCRIBE";var Mr=Bo("SUBSCRIBE",false);var Fr="NOTIFY";var Br=Bo("NOTIFY",false);var jr="REFER";var Gr=Bo("REFER",false);var Wr="PUBLISH";var Kr=Bo("PUBLISH",false);var Vr=function(){r=r||{data:{}};r.data.method=Lo();return r.data.method};var Yr=function(e){r=r||{data:{}};r.data.status_code=parseInt(e.join(""))};var zr=function(){r=r||{data:{}};r.data.reason_phrase=Lo()};var $r=function(){r=r||{data:{}};r.data=Lo()};var Jr=function(){var e,t;r=r||{data:{}};t=r.data.multi_header.length;for(e=0;e<t;e++){if(r.data.multi_header[e].parsed===null){r.data=null;break}}if(r.data!==null){r.data=r.data.multi_header}else{r.data=-1}};var Xr=function(){var t;r=r||{data:{}};if(!r.data.multi_header)r.data.multi_header=[];try{t=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params);delete r.data.uri;delete r.data.displayName;delete r.data.params}catch(e){t=null}r.data.multi_header.push({position:Do,offset:qo().start.offset,parsed:t})};var Qr=function(e){e=Lo().trim();if(e[0]==='"'){e=e.substring(1,e.length-1)}r=r||{data:{}};r.data.displayName=e};var Zr="q";var ei=Bo("q",true);var ti=function(e){r=r||{data:{}};if(!r.data.params)r.data.params={};r.data.params["q"]=e};var ri="expires";var ii=Bo("expires",true);var ni=function(e){r=r||{data:{}};if(!r.data.params)r.data.params={};r.data.params["expires"]=e};var si=function(e){return parseInt(e.join(""))};var oi="0";var ai=Bo("0",false);var fi=function(){return parseFloat(Lo())};var ui=function(e,t){r=r||{data:{}};if(!r.data.params)r.data.params={};if(t===null){t=undefined}else{t=t[1]}r.data.params[e.toLowerCase()]=t};var ci="render";var li=Bo("render",true);var hi="session";var di=Bo("session",true);var pi="icon";var vi=Bo("icon",true);var gi="alert";var mi=Bo("alert",true);var yi=function(){r=r||{data:{}};if(r.startRule==="Content_Disposition"){r.data.type=Lo().toLowerCase()}};var Ti="handling";var Ci=Bo("handling",true);var Si="optional";var Ai=Bo("optional",true);var bi="required";var wi=Bo("required",true);var Ei=function(e){r=r||{data:{}};r.data=parseInt(e.join(""))};var Ri=function(){r=r||{data:{}};r.data=Lo()};var _i="text";var Ii=Bo("text",true);var Oi="image";var Di=Bo("image",true);var Ni="audio";var xi=Bo("audio",true);var ki="video";var Ui=Bo("video",true);var Pi="application";var Hi=Bo("application",true);var Li="message";var qi=Bo("message",true);var Mi="multipart";var Fi=Bo("multipart",true);var Bi="x-";var ji=Bo("x-",true);var Gi=function(e){r=r||{data:{}};r.data.value=parseInt(e.join(""))};var Wi=function(e){r=r||{data:{}};r.data=e};var Ki=function(e){r=r||{data:{}};r.data.event=e.toLowerCase()};var Vi=function(){r=r||{data:{}};var e=r.data.tag;r.data=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params);if(e){r.data.setParam("tag",e)}};var Yi="tag";var zi=Bo("tag",true);var $i=function(e){r=r||{data:{}};r.data.tag=e};var Ji=function(e){r=r||{data:{}};r.data=parseInt(e.join(""))};var Xi=function(e){r=r||{data:{}};r.data=e};var Qi=function(){r=r||{data:{}};r.data=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params)};var Zi="digest";var en=Bo("Digest",true);var tn="realm";var rn=Bo("realm",true);var nn=function(e){r=r||{data:{}};r.data.realm=e};var sn="domain";var on=Bo("domain",true);var an="nonce";var fn=Bo("nonce",true);var un=function(e){r=r||{data:{}};r.data.nonce=e};var cn="opaque";var ln=Bo("opaque",true);var hn=function(e){r=r||{data:{}};r.data.opaque=e};var dn="stale";var pn=Bo("stale",true);var vn="true";var gn=Bo("true",true);var mn=function(){r=r||{data:{}};r.data.stale=true};var yn="false";var Tn=Bo("false",true);var Cn=function(){r=r||{data:{}};r.data.stale=false};var Sn="algorithm";var An=Bo("algorithm",true);var bn="md5";var wn=Bo("MD5",true);var En="md5-sess";var Rn=Bo("MD5-sess",true);var _n=function(e){r=r||{data:{}};r.data.algorithm=e.toUpperCase()};var In="qop";var On=Bo("qop",true);var Dn="auth-int";var Nn=Bo("auth-int",true);var xn="auth";var kn=Bo("auth",true);var Un=function(e){r=r||{data:{}};r.data.qop||(r.data.qop=[]);r.data.qop.push(e.toLowerCase())};var Pn=function(e){r=r||{data:{}};r.data.value=parseInt(e.join(""))};var Hn=function(){var e,t;r=r||{data:{}};t=r.data.multi_header.length;for(e=0;e<t;e++){if(r.data.multi_header[e].parsed===null){r.data=null;break}}if(r.data!==null){r.data=r.data.multi_header}else{r.data=-1}};var Ln=function(){var t;r=r||{data:{}};if(!r.data.multi_header)r.data.multi_header=[];try{t=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params);delete r.data.uri;delete r.data.displayName;delete r.data.params}catch(e){t=null}r.data.multi_header.push({position:Do,offset:qo().start.offset,parsed:t})};var qn=function(){r=r||{data:{}};r.data=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params)};var Mn=function(){r=r||{data:{}};if(!(r.data.replaces_from_tag&&r.data.replaces_to_tag)){r.data=-1}};var Fn=function(){r=r||{data:{}};r.data={call_id:r.data}};var Bn="from-tag";var jn=Bo("from-tag",true);var Gn=function(e){r=r||{data:{}};r.data.replaces_from_tag=e};var Wn="to-tag";var Kn=Bo("to-tag",true);var Vn=function(e){r=r||{data:{}};r.data.replaces_to_tag=e};var Yn="early-only";var zn=Bo("early-only",true);var $n=function(){r=r||{data:{}};r.data.early_only=true};var Jn=function(e,t){return t};var Xn=function(e,t){return ml(e,t)};var Qn=function(e){r=r||{data:{}};if(r.startRule==="Require"){r.data=e||[]}};var Zn=function(e){r=r||{data:{}};r.data.value=parseInt(e.join(""))};var es="active";var ts=Bo("active",true);var rs="pending";var is=Bo("pending",true);var ns="terminated";var ss=Bo("terminated",true);var os=function(){r=r||{data:{}};r.data.state=Lo()};var as="reason";var fs=Bo("reason",true);var us=function(e){r=r||{data:{}};if(typeof e!=="undefined")r.data.reason=e};var cs=function(e){r=r||{data:{}};if(typeof e!=="undefined")r.data.expires=e};var ls="retry_after";var hs=Bo("retry_after",true);var ds=function(e){r=r||{data:{}};if(typeof e!=="undefined")r.data.retry_after=e};var ps="deactivated";var vs=Bo("deactivated",true);var gs="probation";var ms=Bo("probation",true);var ys="rejected";var Ts=Bo("rejected",true);var Cs="timeout";var Ss=Bo("timeout",true);var As="giveup";var bs=Bo("giveup",true);var ws="noresource";var Es=Bo("noresource",true);var Rs="invariant";var _s=Bo("invariant",true);var Is=function(e){r=r||{data:{}};if(r.startRule==="Supported"){r.data=e||[]}};var Os=function(){r=r||{data:{}};var e=r.data.tag;r.data=new yl.NameAddrHeader(r.data.uri,r.data.displayName,r.data.params);if(e){r.data.setParam("tag",e)}};var Ds="ttl";var Ns=Bo("ttl",true);var xs=function(e){r=r||{data:{}};r.data.ttl=e};var ks="maddr";var Us=Bo("maddr",true);var Ps=function(e){r=r||{data:{}};r.data.maddr=e};var Hs="received";var Ls=Bo("received",true);var qs=function(e){r=r||{data:{}};r.data.received=e};var Ms="branch";var Fs=Bo("branch",true);var Bs=function(e){r=r||{data:{}};r.data.branch=e};var js="rport";var Gs=Bo("rport",true);var Ws=function(e){r=r||{data:{}};if(typeof e!=="undefined")r.data.rport=e.join("")};var Ks=function(e){r=r||{data:{}};r.data.protocol=e};var Vs=Bo("UDP",true);var Ys=Bo("TCP",true);var zs=Bo("TLS",true);var $s=Bo("SCTP",true);var Js=function(e){r=r||{data:{}};r.data.transport=e};var Xs=function(){r=r||{data:{}};r.data.host=Lo()};var Qs=function(e){r=r||{data:{}};r.data.port=parseInt(e.join(""))};var Zs=function(e){return parseInt(e.join(""))};var eo=function(e){r=r||{data:{}};if(r.startRule==="Session_Expires"){r.data.deltaSeconds=e}};var to="refresher";var ro=Bo("refresher",false);var io="uas";var no=Bo("uas",false);var so="uac";var oo=Bo("uac",false);var ao=function(e){r=r||{data:{}};if(r.startRule==="Session_Expires"){r.data.refresher=e}};var fo=function(e){r=r||{data:{}};if(r.startRule==="Min_SE"){r.data=e}};var uo="stuns";var co=Bo("stuns",true);var lo="stun";var ho=Bo("stun",true);var po=function(e){r=r||{data:{}};r.data.scheme=e};var vo=function(e){r=r||{data:{}};r.data.host=e};var go="?transport=";var mo=Bo("?transport=",false);var yo="turns";var To=Bo("turns",true);var Co="turn";var So=Bo("turn",true);var Ao=function(e){r=r||{data:{}};r.data.transport=e};var bo=function(){r=r||{data:{}};r.data=Lo()};var wo="Referred-By";var Eo=Bo("Referred-By",false);var Ro="b";var _o=Bo("b",false);var Io="cid";var Oo=Bo("cid",false);var Do=0;var No=0;var xo=[{line:1,column:1}];var ko=0;var Uo=[];var Po=0;var Ho;if(r.startRule!==undefined){if(!(r.startRule in e)){throw new Error("Can't start parsing from rule \""+r.startRule+'".')}t=e[r.startRule]}function Lo(){return v.substring(No,Do)}function qo(){return Yo(No,Do)}function Mo(e,t){t=t!==undefined?t:Yo(No,Do);throw Jo([Ko(e)],v.substring(No,Do),t)}function Fo(e,t){t=t!==undefined?t:Yo(No,Do);throw $o(e,t)}function Bo(e,t){return{type:"literal",text:e,ignoreCase:t}}function jo(e,t,r){return{type:"class",parts:e,inverted:t,ignoreCase:r}}function Go(){return{type:"any"}}function Wo(){return{type:"end"}}function Ko(e){return{type:"other",description:e}}function Vo(e){var t=xo[e];var r;if(t){return t}else{r=e-1;while(!xo[r]){r--}t=xo[r];t={line:t.line,column:t.column};while(r<e){if(v.charCodeAt(r)===10){t.line++;t.column=1}else{t.column++}r++}xo[e]=t;return t}}function Yo(e,t){var r=Vo(e);var i=Vo(t);return{start:{offset:e,line:r.line,column:r.column},end:{offset:t,line:i.line,column:i.column}}}function zo(e){if(Do<ko){return}if(Do>ko){ko=Do;Uo=[]}Uo.push(e)}function $o(e,t){return new Cl(e,[],"",t)}function Jo(e,t,r){return new Cl(Cl.buildMessage(e,t),e,t,r)}function Xo(){var e;if(v.substr(Do,2)===i){e=i;Do+=2}else{e=g;if(Po===0){zo(n)}}return e}function Qo(){var e;if(s.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(o)}}return e}function Zo(){var e;if(a.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(f)}}return e}function ea(){var e;if(u.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(c)}}return e}function ta(){var e;e=na();if(e===g){e=sa()}return e}function ra(){var e;if(l.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(h)}}return e}function ia(){var e;if(d.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(p)}}return e}function na(){var e;if(v.charCodeAt(Do)===32){e=m;Do++}else{e=g;if(Po===0){zo(y)}}return e}function sa(){var e;if(v.charCodeAt(Do)===9){e=T;Do++}else{e=g;if(Po===0){zo(C)}}return e}function oa(){var e;if(S.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(A)}}return e}function aa(){var e;if(v.charCodeAt(Do)===59){e=b;Do++}else{e=g;if(Po===0){zo(w)}}if(e===g){if(v.charCodeAt(Do)===47){e=E;Do++}else{e=g;if(Po===0){zo(R)}}if(e===g){if(v.charCodeAt(Do)===63){e=_;Do++}else{e=g;if(Po===0){zo(I)}}if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===64){e=N;Do++}else{e=g;if(Po===0){zo(x)}}if(e===g){if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}}}}}}}}}}return e}function fa(){var e;e=oa();if(e===g){e=ua()}return e}function ua(){var e;if(v.charCodeAt(Do)===45){e=G;Do++}else{e=g;if(Po===0){zo(W)}}if(e===g){if(v.charCodeAt(Do)===95){e=K;Do++}else{e=g;if(Po===0){zo(V)}}if(e===g){if(v.charCodeAt(Do)===46){e=Y;Do++}else{e=g;if(Po===0){zo(z)}}if(e===g){if(v.charCodeAt(Do)===33){e=$;Do++}else{e=g;if(Po===0){zo(J)}}if(e===g){if(v.charCodeAt(Do)===126){e=X;Do++}else{e=g;if(Po===0){zo(Q)}}if(e===g){if(v.charCodeAt(Do)===42){e=Z;Do++}else{e=g;if(Po===0){zo(ee)}}if(e===g){if(v.charCodeAt(Do)===39){e=te;Do++}else{e=g;if(Po===0){zo(re)}}if(e===g){if(v.charCodeAt(Do)===40){e=ie;Do++}else{e=g;if(Po===0){zo(ne)}}if(e===g){if(v.charCodeAt(Do)===41){e=se;Do++}else{e=g;if(Po===0){zo(oe)}}}}}}}}}}return e}function ca(){var e,t,r,i,n;e=Do;t=Do;if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r!==g){i=ea();if(i!==g){n=ea();if(n!==g){r=[r,i,n];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function la(){var e,t,r,i;e=Do;t=Do;r=[];i=ta();while(i!==g){r.push(i);i=ta()}if(r!==g){i=Xo();if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=null}if(t!==g){r=[];i=ta();if(i!==g){while(i!==g){r.push(i);i=ta()}}else{r=g}if(r!==g){No=e;t=ue();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function ha(){var e;e=la();if(e===g){e=null}return e}function da(){var e,t,r,i;e=Do;t=[];r=na();if(r===g){r=sa()}while(r!==g){t.push(r);r=na();if(r===g){r=sa()}}if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=ha();if(i!==g){No=e;t=ce();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function pa(){var e,t,r,i,n,s,o;e=Do;t=Do;r=[];i=va();if(i!==g){while(i!==g){r.push(i);i=va()}}else{r=g}if(r!==g){i=[];n=Do;s=[];o=la();while(o!==g){s.push(o);o=la()}if(s!==g){o=va();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;s=[];o=la();while(o!==g){s.push(o);o=la()}if(s!==g){o=va();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function va(){var e;if(le.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(he)}}if(e===g){e=ga()}return e}function ga(){var e;if(de.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(pe)}}return e}function ma(){var e;if(ve.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(ge)}}return e}function ya(){var e;e=Qo();if(e===g){if(me.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(ye)}}}return e}function Ta(){var e,t,r;e=Do;t=[];r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===46){r=Y;Do++}else{r=g;if(Po===0){zo(z)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}}}}}}}}}}}if(r!==g){while(r!==g){t.push(r);r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===46){r=Y;Do++}else{r=g;if(Po===0){zo(z)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}}}}}}}}}}}}}else{t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function Ca(){var e,t,r;e=Do;t=[];r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}}}}}}}}}}if(r!==g){while(r!==g){t.push(r);r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}}}}}}}}}}}}else{t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function Sa(){var e;if(v.charCodeAt(Do)===40){e=ie;Do++}else{e=g;if(Po===0){zo(ne)}}if(e===g){if(v.charCodeAt(Do)===41){e=se;Do++}else{e=g;if(Po===0){zo(oe)}}if(e===g){if(v.charCodeAt(Do)===60){e=Se;Do++}else{e=g;if(Po===0){zo(Ae)}}if(e===g){if(v.charCodeAt(Do)===62){e=be;Do++}else{e=g;if(Po===0){zo(we)}}if(e===g){if(v.charCodeAt(Do)===64){e=N;Do++}else{e=g;if(Po===0){zo(x)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}if(e===g){if(v.charCodeAt(Do)===59){e=b;Do++}else{e=g;if(Po===0){zo(w)}}if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===92){e=Ee;Do++}else{e=g;if(Po===0){zo(Re)}}if(e===g){e=ia();if(e===g){if(v.charCodeAt(Do)===47){e=E;Do++}else{e=g;if(Po===0){zo(R)}}if(e===g){if(v.charCodeAt(Do)===91){e=_e;Do++}else{e=g;if(Po===0){zo(Ie)}}if(e===g){if(v.charCodeAt(Do)===93){e=Oe;Do++}else{e=g;if(Po===0){zo(De)}}if(e===g){if(v.charCodeAt(Do)===63){e=_;Do++}else{e=g;if(Po===0){zo(I)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}if(e===g){if(v.charCodeAt(Do)===123){e=Ne;Do++}else{e=g;if(Po===0){zo(xe)}}if(e===g){if(v.charCodeAt(Do)===125){e=ke;Do++}else{e=g;if(Po===0){zo(Ue)}}if(e===g){e=na();if(e===g){e=sa()}}}}}}}}}}}}}}}}}}return e}function Aa(){var e,t,r;e=Do;t=[];r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===46){r=Y;Do++}else{r=g;if(Po===0){zo(z)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}if(r===g){if(v.charCodeAt(Do)===40){r=ie;Do++}else{r=g;if(Po===0){zo(ne)}}if(r===g){if(v.charCodeAt(Do)===41){r=se;Do++}else{r=g;if(Po===0){zo(oe)}}if(r===g){if(v.charCodeAt(Do)===60){r=Se;Do++}else{r=g;if(Po===0){zo(Ae)}}if(r===g){if(v.charCodeAt(Do)===62){r=be;Do++}else{r=g;if(Po===0){zo(we)}}if(r===g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r===g){if(v.charCodeAt(Do)===92){r=Ee;Do++}else{r=g;if(Po===0){zo(Re)}}if(r===g){r=ia();if(r===g){if(v.charCodeAt(Do)===47){r=E;Do++}else{r=g;if(Po===0){zo(R)}}if(r===g){if(v.charCodeAt(Do)===91){r=_e;Do++}else{r=g;if(Po===0){zo(Ie)}}if(r===g){if(v.charCodeAt(Do)===93){r=Oe;Do++}else{r=g;if(Po===0){zo(De)}}if(r===g){if(v.charCodeAt(Do)===63){r=_;Do++}else{r=g;if(Po===0){zo(I)}}if(r===g){if(v.charCodeAt(Do)===123){r=Ne;Do++}else{r=g;if(Po===0){zo(xe)}}if(r===g){if(v.charCodeAt(Do)===125){r=ke;Do++}else{r=g;if(Po===0){zo(Ue)}}}}}}}}}}}}}}}}}}}}}}}}}if(r!==g){while(r!==g){t.push(r);r=oa();if(r===g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r===g){if(v.charCodeAt(Do)===46){r=Y;Do++}else{r=g;if(Po===0){zo(z)}}if(r===g){if(v.charCodeAt(Do)===33){r=$;Do++}else{r=g;if(Po===0){zo(J)}}if(r===g){if(v.charCodeAt(Do)===37){r=ae;Do++}else{r=g;if(Po===0){zo(fe)}}if(r===g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r===g){if(v.charCodeAt(Do)===95){r=K;Do++}else{r=g;if(Po===0){zo(V)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===96){r=Te;Do++}else{r=g;if(Po===0){zo(Ce)}}if(r===g){if(v.charCodeAt(Do)===39){r=te;Do++}else{r=g;if(Po===0){zo(re)}}if(r===g){if(v.charCodeAt(Do)===126){r=X;Do++}else{r=g;if(Po===0){zo(Q)}}if(r===g){if(v.charCodeAt(Do)===40){r=ie;Do++}else{r=g;if(Po===0){zo(ne)}}if(r===g){if(v.charCodeAt(Do)===41){r=se;Do++}else{r=g;if(Po===0){zo(oe)}}if(r===g){if(v.charCodeAt(Do)===60){r=Se;Do++}else{r=g;if(Po===0){zo(Ae)}}if(r===g){if(v.charCodeAt(Do)===62){r=be;Do++}else{r=g;if(Po===0){zo(we)}}if(r===g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r===g){if(v.charCodeAt(Do)===92){r=Ee;Do++}else{r=g;if(Po===0){zo(Re)}}if(r===g){r=ia();if(r===g){if(v.charCodeAt(Do)===47){r=E;Do++}else{r=g;if(Po===0){zo(R)}}if(r===g){if(v.charCodeAt(Do)===91){r=_e;Do++}else{r=g;if(Po===0){zo(Ie)}}if(r===g){if(v.charCodeAt(Do)===93){r=Oe;Do++}else{r=g;if(Po===0){zo(De)}}if(r===g){if(v.charCodeAt(Do)===63){r=_;Do++}else{r=g;if(Po===0){zo(I)}}if(r===g){if(v.charCodeAt(Do)===123){r=Ne;Do++}else{r=g;if(Po===0){zo(xe)}}if(r===g){if(v.charCodeAt(Do)===125){r=ke;Do++}else{r=g;if(Po===0){zo(Ue)}}}}}}}}}}}}}}}}}}}}}}}}}}}else{t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function ba(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===42){r=Z;Do++}else{r=g;if(Po===0){zo(ee)}}if(r!==g){i=ha();if(i!==g){No=e;t=Pe();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function wa(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===47){r=E;Do++}else{r=g;if(Po===0){zo(R)}}if(r!==g){i=ha();if(i!==g){No=e;t=He();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ea(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===61){r=P;Do++}else{r=g;if(Po===0){zo(H)}}if(r!==g){i=ha();if(i!==g){No=e;t=Le();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ra(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===40){r=ie;Do++}else{r=g;if(Po===0){zo(ne)}}if(r!==g){i=ha();if(i!==g){No=e;t=qe();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function _a(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===41){r=se;Do++}else{r=g;if(Po===0){zo(oe)}}if(r!==g){i=ha();if(i!==g){No=e;t=Me();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ia(){var e,t,r;e=Do;if(v.charCodeAt(Do)===62){t=be;Do++}else{t=g;if(Po===0){zo(we)}}if(t!==g){r=ha();if(r!==g){No=e;t=Fe();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Oa(){var e,t,r;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===60){r=Se;Do++}else{r=g;if(Po===0){zo(Ae)}}if(r!==g){No=e;t=Be();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Da(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===44){r=B;Do++}else{r=g;if(Po===0){zo(j)}}if(r!==g){i=ha();if(i!==g){No=e;t=je();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Na(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===59){r=b;Do++}else{r=g;if(Po===0){zo(w)}}if(r!==g){i=ha();if(i!==g){No=e;t=Ge();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function xa(){var e,t,r,i;e=Do;t=ha();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=ha();if(i!==g){No=e;t=We();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ka(){var e,t,r;e=Do;t=ha();if(t!==g){r=ia();if(r!==g){No=e;t=Ke();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ua(){var e,t,r;e=Do;t=ia();if(t!==g){r=ha();if(r!==g){No=e;t=Ke();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Pa(){var e,t,r,i;e=Do;t=Ra();if(t!==g){r=[];i=Ha();if(i===g){i=Fa();if(i===g){i=Pa()}}while(i!==g){r.push(i);i=Ha();if(i===g){i=Fa();if(i===g){i=Pa()}}}if(r!==g){i=_a();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ha(){var e;if(Ve.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(Ye)}}if(e===g){if(ze.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo($e)}}if(e===g){if(Je.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(Xe)}}if(e===g){e=ga();if(e===g){e=la()}}}}return e}function La(){var e,t,r,i,n,s;e=Do;t=Do;r=ha();if(r!==g){i=ia();if(i!==g){n=[];s=Ma();if(s===g){s=Fa()}while(s!==g){n.push(s);s=Ma();if(s===g){s=Fa()}}if(n!==g){s=ia();if(s!==g){r=[r,i,n,s];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function qa(){var e,t,r,i,n,s;e=Do;t=ha();if(t!==g){r=ia();if(r!==g){i=Do;n=[];s=Ma();if(s===g){s=Fa()}while(s!==g){n.push(s);s=Ma();if(s===g){s=Fa()}}if(n!==g){i=v.substring(i,Do)}else{i=n}if(i!==g){n=ia();if(n!==g){No=e;t=Qe(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ma(){var e;e=la();if(e===g){if(v.charCodeAt(Do)===33){e=$;Do++}else{e=g;if(Po===0){zo(J)}}if(e===g){if(Ze.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(et)}}if(e===g){if(Je.test(v.charAt(Do))){e=v.charAt(Do);Do++}else{e=g;if(Po===0){zo(Xe)}}if(e===g){e=ga()}}}}return e}function Fa(){var e,t,r;e=Do;if(v.charCodeAt(Do)===92){t=Ee;Do++}else{t=g;if(Po===0){zo(Re)}}if(t!==g){if(tt.test(v.charAt(Do))){r=v.charAt(Do);Do++}else{r=g;if(Po===0){zo(rt)}}if(r===g){if(it.test(v.charAt(Do))){r=v.charAt(Do);Do++}else{r=g;if(Po===0){zo(nt)}}if(r===g){if(st.test(v.charAt(Do))){r=v.charAt(Do);Do++}else{r=g;if(Po===0){zo(ot)}}}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ba(){var e,t,r,i,n;e=Do;t=Ga();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=Wa();if(i===g){i=null}if(i!==g){n=za();if(n!==g){No=e;t=at();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ja(){var e,t,r,i,n,s,o;e=Do;t=Ga();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=Wa();if(i===g){i=null}if(i!==g){n=za();if(n!==g){s=af();if(s!==g){o=Cf();if(o===g){o=null}if(o!==g){No=e;t=ft();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ga(){var e,t;e=Do;if(v.substr(Do,4).toLowerCase()===ut){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(ct)}}if(t===g){if(v.substr(Do,3).toLowerCase()===lt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(ht)}}}if(t!==g){No=e;t=dt(t)}e=t;return e}function Wa(){var e,t,r,i,n;e=Do;t=Ka();if(t!==g){r=Do;if(v.charCodeAt(Do)===58){i=O;Do++}else{i=g;if(Po===0){zo(D)}}if(i!==g){n=Ya();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){if(v.charCodeAt(Do)===64){i=N;Do++}else{i=g;if(Po===0){zo(x)}}if(i!==g){No=e;t=pt();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ka(){var e,t;e=[];t=fa();if(t===g){t=ca();if(t===g){t=Va()}}if(t!==g){while(t!==g){e.push(t);t=fa();if(t===g){t=ca();if(t===g){t=Va()}}}}else{e=g}return e}function Va(){var e;if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}if(e===g){if(v.charCodeAt(Do)===59){e=b;Do++}else{e=g;if(Po===0){zo(w)}}if(e===g){if(v.charCodeAt(Do)===63){e=_;Do++}else{e=g;if(Po===0){zo(I)}}if(e===g){if(v.charCodeAt(Do)===47){e=E;Do++}else{e=g;if(Po===0){zo(R)}}}}}}}}}return e}function Ya(){var e,t,r;e=Do;t=[];r=fa();if(r===g){r=ca();if(r===g){if(v.charCodeAt(Do)===38){r=k;Do++}else{r=g;if(Po===0){zo(U)}}if(r===g){if(v.charCodeAt(Do)===61){r=P;Do++}else{r=g;if(Po===0){zo(H)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===36){r=M;Do++}else{r=g;if(Po===0){zo(F)}}if(r===g){if(v.charCodeAt(Do)===44){r=B;Do++}else{r=g;if(Po===0){zo(j)}}}}}}}}while(r!==g){t.push(r);r=fa();if(r===g){r=ca();if(r===g){if(v.charCodeAt(Do)===38){r=k;Do++}else{r=g;if(Po===0){zo(U)}}if(r===g){if(v.charCodeAt(Do)===61){r=P;Do++}else{r=g;if(Po===0){zo(H)}}if(r===g){if(v.charCodeAt(Do)===43){r=L;Do++}else{r=g;if(Po===0){zo(q)}}if(r===g){if(v.charCodeAt(Do)===36){r=M;Do++}else{r=g;if(Po===0){zo(F)}}if(r===g){if(v.charCodeAt(Do)===44){r=B;Do++}else{r=g;if(Po===0){zo(j)}}}}}}}}}if(t!==g){No=e;t=vt()}e=t;return e}function za(){var e,t,r,i,n;e=Do;t=$a();if(t!==g){r=Do;if(v.charCodeAt(Do)===58){i=O;Do++}else{i=g;if(Po===0){zo(D)}}if(i!==g){n=of();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function $a(){var e,t;e=Do;t=Ja();if(t===g){t=nf();if(t===g){t=Za()}}if(t!==g){No=e;t=gt()}e=t;return e}function Ja(){var e,t,r,i,n;e=Do;t=[];r=Do;i=Xa();if(i!==g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}while(r!==g){t.push(r);r=Do;i=Xa();if(i!==g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}}if(t!==g){r=Qa();if(r!==g){if(v.charCodeAt(Do)===46){i=Y;Do++}else{i=g;if(Po===0){zo(z)}}if(i===g){i=null}if(i!==g){No=e;t=mt();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Xa(){var e,t;e=[];if(yt.test(v.charAt(Do))){t=v.charAt(Do);Do++}else{t=g;if(Po===0){zo(Tt)}}if(t!==g){while(t!==g){e.push(t);if(yt.test(v.charAt(Do))){t=v.charAt(Do);Do++}else{t=g;if(Po===0){zo(Tt)}}}}else{e=g}return e}function Qa(){var e,t,r,i;e=Do;if(a.test(v.charAt(Do))){t=v.charAt(Do);Do++}else{t=g;if(Po===0){zo(f)}}if(t!==g){r=[];if(Ct.test(v.charAt(Do))){i=v.charAt(Do);Do++}else{i=g;if(Po===0){zo(St)}}while(i!==g){r.push(i);if(Ct.test(v.charAt(Do))){i=v.charAt(Do);Do++}else{i=g;if(Po===0){zo(St)}}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Za(){var e,t,r,i;e=Do;if(v.charCodeAt(Do)===91){t=_e;Do++}else{t=g;if(Po===0){zo(Ie)}}if(t!==g){r=ef();if(r!==g){if(v.charCodeAt(Do)===93){i=Oe;Do++}else{i=g;if(Po===0){zo(De)}}if(i!==g){No=e;t=At();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ef(){var e,t,r,i,n,s,o,a,f,u,c,l,h,d,p;e=Do;t=Do;r=tf();if(r!==g){if(v.charCodeAt(Do)===58){i=O;Do++}else{i=g;if(Po===0){zo(D)}}if(i!==g){n=tf();if(n!==g){if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){if(v.charCodeAt(Do)===58){u=O;Do++}else{u=g;if(Po===0){zo(D)}}if(u!==g){c=tf();if(c!==g){if(v.charCodeAt(Do)===58){l=O;Do++}else{l=g;if(Po===0){zo(D)}}if(l!==g){h=tf();if(h!==g){if(v.charCodeAt(Do)===58){d=O;Do++}else{d=g;if(Po===0){zo(D)}}if(d!==g){p=rf();if(p!==g){r=[r,i,n,s,o,a,f,u,c,l,h,d,p];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=tf();if(u!==g){if(v.charCodeAt(Do)===58){c=O;Do++}else{c=g;if(Po===0){zo(D)}}if(c!==g){l=tf();if(l!==g){if(v.charCodeAt(Do)===58){h=O;Do++}else{h=g;if(Po===0){zo(D)}}if(h!==g){d=rf();if(d!==g){r=[r,i,n,s,o,a,f,u,c,l,h,d];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=tf();if(u!==g){if(v.charCodeAt(Do)===58){c=O;Do++}else{c=g;if(Po===0){zo(D)}}if(c!==g){l=rf();if(l!==g){r=[r,i,n,s,o,a,f,u,c,l];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=rf();if(u!==g){r=[r,i,n,s,o,a,f,u];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=rf();if(a!==g){r=[r,i,n,s,o,a];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=rf();if(s!==g){r=[r,i,n,s];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=rf();if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;if(v.substr(Do,2)===bt){r=bt;Do+=2}else{r=g;if(Po===0){zo(wt)}}if(r!==g){i=tf();if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){if(v.substr(Do,2)===bt){i=bt;Do+=2}else{i=g;if(Po===0){zo(wt)}}if(i!==g){n=tf();if(n!==g){if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){if(v.charCodeAt(Do)===58){u=O;Do++}else{u=g;if(Po===0){zo(D)}}if(u!==g){c=tf();if(c!==g){if(v.charCodeAt(Do)===58){l=O;Do++}else{l=g;if(Po===0){zo(D)}}if(l!==g){h=rf();if(h!==g){r=[r,i,n,s,o,a,f,u,c,l,h];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){if(v.substr(Do,2)===bt){n=bt;Do+=2}else{n=g;if(Po===0){zo(wt)}}if(n!==g){s=tf();if(s!==g){if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=tf();if(u!==g){if(v.charCodeAt(Do)===58){c=O;Do++}else{c=g;if(Po===0){zo(D)}}if(c!==g){l=rf();if(l!==g){r=[r,i,n,s,o,a,f,u,c,l];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){n=Do;if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){if(v.substr(Do,2)===bt){s=bt;Do+=2}else{s=g;if(Po===0){zo(wt)}}if(s!==g){o=tf();if(o!==g){if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){if(v.charCodeAt(Do)===58){u=O;Do++}else{u=g;if(Po===0){zo(D)}}if(u!==g){c=rf();if(c!==g){r=[r,i,n,s,o,a,f,u,c];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){n=Do;if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){s=Do;if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}if(s===g){s=null}if(s!==g){if(v.substr(Do,2)===bt){o=bt;Do+=2}else{o=g;if(Po===0){zo(wt)}}if(o!==g){a=tf();if(a!==g){if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=rf();if(u!==g){r=[r,i,n,s,o,a,f,u];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){n=Do;if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){s=Do;if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}if(s===g){s=null}if(s!==g){o=Do;if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}if(o===g){o=null}if(o!==g){if(v.substr(Do,2)===bt){a=bt;Do+=2}else{a=g;if(Po===0){zo(wt)}}if(a!==g){f=rf();if(f!==g){r=[r,i,n,s,o,a,f];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){n=Do;if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){s=Do;if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}if(s===g){s=null}if(s!==g){o=Do;if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}if(o===g){o=null}if(o!==g){a=Do;if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=tf();if(u!==g){f=[f,u];a=f}else{Do=a;a=g}}else{Do=a;a=g}if(a===g){a=null}if(a!==g){if(v.substr(Do,2)===bt){f=bt;Do+=2}else{f=g;if(Po===0){zo(wt)}}if(f!==g){u=tf();if(u!==g){r=[r,i,n,s,o,a,f,u];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=Do;r=tf();if(r!==g){i=Do;if(v.charCodeAt(Do)===58){n=O;Do++}else{n=g;if(Po===0){zo(D)}}if(n!==g){s=tf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){n=Do;if(v.charCodeAt(Do)===58){s=O;Do++}else{s=g;if(Po===0){zo(D)}}if(s!==g){o=tf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){s=Do;if(v.charCodeAt(Do)===58){o=O;Do++}else{o=g;if(Po===0){zo(D)}}if(o!==g){a=tf();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}if(s===g){s=null}if(s!==g){o=Do;if(v.charCodeAt(Do)===58){a=O;Do++}else{a=g;if(Po===0){zo(D)}}if(a!==g){f=tf();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}if(o===g){o=null}if(o!==g){a=Do;if(v.charCodeAt(Do)===58){f=O;Do++}else{f=g;if(Po===0){zo(D)}}if(f!==g){u=tf();if(u!==g){f=[f,u];a=f}else{Do=a;a=g}}else{Do=a;a=g}if(a===g){a=null}if(a!==g){f=Do;if(v.charCodeAt(Do)===58){u=O;Do++}else{u=g;if(Po===0){zo(D)}}if(u!==g){c=tf();if(c!==g){u=[u,c];f=u}else{Do=f;f=g}}else{Do=f;f=g}if(f===g){f=null}if(f!==g){if(v.substr(Do,2)===bt){u=bt;Do+=2}else{u=g;if(Po===0){zo(wt)}}if(u!==g){r=[r,i,n,s,o,a,f,u];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}}}}}}}}}}}}}}if(t!==g){No=e;t=Et()}e=t;return e}function tf(){var e,t,r,i,n;e=Do;t=ea();if(t!==g){r=ea();if(r===g){r=null}if(r!==g){i=ea();if(i===g){i=null}if(i!==g){n=ea();if(n===g){n=null}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function rf(){var e,t,r,i;e=Do;t=tf();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=tf();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=nf()}return e}function nf(){var e,t,r,i,n,s,o,a;e=Do;t=sf();if(t!==g){if(v.charCodeAt(Do)===46){r=Y;Do++}else{r=g;if(Po===0){zo(z)}}if(r!==g){i=sf();if(i!==g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}if(n!==g){s=sf();if(s!==g){if(v.charCodeAt(Do)===46){o=Y;Do++}else{o=g;if(Po===0){zo(z)}}if(o!==g){a=sf();if(a!==g){No=e;t=Rt();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function sf(){var e,t,r,i;e=Do;if(v.substr(Do,2)===_t){t=_t;Do+=2}else{t=g;if(Po===0){zo(It)}}if(t!==g){if(Ot.test(v.charAt(Do))){r=v.charAt(Do);Do++}else{r=g;if(Po===0){zo(Dt)}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.charCodeAt(Do)===50){t=Nt;Do++}else{t=g;if(Po===0){zo(xt)}}if(t!==g){if(kt.test(v.charAt(Do))){r=v.charAt(Do);Do++}else{r=g;if(Po===0){zo(Ut)}}if(r!==g){i=Qo();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.charCodeAt(Do)===49){t=Pt;Do++}else{t=g;if(Po===0){zo(Ht)}}if(t!==g){r=Qo();if(r!==g){i=Qo();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(Lt.test(v.charAt(Do))){t=v.charAt(Do);Do++}else{t=g;if(Po===0){zo(qt)}}if(t!==g){r=Qo();if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Qo()}}}}return e}function of(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Qo();if(r===g){r=null}if(r!==g){i=Qo();if(i===g){i=null}if(i!==g){n=Qo();if(n===g){n=null}if(n!==g){s=Qo();if(s===g){s=null}if(s!==g){o=Qo();if(o===g){o=null}if(o!==g){r=[r,i,n,s,o];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){No=e;t=Mt(t)}e=t;return e}function af(){var e,t,r,i;e=[];t=Do;if(v.charCodeAt(Do)===59){r=b;Do++}else{r=g;if(Po===0){zo(w)}}if(r!==g){i=ff();if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}while(t!==g){e.push(t);t=Do;if(v.charCodeAt(Do)===59){r=b;Do++}else{r=g;if(Po===0){zo(w)}}if(r!==g){i=ff();if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}}return e}function ff(){var e;e=uf();if(e===g){e=cf();if(e===g){e=lf();if(e===g){e=hf();if(e===g){e=df();if(e===g){e=pf();if(e===g){e=vf()}}}}}}return e}function uf(){var e,t,r;e=Do;if(v.substr(Do,10).toLowerCase()===Ft){t=v.substr(Do,10);Do+=10}else{t=g;if(Po===0){zo(Bt)}}if(t!==g){if(v.substr(Do,3).toLowerCase()===jt){r=v.substr(Do,3);Do+=3}else{r=g;if(Po===0){zo(Gt)}}if(r===g){if(v.substr(Do,3).toLowerCase()===Wt){r=v.substr(Do,3);Do+=3}else{r=g;if(Po===0){zo(Kt)}}if(r===g){if(v.substr(Do,4).toLowerCase()===Vt){r=v.substr(Do,4);Do+=4}else{r=g;if(Po===0){zo(Yt)}}if(r===g){if(v.substr(Do,3).toLowerCase()===zt){r=v.substr(Do,3);Do+=3}else{r=g;if(Po===0){zo($t)}}if(r===g){r=Ta()}}}}if(r!==g){No=e;t=Jt(r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function cf(){var e,t,r;e=Do;if(v.substr(Do,5).toLowerCase()===Xt){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(Qt)}}if(t!==g){if(v.substr(Do,5).toLowerCase()===Zt){r=v.substr(Do,5);Do+=5}else{r=g;if(Po===0){zo(er)}}if(r===g){if(v.substr(Do,2).toLowerCase()===tr){r=v.substr(Do,2);Do+=2}else{r=g;if(Po===0){zo(rr)}}if(r===g){r=Ta()}}if(r!==g){No=e;t=ir(r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function lf(){var e,t,r;e=Do;if(v.substr(Do,7).toLowerCase()===nr){t=v.substr(Do,7);Do+=7}else{t=g;if(Po===0){zo(sr)}}if(t!==g){r=ru();if(r!==g){No=e;t=or(r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function hf(){var e,t,r;e=Do;if(v.substr(Do,4).toLowerCase()===ar){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(fr)}}if(t!==g){r=Wc();if(r!==g){No=e;t=ur(r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function df(){var e,t,r;e=Do;if(v.substr(Do,6).toLowerCase()===cr){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(lr)}}if(t!==g){r=$a();if(r!==g){No=e;t=hr(r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function pf(){var e,t,r,i,n;e=Do;if(v.substr(Do,2).toLowerCase()===dr){t=v.substr(Do,2);Do+=2}else{t=g;if(Po===0){zo(pr)}}if(t!==g){r=Do;if(v.charCodeAt(Do)===61){i=P;Do++}else{i=g;if(Po===0){zo(H)}}if(i!==g){n=Ta();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){No=e;t=vr();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function vf(){var e,t,r,i,n;e=Do;t=gf();if(t!==g){r=Do;if(v.charCodeAt(Do)===61){i=P;Do++}else{i=g;if(Po===0){zo(H)}}if(i!==g){n=mf();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){No=e;t=gr(t,r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function gf(){var e,t,r;e=Do;t=[];r=yf();if(r!==g){while(r!==g){t.push(r);r=yf()}}else{t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function mf(){var e,t,r;e=Do;t=[];r=yf();if(r!==g){while(r!==g){t.push(r);r=yf()}}else{t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function yf(){var e;e=Tf();if(e===g){e=fa();if(e===g){e=ca()}}return e}function Tf(){var e;if(v.charCodeAt(Do)===91){e=_e;Do++}else{e=g;if(Po===0){zo(Ie)}}if(e===g){if(v.charCodeAt(Do)===93){e=Oe;Do++}else{e=g;if(Po===0){zo(De)}}if(e===g){if(v.charCodeAt(Do)===47){e=E;Do++}else{e=g;if(Po===0){zo(R)}}if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}}}}}}}return e}function Cf(){var e,t,r,i,n,s,o;e=Do;if(v.charCodeAt(Do)===63){t=_;Do++}else{t=g;if(Po===0){zo(I)}}if(t!==g){r=Sf();if(r!==g){i=[];n=Do;if(v.charCodeAt(Do)===38){s=k;Do++}else{s=g;if(Po===0){zo(U)}}if(s!==g){o=Sf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;if(v.charCodeAt(Do)===38){s=k;Do++}else{s=g;if(Po===0){zo(U)}}if(s!==g){o=Sf();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Sf(){var e,t,r,i;e=Do;t=Af();if(t!==g){if(v.charCodeAt(Do)===61){r=P;Do++}else{r=g;if(Po===0){zo(H)}}if(r!==g){i=bf();if(i!==g){No=e;t=mr(t,i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Af(){var e,t;e=[];t=wf();if(t===g){t=fa();if(t===g){t=ca()}}if(t!==g){while(t!==g){e.push(t);t=wf();if(t===g){t=fa();if(t===g){t=ca()}}}}else{e=g}return e}function bf(){var e,t;e=[];t=wf();if(t===g){t=fa();if(t===g){t=ca()}}while(t!==g){e.push(t);t=wf();if(t===g){t=fa();if(t===g){t=ca()}}}return e}function wf(){var e;if(v.charCodeAt(Do)===91){e=_e;Do++}else{e=g;if(Po===0){zo(Ie)}}if(e===g){if(v.charCodeAt(Do)===93){e=Oe;Do++}else{e=g;if(Po===0){zo(De)}}if(e===g){if(v.charCodeAt(Do)===47){e=E;Do++}else{e=g;if(Po===0){zo(R)}}if(e===g){if(v.charCodeAt(Do)===63){e=_;Do++}else{e=g;if(Po===0){zo(I)}}if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}}}}}}}return e}function Ef(){var e;e=iu();if(e===g){e=Rf()}return e}function Rf(){var e,t,r,i,n,s;e=Do;t=ru();if(t!==g){r=na();if(r!==g){i=_f();if(i!==g){n=na();if(n!==g){s=Wf();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function _f(){var e;e=ja();if(e===g){e=If()}return e}function If(){var e,t,r,i;e=Do;t=Mf();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=Of();if(i===g){i=xf()}if(i!==g){No=e;t=yr();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Of(){var e,t,r,i,n;e=Do;t=Df();if(t===g){t=Nf()}if(t!==g){r=Do;if(v.charCodeAt(Do)===63){i=_;Do++}else{i=g;if(Po===0){zo(I)}}if(i!==g){n=Gf();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Df(){var e,t,r,i;e=Do;if(v.substr(Do,2)===Tr){t=Tr;Do+=2}else{t=g;if(Po===0){zo(Cr)}}if(t!==g){r=Ff();if(r!==g){i=Nf();if(i===g){i=null}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Nf(){var e,t,r;e=Do;if(v.charCodeAt(Do)===47){t=E;Do++}else{t=g;if(Po===0){zo(R)}}if(t!==g){r=Pf();if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function xf(){var e,t,r,i;e=Do;t=Uf();if(t!==g){r=[];i=kf();while(i!==g){r.push(i);i=kf()}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function kf(){var e;e=aa();if(e===g){e=fa();if(e===g){e=ca()}}return e}function Uf(){var e;e=fa();if(e===g){e=ca();if(e===g){if(v.charCodeAt(Do)===59){e=b;Do++}else{e=g;if(Po===0){zo(w)}}if(e===g){if(v.charCodeAt(Do)===63){e=_;Do++}else{e=g;if(Po===0){zo(I)}}if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===64){e=N;Do++}else{e=g;if(Po===0){zo(x)}}if(e===g){if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}}}}}}}}}}}return e}function Pf(){var e,t,r,i,n,s;e=Do;t=Hf();if(t!==g){r=[];i=Do;if(v.charCodeAt(Do)===47){n=E;Do++}else{n=g;if(Po===0){zo(R)}}if(n!==g){s=Hf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;if(v.charCodeAt(Do)===47){n=E;Do++}else{n=g;if(Po===0){zo(R)}}if(n!==g){s=Hf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Hf(){var e,t,r,i,n,s;e=Do;t=[];r=qf();while(r!==g){t.push(r);r=qf()}if(t!==g){r=[];i=Do;if(v.charCodeAt(Do)===59){n=b;Do++}else{n=g;if(Po===0){zo(w)}}if(n!==g){s=Lf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;if(v.charCodeAt(Do)===59){n=b;Do++}else{n=g;if(Po===0){zo(w)}}if(n!==g){s=Lf();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Lf(){var e,t;e=[];t=qf();while(t!==g){e.push(t);t=qf()}return e}function qf(){var e;e=fa();if(e===g){e=ca();if(e===g){if(v.charCodeAt(Do)===58){e=O;Do++}else{e=g;if(Po===0){zo(D)}}if(e===g){if(v.charCodeAt(Do)===64){e=N;Do++}else{e=g;if(Po===0){zo(x)}}if(e===g){if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}}}}}}}}}return e}function Mf(){var e,t,r,i,n;e=Do;t=Do;r=Zo();if(r!==g){i=[];n=Zo();if(n===g){n=Qo();if(n===g){if(v.charCodeAt(Do)===43){n=L;Do++}else{n=g;if(Po===0){zo(q)}}if(n===g){if(v.charCodeAt(Do)===45){n=G;Do++}else{n=g;if(Po===0){zo(W)}}if(n===g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}}}}}while(n!==g){i.push(n);n=Zo();if(n===g){n=Qo();if(n===g){if(v.charCodeAt(Do)===43){n=L;Do++}else{n=g;if(Po===0){zo(q)}}if(n===g){if(v.charCodeAt(Do)===45){n=G;Do++}else{n=g;if(Po===0){zo(W)}}if(n===g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}}}}}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){No=e;t=Sr()}e=t;return e}function Ff(){var e;e=Bf();if(e===g){e=jf()}return e}function Bf(){var e,t,r,i;e=Do;t=Do;r=Wa();if(r!==g){if(v.charCodeAt(Do)===64){i=N;Do++}else{i=g;if(Po===0){zo(x)}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=null}if(t!==g){r=za();if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=null}return e}function jf(){var e,t;e=[];t=fa();if(t===g){t=ca();if(t===g){if(v.charCodeAt(Do)===36){t=M;Do++}else{t=g;if(Po===0){zo(F)}}if(t===g){if(v.charCodeAt(Do)===44){t=B;Do++}else{t=g;if(Po===0){zo(j)}}if(t===g){if(v.charCodeAt(Do)===59){t=b;Do++}else{t=g;if(Po===0){zo(w)}}if(t===g){if(v.charCodeAt(Do)===58){t=O;Do++}else{t=g;if(Po===0){zo(D)}}if(t===g){if(v.charCodeAt(Do)===64){t=N;Do++}else{t=g;if(Po===0){zo(x)}}if(t===g){if(v.charCodeAt(Do)===38){t=k;Do++}else{t=g;if(Po===0){zo(U)}}if(t===g){if(v.charCodeAt(Do)===61){t=P;Do++}else{t=g;if(Po===0){zo(H)}}if(t===g){if(v.charCodeAt(Do)===43){t=L;Do++}else{t=g;if(Po===0){zo(q)}}}}}}}}}}}if(t!==g){while(t!==g){e.push(t);t=fa();if(t===g){t=ca();if(t===g){if(v.charCodeAt(Do)===36){t=M;Do++}else{t=g;if(Po===0){zo(F)}}if(t===g){if(v.charCodeAt(Do)===44){t=B;Do++}else{t=g;if(Po===0){zo(j)}}if(t===g){if(v.charCodeAt(Do)===59){t=b;Do++}else{t=g;if(Po===0){zo(w)}}if(t===g){if(v.charCodeAt(Do)===58){t=O;Do++}else{t=g;if(Po===0){zo(D)}}if(t===g){if(v.charCodeAt(Do)===64){t=N;Do++}else{t=g;if(Po===0){zo(x)}}if(t===g){if(v.charCodeAt(Do)===38){t=k;Do++}else{t=g;if(Po===0){zo(U)}}if(t===g){if(v.charCodeAt(Do)===61){t=P;Do++}else{t=g;if(Po===0){zo(H)}}if(t===g){if(v.charCodeAt(Do)===43){t=L;Do++}else{t=g;if(Po===0){zo(q)}}}}}}}}}}}}}else{e=g}return e}function Gf(){var e,t;e=[];t=kf();while(t!==g){e.push(t);t=kf()}return e}function Wf(){var e,t,r,i,n,s,o;e=Do;if(v.substr(Do,3).toLowerCase()===lt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Ar)}}if(t!==g){if(v.charCodeAt(Do)===47){r=E;Do++}else{r=g;if(Po===0){zo(R)}}if(r!==g){i=[];n=Qo();if(n!==g){while(n!==g){i.push(n);n=Qo()}}else{i=g}if(i!==g){if(v.charCodeAt(Do)===46){n=Y;Do++}else{n=g;if(Po===0){zo(z)}}if(n!==g){s=[];o=Qo();if(o!==g){while(o!==g){s.push(o);o=Qo()}}else{s=g}if(s!==g){No=e;t=br();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Kf(){var e;if(v.substr(Do,6)===wr){e=wr;Do+=6}else{e=g;if(Po===0){zo(Er)}}return e}function Vf(){var e;if(v.substr(Do,3)===Rr){e=Rr;Do+=3}else{e=g;if(Po===0){zo(_r)}}return e}function Yf(){var e;if(v.substr(Do,5)===Ir){e=Ir;Do+=5}else{e=g;if(Po===0){zo(Or)}}return e}function zf(){var e;if(v.substr(Do,7)===Dr){e=Dr;Do+=7}else{e=g;if(Po===0){zo(Nr)}}return e}function $f(){var e;if(v.substr(Do,3)===xr){e=xr;Do+=3}else{e=g;if(Po===0){zo(kr)}}return e}function Jf(){var e;if(v.substr(Do,6)===Ur){e=Ur;Do+=6}else{e=g;if(Po===0){zo(Pr)}}return e}function Xf(){var e;if(v.substr(Do,8)===Hr){e=Hr;Do+=8}else{e=g;if(Po===0){zo(Lr)}}return e}function Qf(){var e;if(v.substr(Do,9)===qr){e=qr;Do+=9}else{e=g;if(Po===0){zo(Mr)}}return e}function Zf(){var e;if(v.substr(Do,6)===Fr){e=Fr;Do+=6}else{e=g;if(Po===0){zo(Br)}}return e}function eu(){var e;if(v.substr(Do,5)===jr){e=jr;Do+=5}else{e=g;if(Po===0){zo(Gr)}}return e}function tu(){var e;if(v.substr(Do,7)===Wr){e=Wr;Do+=7}else{e=g;if(Po===0){zo(Kr)}}return e}function ru(){var e,t;e=Do;t=Kf();if(t===g){t=Vf();if(t===g){t=zf();if(t===g){t=$f();if(t===g){t=Jf();if(t===g){t=Xf();if(t===g){t=Qf();if(t===g){t=tu();if(t===g){t=Zf();if(t===g){t=eu();if(t===g){t=Ta()}}}}}}}}}}if(t!==g){No=e;t=Vr()}e=t;return e}function iu(){var e,t,r,i,n,s;e=Do;t=Wf();if(t!==g){r=na();if(r!==g){i=nu();if(i!==g){n=na();if(n!==g){s=ou();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function nu(){var e,t;e=Do;t=su();if(t!==g){No=e;t=Yr(t)}e=t;return e}function su(){var e,t,r,i;e=Do;t=Qo();if(t!==g){r=Qo();if(r!==g){i=Qo();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ou(){var e,t,r;e=Do;t=[];r=aa();if(r===g){r=fa();if(r===g){r=ca();if(r===g){r=ga();if(r===g){r=ma();if(r===g){r=na();if(r===g){r=sa()}}}}}}while(r!==g){t.push(r);r=aa();if(r===g){r=fa();if(r===g){r=ca();if(r===g){r=ga();if(r===g){r=ma();if(r===g){r=na();if(r===g){r=sa()}}}}}}}if(t!==g){No=e;t=zr()}e=t;return e}function au(){var e,t,r,i,n,s;e=Do;t=Fu();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=Fu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=Fu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function fu(){var e,t,r,i,n;e=Do;t=Aa();if(t!==g){r=Do;if(v.charCodeAt(Do)===64){i=N;Do++}else{i=g;if(Po===0){zo(x)}}if(i!==g){n=Aa();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){No=e;t=$r();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function uu(){var e,t,r,i,n,s,o;e=Do;t=ba();if(t===g){t=Do;r=cu();if(r!==g){i=[];n=Do;s=Da();if(s!==g){o=cu();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;s=Da();if(s!==g){o=cu();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}}if(t!==g){No=e;t=Jr()}e=t;return e}function cu(){var e,t,r,i,n,s;e=Do;t=Ba();if(t===g){t=lu()}if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=du();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=du();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Xr();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function lu(){var e,t,r,i,n;e=Do;t=hu();if(t===g){t=null}if(t!==g){r=Oa();if(r!==g){i=ja();if(i!==g){n=Ia();if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function hu(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Ta();if(r!==g){i=[];n=Do;s=la();if(s!==g){o=Ta();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;s=la();if(s!==g){o=Ta();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=La()}if(t!==g){No=e;t=Qr(t)}e=t;return e}function du(){var e;e=pu();if(e===g){e=vu();if(e===g){e=yu()}}return e}function pu(){var e,t,r,i;e=Do;if(v.substr(Do,1).toLowerCase()===Zr){t=v.charAt(Do);Do++}else{t=g;if(Po===0){zo(ei)}}if(t!==g){r=Ea();if(r!==g){i=mu();if(i!==g){No=e;t=ti(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function vu(){var e,t,r,i;e=Do;if(v.substr(Do,7).toLowerCase()===ri){t=v.substr(Do,7);Do+=7}else{t=g;if(Po===0){zo(ii)}}if(t!==g){r=Ea();if(r!==g){i=gu();if(i!==g){No=e;t=ni(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function gu(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=si(t)}e=t;return e}function mu(){var e,t,r,i,n,s,o;e=Do;if(v.charCodeAt(Do)===48){t=oi;Do++}else{t=g;if(Po===0){zo(ai)}}if(t!==g){r=Do;if(v.charCodeAt(Do)===46){i=Y;Do++}else{i=g;if(Po===0){zo(z)}}if(i!==g){n=Qo();if(n===g){n=null}if(n!==g){s=Qo();if(s===g){s=null}if(s!==g){o=Qo();if(o===g){o=null}if(o!==g){i=[i,n,s,o];r=i}else{Do=r;r=g}}else{Do=r;r=g}}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){No=e;t=fi();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function yu(){var e,t,r,i,n;e=Do;t=Ta();if(t!==g){r=Do;i=Ea();if(i!==g){n=Tu();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){No=e;t=ui(t,r);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Tu(){var e;e=Ta();if(e===g){e=$a();if(e===g){e=La()}}return e}function Cu(){var e,t,r,i,n,s;e=Do;t=Su();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=Au();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=Au();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Su(){var e,t;e=Do;if(v.substr(Do,6).toLowerCase()===ci){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(li)}}if(t===g){if(v.substr(Do,7).toLowerCase()===hi){t=v.substr(Do,7);Do+=7}else{t=g;if(Po===0){zo(di)}}if(t===g){if(v.substr(Do,4).toLowerCase()===pi){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(vi)}}if(t===g){if(v.substr(Do,5).toLowerCase()===gi){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(mi)}}if(t===g){t=Ta()}}}}if(t!==g){No=e;t=yi()}e=t;return e}function Au(){var e;e=bu();if(e===g){e=yu()}return e}function bu(){var e,t,r,i;e=Do;if(v.substr(Do,8).toLowerCase()===Ti){t=v.substr(Do,8);Do+=8}else{t=g;if(Po===0){zo(Ci)}}if(t!==g){r=Ea();if(r!==g){if(v.substr(Do,8).toLowerCase()===Si){i=v.substr(Do,8);Do+=8}else{i=g;if(Po===0){zo(Ai)}}if(i===g){if(v.substr(Do,8).toLowerCase()===bi){i=v.substr(Do,8);Do+=8}else{i=g;if(Po===0){zo(wi)}}if(i===g){i=Ta()}}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function wu(){var e,t,r,i,n,s;e=Do;t=Ta();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=Ta();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=Ta();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Eu(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=Ei(t)}e=t;return e}function Ru(){var e,t;e=Do;t=_u();if(t!==g){No=e;t=Ri()}e=t;return e}function _u(){var e,t,r,i,n,s,o,a;e=Do;t=Iu();if(t!==g){r=wa();if(r!==g){i=ku();if(i!==g){n=[];s=Do;o=Na();if(o!==g){a=Uu();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}while(s!==g){n.push(s);s=Do;o=Na();if(o!==g){a=Uu();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Iu(){var e;e=Ou();if(e===g){e=Du()}return e}function Ou(){var e;if(v.substr(Do,4).toLowerCase()===_i){e=v.substr(Do,4);Do+=4}else{e=g;if(Po===0){zo(Ii)}}if(e===g){if(v.substr(Do,5).toLowerCase()===Oi){e=v.substr(Do,5);Do+=5}else{e=g;if(Po===0){zo(Di)}}if(e===g){if(v.substr(Do,5).toLowerCase()===Ni){e=v.substr(Do,5);Do+=5}else{e=g;if(Po===0){zo(xi)}}if(e===g){if(v.substr(Do,5).toLowerCase()===ki){e=v.substr(Do,5);Do+=5}else{e=g;if(Po===0){zo(Ui)}}if(e===g){if(v.substr(Do,11).toLowerCase()===Pi){e=v.substr(Do,11);Do+=11}else{e=g;if(Po===0){zo(Hi)}}if(e===g){e=Nu()}}}}}return e}function Du(){var e;if(v.substr(Do,7).toLowerCase()===Li){e=v.substr(Do,7);Do+=7}else{e=g;if(Po===0){zo(qi)}}if(e===g){if(v.substr(Do,9).toLowerCase()===Mi){e=v.substr(Do,9);Do+=9}else{e=g;if(Po===0){zo(Fi)}}if(e===g){e=Nu()}}return e}function Nu(){var e;e=Ta();if(e===g){e=xu()}return e}function xu(){var e,t,r;e=Do;if(v.substr(Do,2).toLowerCase()===Bi){t=v.substr(Do,2);Do+=2}else{t=g;if(Po===0){zo(ji)}}if(t!==g){r=Ta();if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function ku(){var e;e=Nu();if(e===g){e=Ta()}return e}function Uu(){var e,t,r,i;e=Do;t=Ta();if(t!==g){r=Ea();if(r!==g){i=Pu();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Pu(){var e;e=Ta();if(e===g){e=La()}return e}function Hu(){var e,t,r,i;e=Do;t=Lu();if(t!==g){r=la();if(r!==g){i=ru();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Lu(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=Gi(t)}e=t;return e}function qu(){var e,t;e=Do;t=gu();if(t!==g){No=e;t=Wi(t)}e=t;return e}function Mu(){var e,t,r,i,n,s;e=Do;t=Fu();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Ki(t);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Fu(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Ca();if(r!==g){i=[];n=Do;if(v.charCodeAt(Do)===46){s=Y;Do++}else{s=g;if(Po===0){zo(z)}}if(s!==g){o=Ca();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;if(v.charCodeAt(Do)===46){s=Y;Do++}else{s=g;if(Po===0){zo(z)}}if(s!==g){o=Ca();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){r=[r,i];t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){e=v.substring(e,Do)}else{e=t}return e}function Bu(){var e,t,r,i,n,s;e=Do;t=Ba();if(t===g){t=lu()}if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=ju();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=ju();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Vi();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function ju(){var e;e=Gu();if(e===g){e=yu()}return e}function Gu(){var e,t,r,i;e=Do;if(v.substr(Do,3).toLowerCase()===Yi){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(zi)}}if(t!==g){r=Ea();if(r!==g){i=Ta();if(i!==g){No=e;t=$i(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Wu(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=Ji(t)}e=t;return e}function Ku(){var e,t;e=Do;t=gu();if(t!==g){No=e;t=Xi(t)}e=t;return e}function Vu(){var e,t,r,i,n,s,o,a,f;e=Do;t=[];r=hu();while(r!==g){t.push(r);r=hu()}if(t!==g){r=Oa();if(r!==g){i=ja();if(i!==g){n=Ia();if(n!==g){s=[];o=Do;a=Na();if(a!==g){f=yu();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}while(o!==g){s.push(o);o=Do;a=Na();if(a!==g){f=yu();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}}if(s!==g){No=e;t=Qi();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Yu(){var e;e=zu();return e}function zu(){var e,t,r,i,n,s,o,a;e=Do;if(v.substr(Do,6).toLowerCase()===Zi){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(en)}}if(t!==g){r=la();if(r!==g){i=Xu();if(i!==g){n=[];s=Do;o=Da();if(o!==g){a=Xu();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}while(s!==g){n.push(s);s=Do;o=Da();if(o!==g){a=Xu();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=$u()}return e}function $u(){var e,t,r,i,n,s,o,a;e=Do;t=Ta();if(t!==g){r=la();if(r!==g){i=Ju();if(i!==g){n=[];s=Do;o=Da();if(o!==g){a=Ju();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}while(s!==g){n.push(s);s=Do;o=Da();if(o!==g){a=Ju();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Ju(){var e,t,r,i;e=Do;t=Ta();if(t!==g){r=Ea();if(r!==g){i=Ta();if(i===g){i=La()}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Xu(){var e;e=Qu();if(e===g){e=ec();if(e===g){e=rc();if(e===g){e=nc();if(e===g){e=sc();if(e===g){e=oc();if(e===g){e=ac();if(e===g){e=Ju()}}}}}}}return e}function Qu(){var e,t,r,i;e=Do;if(v.substr(Do,5).toLowerCase()===tn){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(rn)}}if(t!==g){r=Ea();if(r!==g){i=Zu();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Zu(){var e,t;e=Do;t=qa();if(t!==g){No=e;t=nn(t)}e=t;return e}function ec(){var e,t,r,i,n,s,o,a,f;e=Do;if(v.substr(Do,6).toLowerCase()===sn){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(on)}}if(t!==g){r=Ea();if(r!==g){i=ka();if(i!==g){n=tc();if(n!==g){s=[];o=Do;a=[];f=na();if(f!==g){while(f!==g){a.push(f);f=na()}}else{a=g}if(a!==g){f=tc();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}while(o!==g){s.push(o);o=Do;a=[];f=na();if(f!==g){while(f!==g){a.push(f);f=na()}}else{a=g}if(a!==g){f=tc();if(f!==g){a=[a,f];o=a}else{Do=o;o=g}}else{Do=o;o=g}}if(s!==g){o=Ua();if(o!==g){t=[t,r,i,n,s,o];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function tc(){var e;e=If();if(e===g){e=Nf()}return e}function rc(){var e,t,r,i;e=Do;if(v.substr(Do,5).toLowerCase()===an){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(fn)}}if(t!==g){r=Ea();if(r!==g){i=ic();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ic(){var e,t;e=Do;t=qa();if(t!==g){No=e;t=un(t)}e=t;return e}function nc(){var e,t,r,i;e=Do;if(v.substr(Do,6).toLowerCase()===cn){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(ln)}}if(t!==g){r=Ea();if(r!==g){i=qa();if(i!==g){No=e;t=hn(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function sc(){var e,t,r,i,n;e=Do;if(v.substr(Do,5).toLowerCase()===dn){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(pn)}}if(t!==g){r=Ea();if(r!==g){i=Do;if(v.substr(Do,4).toLowerCase()===vn){n=v.substr(Do,4);Do+=4}else{n=g;if(Po===0){zo(gn)}}if(n!==g){No=i;n=mn()}i=n;if(i===g){i=Do;if(v.substr(Do,5).toLowerCase()===yn){n=v.substr(Do,5);Do+=5}else{n=g;if(Po===0){zo(Tn)}}if(n!==g){No=i;n=Cn()}i=n}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function oc(){var e,t,r,i;e=Do;if(v.substr(Do,9).toLowerCase()===Sn){t=v.substr(Do,9);Do+=9}else{t=g;if(Po===0){zo(An)}}if(t!==g){r=Ea();if(r!==g){if(v.substr(Do,3).toLowerCase()===bn){i=v.substr(Do,3);Do+=3}else{i=g;if(Po===0){zo(wn)}}if(i===g){if(v.substr(Do,8).toLowerCase()===En){i=v.substr(Do,8);Do+=8}else{i=g;if(Po===0){zo(Rn)}}if(i===g){i=Ta()}}if(i!==g){No=e;t=_n(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ac(){var e,t,r,i,n,s,o,a,f,u;e=Do;if(v.substr(Do,3).toLowerCase()===In){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(On)}}if(t!==g){r=Ea();if(r!==g){i=ka();if(i!==g){n=Do;s=fc();if(s!==g){o=[];a=Do;if(v.charCodeAt(Do)===44){f=B;Do++}else{f=g;if(Po===0){zo(j)}}if(f!==g){u=fc();if(u!==g){f=[f,u];a=f}else{Do=a;a=g}}else{Do=a;a=g}while(a!==g){o.push(a);a=Do;if(v.charCodeAt(Do)===44){f=B;Do++}else{f=g;if(Po===0){zo(j)}}if(f!==g){u=fc();if(u!==g){f=[f,u];a=f}else{Do=a;a=g}}else{Do=a;a=g}}if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n!==g){s=Ua();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function fc(){var e,t;e=Do;if(v.substr(Do,8).toLowerCase()===Dn){t=v.substr(Do,8);Do+=8}else{t=g;if(Po===0){zo(Nn)}}if(t===g){if(v.substr(Do,4).toLowerCase()===xn){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(kn)}}if(t===g){t=Ta()}}if(t!==g){No=e;t=Un(t)}e=t;return e}function uc(){var e,t,r,i,n,s;e=Do;t=Ta();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=Ta();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=Ta();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function cc(){var e,t,r,i,n,s;e=Do;t=lc();if(t!==g){r=la();if(r!==g){i=lc();if(i!==g){n=la();if(n!==g){s=ru();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function lc(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=Pn(t)}e=t;return e}function hc(){var e,t,r,i,n,s;e=Do;t=dc();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=dc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=dc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Hn();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function dc(){var e,t,r,i,n,s;e=Do;t=lu();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Ln();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function pc(){var e,t,r,i,n,s;e=Do;t=Ba();if(t===g){t=lu();if(t===g){t=Do;r=Oa();if(r===g){r=null}if(r!==g){i=If();if(i!==g){n=Ia();if(n===g){n=null}if(n!==g){r=[r,i,n];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}}if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=qn();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function vc(){var e,t,r,i,n,s;e=Do;t=gc();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=mc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=mc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Mn();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function gc(){var e,t;e=Do;t=fu();if(t!==g){No=e;t=Fn()}e=t;return e}function mc(){var e,t,r,i;e=Do;if(v.substr(Do,8).toLowerCase()===Bn){t=v.substr(Do,8);Do+=8}else{t=g;if(Po===0){zo(jn)}}if(t!==g){r=Ea();if(r!==g){i=Ta();if(i!==g){No=e;t=Gn(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.substr(Do,6).toLowerCase()===Wn){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(Kn)}}if(t!==g){r=Ea();if(r!==g){i=Ta();if(i!==g){No=e;t=Vn(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.substr(Do,10).toLowerCase()===Yn){t=v.substr(Do,10);Do+=10}else{t=g;if(Po===0){zo(zn)}}if(t!==g){No=e;t=$n()}e=t;if(e===g){e=yu()}}}return e}function yc(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Ta();if(r!==g){i=[];n=Do;s=Da();if(s!==g){o=Ta();if(o!==g){No=n;s=Jn(r,o);n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;s=Da();if(s!==g){o=Ta();if(o!==g){No=n;s=Jn(r,o);n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){No=t;r=Xn(r,i);t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=null}if(t!==g){No=e;t=Qn(t)}e=t;return e}function Tc(){var e,t,r,i,n,s;e=Do;t=Cc();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=Cc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=Cc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Cc(){var e,t,r,i,n,s;e=Do;t=lu();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Sc(){var e,t,r;e=Do;t=[];r=Qo();if(r!==g){while(r!==g){t.push(r);r=Qo()}}else{t=g}if(t!==g){No=e;t=Zn(t)}e=t;return e}function Ac(){var e,t,r,i,n,s;e=Do;t=bc();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=wc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=wc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function bc(){var e,t;e=Do;if(v.substr(Do,6).toLowerCase()===es){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(ts)}}if(t===g){if(v.substr(Do,7).toLowerCase()===rs){t=v.substr(Do,7);Do+=7}else{t=g;if(Po===0){zo(is)}}if(t===g){if(v.substr(Do,10).toLowerCase()===ns){t=v.substr(Do,10);Do+=10}else{t=g;if(Po===0){zo(ss)}}if(t===g){t=Ta()}}}if(t!==g){No=e;t=os()}e=t;return e}function wc(){var e,t,r,i;e=Do;if(v.substr(Do,6).toLowerCase()===as){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(fs)}}if(t!==g){r=Ea();if(r!==g){i=Ec();if(i!==g){No=e;t=us(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.substr(Do,7).toLowerCase()===ri){t=v.substr(Do,7);Do+=7}else{t=g;if(Po===0){zo(ii)}}if(t!==g){r=Ea();if(r!==g){i=gu();if(i!==g){No=e;t=cs(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=Do;if(v.substr(Do,11).toLowerCase()===ls){t=v.substr(Do,11);Do+=11}else{t=g;if(Po===0){zo(hs)}}if(t!==g){r=Ea();if(r!==g){i=gu();if(i!==g){No=e;t=ds(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}if(e===g){e=yu()}}}return e}function Ec(){var e;if(v.substr(Do,11).toLowerCase()===ps){e=v.substr(Do,11);Do+=11}else{e=g;if(Po===0){zo(vs)}}if(e===g){if(v.substr(Do,9).toLowerCase()===gs){e=v.substr(Do,9);Do+=9}else{e=g;if(Po===0){zo(ms)}}if(e===g){if(v.substr(Do,8).toLowerCase()===ys){e=v.substr(Do,8);Do+=8}else{e=g;if(Po===0){zo(Ts)}}if(e===g){if(v.substr(Do,7).toLowerCase()===Cs){e=v.substr(Do,7);Do+=7}else{e=g;if(Po===0){zo(Ss)}}if(e===g){if(v.substr(Do,6).toLowerCase()===As){e=v.substr(Do,6);Do+=6}else{e=g;if(Po===0){zo(bs)}}if(e===g){if(v.substr(Do,10).toLowerCase()===ws){e=v.substr(Do,10);Do+=10}else{e=g;if(Po===0){zo(Es)}}if(e===g){if(v.substr(Do,9).toLowerCase()===Rs){e=v.substr(Do,9);Do+=9}else{e=g;if(Po===0){zo(_s)}}if(e===g){e=Ta()}}}}}}}return e}function Rc(){var e;e=pa();if(e===g){e=null}return e}function _c(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Ta();if(r!==g){i=[];n=Do;s=Da();if(s!==g){o=Ta();if(o!==g){No=n;s=Jn(r,o);n=s}else{Do=n;n=g}}else{Do=n;n=g}while(n!==g){i.push(n);n=Do;s=Da();if(s!==g){o=Ta();if(o!==g){No=n;s=Jn(r,o);n=s}else{Do=n;n=g}}else{Do=n;n=g}}if(i!==g){No=t;r=Xn(r,i);t=r}else{Do=t;t=g}}else{Do=t;t=g}if(t===g){t=null}if(t!==g){No=e;t=Is(t)}e=t;return e}function Ic(){var e,t,r,i,n,s;e=Do;t=Ba();if(t===g){t=lu()}if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=Oc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=Oc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=Os();e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Oc(){var e;e=Gu();if(e===g){e=yu()}return e}function Dc(){var e,t,r,i,n,s;e=Do;t=Nc();if(t!==g){r=[];i=Do;n=Da();if(n!==g){s=Nc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Da();if(n!==g){s=Nc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Nc(){var e,t,r,i,n,s,o,a;e=Do;t=qc();if(t!==g){r=la();if(r!==g){i=Bc();if(i!==g){n=[];s=Do;o=Na();if(o!==g){a=xc();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}while(s!==g){n.push(s);s=Do;o=Na();if(o!==g){a=xc();if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function xc(){var e;e=kc();if(e===g){e=Uc();if(e===g){e=Pc();if(e===g){e=Hc();if(e===g){e=Lc();if(e===g){e=yu()}}}}}return e}function kc(){var e,t,r,i;e=Do;if(v.substr(Do,3).toLowerCase()===Ds){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Ns)}}if(t!==g){r=Ea();if(r!==g){i=Wc();if(i!==g){No=e;t=xs(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Uc(){var e,t,r,i;e=Do;if(v.substr(Do,5).toLowerCase()===ks){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(Us)}}if(t!==g){r=Ea();if(r!==g){i=$a();if(i!==g){No=e;t=Ps(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Pc(){var e,t,r,i;e=Do;if(v.substr(Do,8).toLowerCase()===Hs){t=v.substr(Do,8);Do+=8}else{t=g;if(Po===0){zo(Ls)}}if(t!==g){r=Ea();if(r!==g){i=nf();if(i===g){i=ef();if(i===g){i=Za()}}if(i!==g){No=e;t=qs(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Hc(){var e,t,r,i;e=Do;if(v.substr(Do,6).toLowerCase()===Ms){t=v.substr(Do,6);Do+=6}else{t=g;if(Po===0){zo(Fs)}}if(t!==g){r=Ea();if(r!==g){i=Ta();if(i!==g){No=e;t=Bs(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Lc(){var e,t,r,i,n;e=Do;if(v.substr(Do,5).toLowerCase()===js){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(Gs)}}if(t!==g){r=Ea();if(r!==g){i=[];n=Qo();while(n!==g){i.push(n);n=Qo()}if(i!==g){No=e;t=Ws(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function qc(){var e,t,r,i,n,s;e=Do;t=Mc();if(t!==g){r=wa();if(r!==g){i=Ta();if(i!==g){n=wa();if(n!==g){s=Fc();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Mc(){var e,t;e=Do;if(v.substr(Do,3).toLowerCase()===lt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Ar)}}if(t===g){t=Ta()}if(t!==g){No=e;t=Ks(t)}e=t;return e}function Fc(){var e,t;e=Do;if(v.substr(Do,3).toLowerCase()===jt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Vs)}}if(t===g){if(v.substr(Do,3).toLowerCase()===Wt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Ys)}}if(t===g){if(v.substr(Do,3).toLowerCase()===zt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(zs)}}if(t===g){if(v.substr(Do,4).toLowerCase()===Vt){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo($s)}}if(t===g){t=Ta()}}}}if(t!==g){No=e;t=Js(t)}e=t;return e}function Bc(){var e,t,r,i,n;e=Do;t=jc();if(t!==g){r=Do;i=xa();if(i!==g){n=Gc();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function jc(){var e,t;e=Do;t=Ja();if(t===g){t=nf();if(t===g){t=Za()}}if(t!==g){No=e;t=Xs()}e=t;return e}function Gc(){var e,t,r,i,n,s,o;e=Do;t=Do;r=Qo();if(r===g){r=null}if(r!==g){i=Qo();if(i===g){i=null}if(i!==g){n=Qo();if(n===g){n=null}if(n!==g){s=Qo();if(s===g){s=null}if(s!==g){o=Qo();if(o===g){o=null}if(o!==g){r=[r,i,n,s,o];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){No=e;t=Qs(t)}e=t;return e}function Wc(){var e,t,r,i,n;e=Do;t=Do;r=Qo();if(r!==g){i=Qo();if(i===g){i=null}if(i!==g){n=Qo();if(n===g){n=null}if(n!==g){r=[r,i,n];t=r}else{Do=t;t=g}}else{Do=t;t=g}}else{Do=t;t=g}if(t!==g){No=e;t=Zs(t)}e=t;return e}function Kc(){var e;e=zu();return e}function Vc(){var e,t,r,i,n,s;e=Do;t=gu();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=Yc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=Yc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=eo(t);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Yc(){var e;e=zc();if(e===g){e=yu()}return e}function zc(){var e,t,r,i;e=Do;if(v.substr(Do,9)===to){t=to;Do+=9}else{t=g;if(Po===0){zo(ro)}}if(t!==g){r=Ea();if(r!==g){if(v.substr(Do,3)===io){i=io;Do+=3}else{i=g;if(Po===0){zo(no)}}if(i===g){if(v.substr(Do,3)===so){i=so;Do+=3}else{i=g;if(Po===0){zo(oo)}}}if(i!==g){No=e;t=ao(i);e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function $c(){var e,t,r,i,n,s;e=Do;t=gu();if(t!==g){r=[];i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}while(i!==g){r.push(i);i=Do;n=Na();if(n!==g){s=yu();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}}if(r!==g){No=e;t=fo(t);e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function Jc(){var e,t,r,i;e=Do;t=Ta();if(t!==g){r=da();if(r!==g){i=Xc();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function Xc(){var e,t;e=[];t=va();if(t===g){t=ma();if(t===g){t=la()}}while(t!==g){e.push(t);t=va();if(t===g){t=ma();if(t===g){t=la()}}}return e}function Qc(){var e,t;e=[];t=ra();while(t!==g){e.push(t);t=ra()}return e}function Zc(){var e,t,r,i;e=Do;t=el();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=tl();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function el(){var e,t;e=Do;if(v.substr(Do,5).toLowerCase()===uo){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(co)}}if(t===g){if(v.substr(Do,4).toLowerCase()===lo){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(ho)}}}if(t!==g){No=e;t=po(t)}e=t;return e}function tl(){var e,t,r,i,n;e=Do;t=rl();if(t!==g){r=Do;if(v.charCodeAt(Do)===58){i=O;Do++}else{i=g;if(Po===0){zo(D)}}if(i!==g){n=of();if(n!==g){i=[i,n];r=i}else{Do=r;r=g}}else{Do=r;r=g}if(r===g){r=null}if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function rl(){var e,t;e=Do;t=nf();if(t===g){t=Za();if(t===g){t=jf()}}if(t!==g){No=e;t=vo(t)}e=t;return e}function il(){var e;e=Zo();if(e===g){e=Qo();if(e===g){if(v.charCodeAt(Do)===45){e=G;Do++}else{e=g;if(Po===0){zo(W)}}if(e===g){if(v.charCodeAt(Do)===46){e=Y;Do++}else{e=g;if(Po===0){zo(z)}}if(e===g){if(v.charCodeAt(Do)===95){e=K;Do++}else{e=g;if(Po===0){zo(V)}}if(e===g){if(v.charCodeAt(Do)===126){e=X;Do++}else{e=g;if(Po===0){zo(Q)}}}}}}}return e}function nl(){var e;if(v.charCodeAt(Do)===33){e=$;Do++}else{e=g;if(Po===0){zo(J)}}if(e===g){if(v.charCodeAt(Do)===36){e=M;Do++}else{e=g;if(Po===0){zo(F)}}if(e===g){if(v.charCodeAt(Do)===38){e=k;Do++}else{e=g;if(Po===0){zo(U)}}if(e===g){if(v.charCodeAt(Do)===39){e=te;Do++}else{e=g;if(Po===0){zo(re)}}if(e===g){if(v.charCodeAt(Do)===40){e=ie;Do++}else{e=g;if(Po===0){zo(ne)}}if(e===g){if(v.charCodeAt(Do)===41){e=se;Do++}else{e=g;if(Po===0){zo(oe)}}if(e===g){if(v.charCodeAt(Do)===42){e=Z;Do++}else{e=g;if(Po===0){zo(ee)}}if(e===g){if(v.charCodeAt(Do)===43){e=L;Do++}else{e=g;if(Po===0){zo(q)}}if(e===g){if(v.charCodeAt(Do)===44){e=B;Do++}else{e=g;if(Po===0){zo(j)}}if(e===g){if(v.charCodeAt(Do)===59){e=b;Do++}else{e=g;if(Po===0){zo(w)}}if(e===g){if(v.charCodeAt(Do)===61){e=P;Do++}else{e=g;if(Po===0){zo(H)}}}}}}}}}}}}return e}function sl(){var e,t,r,i,n,s,o;e=Do;t=ol();if(t!==g){if(v.charCodeAt(Do)===58){r=O;Do++}else{r=g;if(Po===0){zo(D)}}if(r!==g){i=tl();if(i!==g){n=Do;if(v.substr(Do,11)===go){s=go;Do+=11}else{s=g;if(Po===0){zo(mo)}}if(s!==g){o=Fc();if(o!==g){s=[s,o];n=s}else{Do=n;n=g}}else{Do=n;n=g}if(n===g){n=null}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ol(){var e,t;e=Do;if(v.substr(Do,5).toLowerCase()===yo){t=v.substr(Do,5);Do+=5}else{t=g;if(Po===0){zo(To)}}if(t===g){if(v.substr(Do,4).toLowerCase()===Co){t=v.substr(Do,4);Do+=4}else{t=g;if(Po===0){zo(So)}}}if(t!==g){No=e;t=po(t)}e=t;return e}function al(){var e,t,r;e=Do;if(v.substr(Do,3).toLowerCase()===jt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Gt)}}if(t===g){if(v.substr(Do,3).toLowerCase()===Wt){t=v.substr(Do,3);Do+=3}else{t=g;if(Po===0){zo(Kt)}}if(t===g){t=[];r=fa();while(r!==g){t.push(r);r=fa()}}}if(t!==g){No=e;t=Ao(t)}e=t;return e}function fl(){var e,t,r,i,n,s,o,a,f,u;e=Do;t=cl();if(t!==g){if(v.charCodeAt(Do)===45){r=G;Do++}else{r=g;if(Po===0){zo(W)}}if(r!==g){i=ul();if(i!==g){if(v.charCodeAt(Do)===45){n=G;Do++}else{n=g;if(Po===0){zo(W)}}if(n!==g){s=ul();if(s!==g){if(v.charCodeAt(Do)===45){o=G;Do++}else{o=g;if(Po===0){zo(W)}}if(o!==g){a=ul();if(a!==g){if(v.charCodeAt(Do)===45){f=G;Do++}else{f=g;if(Po===0){zo(W)}}if(f!==g){u=ll();if(u!==g){No=e;t=bo();e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function ul(){var e,t,r,i,n;e=Do;t=ea();if(t!==g){r=ea();if(r!==g){i=ea();if(i!==g){n=ea();if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function cl(){var e,t,r;e=Do;t=ul();if(t!==g){r=ul();if(r!==g){t=[t,r];e=t}else{Do=e;e=g}}else{Do=e;e=g}return e}function ll(){var e,t,r,i;e=Do;t=ul();if(t!==g){r=ul();if(r!==g){i=ul();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function hl(){var e,t,r,i,n,s;e=Do;t=Ef();if(t!==g){r=[];i=Sf();while(i!==g){r.push(i);i=Sf()}if(r!==g){i=Do;n=Xo();if(n!==g){s=Qc();if(s!==g){n=[n,s];i=n}else{Do=i;i=g}}else{Do=i;i=g}if(i===g){i=null}if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function dl(){var e,t,r,i,n,s,o,a;e=Do;if(v.substr(Do,11)===wo){t=wo;Do+=11}else{t=g;if(Po===0){zo(Eo)}}if(t===g){if(v.charCodeAt(Do)===98){t=Ro;Do++}else{t=g;if(Po===0){zo(_o)}}}if(t!==g){r=da();if(r!==g){i=pl();if(i!==g){n=[];s=Do;o=Na();if(o!==g){a=vl();if(a===g){a=yu()}if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}while(s!==g){n.push(s);s=Do;o=Na();if(o!==g){a=vl();if(a===g){a=yu()}if(a!==g){o=[o,a];s=o}else{Do=s;s=g}}else{Do=s;s=g}}if(n!==g){t=[t,r,i,n];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function pl(){var e;e=lu();if(e===g){e=Ba()}return e}function vl(){var e,t,r,i;e=Do;if(v.substr(Do,3)===Io){t=Io;Do+=3}else{t=g;if(Po===0){zo(Oo)}}if(t!==g){r=Ea();if(r!==g){i=gl();if(i!==g){t=[t,r,i];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}function gl(){var e,t,r,i,n,s;e=Do;t=ka();if(t!==g){r=ua();if(r!==g){if(v.charCodeAt(Do)===64){i=N;Do++}else{i=g;if(Po===0){zo(x)}}if(i!==g){n=ua();if(n===g){n=$a()}if(n!==g){s=Ua();if(s!==g){t=[t,r,i,n,s];e=t}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}}else{Do=e;e=g}return e}r.data={};function ml(e,t){return[e].concat(t)}Ho=t();if(Ho!==g&&Do===v.length){return Ho}else{if(Ho!==g&&Do<v.length){zo(Wo())}throw Jo(Uo,ko<v.length?v.charAt(ko):null,ko<v.length?Yo(ko,ko+1):Yo(ko,ko))}}t.parse=n},function(r,i,n){(function(e,t){if(true){r.exports=i=t(n(63))}else{}})(this,function(o){(function(c){var e=o;var t=e.lib;var r=t.WordArray;var i=t.Hasher;var n=e.algo;var R=[];(function(){for(var e=0;e<64;e++){R[e]=c.abs(c.sin(e+1))*4294967296|0}})();var s=n.MD5=i.extend({_doReset:function(){this._hash=new r.init([1732584193,4023233417,2562383102,271733878])},_doProcessBlock:function(e,t){for(var r=0;r<16;r++){var i=t+r;var n=e[i];e[i]=(n<<8|n>>>24)&16711935|(n<<24|n>>>8)&4278255360}var s=this._hash.words;var o=e[t+0];var a=e[t+1];var f=e[t+2];var u=e[t+3];var c=e[t+4];var l=e[t+5];var h=e[t+6];var d=e[t+7];var p=e[t+8];var v=e[t+9];var g=e[t+10];var m=e[t+11];var y=e[t+12];var T=e[t+13];var C=e[t+14];var S=e[t+15];var A=s[0];var b=s[1];var w=s[2];var E=s[3];A=_(A,b,w,E,o,7,R[0]);E=_(E,A,b,w,a,12,R[1]);w=_(w,E,A,b,f,17,R[2]);b=_(b,w,E,A,u,22,R[3]);A=_(A,b,w,E,c,7,R[4]);E=_(E,A,b,w,l,12,R[5]);w=_(w,E,A,b,h,17,R[6]);b=_(b,w,E,A,d,22,R[7]);A=_(A,b,w,E,p,7,R[8]);E=_(E,A,b,w,v,12,R[9]);w=_(w,E,A,b,g,17,R[10]);b=_(b,w,E,A,m,22,R[11]);A=_(A,b,w,E,y,7,R[12]);E=_(E,A,b,w,T,12,R[13]);w=_(w,E,A,b,C,17,R[14]);b=_(b,w,E,A,S,22,R[15]);A=I(A,b,w,E,a,5,R[16]);E=I(E,A,b,w,h,9,R[17]);w=I(w,E,A,b,m,14,R[18]);b=I(b,w,E,A,o,20,R[19]);A=I(A,b,w,E,l,5,R[20]);E=I(E,A,b,w,g,9,R[21]);w=I(w,E,A,b,S,14,R[22]);b=I(b,w,E,A,c,20,R[23]);A=I(A,b,w,E,v,5,R[24]);E=I(E,A,b,w,C,9,R[25]);w=I(w,E,A,b,u,14,R[26]);b=I(b,w,E,A,p,20,R[27]);A=I(A,b,w,E,T,5,R[28]);E=I(E,A,b,w,f,9,R[29]);w=I(w,E,A,b,d,14,R[30]);b=I(b,w,E,A,y,20,R[31]);A=O(A,b,w,E,l,4,R[32]);E=O(E,A,b,w,p,11,R[33]);w=O(w,E,A,b,m,16,R[34]);b=O(b,w,E,A,C,23,R[35]);A=O(A,b,w,E,a,4,R[36]);E=O(E,A,b,w,c,11,R[37]);w=O(w,E,A,b,d,16,R[38]);b=O(b,w,E,A,g,23,R[39]);A=O(A,b,w,E,T,4,R[40]);E=O(E,A,b,w,o,11,R[41]);w=O(w,E,A,b,u,16,R[42]);b=O(b,w,E,A,h,23,R[43]);A=O(A,b,w,E,v,4,R[44]);E=O(E,A,b,w,y,11,R[45]);w=O(w,E,A,b,S,16,R[46]);b=O(b,w,E,A,f,23,R[47]);A=D(A,b,w,E,o,6,R[48]);E=D(E,A,b,w,d,10,R[49]);w=D(w,E,A,b,C,15,R[50]);b=D(b,w,E,A,l,21,R[51]);A=D(A,b,w,E,y,6,R[52]);E=D(E,A,b,w,u,10,R[53]);w=D(w,E,A,b,g,15,R[54]);b=D(b,w,E,A,a,21,R[55]);A=D(A,b,w,E,p,6,R[56]);E=D(E,A,b,w,S,10,R[57]);w=D(w,E,A,b,h,15,R[58]);b=D(b,w,E,A,T,21,R[59]);A=D(A,b,w,E,c,6,R[60]);E=D(E,A,b,w,m,10,R[61]);w=D(w,E,A,b,f,15,R[62]);b=D(b,w,E,A,v,21,R[63]);s[0]=s[0]+A|0;s[1]=s[1]+b|0;s[2]=s[2]+w|0;s[3]=s[3]+E|0},_doFinalize:function(){var e=this._data;var t=e.words;var r=this._nDataBytes*8;var i=e.sigBytes*8;t[i>>>5]|=128<<24-i%32;var n=c.floor(r/4294967296);var s=r;t[(i+64>>>9<<4)+15]=(n<<8|n>>>24)&16711935|(n<<24|n>>>8)&4278255360;t[(i+64>>>9<<4)+14]=(s<<8|s>>>24)&16711935|(s<<24|s>>>8)&4278255360;e.sigBytes=(t.length+1)*4;this._process();var o=this._hash;var a=o.words;for(var f=0;f<4;f++){var u=a[f];a[f]=(u<<8|u>>>24)&16711935|(u<<24|u>>>8)&4278255360}return o},clone:function(){var e=i.clone.call(this);e._hash=this._hash.clone();return e}});function _(e,t,r,i,n,s,o){var a=e+(t&r|~t&i)+n+o;return(a<<s|a>>>32-s)+t}function I(e,t,r,i,n,s,o){var a=e+(t&i|r&~i)+n+o;return(a<<s|a>>>32-s)+t}function O(e,t,r,i,n,s,o){var a=e+(t^r^i)+n+o;return(a<<s|a>>>32-s)+t}function D(e,t,r,i,n,s,o){var a=e+(r^(t|~i))+n+o;return(a<<s|a>>>32-s)+t}e.MD5=i._createHelper(s);e.HmacMD5=i._createHmacHelper(s)})(Math);return o.MD5})},function(r,i,e){(function(e,t){if(true){r.exports=i=t()}else{}})(this,function(){var e=e||function(l,r){var i=Object.create||function(){function r(){}return function(e){var t;r.prototype=e;t=new r;r.prototype=null;return t}}();var e={};var t=e.lib={};var n=t.Base=function(){return{extend:function(e){var t=i(this);if(e){t.mixIn(e)}if(!t.hasOwnProperty("init")||this.init===t.init){t.init=function(){t.$super.init.apply(this,arguments)}}t.init.prototype=t;t.$super=this;return t},create:function(){var e=this.extend();e.init.apply(e,arguments);return e},init:function(){},mixIn:function(e){for(var t in e){if(e.hasOwnProperty(t)){this[t]=e[t]}}if(e.hasOwnProperty("toString")){this.toString=e.toString}},clone:function(){return this.init.prototype.extend(this)}}}();var h=t.WordArray=n.extend({init:function(e,t){e=this.words=e||[];if(t!=r){this.sigBytes=t}else{this.sigBytes=e.length*4}},toString:function(e){return(e||o).stringify(this)},concat:function(e){var t=this.words;var r=e.words;var i=this.sigBytes;var n=e.sigBytes;this.clamp();if(i%4){for(var s=0;s<n;s++){var o=r[s>>>2]>>>24-s%4*8&255;t[i+s>>>2]|=o<<24-(i+s)%4*8}}else{for(var s=0;s<n;s+=4){t[i+s>>>2]=r[s>>>2]}}this.sigBytes+=n;return this},clamp:function(){var e=this.words;var t=this.sigBytes;e[t>>>2]&=4294967295<<32-t%4*8;e.length=l.ceil(t/4)},clone:function(){var e=n.clone.call(this);e.words=this.words.slice(0);return e},random:function(e){var t=[];var r=function(t){var t=t;var r=987654321;var i=4294967295;return function(){r=36969*(r&65535)+(r>>16)&i;t=18e3*(t&65535)+(t>>16)&i;var e=(r<<16)+t&i;e/=4294967296;e+=.5;return e*(l.random()>.5?1:-1)}};for(var i=0,n;i<e;i+=4){var s=r((n||l.random())*4294967296);n=s()*987654071;t.push(s()*4294967296|0)}return new h.init(t,e)}});var s=e.enc={};var o=s.Hex={stringify:function(e){var t=e.words;var r=e.sigBytes;var i=[];for(var n=0;n<r;n++){var s=t[n>>>2]>>>24-n%4*8&255;i.push((s>>>4).toString(16));i.push((s&15).toString(16))}return i.join("")},parse:function(e){var t=e.length;var r=[];for(var i=0;i<t;i+=2){r[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4}return new h.init(r,t/2)}};var a=s.Latin1={stringify:function(e){var t=e.words;var r=e.sigBytes;var i=[];for(var n=0;n<r;n++){var s=t[n>>>2]>>>24-n%4*8&255;i.push(String.fromCharCode(s))}return i.join("")},parse:function(e){var t=e.length;var r=[];for(var i=0;i<t;i++){r[i>>>2]|=(e.charCodeAt(i)&255)<<24-i%4*8}return new h.init(r,t)}};var f=s.Utf8={stringify:function(e){try{return decodeURIComponent(escape(a.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return a.parse(unescape(encodeURIComponent(e)))}};var u=t.BufferedBlockAlgorithm=n.extend({reset:function(){this._data=new h.init;this._nDataBytes=0},_append:function(e){if(typeof e=="string"){e=f.parse(e)}this._data.concat(e);this._nDataBytes+=e.sigBytes},_process:function(e){var t=this._data;var r=t.words;var i=t.sigBytes;var n=this.blockSize;var s=n*4;var o=i/s;if(e){o=l.ceil(o)}else{o=l.max((o|0)-this._minBufferSize,0)}var a=o*n;var f=l.min(a*4,i);if(a){for(var u=0;u<a;u+=n){this._doProcessBlock(r,u)}var c=r.splice(0,a);t.sigBytes-=f}return new h.init(c,f)},clone:function(){var e=n.clone.call(this);e._data=this._data.clone();return e},_minBufferSize:0});var c=t.Hasher=u.extend({cfg:n.extend(),init:function(e){this.cfg=this.cfg.extend(e);this.reset()},reset:function(){u.reset.call(this);this._doReset()},update:function(e){this._append(e);this._process();return this},finalize:function(e){if(e){this._append(e)}var t=this._doFinalize();return t},blockSize:512/32,_createHelper:function(r){return function(e,t){return new r.init(t).finalize(e)}},_createHmacHelper:function(r){return function(e,t){return new d.HMAC.init(r,t).finalize(e)}}});var d=e.algo={};return e}(Math);return e})},function(e,t,r){"use strict";var i=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:true});var n=r(6);var s=r(2);var a=r(0);var f=r(7);var u=r(4);var o=function(o){i(e,o);function e(e,t,r){if(r===void 0){r={}}var i=o.call(this)||this;i.C={MIN_DURATION:70,MAX_DURATION:6e3,DEFAULT_DURATION:100,MIN_INTER_TONE_GAP:50,DEFAULT_INTER_TONE_GAP:500};i.type=a.TypeStrings.DTMF;if(t===undefined){throw new TypeError("Not enough arguments")}i.logger=e.ua.getLogger("sip.invitecontext.dtmf",e.id);i.owner=e;if(typeof t==="string"){t=t.toUpperCase()}else if(typeof t==="number"){t=t.toString()}else{throw new TypeError("Invalid tone: "+t)}if(!t.match(/^[0-9A-D#*]$/)){throw new TypeError("Invalid tone: "+t)}else{i.tone=t}var n=r.duration;var s=r.interToneGap;if(n&&!u.Utils.isDecimal(n)){throw new TypeError("Invalid tone duration: "+n)}else if(!n){n=i.C.DEFAULT_DURATION}else if(n<i.C.MIN_DURATION){i.logger.warn("'duration' value is lower than the minimum allowed, setting it to "+i.C.MIN_DURATION+" milliseconds");n=i.C.MIN_DURATION}else if(n>i.C.MAX_DURATION){i.logger.warn("'duration' value is greater than the maximum allowed, setting it to "+i.C.MAX_DURATION+" milliseconds");n=i.C.MAX_DURATION}else{n=Math.abs(n)}i.duration=n;if(s&&!u.Utils.isDecimal(s)){throw new TypeError("Invalid interToneGap: "+s)}else if(!s){s=i.C.DEFAULT_INTER_TONE_GAP}else if(s<i.C.MIN_INTER_TONE_GAP){i.logger.warn("'interToneGap' value is lower than the minimum allowed, setting it to "+i.C.MIN_INTER_TONE_GAP+" milliseconds");s=i.C.MIN_INTER_TONE_GAP}else{s=Math.abs(s)}i.interToneGap=s;return i}e.prototype.send=function(e){if(e===void 0){e={}}if(this.owner.status!==a.SessionStatus.STATUS_CONFIRMED&&this.owner.status!==a.SessionStatus.STATUS_WAITING_FOR_ACK){throw new f.Exceptions.InvalidStateError(this.owner.status)}var t=e.extraHeaders?e.extraHeaders.slice():[];var r={contentType:"application/dtmf-relay",body:"Signal= "+this.tone+"\r\nDuration= "+this.duration};if(this.owner.dialog){var i=this.owner.dialog.sendRequest(this,s.C.INFO,{extraHeaders:t,body:r});this.owner.emit("dtmf",i,this)}};e.prototype.init_incoming=function(e){e.reply(200);if(!this.tone||!this.duration){this.logger.warn("invalid INFO DTMF received, discarded")}else{this.owner.emit("dtmf",e,this)}};e.prototype.receiveResponse=function(e){var t=e&&e.statusCode?e.statusCode:0;switch(true){case/^1[0-9]{2}$/.test(t.toString()):break;case/^2[0-9]{2}$/.test(t.toString()):this.emit("succeeded",{originator:"remote",response:e});break;default:var r=u.Utils.sipErrorCause(t);this.emit("failed",e,r);break}};e.prototype.onRequestTimeout=function(){this.emit("failed",undefined,s.C.causes.REQUEST_TIMEOUT);this.owner.onRequestTimeout()};e.prototype.onTransportError=function(){this.emit("failed",undefined,s.C.causes.CONNECTION_ERROR);this.owner.onTransportError()};e.prototype.onDialogError=function(e){this.emit("failed",e,s.C.causes.DIALOG_ERROR);this.owner.onDialogError(e)};return e}(n.EventEmitter);t.DTMF=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=r(0);var n=function(){function e(e,t){this.type=i.TypeStrings.SessionDescriptionHandlerObserver;this.session=e;this.options=t}e.prototype.trackAdded=function(){this.session.emit("trackAdded")};e.prototype.directionChanged=function(){this.session.emit("directionChanged")};return e}();t.SessionDescriptionHandlerObserver=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:true});var i=r(23);t.Modifiers=i;var n=r(67);t.Simple=n.Simple;var s=r(41);t.SessionDescriptionHandler=s.SessionDescriptionHandler;var o=r(42);t.Transport=o.Transport},function(e,i,n){"use strict";(function(a){var t=this&&this.__extends||function(){var i=function(e,t){i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)if(t.hasOwnProperty(r))e[r]=t[r]};return i(e,t)};return function(e,t){i(e,t);function r(){this.constructor=e}e.prototype=t===null?Object.create(t):(r.prototype=t.prototype,new r)}}();Object.defineProperty(i,"__esModule",{value:true});var e=n(6);var f=n(40);var u=n(23);var c;(function(e){e[e["STATUS_NULL"]=0]="STATUS_NULL";e[e["STATUS_NEW"]=1]="STATUS_NEW";e[e["STATUS_CONNECTING"]=2]="STATUS_CONNECTING";e[e["STATUS_CONNECTED"]=3]="STATUS_CONNECTED";e[e["STATUS_COMPLETED"]=4]="STATUS_COMPLETED"})(c=i.SimpleStatus||(i.SimpleStatus={}));var r=function(o){t(e,o);function e(e){var t=o.call(this)||this;if(e.media.remote.video){t.video=true}else{t.video=false}if(e.media.remote.audio){t.audio=true}else{t.audio=false}if(!t.audio&&!t.video){throw new Error("At least one remote audio or video element is required for Simple.")}t.options=e;var r=a.navigator.userAgent.toLowerCase();var i=false;var n=false;if(r.indexOf("safari")>-1&&r.indexOf("chrome")<0){i=true}else if(r.indexOf("firefox")>-1&&r.indexOf("chrome")<0){n=true}var s={};if(i){s.modifiers=[u.stripG722]}if(n){s.alwaysAcquireMediaFirst=true}if(!t.options.ua.uri){t.anonymous=true}else{t.anonymous=false}t.ua=new f.UA({uri:t.options.ua.uri,authorizationUser:t.options.ua.authorizationUser,password:t.options.ua.password,displayName:t.options.ua.displayName,userAgentString:t.options.ua.userAgentString,register:true,sessionDescriptionHandlerFactoryOptions:s,transportOptions:{traceSip:t.options.ua.traceSip,wsServers:t.options.ua.wsServers}});t.state=c.STATUS_NULL;t.logger=t.ua.getLogger("sip.simple");t.ua.on("registered",function(){t.emit("registered",t.ua)});t.ua.on("unregistered",function(){t.emit("unregistered",t.ua)});t.ua.on("registrationFailed",function(){t.emit("unregistered",t.ua)});t.ua.on("invite",function(e){if(t.state!==c.STATUS_NULL&&t.state!==c.STATUS_COMPLETED){t.logger.warn("Rejecting incoming call. Simple only supports 1 call at a time");e.reject();return}t.session=e;t.setupSession();t.emit("ringing",t.session)});t.ua.on("message",function(e){t.emit("message",e)});return t}e.prototype.call=function(e){if(!this.ua||!this.checkRegistration()){this.logger.warn("A registered UA is required for calling");return}if(this.state!==c.STATUS_NULL&&this.state!==c.STATUS_COMPLETED){this.logger.warn("Cannot make more than a single call with Simple");return}if(this.options.media.remote.audio){this.options.media.remote.audio.autoplay=true}if(this.options.media.remote.video){this.options.media.remote.video.autoplay=true}if(this.options.media.local&&this.options.media.local.video){this.options.media.local.video.autoplay=true;this.options.media.local.video.volume=0}this.session=this.ua.invite(e,{sessionDescriptionHandlerOptions:{constraints:{audio:this.audio,video:this.video}}});this.setupSession();return this.session};e.prototype.answer=function(){if(this.state!==c.STATUS_NEW&&this.state!==c.STATUS_CONNECTING){this.logger.warn("No call to answer");return}if(this.options.media.remote.audio){this.options.media.remote.audio.autoplay=true}if(this.options.media.remote.video){this.options.media.remote.video.autoplay=true}return this.session.accept({sessionDescriptionHandlerOptions:{constraints:{audio:this.audio,video:this.video}}})};e.prototype.reject=function(){if(this.state!==c.STATUS_NEW&&this.state!==c.STATUS_CONNECTING){this.logger.warn("Call is already answered");return}return this.session.reject()};e.prototype.hangup=function(){if(this.state!==c.STATUS_CONNECTED&&this.state!==c.STATUS_CONNECTING&&this.state!==c.STATUS_NEW){this.logger.warn("No active call to hang up on");return}if(this.state!==c.STATUS_CONNECTED){return this.session.cancel()}else if(this.session){return this.session.bye()}};e.prototype.hold=function(){if(this.state!==c.STATUS_CONNECTED||!this.session||this.session.localHold){this.logger.warn("Cannot put call on hold");return}this.mute();this.logger.log("Placing session on hold");return this.session.hold()};e.prototype.unhold=function(){if(this.state!==c.STATUS_CONNECTED||!this.session||!this.session.localHold){this.logger.warn("Cannot unhold a call that is not on hold");return}this.unmute();this.logger.log("Placing call off hold");return this.session.unhold()};e.prototype.mute=function(){if(this.state!==c.STATUS_CONNECTED){this.logger.warn("An acitve call is required to mute audio");return}this.logger.log("Muting Audio");this.toggleMute(true);this.emit("mute",this)};e.prototype.unmute=function(){if(this.state!==c.STATUS_CONNECTED){this.logger.warn("An active call is required to unmute audio");return}this.logger.log("Unmuting Audio");this.toggleMute(false);this.emit("unmute",this)};e.prototype.sendDTMF=function(e){if(this.state!==c.STATUS_CONNECTED||!this.session){this.logger.warn("An active call is required to send a DTMF tone");return}this.logger.log("Sending DTMF tone: "+e);this.session.dtmf(e)};e.prototype.message=function(e,t){if(!this.ua||!this.checkRegistration()){this.logger.warn("A registered UA is required to send a message");return}if(!e||!t){this.logger.warn("A destination and message are required to send a message");return}this.ua.message(e,t)};e.prototype.checkRegistration=function(){return this.anonymous||this.ua&&this.ua.isRegistered()};e.prototype.setupRemoteMedia=function(){var e=this;if(!this.session){this.logger.warn("No session to set remote media on");return}var t=this.session.sessionDescriptionHandler.peerConnection;var r;if(t.getReceivers){r=new a.window.MediaStream;t.getReceivers().forEach(function(e){var t=e.track;if(t){r.addTrack(t)}})}else{r=t.getRemoteStreams()[0]}if(this.video){this.options.media.remote.video.srcObject=r;this.options.media.remote.video.play().catch(function(){e.logger.log("play was rejected")})}else if(this.audio){this.options.media.remote.audio.srcObject=r;this.options.media.remote.audio.play().catch(function(){e.logger.log("play was rejected")})}};e.prototype.setupLocalMedia=function(){if(!this.session){this.logger.warn("No session to set local media on");return}if(this.video&&this.options.media.local&&this.options.media.local.video){var e=this.session.sessionDescriptionHandler.peerConnection;var r;if(e.getSenders){r=new a.window.MediaStream;e.getSenders().forEach(function(e){var t=e.track;if(t&&t.kind==="video"){r.addTrack(t)}})}else{r=e.getLocalStreams()[0]}this.options.media.local.video.srcObject=r;this.options.media.local.video.volume=0;this.options.media.local.video.play()}};e.prototype.cleanupMedia=function(){if(this.video){this.options.media.remote.video.srcObject=null;this.options.media.remote.video.pause();if(this.options.media.local&&this.options.media.local.video){this.options.media.local.video.srcObject=null;this.options.media.local.video.pause()}}if(this.audio){this.options.media.remote.audio.srcObject=null;this.options.media.remote.audio.pause()}};e.prototype.setupSession=function(){var e=this;if(!this.session){this.logger.warn("No session to set up");return}this.state=c.STATUS_NEW;this.emit("new",this.session);this.session.on("progress",function(){return e.onProgress()});this.session.on("accepted",function(){return e.onAccepted()});this.session.on("rejected",function(){return e.onEnded()});this.session.on("failed",function(){return e.onFailed()});this.session.on("terminated",function(){return e.onEnded()})};e.prototype.destroyMedia=function(){if(this.session&&this.session.sessionDescriptionHandler){this.session.sessionDescriptionHandler.close()}};e.prototype.toggleMute=function(t){if(!this.session){this.logger.warn("No session to toggle mute");return}var e=this.session.sessionDescriptionHandler.peerConnection;if(e.getSenders){e.getSenders().forEach(function(e){if(e.track){e.track.enabled=!t}})}else{e.getLocalStreams().forEach(function(e){e.getAudioTracks().forEach(function(e){e.enabled=!t});e.getVideoTracks().forEach(function(e){e.enabled=!t})})}};e.prototype.onAccepted=function(){var r=this;if(!this.session){this.logger.warn("No session for accepting");return}this.state=c.STATUS_CONNECTED;this.emit("connected",this.session);this.setupLocalMedia();this.setupRemoteMedia();if(this.session.sessionDescriptionHandler){this.session.sessionDescriptionHandler.on("addTrack",function(){r.logger.log("A track has been added, triggering new remoteMedia setup");r.setupRemoteMedia()});this.session.sessionDescriptionHandler.on("addStream",function(){r.logger.log("A stream has been added, trigger new remoteMedia setup");r.setupRemoteMedia()})}this.session.on("dtmf",function(e,t){r.emit("dtmf",t.tone)});this.session.on("bye",function(){return r.onEnded()})};e.prototype.onProgress=function(){this.state=c.STATUS_CONNECTING;this.emit("connecting",this.session)};e.prototype.onFailed=function(){this.onEnded()};e.prototype.onEnded=function(){this.state=c.STATUS_COMPLETED;this.emit("ended",this.session);this.cleanupMedia()};e.C=c;return e}(e.EventEmitter);i.Simple=r}).call(this,n(1))},function(e,t,r){"use strict";var i=r(5);var n=r(43);var s=r(70);var o=r(24);function a(e){var t=new s(e);var r=n(s.prototype.request,t);i.extend(r,s.prototype,t);i.extend(r,t);return r}var f=a(o);f.Axios=s;f.create=function e(t){return a(i.merge(o,t))};f.Cancel=r(47);f.CancelToken=r(84);f.isCancel=r(46);f.all=function e(t){return Promise.all(t)};f.spread=r(85);e.exports=f;e.exports.default=f},function(e,t){
  /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
  e.exports=function(e){return e!=null&&(r(e)||i(e)||!!e._isBuffer)};function r(e){return!!e.constructor&&typeof e.constructor.isBuffer==="function"&&e.constructor.isBuffer(e)}function i(e){return typeof e.readFloatLE==="function"&&typeof e.slice==="function"&&r(e.slice(0,0))}},function(e,t,r){"use strict";var n=r(24);var s=r(5);var i=r(79);var o=r(80);var a=r(82);var f=r(83);function u(e){this.defaults=e;this.interceptors={request:new i,response:new i}}u.prototype.request=function e(t){if(typeof t==="string"){t=s.merge({url:arguments[0]},arguments[1])}t=s.merge(n,this.defaults,{method:"get"},t);t.method=t.method.toLowerCase();if(t.baseURL&&!a(t.url)){t.url=f(t.baseURL,t.url)}var r=[o,undefined];var i=Promise.resolve(t);this.interceptors.request.forEach(function e(t){r.unshift(t.fulfilled,t.rejected)});this.interceptors.response.forEach(function e(t){r.push(t.fulfilled,t.rejected)});while(r.length){i=i.then(r.shift(),r.shift())}return i};s.forEach(["delete","get","head","options"],function e(r){u.prototype[r]=function(e,t){return this.request(s.merge(t||{},{method:r,url:e}))}});s.forEach(["post","put","patch"],function e(i){u.prototype[i]=function(e,t,r){return this.request(s.merge(r||{},{method:i,url:e,data:t}))}});e.exports=u},function(e,t,r){"use strict";var s=r(5);e.exports=function e(i,n){s.forEach(i,function e(t,r){if(r!==n&&r.toUpperCase()===n.toUpperCase()){i[n]=t;delete i[r]}})}},function(e,t,r){"use strict";var s=r(45);e.exports=function e(t,r,i){var n=i.config.validateStatus;if(!i.status||!n||n(i.status)){t(i)}else{r(s("Request failed with status code "+i.status,i.config,null,i.request,i))}}},function(e,t,r){"use strict";e.exports=function e(t,r,i,n,s){t.config=r;if(i){t.code=i}t.request=n;t.response=s;return t}},function(e,t,r){"use strict";var o=r(5);function a(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function e(t,r,i){if(!r){return t}var n;if(i){n=i(r)}else if(o.isURLSearchParams(r)){n=r.toString()}else{var s=[];o.forEach(r,function e(t,r){if(t===null||typeof t==="undefined"){return}if(o.isArray(t)){r=r+"[]"}if(!o.isArray(t)){t=[t]}o.forEach(t,function e(t){if(o.isDate(t)){t=t.toISOString()}else if(o.isObject(t)){t=JSON.stringify(t)}s.push(a(r)+"="+a(t))})});n=s.join("&")}if(n){t+=(t.indexOf("?")===-1?"?":"&")+n}return t}},function(e,t,r){"use strict";var o=r(5);e.exports=function e(t){var r={};var i;var n;var s;if(!t){return r}o.forEach(t.split("\n"),function e(t){s=t.indexOf(":");i=o.trim(t.substr(0,s)).toLowerCase();n=o.trim(t.substr(s+1));if(i){r[i]=r[i]?r[i]+", "+n:n}});return r}},function(e,t,r){"use strict";var o=r(5);e.exports=o.isStandardBrowserEnv()?function e(){var r=/(msie|trident)/i.test(navigator.userAgent);var i=document.createElement("a");var n;function s(e){var t=e;if(r){i.setAttribute("href",t);t=i.href}i.setAttribute("href",t);return{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:i.pathname.charAt(0)==="/"?i.pathname:"/"+i.pathname}}n=s(window.location.href);return function e(t){var r=o.isString(t)?s(t):t;return r.protocol===n.protocol&&r.host===n.host}}():function e(){return function e(){return true}}()},function(e,t,r){"use strict";var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function f(){this.message="String contains an invalid character"}f.prototype=new Error;f.prototype.code=5;f.prototype.name="InvalidCharacterError";function i(e){var t=String(e);var r="";for(var i,n,s=0,o=a;t.charAt(s|0)||(o="=",s%1);r+=o.charAt(63&i>>8-s%1*8)){n=t.charCodeAt(s+=3/4);if(n>255){throw new f}i=i<<8|n}return r}e.exports=i},function(e,t,r){"use strict";var f=r(5);e.exports=f.isStandardBrowserEnv()?function e(){return{write:function e(t,r,i,n,s,o){var a=[];a.push(t+"="+encodeURIComponent(r));if(f.isNumber(i)){a.push("expires="+new Date(i).toGMTString())}if(f.isString(n)){a.push("path="+n)}if(f.isString(s)){a.push("domain="+s)}if(o===true){a.push("secure")}document.cookie=a.join("; ")},read:function e(t){var r=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove:function e(t){this.write(t,"",Date.now()-864e5)}}}():function e(){return{write:function e(){},read:function e(){return null},remove:function e(){}}}()},function(e,t,r){"use strict";var i=r(5);function n(){this.handlers=[]}n.prototype.use=function e(t,r){this.handlers.push({fulfilled:t,rejected:r});return this.handlers.length-1};n.prototype.eject=function e(t){if(this.handlers[t]){this.handlers[t]=null}};n.prototype.forEach=function e(r){i.forEach(this.handlers,function e(t){if(t!==null){r(t)}})};e.exports=n},function(e,t,r){"use strict";var i=r(5);var n=r(81);var s=r(46);var o=r(24);function a(e){if(e.cancelToken){e.cancelToken.throwIfRequested()}}e.exports=function e(r){a(r);r.headers=r.headers||{};r.data=n(r.data,r.headers,r.transformRequest);r.headers=i.merge(r.headers.common||{},r.headers[r.method]||{},r.headers||{});i.forEach(["delete","get","head","post","put","patch","common"],function e(t){delete r.headers[t]});var t=r.adapter||o.adapter;return t(r).then(function e(t){a(r);t.data=n(t.data,t.headers,r.transformResponse);return t},function e(t){if(!s(t)){a(r);if(t&&t.response){t.response.data=n(t.response.data,t.response.headers,r.transformResponse)}}return Promise.reject(t)})}},function(e,t,r){"use strict";var n=r(5);e.exports=function e(r,i,t){n.forEach(t,function e(t){r=t(r,i)});return r}},function(e,t,r){"use strict";e.exports=function e(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(e,t,r){"use strict";e.exports=function e(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t}},function(e,t,r){"use strict";var n=r(47);function i(e){if(typeof e!=="function"){throw new TypeError("executor must be a function.")}var r;this.promise=new Promise(function e(t){r=t});var i=this;e(function e(t){if(i.reason){return}i.reason=new n(t);r(i.reason)})}i.prototype.throwIfRequested=function e(){if(this.reason){throw this.reason}};i.source=function e(){var r;var t=new i(function e(t){r=t});return{token:t,cancel:r}};e.exports=i},function(e,t,r){"use strict";e.exports=function e(r){return function e(t){return r.apply(null,t)}}},function(t,e,r){(function(s){var o=r(48);var a=r(18)("socket.io-client:url");t.exports=e;function e(e,t){var r=e;t=t||s.location;if(null==e)e=t.protocol+"//"+t.host;if("string"===typeof e){if("/"===e.charAt(0)){if("/"===e.charAt(1)){e=t.protocol+e}else{e=t.host+e}}if(!/^(https?|wss?):\/\//.test(e)){a("protocol-less url %s",e);if("undefined"!==typeof t){e=t.protocol+"//"+e}else{e="https://"+e}}a("parse %s",e);r=o(e)}if(!r.port){if(/^(http|ws)$/.test(r.protocol)){r.port="80"}else if(/^(http|ws)s$/.test(r.protocol)){r.port="443"}}r.path=r.path||"/";var i=r.host.indexOf(":")!==-1;var n=i?"["+r.host+"]":r.host;r.id=r.protocol+"://"+n+":"+r.port;r.href=r.protocol+"://"+n+(t&&t.port===r.port?"":":"+r.port);return r}}).call(this,r(1))},function(e,f,t){f=e.exports=i.debug=i;f.coerce=a;f.disable=s;f.enable=n;f.enabled=o;f.humanize=t(88);f.names=[];f.skips=[];f.formatters={};var r=0;var u;function c(){return f.colors[r++%f.colors.length]}function i(e){function t(){}t.enabled=false;function a(){var n=a;var e=+new Date;var t=e-(u||e);n.diff=t;n.prev=u;n.curr=e;u=e;if(null==n.useColors)n.useColors=f.useColors();if(null==n.color&&n.useColors)n.color=c();var s=new Array(arguments.length);for(var r=0;r<s.length;r++){s[r]=arguments[r]}s[0]=f.coerce(s[0]);if("string"!==typeof s[0]){s=["%o"].concat(s)}var o=0;s[0]=s[0].replace(/%([a-z%])/g,function(e,t){if(e==="%%")return e;o++;var r=f.formatters[t];if("function"===typeof r){var i=s[o];e=r.call(n,i);s.splice(o,1);o--}return e});s=f.formatArgs.apply(n,s);var i=a.log||f.log||console.log.bind(console);i.apply(n,s)}a.enabled=true;var r=f.enabled(e)?a:t;r.namespace=e;return r}function n(e){f.save(e);var t=(e||"").split(/[\s,]+/);var r=t.length;for(var i=0;i<r;i++){if(!t[i])continue;e=t[i].replace(/[\\^$+?.()|[\]{}]/g,"\\$&").replace(/\*/g,".*?");if(e[0]==="-"){f.skips.push(new RegExp("^"+e.substr(1)+"$"))}else{f.names.push(new RegExp("^"+e+"$"))}}}function s(){f.enable("")}function o(e){var t,r;for(t=0,r=f.skips.length;t<r;t++){if(f.skips[t].test(e)){return false}}for(t=0,r=f.names.length;t<r;t++){if(f.names[t].test(e)){return true}}return false}function a(e){if(e instanceof Error)return e.stack||e.message;return e}},function(e,t){var n=1e3;var s=n*60;var o=s*60;var a=o*24;var f=a*365.25;e.exports=function(e,t){t=t||{};var r=typeof e;if(r==="string"&&e.length>0){return i(e)}else if(r==="number"&&isNaN(e)===false){return t.long?c(e):u(e)}throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function i(e){e=String(e);if(e.length>1e4){return}var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t){return}var r=parseFloat(t[1]);var i=(t[2]||"ms").toLowerCase();switch(i){case"years":case"year":case"yrs":case"yr":case"y":return r*f;case"days":case"day":case"d":return r*a;case"hours":case"hour":case"hrs":case"hr":case"h":return r*o;case"minutes":case"minute":case"mins":case"min":case"m":return r*s;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return undefined}}function u(e){if(e>=a){return Math.round(e/a)+"d"}if(e>=o){return Math.round(e/o)+"h"}if(e>=s){return Math.round(e/s)+"m"}if(e>=n){return Math.round(e/n)+"s"}return e+"ms"}function c(e){return r(e,a,"day")||r(e,o,"hour")||r(e,s,"minute")||r(e,n,"second")||e+" ms"}function r(e,t,r){if(e<t){return}if(e<t*1.5){return Math.floor(e/t)+" "+r}return Math.ceil(e/t)+" "+r+"s"}},function(e,s,t){s=e.exports=t(90);s.log=n;s.formatArgs=i;s.save=o;s.load=a;s.useColors=r;s.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:f();s.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"];function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}s.formatters.j=function(e){return JSON.stringify(e)};function i(){var e=arguments;var t=this.useColors;e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+s.humanize(this.diff);if(!t)return e;var r="color: "+this.color;e=[e[0],r,"color: inherit"].concat(Array.prototype.slice.call(e,1));var i=0;var n=0;e[0].replace(/%[a-z%]/g,function(e){if("%%"===e)return;i++;if("%c"===e){n=i}});e.splice(n,0,r);return e}function n(){return"object"===typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function o(e){try{if(null==e){s.storage.removeItem("debug")}else{s.storage.debug=e}}catch(e){}}function a(){var e;try{e=s.storage.debug}catch(e){}return e}s.enable(a());function f(){try{return window.localStorage}catch(e){}}},function(e,a,t){a=e.exports=i;a.coerce=c;a.disable=s;a.enable=n;a.enabled=o;a.humanize=t(91);a.names=[];a.skips=[];a.formatters={};var r=0;var f;function u(){return a.colors[r++%a.colors.length]}function i(e){function t(){}t.enabled=false;function i(){var n=i;var e=+new Date;var t=e-(f||e);n.diff=t;n.prev=f;n.curr=e;f=e;if(null==n.useColors)n.useColors=a.useColors();if(null==n.color&&n.useColors)n.color=u();var s=Array.prototype.slice.call(arguments);s[0]=a.coerce(s[0]);if("string"!==typeof s[0]){s=["%o"].concat(s)}var o=0;s[0]=s[0].replace(/%([a-z%])/g,function(e,t){if(e==="%%")return e;o++;var r=a.formatters[t];if("function"===typeof r){var i=s[o];e=r.call(n,i);s.splice(o,1);o--}return e});if("function"===typeof a.formatArgs){s=a.formatArgs.apply(n,s)}var r=i.log||a.log||console.log.bind(console);r.apply(n,s)}i.enabled=true;var r=a.enabled(e)?i:t;r.namespace=e;return r}function n(e){a.save(e);var t=(e||"").split(/[\s,]+/);var r=t.length;for(var i=0;i<r;i++){if(!t[i])continue;e=t[i].replace(/\*/g,".*?");if(e[0]==="-"){a.skips.push(new RegExp("^"+e.substr(1)+"$"))}else{a.names.push(new RegExp("^"+e+"$"))}}}function s(){a.enable("")}function o(e){var t,r;for(t=0,r=a.skips.length;t<r;t++){if(a.skips[t].test(e)){return false}}for(t=0,r=a.names.length;t<r;t++){if(a.names[t].test(e)){return true}}return false}function c(e){if(e instanceof Error)return e.stack||e.message;return e}},function(e,t){var n=1e3;var s=n*60;var o=s*60;var a=o*24;var f=a*365.25;e.exports=function(e,t){t=t||{};if("string"==typeof e)return r(e);return t.long?u(e):i(e)};function r(e){e=""+e;if(e.length>1e4)return;var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t)return;var r=parseFloat(t[1]);var i=(t[2]||"ms").toLowerCase();switch(i){case"years":case"year":case"yrs":case"yr":case"y":return r*f;case"days":case"day":case"d":return r*a;case"hours":case"hour":case"hrs":case"hr":case"h":return r*o;case"minutes":case"minute":case"mins":case"min":case"m":return r*s;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r}}function i(e){if(e>=a)return Math.round(e/a)+"d";if(e>=o)return Math.round(e/o)+"h";if(e>=s)return Math.round(e/s)+"m";if(e>=n)return Math.round(e/n)+"s";return e+"ms"}function u(e){return c(e,a,"day")||c(e,o,"hour")||c(e,s,"minute")||c(e,n,"second")||e+" ms"}function c(e,t,r){if(e<t)return;if(e<t*1.5)return Math.floor(e/t)+" "+r;return Math.ceil(e/t)+" "+r+"s"}},function(e,c,l){(function(a,f){var u;/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */(function(){var e=true&&l(93);var j={function:true,object:true};var t=j[typeof c]&&c&&!c.nodeType&&c;var G=j[typeof window]&&window||this,r=t&&j[typeof a]&&a&&!a.nodeType&&typeof f=="object"&&f;if(r&&(r["global"]===r||r["window"]===r||r["self"]===r)){G=r}function W(e,f){e||(e=G["Object"]());f||(f=G["Object"]());var u=e["Number"]||G["Number"],c=e["String"]||G["String"],t=e["Object"]||G["Object"],l=e["Date"]||G["Date"],r=e["SyntaxError"]||G["SyntaxError"],b=e["TypeError"]||G["TypeError"],i=e["Math"]||G["Math"],n=e["JSON"]||G["JSON"];if(typeof n=="object"&&n){f.stringify=n.stringify;f.parse=n.parse}var s=t.prototype,w=s.toString,E,R,_;var h=new l(-0xc782b5b800cec);try{h=h.getUTCFullYear()==-109252&&h.getUTCMonth()===0&&h.getUTCDate()===1&&h.getUTCHours()==10&&h.getUTCMinutes()==37&&h.getUTCSeconds()==6&&h.getUTCMilliseconds()==708}catch(e){}function d(e){if(d[e]!==_){return d[e]}var t;if(e=="bug-string-char-index"){t="a"[0]!="a"}else if(e=="json"){t=d("json-stringify")&&d("json-parse")}else{var r,i='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if(e=="json-stringify"){var n=f.stringify,s=typeof n=="function"&&h;if(s){(r=function(){return 1}).toJSON=r;try{s=n(0)==="0"&&n(new u)==="0"&&n(new c)=='""'&&n(w)===_&&n(_)===_&&n()===_&&n(r)==="1"&&n([r])=="[1]"&&n([_])=="[null]"&&n(null)=="null"&&n([_,w,null])=="[null,null,null]"&&n({a:[r,true,false,null,"\0\b\n\f\r\t"]})==i&&n(null,r)==="1"&&n([1,2],null,1)=="[\n 1,\n 2\n]"&&n(new l(-864e13))=='"-271821-04-20T00:00:00.000Z"'&&n(new l(864e13))=='"+275760-09-13T00:00:00.000Z"'&&n(new l(-621987552e5))=='"-000001-01-01T00:00:00.000Z"'&&n(new l(-1))=='"1969-12-31T23:59:59.999Z"'}catch(e){s=false}}t=s}if(e=="json-parse"){var o=f.parse;if(typeof o=="function"){try{if(o("0")===0&&!o(false)){r=o(i);var a=r["a"].length==5&&r["a"][0]===1;if(a){try{a=!o('"\t"')}catch(e){}if(a){try{a=o("01")!==1}catch(e){}}if(a){try{a=o("1.")!==1}catch(e){}}}}}catch(e){a=false}}t=a}}return d[e]=!!t}if(!d("json")){var p="[object Function]",I="[object Date]",O="[object Number]",D="[object String]",N="[object Array]",x="[object Boolean]";var a=d("bug-string-char-index");if(!h){var k=i.floor;var o=[0,31,59,90,120,151,181,212,243,273,304,334];var U=function(e,t){return o[t]+365*(e-1970)+k((e-1969+(t=+(t>1)))/4)-k((e-1901+t)/100)+k((e-1601+t)/400)}}if(!(E=s.hasOwnProperty)){E=function(e){var t={},r;if((t.__proto__=null,t.__proto__={toString:1},t).toString!=w){E=function(e){var t=this.__proto__,r=e in(this.__proto__=null,this);this.__proto__=t;return r}}else{r=t.constructor;E=function(e){var t=(this.constructor||r).prototype;return e in this&&!(e in t&&this[e]===t[e])}}t=null;return E.call(this,e)}}R=function(e,t){var r=0,i,o,n;(i=function(){this.valueOf=0}).prototype.valueOf=0;o=new i;for(n in o){if(E.call(o,n)){r++}}i=o=null;if(!r){o=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"];R=function(e,t){var r=w.call(e)==p,i,n;var s=!r&&typeof e.constructor!="function"&&j[typeof e.hasOwnProperty]&&e.hasOwnProperty||E;for(i in e){if(!(r&&i=="prototype")&&s.call(e,i)){t(i)}}for(n=o.length;i=o[--n];s.call(e,i)&&t(i));}}else if(r==2){R=function(e,t){var r={},i=w.call(e)==p,n;for(n in e){if(!(i&&n=="prototype")&&!E.call(r,n)&&(r[n]=1)&&E.call(e,n)){t(n)}}}}else{R=function(e,t){var r=w.call(e)==p,i,n;for(i in e){if(!(r&&i=="prototype")&&E.call(e,i)&&!(n=i==="constructor")){t(i)}}if(n||E.call(e,i="constructor")){t(i)}}}return R(e,t)};if(!d("json-stringify")){var v={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"};var g="000000";var P=function(e,t){return(g+(t||0)).slice(-e)};var m="\\u00";var H=function(e){var t='"',r=0,i=e.length,n=!a||i>10;var s=n&&(a?e.split(""):e);for(;r<i;r++){var o=e.charCodeAt(r);switch(o){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=v[o];break;default:if(o<32){t+=m+P(2,o.toString(16));break}t+=n?s[r]:e.charAt(r)}}return t+'"'};var L=function(e,t,r,i,n,s,o){var a,f,u,c,l,h,d,p,v,g,m,y,T,C,S,A;try{a=t[e]}catch(e){}if(typeof a=="object"&&a){f=w.call(a);if(f==I&&!E.call(a,"toJSON")){if(a>-1/0&&a<1/0){if(U){l=k(a/864e5);for(u=k(l/365.2425)+1970-1;U(u+1,0)<=l;u++);for(c=k((l-U(u,0))/30.42);U(u,c+1)<=l;c++);l=1+l-U(u,c);h=(a%864e5+864e5)%864e5;d=k(h/36e5)%24;p=k(h/6e4)%60;v=k(h/1e3)%60;g=h%1e3}else{u=a.getUTCFullYear();c=a.getUTCMonth();l=a.getUTCDate();d=a.getUTCHours();p=a.getUTCMinutes();v=a.getUTCSeconds();g=a.getUTCMilliseconds()}a=(u<=0||u>=1e4?(u<0?"-":"+")+P(6,u<0?-u:u):P(4,u))+"-"+P(2,c+1)+"-"+P(2,l)+"T"+P(2,d)+":"+P(2,p)+":"+P(2,v)+"."+P(3,g)+"Z"}else{a=null}}else if(typeof a.toJSON=="function"&&(f!=O&&f!=D&&f!=N||E.call(a,"toJSON"))){a=a.toJSON(e)}}if(r){a=r.call(t,e,a)}if(a===null){return"null"}f=w.call(a);if(f==x){return""+a}else if(f==O){return a>-1/0&&a<1/0?""+a:"null"}else if(f==D){return H(""+a)}if(typeof a=="object"){for(C=o.length;C--;){if(o[C]===a){throw b()}}o.push(a);m=[];S=s;s+=n;if(f==N){for(T=0,C=a.length;T<C;T++){y=L(T,a,r,i,n,s,o);m.push(y===_?"null":y)}A=m.length?n?"[\n"+s+m.join(",\n"+s)+"\n"+S+"]":"["+m.join(",")+"]":"[]"}else{R(i||a,function(e){var t=L(e,a,r,i,n,s,o);if(t!==_){m.push(H(e)+":"+(n?" ":"")+t)}});A=m.length?n?"{\n"+s+m.join(",\n"+s)+"\n"+S+"}":"{"+m.join(",")+"}":"{}"}o.pop();return A}};f.stringify=function(e,t,r){var i,n,s,o;if(j[typeof t]&&t){if((o=w.call(t))==p){n=t}else if(o==N){s={};for(var a=0,f=t.length,u;a<f;u=t[a++],(o=w.call(u),o==D||o==O)&&(s[u]=1));}}if(r){if((o=w.call(r))==O){if((r-=r%1)>0){for(i="",r>10&&(r=10);i.length<r;i+=" ");}}else if(o==D){i=r.length<=10?r:r.slice(0,10)}}return L("",(u={},u[""]=e,u),n,s,i,"",[])}}if(!d("json-parse")){var y=c.fromCharCode;var T={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"};var C,S;var A=function(){C=S=null;throw r()};var q=function(){var e=S,t=e.length,r,i,n,s,o;while(C<t){o=e.charCodeAt(C);switch(o){case 9:case 10:case 13:case 32:C++;break;case 123:case 125:case 91:case 93:case 58:case 44:r=a?e.charAt(C):e[C];C++;return r;case 34:for(r="@",C++;C<t;){o=e.charCodeAt(C);if(o<32){A()}else if(o==92){o=e.charCodeAt(++C);switch(o){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:r+=T[o];C++;break;case 117:i=++C;for(n=C+4;C<n;C++){o=e.charCodeAt(C);if(!(o>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70)){A()}}r+=y("0x"+e.slice(i,C));break;default:A()}}else{if(o==34){break}o=e.charCodeAt(C);i=C;while(o>=32&&o!=92&&o!=34){o=e.charCodeAt(++C)}r+=e.slice(i,C)}}if(e.charCodeAt(C)==34){C++;return r}A();default:i=C;if(o==45){s=true;o=e.charCodeAt(++C)}if(o>=48&&o<=57){if(o==48&&(o=e.charCodeAt(C+1),o>=48&&o<=57)){A()}s=false;for(;C<t&&(o=e.charCodeAt(C),o>=48&&o<=57);C++);if(e.charCodeAt(C)==46){n=++C;for(;n<t&&(o=e.charCodeAt(n),o>=48&&o<=57);n++);if(n==C){A()}C=n}o=e.charCodeAt(C);if(o==101||o==69){o=e.charCodeAt(++C);if(o==43||o==45){C++}for(n=C;n<t&&(o=e.charCodeAt(n),o>=48&&o<=57);n++);if(n==C){A()}C=n}return+e.slice(i,C)}if(s){A()}if(e.slice(C,C+4)=="true"){C+=4;return true}else if(e.slice(C,C+5)=="false"){C+=5;return false}else if(e.slice(C,C+4)=="null"){C+=4;return null}A()}}return"$"};var M=function(e){var t,r;if(e=="$"){A()}if(typeof e=="string"){if((a?e.charAt(0):e[0])=="@"){return e.slice(1)}if(e=="["){t=[];for(;;r||(r=true)){e=q();if(e=="]"){break}if(r){if(e==","){e=q();if(e=="]"){A()}}else{A()}}if(e==","){A()}t.push(M(e))}return t}else if(e=="{"){t={};for(;;r||(r=true)){e=q();if(e=="}"){break}if(r){if(e==","){e=q();if(e=="}"){A()}}else{A()}}if(e==","||typeof e!="string"||(a?e.charAt(0):e[0])!="@"||q()!=":"){A()}t[e.slice(1)]=M(q())}return t}A()}return e};var F=function(e,t,r){var i=B(e,t,r);if(i===_){delete e[t]}else{e[t]=i}};var B=function(e,t,r){var i=e[t],n;if(typeof i=="object"&&i){if(w.call(i)==N){for(n=i.length;n--;){F(i,n,r)}}else{R(i,function(e){F(i,e,r)})}}return r.call(e,t,i)};f.parse=function(e,t){var r,i;C=0;S=""+e;r=M(q());if(q()!="$"){A()}C=S=null;return t&&w.call(t)==p?B((i={},i[""]=r,i),"",t):r}}}f["runInContext"]=W;return f}if(t&&!e){W(G,t)}else{var i=G.JSON,n=G["JSON3"],s=false;var o=W(G,G["JSON3"]={noConflict:function(){if(!s){s=true;G.JSON=i;G["JSON3"]=n;i=n=null}return o}});G.JSON={parse:o.parse,stringify:o.stringify}}if(e){!(u=function(){return o}.call(c,l,c,a),u!==undefined&&(a.exports=u))}}).call(this)}).call(this,l(49)(e),l(1))},function(t,e){(function(e){t.exports=e}).call(this,{})},function(e,t){e.exports=r;function r(e){if(e)return i(e)}function i(e){for(var t in r.prototype){e[t]=r.prototype[t]}return e}r.prototype.on=r.prototype.addEventListener=function(e,t){this._callbacks=this._callbacks||{};(this._callbacks[e]=this._callbacks[e]||[]).push(t);return this};r.prototype.once=function(e,t){var r=this;this._callbacks=this._callbacks||{};function i(){r.off(e,i);t.apply(this,arguments)}i.fn=t;this.on(e,i);return this};r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){this._callbacks=this._callbacks||{};if(0==arguments.length){this._callbacks={};return this}var r=this._callbacks[e];if(!r)return this;if(1==arguments.length){delete this._callbacks[e];return this}var i;for(var n=0;n<r.length;n++){i=r[n];if(i===t||i.fn===t){r.splice(n,1);break}}return this};r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),r=this._callbacks[e];if(r){r=r.slice(0);for(var i=0,n=r.length;i<n;++i){r[i].apply(this,t)}}return this};r.prototype.listeners=function(e){this._callbacks=this._callbacks||{};return this._callbacks[e]||[]};r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,r){(function(c){var l=r(96);var h=r(50);t.deconstructPacket=function(e){var s=[];var t=e.data;function o(e){if(!e)return e;if(h(e)){var t={_placeholder:true,num:s.length};s.push(e);return t}else if(l(e)){var r=new Array(e.length);for(var i=0;i<e.length;i++){r[i]=o(e[i])}return r}else if("object"==typeof e&&!(e instanceof Date)){var r={};for(var n in e){r[n]=o(e[n])}return r}return e}var r=e;r.data=o(t);r.attachments=s.length;return{packet:r,buffers:s}};t.reconstructPacket=function(e,n){var t=0;function s(e){if(e&&e._placeholder){var t=n[e.num];return t}else if(l(e)){for(var r=0;r<e.length;r++){e[r]=s(e[r])}return e}else if(e&&"object"==typeof e){for(var i in e){e[i]=s(e[i])}return e}return e}e.data=s(e.data);e.attachments=undefined;return e};t.removeBlobs=function(e,o){function a(e,t,r){if(!e)return e;if(c.Blob&&e instanceof Blob||c.File&&e instanceof File){f++;var i=new FileReader;i.onload=function(){if(r){r[t]=this.result}else{u=this.result}if(!--f){o(u)}};i.readAsArrayBuffer(e)}else if(l(e)){for(var n=0;n<e.length;n++){a(e[n],n,e)}}else if(e&&"object"==typeof e&&!h(e)){for(var s in e){a(e[s],s,e)}}}var f=0;var u=e;a(u);if(!f){o(u)}}}).call(this,r(1))},function(e,t){e.exports=Array.isArray||function(e){return Object.prototype.toString.call(e)=="[object Array]"}},function(e,t,r){e.exports=r(98)},function(e,t,r){e.exports=r(99);e.exports.parser=r(12)},function(t,e,c){(function(i){var n=c(52);var e=c(13);var l=c(20)("engine.io-client:socket");var s=c(56);var o=c(12);var a=c(48);var r=c(114);var f=c(28);t.exports=h;function h(e,t){if(!(this instanceof h))return new h(e,t);t=t||{};if(e&&"object"===typeof e){t=e;e=null}if(e){e=a(e);t.hostname=e.host;t.secure=e.protocol==="https"||e.protocol==="wss";t.port=e.port;if(e.query)t.query=e.query}else if(t.host){t.hostname=a(t.host).host}this.secure=null!=t.secure?t.secure:i.location&&"https:"===location.protocol;if(t.hostname&&!t.port){t.port=this.secure?"443":"80"}this.agent=t.agent||false;this.hostname=t.hostname||(i.location?location.hostname:"localhost");this.port=t.port||(i.location&&location.port?location.port:this.secure?443:80);this.query=t.query||{};if("string"===typeof this.query)this.query=f.decode(this.query);this.upgrade=false!==t.upgrade;this.path=(t.path||"/engine.io").replace(/\/$/,"")+"/";this.forceJSONP=!!t.forceJSONP;this.jsonp=false!==t.jsonp;this.forceBase64=!!t.forceBase64;this.enablesXDR=!!t.enablesXDR;this.timestampParam=t.timestampParam||"t";this.timestampRequests=t.timestampRequests;this.transports=t.transports||["polling","websocket"];this.readyState="";this.writeBuffer=[];this.prevBufferLen=0;this.policyPort=t.policyPort||843;this.rememberUpgrade=t.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=t.onlyBinaryUpgrades;this.perMessageDeflate=false!==t.perMessageDeflate?t.perMessageDeflate||{}:false;if(true===this.perMessageDeflate)this.perMessageDeflate={};if(this.perMessageDeflate&&null==this.perMessageDeflate.threshold){this.perMessageDeflate.threshold=1024}this.pfx=t.pfx||null;this.key=t.key||null;this.passphrase=t.passphrase||null;this.cert=t.cert||null;this.ca=t.ca||null;this.ciphers=t.ciphers||null;this.rejectUnauthorized=t.rejectUnauthorized===undefined?null:t.rejectUnauthorized;this.forceNode=!!t.forceNode;var r=typeof i==="object"&&i;if(r.global===r){if(t.extraHeaders&&Object.keys(t.extraHeaders).length>0){this.extraHeaders=t.extraHeaders}if(t.localAddress){this.localAddress=t.localAddress}}this.id=null;this.upgrades=null;this.pingInterval=null;this.pingTimeout=null;this.pingIntervalTimer=null;this.pingTimeoutTimer=null;this.open()}h.priorWebsocketSuccess=false;e(h.prototype);h.protocol=o.protocol;h.Socket=h;h.Transport=c(27);h.transports=c(52);h.parser=c(12);h.prototype.createTransport=function(e){l('creating transport "%s"',e);var t=u(this.query);t.EIO=o.protocol;t.transport=e;if(this.id)t.sid=this.id;var r=new n[e]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:t,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized,perMessageDeflate:this.perMessageDeflate,extraHeaders:this.extraHeaders,forceNode:this.forceNode,localAddress:this.localAddress});return r};function u(e){var t={};for(var r in e){if(e.hasOwnProperty(r)){t[r]=e[r]}}return t}h.prototype.open=function(){var e;if(this.rememberUpgrade&&h.priorWebsocketSuccess&&this.transports.indexOf("websocket")!==-1){e="websocket"}else if(0===this.transports.length){var t=this;setTimeout(function(){t.emit("error","No transports available")},0);return}else{e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){this.transports.shift();this.open();return}e.open();this.setTransport(e)};h.prototype.setTransport=function(e){l("setting transport %s",e.name);var t=this;if(this.transport){l("clearing existing transport %s",this.transport.name);this.transport.removeAllListeners()}this.transport=e;e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})};h.prototype.probe=function(r){l('probing transport "%s"',r);var i=this.createTransport(r,{probe:1});var n=false;var s=this;h.priorWebsocketSuccess=false;function e(){if(s.onlyBinaryUpgrades){var e=!this.supportsBinary&&s.transport.supportsBinary;n=n||e}if(n)return;l('probe transport "%s" opened',r);i.send([{type:"ping",data:"probe"}]);i.once("packet",function(e){if(n)return;if("pong"===e.type&&"probe"===e.data){l('probe transport "%s" pong',r);s.upgrading=true;s.emit("upgrading",i);if(!i)return;h.priorWebsocketSuccess="websocket"===i.name;l('pausing current transport "%s"',s.transport.name);s.transport.pause(function(){if(n)return;if("closed"===s.readyState)return;l("changing transport and sending upgrade packet");c();s.setTransport(i);i.send([{type:"upgrade"}]);s.emit("upgrade",i);i=null;s.upgrading=false;s.flush()})}else{l('probe transport "%s" failed',r);var t=new Error("probe error");t.transport=i.name;s.emit("upgradeError",t)}})}function o(){if(n)return;n=true;c();i.close();i=null}function t(e){var t=new Error("probe error: "+e);t.transport=i.name;o();l('probe transport "%s" failed because of error: %s',r,e);s.emit("upgradeError",t)}function a(){t("transport closed")}function f(){t("socket closed")}function u(e){if(i&&e.name!==i.name){l('"%s" works - aborting "%s"',e.name,i.name);o()}}function c(){i.removeListener("open",e);i.removeListener("error",t);i.removeListener("close",a);s.removeListener("close",f);s.removeListener("upgrading",u)}i.once("open",e);i.once("error",t);i.once("close",a);this.once("close",f);this.once("upgrading",u);i.open()};h.prototype.onOpen=function(){l("socket open");this.readyState="open";h.priorWebsocketSuccess="websocket"===this.transport.name;this.emit("open");this.flush();if("open"===this.readyState&&this.upgrade&&this.transport.pause){l("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++){this.probe(this.upgrades[e])}}};h.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){l('socket receive: type "%s", data "%s"',e.type,e.data);this.emit("packet",e);this.emit("heartbeat");switch(e.type){case"open":this.onHandshake(r(e.data));break;case"pong":this.setPing();this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data;this.onError(t);break;case"message":this.emit("data",e.data);this.emit("message",e.data);break}}else{l('packet received with socket readyState "%s"',this.readyState)}};h.prototype.onHandshake=function(e){this.emit("handshake",e);this.id=e.sid;this.transport.query.sid=e.sid;this.upgrades=this.filterUpgrades(e.upgrades);this.pingInterval=e.pingInterval;this.pingTimeout=e.pingTimeout;this.onOpen();if("closed"===this.readyState)return;this.setPing();this.removeListener("heartbeat",this.onHeartbeat);this.on("heartbeat",this.onHeartbeat)};h.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){if("closed"===t.readyState)return;t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)};h.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer);e.pingIntervalTimer=setTimeout(function(){l("writing ping packet - expecting pong within %sms",e.pingTimeout);e.ping();e.onHeartbeat(e.pingTimeout)},e.pingInterval)};h.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})};h.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen);this.prevBufferLen=0;if(0===this.writeBuffer.length){this.emit("drain")}else{this.flush()}};h.prototype.flush=function(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){l("flushing %d packets in socket",this.writeBuffer.length);this.transport.send(this.writeBuffer);this.prevBufferLen=this.writeBuffer.length;this.emit("flush")}};h.prototype.write=h.prototype.send=function(e,t,r){this.sendPacket("message",e,t,r);return this};h.prototype.sendPacket=function(e,t,r,i){if("function"===typeof t){i=t;t=undefined}if("function"===typeof r){i=r;r=null}if("closing"===this.readyState||"closed"===this.readyState){return}r=r||{};r.compress=false!==r.compress;var n={type:e,data:t,options:r};this.emit("packetCreate",n);this.writeBuffer.push(n);if(i)this.once("flush",i);this.flush()};h.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var e=this;if(this.writeBuffer.length){this.once("drain",function(){if(this.upgrading){i()}else{t()}})}else if(this.upgrading){i()}else{t()}}function t(){e.onClose("forced close");l("socket closing - telling transport to close");e.transport.close()}function r(){e.removeListener("upgrade",r);e.removeListener("upgradeError",r);t()}function i(){e.once("upgrade",r);e.once("upgradeError",r)}return this};h.prototype.onError=function(e){l("socket error %j",e);h.priorWebsocketSuccess=false;this.emit("error",e);this.onClose("transport error",e)};h.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){l('socket close with reason: "%s"',e);var r=this;clearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);this.transport.removeAllListeners("close");this.transport.close();this.transport.removeAllListeners();this.readyState="closed";this.id=null;this.emit("close",e,t);r.writeBuffer=[];r.prevBufferLen=0}};h.prototype.filterUpgrades=function(e){var t=[];for(var r=0,i=e.length;r<i;r++){if(~s(this.transports,e[r]))t.push(e[r])}return t}}).call(this,c(1))},function(t,e){try{t.exports=typeof XMLHttpRequest!=="undefined"&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=false}},function(c,e,l){(function(n){var s=l(26);var i=l(53);var e=l(13);var t=l(19);var o=l(20)("engine.io-client:polling-xhr");c.exports=a;c.exports.Request=f;function r(){}function a(e){i.call(this,e);this.requestTimeout=e.requestTimeout;if(n.location){var t="https:"===location.protocol;var r=location.port;if(!r){r=t?443:80}this.xd=e.hostname!==n.location.hostname||r!==e.port;this.xs=e.secure!==t}else{this.extraHeaders=e.extraHeaders}}t(a,i);a.prototype.supportsBinary=true;a.prototype.request=function(e){e=e||{};e.uri=this.uri();e.xd=this.xd;e.xs=this.xs;e.agent=this.agent||false;e.supportsBinary=this.supportsBinary;e.enablesXDR=this.enablesXDR;e.pfx=this.pfx;e.key=this.key;e.passphrase=this.passphrase;e.cert=this.cert;e.ca=this.ca;e.ciphers=this.ciphers;e.rejectUnauthorized=this.rejectUnauthorized;e.requestTimeout=this.requestTimeout;e.extraHeaders=this.extraHeaders;return new f(e)};a.prototype.doWrite=function(e,t){var r=typeof e!=="string"&&e!==undefined;var i=this.request({method:"POST",data:e,isBinary:r});var n=this;i.on("success",t);i.on("error",function(e){n.onError("xhr post error",e)});this.sendXhr=i};a.prototype.doPoll=function(){o("xhr poll");var e=this.request();var t=this;e.on("data",function(e){t.onData(e)});e.on("error",function(e){t.onError("xhr poll error",e)});this.pollXhr=e};function f(e){this.method=e.method||"GET";this.uri=e.uri;this.xd=!!e.xd;this.xs=!!e.xs;this.async=false!==e.async;this.data=undefined!==e.data?e.data:null;this.agent=e.agent;this.isBinary=e.isBinary;this.supportsBinary=e.supportsBinary;this.enablesXDR=e.enablesXDR;this.requestTimeout=e.requestTimeout;this.pfx=e.pfx;this.key=e.key;this.passphrase=e.passphrase;this.cert=e.cert;this.ca=e.ca;this.ciphers=e.ciphers;this.rejectUnauthorized=e.rejectUnauthorized;this.extraHeaders=e.extraHeaders;this.create()}e(f.prototype);f.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx;e.key=this.key;e.passphrase=this.passphrase;e.cert=this.cert;e.ca=this.ca;e.ciphers=this.ciphers;e.rejectUnauthorized=this.rejectUnauthorized;var t=this.xhr=new s(e);var r=this;try{o("xhr open %s: %s",this.method,this.uri);t.open(this.method,this.uri,this.async);try{if(this.extraHeaders){t.setDisableHeaderCheck(true);for(var i in this.extraHeaders){if(this.extraHeaders.hasOwnProperty(i)){t.setRequestHeader(i,this.extraHeaders[i])}}}}catch(e){}if(this.supportsBinary){t.responseType="arraybuffer"}if("POST"===this.method){try{if(this.isBinary){t.setRequestHeader("Content-type","application/octet-stream")}else{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}}catch(e){}}try{t.setRequestHeader("Accept","*/*")}catch(e){}if("withCredentials"in t){t.withCredentials=true}if(this.requestTimeout){t.timeout=this.requestTimeout}if(this.hasXDR()){t.onload=function(){r.onLoad()};t.onerror=function(){r.onError(t.responseText)}}else{t.onreadystatechange=function(){if(4!==t.readyState)return;if(200===t.status||1223===t.status){r.onLoad()}else{setTimeout(function(){r.onError(t.status)},0)}}}o("xhr data %s",this.data);t.send(this.data)}catch(e){setTimeout(function(){r.onError(e)},0);return}if(n.document){this.index=f.requestsCount++;f.requests[this.index]=this}};f.prototype.onSuccess=function(){this.emit("success");this.cleanup()};f.prototype.onData=function(e){this.emit("data",e);this.onSuccess()};f.prototype.onError=function(e){this.emit("error",e);this.cleanup(true)};f.prototype.cleanup=function(e){if("undefined"===typeof this.xhr||null===this.xhr){return}if(this.hasXDR()){this.xhr.onload=this.xhr.onerror=r}else{this.xhr.onreadystatechange=r}if(e){try{this.xhr.abort()}catch(e){}}if(n.document){delete f.requests[this.index]}this.xhr=null};f.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type").split(";")[0]}catch(e){}if(e==="application/octet-stream"){t=this.xhr.response||this.xhr.responseText}else{if(!this.supportsBinary){t=this.xhr.responseText}else{try{t=String.fromCharCode.apply(null,new Uint8Array(this.xhr.response))}catch(e){var r=new Uint8Array(this.xhr.response);var i=[];for(var n=0,s=r.length;n<s;n++){i.push(r[n])}t=String.fromCharCode.apply(null,i)}}}}catch(e){this.onError(e)}if(null!=t){this.onData(t)}};f.prototype.hasXDR=function(){return"undefined"!==typeof n.XDomainRequest&&!this.xs&&this.enablesXDR};f.prototype.abort=function(){this.cleanup()};f.requestsCount=0;f.requests={};if(n.document){if(n.attachEvent){n.attachEvent("onunload",u)}else if(n.addEventListener){n.addEventListener("beforeunload",u,false)}}function u(){for(var e in f.requests){if(f.requests.hasOwnProperty(e)){f.requests[e].abort()}}}}).call(this,l(1))},function(e,t){e.exports=Object.keys||function e(t){var r=[];var i=Object.prototype.hasOwnProperty;for(var n in t){if(i.call(t,n)){r.push(n)}}return r}},function(e,t){e.exports=Array.isArray||function(e){return Object.prototype.toString.call(e)=="[object Array]"}},function(e,t){e.exports=function(e,t,r){var i=e.byteLength;t=t||0;r=r||i;if(e.slice){return e.slice(t,r)}if(t<0){t+=i}if(r<0){r+=i}if(r>i){r=i}if(t>=i||t>=r||i===0){return new ArrayBuffer(0)}var n=new Uint8Array(e);var s=new Uint8Array(r-t);for(var o=t,a=0;o<r;o++,a++){s[a]=n[o]}return s.buffer}},function(e,t){e.exports=r;function r(e,r,i){var n=false;i=i||o;s.count=e;return e===0?r():s;function s(e,t){if(s.count<=0){throw new Error("after called too many times")}--s.count;if(e){n=true;r(e);r=i}else if(s.count===0&&!n){r(null,t)}}}function o(){}},function(e,b,w){(function(C,S){var A;/*! https://mths.be/wtf8 v1.0.0 by @mathias */(function(e){var t=true&&b;var r=true&&C&&C.exports==t&&C;var i=typeof S=="object"&&S;if(i.global===i||i.window===i){e=i}var s=String.fromCharCode;function o(e){var t=[];var r=0;var i=e.length;var n;var s;while(r<i){n=e.charCodeAt(r++);if(n>=55296&&n<=56319&&r<i){s=e.charCodeAt(r++);if((s&64512)==56320){t.push(((n&1023)<<10)+(s&1023)+65536)}else{t.push(n);r--}}else{t.push(n)}}return t}function n(e){var t=e.length;var r=-1;var i;var n="";while(++r<t){i=e[r];if(i>65535){i-=65536;n+=s(i>>>10&1023|55296);i=56320|i&1023}n+=s(i)}return n}function a(e,t){return s(e>>t&63|128)}function f(e){if((e&4294967168)==0){return s(e)}var t="";if((e&4294965248)==0){t=s(e>>6&31|192)}else if((e&4294901760)==0){t=s(e>>12&15|224);t+=a(e,6)}else if((e&4292870144)==0){t=s(e>>18&7|240);t+=a(e,12);t+=a(e,6)}t+=s(e&63|128);return t}function u(e){var t=o(e);var r=t.length;var i=-1;var n;var s="";while(++i<r){n=t[i];s+=f(n)}return s}function c(){if(p>=d){throw Error("Invalid byte index")}var e=h[p]&255;p++;if((e&192)==128){return e&63}throw Error("Invalid continuation byte")}function l(){var e;var t;var r;var i;var n;if(p>d){throw Error("Invalid byte index")}if(p==d){return false}e=h[p]&255;p++;if((e&128)==0){return e}if((e&224)==192){var t=c();n=(e&31)<<6|t;if(n>=128){return n}else{throw Error("Invalid continuation byte")}}if((e&240)==224){t=c();r=c();n=(e&15)<<12|t<<6|r;if(n>=2048){return n}else{throw Error("Invalid continuation byte")}}if((e&248)==240){t=c();r=c();i=c();n=(e&15)<<18|t<<12|r<<6|i;if(n>=65536&&n<=1114111){return n}}throw Error("Invalid WTF-8 detected")}var h;var d;var p;function v(e){h=o(e);d=h.length;p=0;var t=[];var r;while((r=l())!==false){t.push(r)}return n(t)}var g={version:"1.0.0",encode:u,decode:v};if(true){!(A=function(){return g}.call(b,w,b,C),A!==undefined&&(C.exports=A))}else{var m,y,T}})(this)}).call(this,w(49)(e),w(1))},function(e,t){(function(){"use strict";var s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var l=new Uint8Array(256);for(var e=0;e<s.length;e++){l[s.charCodeAt(e)]=e}t.encode=function(e){var t=new Uint8Array(e),r,i=t.length,n="";for(r=0;r<i;r+=3){n+=s[t[r]>>2];n+=s[(t[r]&3)<<4|t[r+1]>>4];n+=s[(t[r+1]&15)<<2|t[r+2]>>6];n+=s[t[r+2]&63]}if(i%3===2){n=n.substring(0,n.length-1)+"="}else if(i%3===1){n=n.substring(0,n.length-2)+"=="}return n};t.decode=function(e){var t=e.length*.75,r=e.length,i,n=0,s,o,a,f;if(e[e.length-1]==="="){t--;if(e[e.length-2]==="="){t--}}var u=new ArrayBuffer(t),c=new Uint8Array(u);for(i=0;i<r;i+=4){s=l[e.charCodeAt(i)];o=l[e.charCodeAt(i+1)];a=l[e.charCodeAt(i+2)];f=l[e.charCodeAt(i+3)];c[n++]=s<<2|o>>4;c[n++]=(o&15)<<4|a>>2;c[n++]=(a&3)<<6|f&63}return u}})()},function(f,e,t){(function(e){var n=e.BlobBuilder||e.WebKitBlobBuilder||e.MSBlobBuilder||e.MozBlobBuilder;var t=function(){try{var e=new Blob(["hi"]);return e.size===2}catch(e){return false}}();var r=t&&function(){try{var e=new Blob([new Uint8Array([1,2])]);return e.size===2}catch(e){return false}}();var i=n&&n.prototype.append&&n.prototype.getBlob;function s(e){for(var t=0;t<e.length;t++){var r=e[t];if(r.buffer instanceof ArrayBuffer){var i=r.buffer;if(r.byteLength!==i.byteLength){var n=new Uint8Array(r.byteLength);n.set(new Uint8Array(i,r.byteOffset,r.byteLength));i=n.buffer}e[t]=i}}}function o(e,t){t=t||{};var r=new n;s(e);for(var i=0;i<e.length;i++){r.append(e[i])}return t.type?r.getBlob(t.type):r.getBlob()}function a(e,t){s(e);return new Blob(e,t||{})}f.exports=function(){if(t){return r?e.Blob:a}else if(i){return o}else{return undefined}}()}).call(this,t(1))},function(e,f,t){f=e.exports=i.debug=i;f.coerce=a;f.disable=s;f.enable=n;f.enabled=o;f.humanize=t(110);f.names=[];f.skips=[];f.formatters={};var r=0;var u;function c(){return f.colors[r++%f.colors.length]}function i(e){function t(){}t.enabled=false;function a(){var n=a;var e=+new Date;var t=e-(u||e);n.diff=t;n.prev=u;n.curr=e;u=e;if(null==n.useColors)n.useColors=f.useColors();if(null==n.color&&n.useColors)n.color=c();var s=new Array(arguments.length);for(var r=0;r<s.length;r++){s[r]=arguments[r]}s[0]=f.coerce(s[0]);if("string"!==typeof s[0]){s=["%o"].concat(s)}var o=0;s[0]=s[0].replace(/%([a-z%])/g,function(e,t){if(e==="%%")return e;o++;var r=f.formatters[t];if("function"===typeof r){var i=s[o];e=r.call(n,i);s.splice(o,1);o--}return e});s=f.formatArgs.apply(n,s);var i=a.log||f.log||console.log.bind(console);i.apply(n,s)}a.enabled=true;var r=f.enabled(e)?a:t;r.namespace=e;return r}function n(e){f.save(e);var t=(e||"").split(/[\s,]+/);var r=t.length;for(var i=0;i<r;i++){if(!t[i])continue;e=t[i].replace(/[\\^$+?.()|[\]{}]/g,"\\$&").replace(/\*/g,".*?");if(e[0]==="-"){f.skips.push(new RegExp("^"+e.substr(1)+"$"))}else{f.names.push(new RegExp("^"+e+"$"))}}}function s(){f.enable("")}function o(e){var t,r;for(t=0,r=f.skips.length;t<r;t++){if(f.skips[t].test(e)){return false}}for(t=0,r=f.names.length;t<r;t++){if(f.names[t].test(e)){return true}}return false}function a(e){if(e instanceof Error)return e.stack||e.message;return e}},function(e,t){var n=1e3;var s=n*60;var o=s*60;var a=o*24;var f=a*365.25;e.exports=function(e,t){t=t||{};var r=typeof e;if(r==="string"&&e.length>0){return i(e)}else if(r==="number"&&isNaN(e)===false){return t.long?c(e):u(e)}throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function i(e){e=String(e);if(e.length>1e4){return}var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(!t){return}var r=parseFloat(t[1]);var i=(t[2]||"ms").toLowerCase();switch(i){case"years":case"year":case"yrs":case"yr":case"y":return r*f;case"days":case"day":case"d":return r*a;case"hours":case"hour":case"hrs":case"hr":case"h":return r*o;case"minutes":case"minute":case"mins":case"min":case"m":return r*s;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return undefined}}function u(e){if(e>=a){return Math.round(e/a)+"d"}if(e>=o){return Math.round(e/o)+"h"}if(e>=s){return Math.round(e/s)+"m"}if(e>=n){return Math.round(e/n)+"s"}return e+"ms"}function c(e){return r(e,a,"day")||r(e,o,"hour")||r(e,s,"minute")||r(e,n,"second")||e+" ms"}function r(e,t,r){if(e<t){return}if(e<t*1.5){return Math.floor(e/t)+" "+r}return Math.ceil(e/t)+" "+r+"s"}},function(o,e,a){(function(r){var i=a(53);var e=a(19);o.exports=t;var u=/\n/g;var c=/\\n/g;var n;function s(){}function t(e){i.call(this,e);this.query=this.query||{};if(!n){if(!r.___eio)r.___eio=[];n=r.___eio}this.index=n.length;var t=this;n.push(function(e){t.onData(e)});this.query.j=this.index;if(r.document&&r.addEventListener){r.addEventListener("beforeunload",function(){if(t.script)t.script.onerror=s},false)}}e(t,i);t.prototype.supportsBinary=false;t.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null}i.prototype.doClose.call(this)};t.prototype.doPoll=function(){var t=this;var e=document.createElement("script");if(this.script){this.script.parentNode.removeChild(this.script);this.script=null}e.async=true;e.src=this.uri();e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];if(r){r.parentNode.insertBefore(e,r)}else{(document.head||document.body).appendChild(e)}this.script=e;var i="undefined"!==typeof navigator&&/gecko/i.test(navigator.userAgent);if(i){setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e);document.body.removeChild(e)},100)}};t.prototype.doWrite=function(e,t){var r=this;if(!this.form){var i=document.createElement("form");var n=document.createElement("textarea");var s=this.iframeId="eio_iframe_"+this.index;var o;i.className="socketio";i.style.position="absolute";i.style.top="-1000px";i.style.left="-1000px";i.target=s;i.method="POST";i.setAttribute("accept-charset","utf-8");n.name="d";i.appendChild(n);document.body.appendChild(i);this.form=i;this.area=n}this.form.action=this.uri();function a(){f();t()}function f(){if(r.iframe){try{r.form.removeChild(r.iframe)}catch(e){r.onError("jsonp polling iframe removal error",e)}}try{var e='<iframe src="javascript:0" name="'+r.iframeId+'">';o=document.createElement(e)}catch(e){o=document.createElement("iframe");o.name=r.iframeId;o.src="javascript:0"}o.id=r.iframeId;r.form.appendChild(o);r.iframe=o}f();e=e.replace(c,"\\\n");this.area.value=e.replace(u,"\\n");try{this.form.submit()}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(r.iframe.readyState==="complete"){a()}}}else{this.iframe.onload=a}}}).call(this,a(1))},function(l,e,h){(function(a){var r=h(27);var f=h(12);var n=h(28);var e=h(19);var s=h(55);var u=h(20)("engine.io-client:websocket");var i=a.WebSocket||a.MozWebSocket;var o;if(typeof window==="undefined"){try{o=h(113)}catch(e){}}var c=i;if(!c&&typeof window==="undefined"){c=o}l.exports=t;function t(e){var t=e&&e.forceBase64;if(t){this.supportsBinary=false}this.perMessageDeflate=e.perMessageDeflate;this.usingBrowserWebSocket=i&&!e.forceNode;if(!this.usingBrowserWebSocket){c=o}r.call(this,e)}e(t,r);t.prototype.name="websocket";t.prototype.supportsBinary=true;t.prototype.doOpen=function(){if(!this.check()){return}var e=this.uri();var t=void 0;var r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx;r.key=this.key;r.passphrase=this.passphrase;r.cert=this.cert;r.ca=this.ca;r.ciphers=this.ciphers;r.rejectUnauthorized=this.rejectUnauthorized;if(this.extraHeaders){r.headers=this.extraHeaders}if(this.localAddress){r.localAddress=this.localAddress}try{this.ws=this.usingBrowserWebSocket?new c(e):new c(e,t,r)}catch(e){return this.emit("error",e)}if(this.ws.binaryType===undefined){this.supportsBinary=false}if(this.ws.supports&&this.ws.supports.binary){this.supportsBinary=true;this.ws.binaryType="nodebuffer"}else{this.ws.binaryType="arraybuffer"}this.addEventListeners()};t.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()};this.ws.onclose=function(){t.onClose()};this.ws.onmessage=function(e){t.onData(e.data)};this.ws.onerror=function(e){t.onError("websocket error",e)}};t.prototype.write=function(e){var n=this;this.writable=false;var s=e.length;for(var t=0,r=s;t<r;t++){(function(i){f.encodePacket(i,n.supportsBinary,function(e){if(!n.usingBrowserWebSocket){var t={};if(i.options){t.compress=i.options.compress}if(n.perMessageDeflate){var r="string"===typeof e?a.Buffer.byteLength(e):e.length;if(r<n.perMessageDeflate.threshold){t.compress=false}}}try{if(n.usingBrowserWebSocket){n.ws.send(e)}else{n.ws.send(e,t)}}catch(e){u("websocket closed before onclose event")}--s||o()})})(e[t])}function o(){n.emit("flush");setTimeout(function(){n.writable=true;n.emit("drain")},0)}};t.prototype.onClose=function(){r.prototype.onClose.call(this)};t.prototype.doClose=function(){if(typeof this.ws!=="undefined"){this.ws.close()}};t.prototype.uri=function(){var e=this.query||{};var t=this.secure?"wss":"ws";var r="";if(this.port&&("wss"===t&&Number(this.port)!==443||"ws"===t&&Number(this.port)!==80)){r=":"+this.port}if(this.timestampRequests){e[this.timestampParam]=s()}if(!this.supportsBinary){e.b64=1}e=n.encode(e);if(e.length){e="?"+e}var i=this.hostname.indexOf(":")!==-1;return t+"://"+(i?"["+this.hostname+"]":this.hostname)+r+this.path+e};t.prototype.check=function(){return!!c&&!("__initialize"in c&&this.name===t.prototype.name)}}).call(this,h(1))},function(e,t){},function(e,t,r){(function(r){var i=/^[\],:{}\s]*$/;var n=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var s=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;var o=/(?:^|:|,)(?:\s*\[)+/g;var a=/^\s+/;var f=/\s+$/;e.exports=function e(t){if("string"!=typeof t||!t){return null}t=t.replace(a,"").replace(f,"");if(r.JSON&&JSON.parse){return JSON.parse(t)}if(i.test(t.replace(n,"@").replace(s,"]").replace(o,""))){return new Function("return "+t)()}}}).call(this,r(1))},function(e,t){e.exports=r;function r(e,t){var r=[];t=t||0;for(var i=t||0;i<e.length;i++){r[i-t]=e[i]}return r}},function(e,t){e.exports=r;function r(e){e=e||{};this.ms=e.min||100;this.max=e.max||1e4;this.factor=e.factor||2;this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0;this.attempts=0}r.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random();var r=Math.floor(t*this.jitter*e);e=(Math.floor(t*10)&1)==0?e-r:e+r}return Math.min(e,this.max)|0};r.prototype.reset=function(){this.attempts=0};r.prototype.setMin=function(e){this.ms=e};r.prototype.setMax=function(e){this.max=e};r.prototype.setJitter=function(e){this.jitter=e}},function(e,t,r){"use strict";r.r(t);r.d(t,"SipEvent",function(){return Ke});r.d(t,"init",function(){return Ve});r.d(t,"doubleInit",function(){return Ye});r.d(t,"getToken",function(){return ze});r.d(t,"destroy",function(){return $e});r.d(t,"stateListener",function(){return Je});r.d(t,"addStateListener",function(){return Xe});r.d(t,"login",function(){return Qe});r.d(t,"logout",function(){return Ze});r.d(t,"ready",function(){return et});r.d(t,"busy",function(){return tt});r.d(t,"rest",function(){return rt});r.d(t,"progress",function(){return it});r.d(t,"makecall",function(){return nt});r.d(t,"hold",function(){return st});r.d(t,"unhold",function(){return ot});r.d(t,"dtmf",function(){return at});r.d(t,"hangup",function(){return ft});r.d(t,"satisfy",function(){return ut});r.d(t,"transfer",function(){return ct});r.d(t,"threeWay",function(){return lt});r.d(t,"listenCall",function(){return ht});r.d(t,"bargeinCall",function(){return dt});r.d(t,"whisperCall",function(){return pt});r.d(t,"threewayCall",function(){return vt});r.d(t,"restoreCall",function(){return gt});r.d(t,"consult",function(){return mt});r.d(t,"consultComplete",function(){return yt});r.d(t,"consultCancel",function(){return Tt});r.d(t,"consultConf",function(){return Ct});r.d(t,"webRTCAnswer",function(){return St});r.d(t,"setWebRTCAutoAnswer",function(){return At});r.d(t,"getAlreadyBind",function(){return bt});r.d(t,"setInDevice",function(){return wt});r.d(t,"setOutDevice",function(){return Et});r.d(t,"getInDeviceList",function(){return Rt});r.d(t,"getOutDeviceList",function(){return _t});r.d(t,"getAvailableTypes",function(){return It});r.d(t,"getCallInMobileState",function(){return Ot});r.d(t,"setCallInMobileState",function(){return Dt});r.d(t,"getAgentInfo",function(){return Nt});r.d(t,"getQueueInfo",function(){return xt});r.d(t,"isAnswer",function(){return kt});r.d(t,"forceChange",function(){return Ut});r.d(t,"getPeerConnection",function(){return Pt});r.d(t,"doubleMakeCall",function(){return Ht});r.d(t,"doubleHangUp",function(){return Lt});var i=r(29);var s=r(14);var o;(function(e){e["progress"]="progress";e["terminated"]="terminated";e["accepted"]="accepted"})(o||(o={}));var n;(function(e){e["registered"]="registered";e["unregistered"]="unregistered";e["registrationFailed"]="registrationFailed";e["invite"]="invite";e["inviteSent"]="inviteSent";e["disconnected"]="disconnected"})(n||(n={}));var a=function(){function e(e){this.ID_AUDIO="remoteAudio";this.sip_ua=null;this.sip_sessions_in=[];this.sip_sessions_out=[];this.sip_callbacks=[];this.autoAnswerOnceFlag=false;this.pc=null;this.sip_debug=e.debug;this.sip_account=e.sip_account;this.sip_domain=e.sip_domain;this.sip_password=e.sip_password;this.sip_autoAnswer=e.sip_autoAnswer;this.wss_proto=e.wss_proto;this.wss_address=e.wss_address;this.wss_port=e.wss_port;this.ice_checkTimeout=e.ice_checkTimeout;this.register_expire=e.register_expire;if(undefined==this.register_expire||this.register_expire>600||this.register_expire<0){this.register_expire=600}this.sip_callbacks=[].concat(e.sip_callbacks);this.inDeviceId=e.inDeviceId;this.outDeviceId=e.outDeviceId;if(undefined===this.inDeviceId){this.inDeviceId="default"}if(undefined===this.outDeviceId){this.outDeviceId="default"}this.initGui();this.start()}e.prototype.initGui=function(){var e=this;var t=document.createElement("audio");t.id=e.ID_AUDIO;t.hidden=true;document.body.appendChild(t)};e.prototype.destroyGui=function(){var e=this;var t=document.getElementById(e.ID_AUDIO);if(t){document.body.removeChild(t)}};e.prototype.writeLog=function(e){var t=this;if(t.sip_debug){console.log("天客云2.0 Sdk WebRTC [ "+e+" ]")}};e.prototype.fireCallBack=function(r,i){var e=this;if(n.invite===r&&(e.sip_autoAnswer||e.autoAnswerOnceFlag)){if(e.autoAnswerOnceFlag){e.writeLog("autoAnswerOnceFlag exec complete , set false");e.autoAnswerOnceFlag=false}else{e.writeLog("autoAnswer enable, answer now!!!")}e.answer()}e.sip_callbacks.map(function(e,t){e.handle(r,i)})};e.prototype.handleUA=function(e){var r=this;r.writeLog("ua add listener");e.on(n.registered,function(e){r.writeLog(n.registered);r.fireCallBack(n.registered,null)});e.on(n.unregistered,function(e,t){r.writeLog(n.unregistered);r.fireCallBack(n.unregistered,null)});e.on(n.registrationFailed,function(e,t){r.writeLog(n.registrationFailed);r.fireCallBack(n.registrationFailed,null)});e.on(n.invite,function(e){r.writeLog(n.invite);r.sip_sessions_in.push(e);r.handleSession(e);r.fireCallBack(n.invite,null)});e.on(n.inviteSent,function(e){r.writeLog(n.inviteSent);r.sip_sessions_out.push(e);r.handleSession(e);r.fireCallBack(n.inviteSent,null)});e.transport.on(n.disconnected,function(){r.fireCallBack(n.disconnected,null)})};e.prototype.handleSession=function(r){var i=this;var n=this;n.writeLog("session add listener");if(r instanceof s["InviteServerContext"]){r.on(o.progress,function(e,t){n.writeLog("session in "+o.progress+" "+n.sip_sessions_in.length);n.handleAudio(r);n.fireCallBack(o.progress,null)});r.on(o.accepted,function(e,t){n.writeLog("session in "+o.accepted+" "+n.sip_sessions_in.length);n.handleAudio(r);n.fireCallBack(o.accepted,i.pc)});r.on(o.terminated,function(e,t){n.sip_sessions_in=n.sip_sessions_in.filter(function(e){return r!=e});n.writeLog("session in "+o.terminated+" "+n.sip_sessions_in.length);n.fireCallBack(o.terminated,null)})}else if(r instanceof s["InviteClientContext"]){r.on(o.progress,function(e,t){n.writeLog("session out "+o.progress+" "+n.sip_sessions_out.length);n.handleAudio(r);n.fireCallBack(o.progress,null)});r.on(o.terminated,function(e,t){n.sip_sessions_out=n.sip_sessions_out.filter(function(e){return r!=e});n.writeLog("session out "+o.terminated+" "+n.sip_sessions_out.length);n.fireCallBack(o.terminated,null)})}};e.prototype.handleAudio=function(e){var t=this;var r=e.sessionDescriptionHandler.peerConnection;this.pc=r;var i=new MediaStream;r.getReceivers().forEach(function(e){i.addTrack(e.track)});if(i.active){t.writeLog("remoteStream active attach audio");var n=document.getElementById(t.ID_AUDIO);n.srcObject=i;if(n.setSinkId){n.setSinkId(t.outDeviceId).then(function(){n.play().catch(function(e){t.writeLog(e)})})}else{n.play().catch(function(e){t.writeLog(e)})}}else{t.writeLog("remoteStream not active ignore")}};e.prototype.start=function(){var e=this;var t={uri:e.sip_account+"@"+e.sip_domain,password:e.sip_password,transportOptions:{wsServers:[e.wss_proto+"://"+e.wss_address+":"+e.wss_port],traceSip:e.sip_debug,maxReconnectionAttempts:0},register:true,registerOptions:{expires:e.register_expire},autostart:true,allowLegacyNotifications:true,rel100:i["C"].supported.SUPPORTED,sessionDescriptionHandlerFactoryOptions:{peerConnectionOptions:{iceCheckingTimeout:e.ice_checkTimeout,rtcConfiguration:{iceServers:[{credentialType:"password",urls:["turn:stun1.ketianyun.com"],username:"ketian",credential:"Kty1234"},{urls:["stun:stun1.ketianyun.com","stun:webcs.agora.io:3478","stun:72.251.224.27:3478"]}]}}}};e.sip_ua=new i["UA"](t);e.handleUA(e.sip_ua)};e.prototype.invite=function(e){var t=this;if(t.count()>0){t.writeLog("only 1 call is allowed");return false}var r=t.sip_ua;if(null!=r){var i=e+"@"+t.sip_domain;r.invite(i,{sessionDescriptionHandlerOptions:{constraints:{audio:{deviceId:t.inDeviceId},video:false}}});return true}else{return false}};e.prototype.answer=function(){var r=this;this.sip_sessions_in.map(function(e,t){e.accept({sessionDescriptionHandlerOptions:{constraints:{audio:{deviceId:r.inDeviceId},video:false}}})})};e.prototype.hangup=function(){this.sip_sessions_out.map(function(e,t){e.terminate()});this.sip_sessions_in.map(function(e,t){e.terminate()})};e.prototype.stop=function(){var e=this;var t=e.sip_ua;if(t){t.unregister();t.stop();e.destroyGui();e.sip_callbacks=[];e.sip_ua=null}};e.prototype.count=function(){return this.sip_sessions_out.length+this.sip_sessions_in.length};e.prototype.autoAnswerOnce=function(){this.autoAnswerOnceFlag=true};e.prototype.setAutoAnswer=function(e){this.sip_autoAnswer=e};e.prototype.setInDevice=function(e){if(undefined!==e){this.inDeviceId=e}};e.prototype.setOutDevice=function(e){if(undefined!==e){this.outDeviceId=e}};e.prototype.getAutoAnswerState=function(){return this.sip_autoAnswer};return e}();var f=null;function u(e){if(!p()){f=new a(e)}}function c(e){if(p()){f.invite(e)}}function l(){if(p()){f.answer()}}function h(){if(p()){f.hangup()}}function d(){if(p()){f.stop();f=null}}function p(){return null!=f}function v(){if(p()){f.autoAnswerOnce()}}function g(e){if(p()){f.setAutoAnswer(e)}}function m(){if(p()){return f.getAutoAnswerState()}}function y(e){if(p()){f.setInDevice(e)}}function T(e){if(p()){f.setOutDevice(e)}}var C=r(3);var S=r.n(C);var A=r(60);var b=r.n(A);function w(e,t){if(!(e instanceof t)){throw new TypeError("Cannot call a class as a function")}}function E(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||false;i.configurable=true;if("value"in i)i.writable=true;Object.defineProperty(e,i.key,i)}}function R(e,t,r){if(t)E(e.prototype,t);if(r)E(e,r);return e}function _(e,t,r){if(t in e){Object.defineProperty(e,t,{value:r,enumerable:true,configurable:true,writable:true})}else{e[t]=r}return e}var I;var O="LOGIN";var D="LOGOUT";var N="READY";var x="BUSY";var k="REST";var U="MAKECALL";var P="HOLD";var H="DTMF";var L="UNHOLD";var q="KILLCALL";var M="SATISFY";var F="TRANSFER";var B="THREEWAY";var j="PROGRESS";var G="LISTENCALL";var W="BARGEINCALL";var K="WHISPERCALL";var V="THREEWAYCALL";var Y="RESTORECALL";var z="CONSULT";var $="CONSULTCOMPLETE";var J="CONSULTCANCEL";var X="CONSULTCONF";var Q="CB_CONNECT";var Z="CB_LOGIN";var ee="CB_LOGOUT";var te="CB_READY";var re="CB_BUSY";var ie="CB_REST";var ne="CB_PROGRESS";var se="CB_MAKECALL";var oe="CB_TRANSFER";var ae="CB_HOLD";var fe="CB_DTMF";var ue="CB_UNHOLD";var ce="CB_RINGING";var le="CB_ANSWERING";var he="CB_REALTIME";var de="CB_HANGUP";var pe="CB_THREEWAY";var ve="CB_LISTENCALL";var ge="CB_KICKOUT";var me="CB_CONSULT";var ye="CB_CONSULTCOMPLETE";var Te="CB_CONSULTCANCEL";var Ce=window.sessionStorage;Ce["state"]="";var Se,Ae,be,we;var Ee;var Re;var _e=function(){function i(e,t,r){w(this,i);_(this,"agentNo",void 0);_(this,"token",void 0);_(this,"baseUrl","");_(this,"orgId","");_(this,"stateListener",[]);_(this,"initListener",[]);_(this,"popScreen",[]);_(this,"socketAgent",void 0);_(this,"discountCallback",void 0);_(this,"debug",true);this.baseUrl=e.baseUrl;this.agentNo=e.agentNo;this.debug=e.debug;this.path="/agentbar";if(r){this.discountCallback=r}if(t){this.initListener.push(t)}if(e.popScreen){this.popScreen.push(e.popScreen)}if(e.stateEventListener){this.addStateListener(e.stateEventListener)}if(e.loginCallback){this.addStateListener(e.loginCallback)}this.socketAgent=b()(this.baseUrl,{path:this.path,autoConnect:true,forceNew:false,transports:["websocket"]});this.socketEvent(this.socketAgent)}R(i,[{key:"addStateListener",value:function e(t){this.stateListener.push(t)}},{key:"onChangeState",value:function e(t,r){this.stateListener.map(function(e){e({event:t,data:r})})}},{key:"login",value:function e(t,r){var i={};i.username="";i.password="";i.token=t;i.agentNo=r;this.socketAgent.emit(O,i)}},{key:"logout",value:function e(t){var r={};r.agentNo=Ae;r.userId=be;r.workNo=Se;r.orgId=this.orgId;r.type=t;this.socketAgent.emit(D,r)}},{key:"ready",value:function e(){var t={};t.workNo=Se;t.userId=be;t.orgId=this.orgId;this.socketAgent.emit(N,t)}},{key:"busy",value:function e(){var t={};t.workNo=Se;t.userId=be;t.orgId=this.orgId;this.socketAgent.emit(x,t)}},{key:"rest",value:function e(t){var r={};r.workNo=Se;r.userId=be;r.orgId=this.orgId;r.detail=t;this.socketAgent.emit(k,r)}},{key:"progress",value:function e(){var t={};t.workNo=Se;t.userId=be;t.orgId=this.orgId;this.socketAgent.emit(j,t)}},{key:"makecall",value:function e(t,r){var i={};i.workNo=Se;i.orgId=this.orgId;i.agentNo=Ae;i.domain=we;i.callOut=t;i.extraData=r;this.socketAgent.emit(U,i);v()}},{key:"hold",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(P,t)}},{key:"unhold",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(L,t)}},{key:"dtmf",value:function e(t){var r={};r.uuid=Ee;r.dtmf=t;this.socketAgent.emit(H,r)}},{key:"hangup",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(q,t)}},{key:"satisfy",value:function e(){var t={};t.uuid=Ee;t.orgId=this.orgId;this.socketAgent.emit(M,t)}},{key:"transfer",value:function e(t,r,i,n,s,o){var a={};a.type=t;a.uuid=Ee;a.orgId=this.orgId;a.domain=we;a.userId=be;a.transferNo=r;a.transferQueue=i;a.transfeeNo=n;a.transferUserId=s;a.transferPstn=o;this.socketAgent.emit(F,a)}},{key:"threeWay",value:function e(t,r){var i={};i.type=t;i.uuid=Ee;i.orgId=this.orgId;i.domain=we;i.userId=be;i.threewayNo=r;this.socketAgent.emit(B,i)}},{key:"listenCall",value:function e(t,r){var i={};i.orgId=this.orgId;i.userId=be;i.domain=we;i.uuid=t;i.listenCaller=Ae;i.listenCallee=r;this.socketAgent.emit(G,i)}},{key:"bargeinCall",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(W,t)}},{key:"whisperCall",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(K,t)}},{key:"threewayCall",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(V,t)}},{key:"restoreCall",value:function e(){var t={};t.uuid=Ee;this.socketAgent.emit(Y,t)}},{key:"destroy",value:function e(){this.socketAgent.close()}},{key:"consult",value:function e(t,r){var i={};i.callId=Ee;i.consultNum=t;i.domain=we;i.orgId=this.orgId;i.consultUserId=r;this.socketAgent.emit(z,i)}},{key:"consultComplete",value:function e(){var t={};t.callId=Ee;this.socketAgent.emit($,t)}},{key:"consultCancel",value:function e(){var t={};t.callId=Ee;t.consultUuid=Re;this.socketAgent.emit(J,t)}},{key:"consultConf",value:function e(){var t={};t.callId=Ee;this.socketAgent.emit(X,t)}},{key:"writeToScreen",value:function e(t){if(true===this.debug){console.log("天客云2.0 Sdk WebSocket [ "+t+" ]")}}},{key:"socketEvent",value:function e(t){var r=this;t.on("connect",function(){r.writeToScreen("websocket连接成功");if(r.initListener){r.initListener.map(function(e){e({code:200,msg:"初始化连接成功."})})}});t.on("disconnect",function(e){r.writeToScreen("websocket断开连接");if(r.initListener){r.initListener.map(function(e){e({code:500,msg:"初始化连接失败."});r.discountCallback()})}});t.on("reconnect_failed",function(e){r.writeToScreen("websocket重连失败");if(r.initListener){r.initListener.map(function(e){e({code:500,msg:"websocket重连失败."})})}});t.on("reconnect",function(e){r.writeToScreen("websocket reconnect "+e)});t.on(Q,function(e){r.onChangeState(Q,e)});t.on(Z,function(e){if(e.code===200){r.writeToScreen(e.message);r.orgId=e.data.orgId;Se=e.data.workNo;Ae=e.data.agentNo;be=e.data.userId;we=e.data.domain}else{r.writeToScreen(e.message);r.orgId="";Se="";Ae="";be="";we=""}r.onChangeState(Z,e)});t.on(ee,function(e){r.onChangeState(ee,e);if(e.code===200){r.writeToScreen(e.message);r.orgId="";Se="";Ae="";be="";we="";Ee=""}});t.on(se,function(e){r.onChangeState(se,e)});t.on(oe,function(e){r.onChangeState(oe,e)});t.on(te,function(e){r.onChangeState(te,e)});t.on(re,function(e){r.onChangeState(re,e)});t.on(ie,function(e){r.onChangeState(ie,e)});t.on(ne,function(e){r.onChangeState(ne,e)});t.on(ce,function(e){var t=e.data;r.writeToScreen(t);Ee=t.callId;r.onChangeState(ce,e);if(r.popScreen[0]){r.popScreen.map(function(e){e(t)})}});t.on(le,function(e){r.onChangeState(le,e)});t.on(he,function(e){r.onChangeState(he,e)});t.on(de,function(e){r.onChangeState(de,e)});t.on(ae,function(e){r.onChangeState(ae,e)});t.on(fe,function(e){r.onChangeState(fe,e)});t.on(ue,function(e){r.onChangeState(ue,e)});t.on(pe,function(e){r.onChangeState(pe,e)});t.on(ve,function(e){r.onChangeState(ve,e)});t.on(ge,function(){r.discountCallback();r.onChangeState(ge,null)});t.on(me,function(e){var t=e.data;Re=t.consultUuid;r.onChangeState(me,e)});t.on(ye,function(e){Re="";r.onChangeState(ye,e)});t.on(Te,function(e){Re="";r.onChangeState(Te,e)})}}]);return i}();var Ie,Oe,De,Ne,xe,ke,Ue,Pe,He,Le,qe,Me,Fe,Be,je,Ge;var We=true;var Ke=n;function Ve(t,r,e){Oe=t.baseUrl;xe=t.username;ke=t.password;Be=t.inDeviceId;je=t.outDeviceId;Ge=t.register_expire;if(false===t.debug){We=false}else{t.debug=true}if(undefined===Be){Be="default"}if(undefined===je){je="default"}if(t.webRTCAutoAnswer){Le=t.webRTCAutoAnswer}else{Le=false}if(t.iceCheckTimeout){Me=t.iceCheckTimeout}else{Me=500}Pe="true"===t.enableWebRTC;if(e){qe=[].concat(e)}else{qe=[]}var i=t.token;var n=t.orgi;if(i&&n){Ne=i;De=n;return qt(t,r)}else{return S.a.post(Oe+"/callInfo/sipInfo/auth",{username:xe,password:ke}).then(function(e){if(!e.data.data){return{code:500,msg:"登录失败"}}Ne=e.data.data.token;De=e.data.data.orgi;return qt(t,r)})}}function Ye(e){return It(e).then(function(e){if(!e.includes("double")){return{code:501,msg:"该模式不可用,请联系管理员！"}}else{return{code:200,msg:"ok"}}})}function ze(e){Oe=e.baseUrl;xe=e.username;ke=e.password;return S.a.post(Oe+"/callInfo/sipInfo/auth",{username:xe,password:ke}).then(function(e){if(!e.data.data){return{code:500,msg:"登录失败"}}Ne=e.data.data.token;De=e.data.data.orgi;return{code:200,msg:"登录成功"}})}function $e(){if(null!=Ie){Ie.logout();Ie.destroy()}Ft()}function Je(){return Ie.stateListener}function Xe(e){Ie.addStateListener(e)}function Qe(t,e,r){Ue=t;if(true===Pe){if(true===He){if(undefined!==Be){Be=e}if(undefined!==je){je=r}navigator.mediaDevices.getUserMedia({video:false,audio:{deviceId:Be}}).then(function(e){e.getTracks().forEach(function(e){e.stop()});qe.map(function(e,t){e.handle("check",true)});Ie.login(Ne,t)})["catch"](function(e){jt("麦克风校验失败!");Ft();qe.map(function(e,t){e.handle("check",false)})})}else{jt("WebRTC模式不允许,回落至硬件话机模式!!!")}}else{Ie.login(Ne,t)}}function Ze(){Ie.logout(1);Ft()}function et(){Ie.ready()}function tt(){Ie.busy()}function rt(e){Ie.rest(e)}function it(){Ie.progress()}function nt(e,t){Ie.makecall(e,t)}function st(){Ie.hold()}function ot(){Ie.unhold()}function at(e){Ie.dtmf(e)}function ft(){Ie.hangup()}function ut(){Ie.satisfy()}function ct(e,t,r,i,n,s){Ie.transfer(e,t,r,i,n,s)}function lt(e,t){Ie.threeWay(e,t)}function ht(e,t){Ie.listenCall(e,t)}function dt(){Ie.bargeinCall()}function pt(){Ie.whisperCall()}function vt(){Ie.threewayCall()}function gt(){Ie.restoreCall()}function mt(e,t){Ie.consult(e,t)}function yt(){Ie.consultComplete()}function Tt(){Ie.consultCancel()}function Ct(){Ie.consultConf()}function St(){l()}function At(e){g(e);Le=e}function bt(){return S.a.get(Oe+"/callInfo/sipInfo/alreadyBind?token="+Ne).then(function(e){return e.data.data})}function wt(e){y(e)}function Et(e){T(e)}function Rt(){return navigator.mediaDevices.enumerateDevices().then(function(e){var t=e.length;var r=0;var i=[];for(;r<t;r++){var n=e[r];if("audioinput"===n.kind){i.push({label:n.label,deviceId:n.deviceId})}}return i})}function _t(){return navigator.mediaDevices.enumerateDevices().then(function(e){var t=e.length;var r=0;var i=[];for(;r<t;r++){var n=e[r];if("audiooutput"===n.kind){i.push({label:n.label,deviceId:n.deviceId})}}return i})}function It(e){Oe=e.baseUrl;if(Ne===undefined){Ne=e.token}return S.a.get(Oe+"/callInfo/sipInfo/types?token="+Ne).then(function(e){var t=e.data.data;return t})}function Ot(){return S()({method:"get",url:Oe+"/callInfo/agents/checkTransferMob",headers:{token:Ne}}).then(function(e){if(e.data.code===200){return e.data.data}else{return false}})}function Dt(e){var t=false;if(true===e){t=true}return S()({url:Oe+"/callInfo/agents/transferMob",method:"post",headers:{token:Ne},data:{open:t+""}}).then(function(e){return e.data.code===200})}function Nt(){return S.a.get(Oe+"/callInfo/agents/"+De).then(function(e){if(e.data.code===200){return e.data.data}else{return[]}})}function xt(e,t){return S.a.get(Oe+"/callInfo/queues/"+De+"/"+e+"/"+t).then(function(e){if(e.data.code===200){return{data:e.data.data.records,total:e.data.data.total}}else{return{data:[],total:0}}})}function kt(){return S()({url:Oe+"/callInfo/agents/isAnswer",method:"get",headers:{token:Ne}}).then(function(e){return e.data.data.isAnswer})}function Ut(e,t){return S.a.post(Oe+"/callInfo/sipInfo/force/"+e+"/"+t,{token:Ne}).then(function(e){return e})}function Pt(){return Fe}function Ht(e,t){return S()({url:Oe+"/callInfo/call/xcall",method:"post",data:{phone:e},headers:{token:t}}).then(function(e){return e})}function Lt(e,t){return S()({url:Oe+"/callInfo/call/stopxcall",method:"post",data:{sessionId:e},headers:{token:t}}).then(function(e){return e})}function qt(r,i){return S.a.get(Oe+"/callInfo/sipInfo/types?token="+Ne).then(function(e){var t=e.data.data;if(t.indexOf("webrtc")>-1||t.indexOf("hard")>-1){if(t.indexOf("webrtc")>-1){He=true}if(true===Pe){if(true!==He){jt("WebRTC模式不允许,回落至硬件话机模式");return{code:500,msg:"WebRTC模式不允许,回落至硬件话机模式！"}}}r.loginCallback=function(e){if(He&&Pe&&e.event==="CB_LOGIN"&&e.data.code===200){Bt()}};Ie=new _e(r,i,Mt)}else{jt("无可用模式,请联系管理员");return{code:501,msg:"无可用模式,请联系管理员！"}}return{code:200,msg:"ok",data:t}})}function Mt(){Ft()}function Ft(){d()}function Bt(){if(true===He){return S.a.get(Oe+"/callInfo/sipInfo/"+Ue+"?token="+Ne).then(function(e){if(e.data.code===200){var t=e.data.data;u({sip_account:Ue,sip_domain:t.domain,sip_password:t.password,sip_autoAnswer:Le,wss_proto:t.proto,wss_address:t.address,wss_port:t.port,ice_checkTimeout:Me,debug:t.debug,sip_callbacks:qe,inDeviceId:Be,outDeviceId:je,register_expire:Ge})}})}else{jt("WebRTC模式无法使用,请联系管理员");return{code:500,msg:"WebRTC模式无法使用,请联系管理员！"}}}function jt(e){if(true===We){console.log("天客云2.0 Sdk [ "+e+" ]")}}}]);

/**科天云2.0结束 */



