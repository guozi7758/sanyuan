package lib

import (
	"crypto/md5"
	"encoding/json"
	"fmt"
	"io"
	"math/rand"
	"strings"
	"sync"
	"time"
)

type NowPayServer struct {
	AppId        string `json:"appId"`
	Key          string `json:"key"`
	TradeTimeOut string `json:"tradeTimeOut"`
	ApiUrl       string `json:"apiUrl"`
	NotifyUrl    string `json:"notifyUrl"`
	TimeZone     string `json:"timeZone"`
	MhtOrderNo   string `json:"mhtOrderNo"`
	MhtOrderAmt  int64  `json:"mhtOrderAmt"`
	OutPutType   int    `json:"outputType"`
	SchoolName   string `json:"schoolName"`
	mu           sync.Mutex
}

type AutoGenerated struct {
	Total   int    `json:"total"`
	Rows    Rows   `json:"rows"`
	Success bool   `json:"success"`
	Msg     string `json:"msg"`
}
type Rows struct {
	OrderNo  string `json:"orderNo"`
	Zfurl    string `json:"zfurl"`
	RespMsg  string `json:"respMsg"`
	RespCode string `json:"respCode"`
}

var NowPay NowPayServer

var (
	key    = "9945021714dfd33d"
	shopNo = 304491082990109
	payUrl = "http://hxpay.longshunha.com/hxpay/hxpay/getPayUrl"
)

/*
 * 描述: 获取聚合扫码接口
 *
 *********************************************************************************/
func (this *NowPayServer) NowPay() (string, error) {
	code, _ := this.GetBillNo()
	fmt.Println("code", code)
	//拼接请求参数
	var m map[string]interface{}
	m = make(map[string]interface{}, 0)
	m["shopNo"] = shopNo
	m["orderNo"] = code
	m["money"] = 0.01

	//算出md5加密签名
	sign := PayLassSign(m, key)
	m["sign"] = sign
	mjSon, _ := json.Marshal(m)
	mString := string(mjSon)
	fmt.Println("cet", mString)
	data, err := PayJsonPost(payUrl, mString)
	fmt.Println(string(data), err)
	var val AutoGenerated
	json.Unmarshal(data, &val)
	if val.Rows.RespCode != "000000" && val.Rows.Zfurl == "" {
		return "", err
	}
	return val.Rows.Zfurl, nil
}

//下单签名
func PayLassSign(mReq map[string]interface{}, key string) string {

	//fmt.Println("========STEP 1, 对key进行升序排序.========")
	//fmt.Println("微信支付签名计算, API KEY:", key)
	//STEP 1, 对key进行升序排序.
	sorted_keys := make([]string, 0)
	for k, _ := range mReq {
		sorted_keys = append(sorted_keys, k)
	}

	//sort.Strings(sorted_keys)

	//fmt.Println("========STEP2, 对key=value的键值对用&连接起来，略过空值========")
	//STEP2, 对key=value的键值对用&连接起来，略过空值
	var signStrings string
	for _, k := range sorted_keys {
		value := fmt.Sprintf("%v", mReq[k])
		if value != "" {
			signStrings = signStrings + k + "=" + value + "&"
		}
	}
	//fmt.Println("========STEP3, 在键值对的最后加上key=API_KEY========")
	//STEP3, 在键值对的最后加上key=API_KEY

	if key != "" {
		signStrings = signStrings + "key=" + key
	}
	fmt.Println(signStrings)
	fmt.Println("sing", StrMd5Str(strings.ToLower(signStrings)))
	return StrMd5Str(signStrings)
}

func StrMd5Str(strPass string) string {
	w := md5.New()
	io.WriteString(w, strPass)
	return fmt.Sprintf("%x", w.Sum(nil))
}

/*
 * 描述: 时间戳转格式化为字符串
 *
 ***************************************************************************/
func TimeToString(nTimer int64) string {
	tm := time.Unix(nTimer, 0)
	//strTime := tm.Format("2006-01-02 03:04:05 PM")
	return tm.Format("20060102")
}

/*
 * 描述: 获取本次下单单号
 *
 ******************************************************************/
func (this *NowPayServer) GetBillNo() (string, error) {
	defer this.mu.Unlock()
	this.mu.Lock()
	now := time.Now()
	str := TimeToString(now.Unix())
	return fmt.Sprintf("G%s%.4d00", str, rand.New(rand.NewSource(time.Now().UnixNano())).Int31n(10000)), nil
}
